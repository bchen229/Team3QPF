
Sprint1.elf:     file format elf32-littlenios2
Sprint1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00035418 memsz 0x00035418 flags r-x
    LOAD off    0x00036438 vaddr 0x01035438 paddr 0x01036ff8 align 2**12
         filesz 0x00001bc0 memsz 0x00001bc0 flags rw-
    LOAD off    0x00038bb8 vaddr 0x01038bb8 paddr 0x01038bb8 align 2**12
         filesz 0x00000000 memsz 0x00000ab4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00028ed0  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000c3b0  01029088  01029088  0002a088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc0  01035438  01036ff8  00036438  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000ab4  01038bb8  01038bb8  00038bb8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00037ff8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001738  00000000  00000000  00038020  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00003ca9  00000000  00000000  00039758  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0004aabc  00000000  00000000  0003d401  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e335  00000000  00000000  00087ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0002886d  00000000  00000000  000961f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003f08  00000000  00000000  000bea60  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004029  00000000  00000000  000c2968  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016674  00000000  00000000  000c6991  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000dd008  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b90  00000000  00000000  000dd068  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000e4589  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000e458c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000e4598  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000e4599  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000e459a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000e45a5  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000e45b0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000e45bb  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000066  00000000  00000000  000e45c6  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00086ce4  00000000  00000000  000e462c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
01029088 l    d  .rodata	00000000 .rodata
01035438 l    d  .rwdata	00000000 .rwdata
01038bb8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Bluetooth.c
00000000 l    df *ABS*	00000000 Bresenhams_Line_Drawing_Algorithm.c
00000000 l    df *ABS*	00000000 BuildFactory.c
01029134 l     O .rodata	0000000b row1_low
01029140 l     O .rodata	0000000c row2_low
0102914c l     O .rodata	0000000a row3_low
01029158 l     O .rodata	0000000b row1_caps
01029164 l     O .rodata	0000000c row2_caps
01029170 l     O .rodata	0000000a row3_caps
0102917c l     O .rodata	0000000b numbers
00000000 l    df *ABS*	00000000 BuildPages.c
010291ac l     O .rodata	0000000b row1_low
010291b8 l     O .rodata	0000000c row2_low
010291c4 l     O .rodata	0000000a row3_low
010291d0 l     O .rodata	0000000b row1_caps
010291dc l     O .rodata	0000000c row2_caps
010291e8 l     O .rodata	0000000a row3_caps
010291f4 l     O .rodata	0000000b numbers
00000000 l    df *ABS*	00000000 Cipher.c
010294ac l     O .rodata	0000000b row1_low
010294b8 l     O .rodata	0000000c row2_low
010294c4 l     O .rodata	0000000a row3_low
010294d0 l     O .rodata	0000000b row1_caps
010294dc l     O .rodata	0000000c row2_caps
010294e8 l     O .rodata	0000000a row3_caps
010294f4 l     O .rodata	0000000b numbers
01036fa8 l     O .rwdata	00000007 __func__.3375
01029528 l     O .rodata	0000000f __func__.3773
01029574 l     O .rodata	0000000c __func__.4024
00000000 l    df *ABS*	00000000 Draw.c
01029594 l     O .rodata	0000000b row1_low
010295a0 l     O .rodata	0000000c row2_low
010295ac l     O .rodata	0000000a row3_low
010295b8 l     O .rodata	0000000b row1_caps
010295c4 l     O .rodata	0000000c row2_caps
010295d0 l     O .rodata	0000000a row3_caps
010295dc l     O .rodata	0000000b numbers
00000000 l    df *ABS*	00000000 ExecutePage.c
010299e8 l     O .rodata	0000000b row1_low
010299f4 l     O .rodata	0000000c row2_low
01029a00 l     O .rodata	0000000a row3_low
01029a0c l     O .rodata	0000000b row1_caps
01029a18 l     O .rodata	0000000c row2_caps
01029a24 l     O .rodata	0000000a row3_caps
01029a30 l     O .rodata	0000000b numbers
00000000 l    df *ABS*	00000000 Font_alg.c
00000000 l    df *ABS*	00000000 GPS.c
0103444c l     O .rodata	0000000b row1_low
01034458 l     O .rodata	0000000c row2_low
01034464 l     O .rodata	0000000a row3_low
01034470 l     O .rodata	0000000b row1_caps
0103447c l     O .rodata	0000000c row2_caps
01034488 l     O .rodata	0000000a row3_caps
01034494 l     O .rodata	0000000b numbers
01038c74 l     O .bss	00000064 buff.3637
01038cd8 l     O .bss	00000064 buff.3646
00000000 l    df *ABS*	00000000 InputBox.c
01034598 l     O .rodata	0000000b row1_low
010345a4 l     O .rodata	0000000c row2_low
010345b0 l     O .rodata	0000000a row3_low
010345bc l     O .rodata	0000000b row1_caps
010345c8 l     O .rodata	0000000c row2_caps
010345d4 l     O .rodata	0000000a row3_caps
010345e0 l     O .rodata	0000000b numbers
00000000 l    df *ABS*	00000000 SD_BOX.c
010345ec l     O .rodata	0000000b row1_low
010345f8 l     O .rodata	0000000c row2_low
01034604 l     O .rodata	0000000a row3_low
01034610 l     O .rodata	0000000b row1_caps
0103461c l     O .rodata	0000000c row2_caps
01034628 l     O .rodata	0000000a row3_caps
01034634 l     O .rodata	0000000b numbers
00000000 l    df *ABS*	00000000 SD_CARD.c
01034640 l     O .rodata	0000000b row1_low
0103464c l     O .rodata	0000000c row2_low
01034658 l     O .rodata	0000000a row3_low
01034664 l     O .rodata	0000000b row1_caps
01034670 l     O .rodata	0000000c row2_caps
0103467c l     O .rodata	0000000a row3_caps
01034688 l     O .rodata	0000000b numbers
00000000 l    df *ABS*	00000000 TouchScreen.c
01034968 l     O .rodata	0000000b row1_low
01034974 l     O .rodata	0000000c row2_low
01034980 l     O .rodata	0000000a row3_low
0103498c l     O .rodata	0000000b row1_caps
01034998 l     O .rodata	0000000c row2_caps
010349a4 l     O .rodata	0000000a row3_caps
010349b0 l     O .rodata	0000000b numbers
00000000 l    df *ABS*	00000000 WriteCaption.c
010349d4 l     O .rodata	0000000b row1_low
010349e0 l     O .rodata	0000000c row2_low
010349ec l     O .rodata	0000000a row3_low
010349f8 l     O .rodata	0000000b row1_caps
01034a04 l     O .rodata	0000000c row2_caps
01034a10 l     O .rodata	0000000a row3_caps
01034a1c l     O .rodata	0000000b numbers
00000000 l    df *ABS*	00000000 barycentric.c
01034a28 l     O .rodata	0000000b row1_low
01034a34 l     O .rodata	0000000c row2_low
01034a40 l     O .rodata	0000000a row3_low
01034a4c l     O .rodata	0000000b row1_caps
01034a58 l     O .rodata	0000000c row2_caps
01034a64 l     O .rodata	0000000a row3_caps
01034a70 l     O .rodata	0000000b numbers
01035448 l     O .rwdata	00000040 extents
01035488 l     O .rwdata	00000018 TRI
010354a0 l     O .rwdata	00000040 screen
01034a7c l     O .rodata	00000016 __func__.3655
00000000 l    df *ABS*	00000000 sprint2.c
01034ad0 l     O .rodata	0000000b row1_low
01034adc l     O .rodata	0000000c row2_low
01034ae8 l     O .rodata	0000000a row3_low
01034af4 l     O .rodata	0000000b row1_caps
01034b00 l     O .rodata	0000000c row2_caps
01034b0c l     O .rodata	0000000a row3_caps
01034b18 l     O .rodata	0000000b numbers
00000000 l    df *ABS*	00000000 s_ceil.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_acos.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_acos.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
01034bb4 l     O .rodata	00000108 two_over_pi
01034b34 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
01034cbc l     O .rodata	00000010 init_jk
01034ccc l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
01012590 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
010134d8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 atof.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
01013ee8 l     F .text	00000058 std
01013ff4 l     F .text	00000008 __fp_lock
01013ffc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
010354e0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
01015818 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtod.c
01015edc l     F .text	00000048 match
01035cfc l     O .rwdata	00000014 fpi.1950
01034e78 l     O .rodata	00000028 tinytens
01035ce8 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
01017ae4 l     F .text	00000058 __sprint_r
01034f0e l     O .rodata	00000010 blanks.3452
01034efe l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0103501f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
01019c48 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0101c0e4 l     F .text	00000024 htinit
0101c170 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0101c9d8 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
01036fcc l     O .rwdata	00000004 charset
010351dc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mprec.c
01035324 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0101ead8 l     F .text	00000058 __sprint_r
01035340 l     O .rodata	00000010 blanks.3391
01035330 l     O .rodata	00000010 zeroes.3392
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
010211d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01021238 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
01021264 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
01021398 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
010214d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
01021678 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01021758 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
010218b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
010219c0 l     F .text	000000dc alt_file_locked
01021c24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0102203c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01036fe8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
01022308 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01035ec4 l     O .rwdata	00001060 jtag_uart_0
01036f24 l     O .rwdata	0000002c character_lcd_0
01036f50 l     O .rwdata	0000002c rs232_0
01036f7c l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
01022448 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
010353d8 l     O .rodata	00000016 __func__.4813
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01026c7c l     F .text	0000022c altera_avalon_jtag_uart_irq
01026ea8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01027524 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
010283c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0102878c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01028ed0 l     F .text	00000004 register_fini
01038c34 g     O .bss	00000004 aux_status_register
0101557c g     F .text	0000001c putchar
0100a1bc g     F .text	00000090 deg2rad
01038bb8 g     O .bss	00000004 password
0101d308 g     F .text	00000094 _mprec_log10
01009020 g     F .text	000000dc validinputboxpress
0101d3f4 g     F .text	00000088 __any_on
0101cc6c g     F .text	00000070 _isatty_r
010352fc g     O .rodata	00000028 __mprec_tinytens
01021914 g     F .text	0000006c alt_main
01015c70 g     F .text	0000008c strcpy
010155a0 g     F .text	000000a0 _puts_r
010393dc g     O .bss	00000100 alt_irq
010120b4 g     F .text	00000018 fabs
0101cda0 g     F .text	00000078 _lseek_r
0100f37c g     F .text	00000130 sqrt
010099e4 g     F .text	00000070 FloatToLongitudeConversion
01005290 g     F .text	00000420 decrypt
01036ff8 g       *ABS*	00000000 __flash_rwdata_start
01000814 g     F .text	000000f8 DrawRectangleFill
01027804 g     F .text	00000034 alt_up_character_lcd_send_cmd
0101b768 g     F .text	000000a0 __sflags
01038bbc g     O .bss	00000004 self
010057c0 g     F .text	00000198 blocky
010130b0 g     F .text	00000088 __eqdf2
01038bc0 g     O .bss	00000004 map
01022830 g     F .text	000001b0 Check_for_Master_Boot_Record
010005a0 g     F .text	0000007c ProgramPalette
0100e974 g     F .text	00000194 toScreen
0100a63c g     F .text	0000028c checkDistance
01003c14 g     F .text	000001d8 buildPWSetupPage
01005a44 g     F .text	0000008c func_int_2_4char
0103966c g       *ABS*	00000000 __alt_heap_start
01017604 g     F .text	00000008 strtok_r
010266f8 g     F .text	000001f8 alt_up_sd_card_fclose
0101ea64 g     F .text	00000074 _kill_r
01015504 g     F .text	00000044 printf
0102a1c2 g     O .rodata	00000a64 Font10x14
0100b69c g     F .text	000000f8 GetPress
0101e9a4 g     F .text	000000a0 _signal_r
010159e0 g     F .text	00000068 __sseek
01013f50 g     F .text	000000a4 __sinit
0101fbf8 g     F .text	00000130 __swbuf_r
0101cd00 g     F .text	00000084 _setlocale_r
0100b644 g     F .text	00000058 WaitForTouch
01014050 g     F .text	00000068 __sfmoreglue
01008c40 g     F .text	00000070 decrementBuffer
010219a0 g     F .text	00000020 __malloc_unlock
01027eec g     F .text	00000090 alt_up_rs232_read_fd
01015f24 g     F .text	000014e4 _strtod_r
0100c3e8 g     F .text	000000e0 crossp
01038c58 g     O .bss	00000004 current_sector_modified
010269ec g     F .text	00000090 Read_Sector_Data_Attempt_CRC
01038c64 g     O .bss	00000004 altera_avalon_timer_ts_freq
01015314 g     F .text	000000e0 memmove
01014040 g     F .text	00000010 _cleanup
0101d47c g     F .text	000000bc _Balloc
01017560 g     F .text	000000a4 __strtok_r
01009eb8 g     F .text	00000304 printCoordinates
010252a4 g     F .text	000000c8 alt_up_sd_card_is_Present
01022548 g     F .text	00000050 Save_Modified_Sector
0100c19c g     F .text	0000008c vec3
01013138 g     F .text	00000088 __gtdf2
01013db0 g     F .text	00000010 __errno
01027788 g     F .text	0000007c get_DDRAM_addr
01008cf0 g     F .text	00000110 updateBuffer
0100eb08 g     F .text	000001fc computePixel
01000000 g     F .entry	0000001c __reset
01038c50 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
01003dec g     F .text	00000248 buildLoggingSettingsPage
01005ad0 g     F .text	00000058 xor4char
0100ed64 g     F .text	00000214 ceil
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100b8f4 g     F .text	00000050 getcharTouch
01014784 g     F .text	00000074 _fstat_r
01000e8c g     F .text	00000104 buildButton
01038c04 g     O .bss	00000004 errno
010134a0 g     F .text	00000038 __make_dp
01015880 g     F .text	00000014 __srget
010120cc g     F .text	00000224 floor
010090fc g     F .text	0000010c validsdboxpress
01020f50 g     F .text	0000002c __make_fp
01038c24 g     O .bss	00000004 alt_argv
0103efa8 g       *ABS*	00000000 _gp
010221b8 g     F .text	00000030 usleep
01025864 g     F .text	000003a8 alt_up_sd_card_fopen
010253e0 g     F .text	000000d4 alt_up_sd_card_find_first
01006ee8 g     F .text	0000117c executeMapPress
01038c44 g     O .bss	00000004 command_argument_register
010213f8 g     F .text	00000020 getpid
01038bfc g     O .bss	00000008 hex_segments
010009cc g     F .text	000000a0 DrawTriangles
01035d44 g     O .rwdata	00000180 alt_fd_list
0100b794 g     F .text	000000f8 GetRelease
0100ff04 g     F .text	00000828 __ieee754_rem_pio2
01015598 g     F .text	00000008 _putchar_r
01024ad4 g     F .text	0000012c find_first_empty_record_in_root_directory
010284f0 g     F .text	00000094 alt_find_dev
01015274 g     F .text	000000a0 memcpy
0101ca24 g     F .text	00000248 __hexnan
010083b8 g     F .text	00000608 MainMenu
01004878 g     F .text	00000158 hex2char
0102799c g     F .text	0000004c alt_up_character_lcd_write_fd
010095d0 g     F .text	000001cc OutGraphicsCharFont2a
01014034 g     F .text	0000000c _cleanup_r
010132d0 g     F .text	000000f8 __floatsidf
01028850 g     F .text	00000078 alt_io_redirect
01013248 g     F .text	00000088 __ltdf2
01029088 g       *ABS*	00000000 __DTOR_END__
01038bc4 g     O .bss	00000004 destination
0100dd98 g     F .text	000000d0 findMin
01027e78 g     F .text	00000074 alt_up_rs232_read_data
01015640 g     F .text	00000014 puts
010246e4 g     F .text	000001a4 find_first_empty_cluster
0101d258 g     F .text	000000b0 __ratio
010024f0 g     F .text	00000340 buildHomePage
010251e0 g     F .text	000000c4 alt_up_sd_card_open_dev
0101fbd4 g     F .text	00000024 __vfiprintf_internal
0100c778 g     F .text	000000d8 psubp
010270c0 g     F .text	00000224 altera_avalon_jtag_uart_read
01014b20 g     F .text	00000014 malloc
01015548 g     F .text	00000034 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01013614 g     F .text	00000008 __udivsi3
01021418 g     F .text	000000c0 isatty
01005f54 g     F .text	000000dc printCipher
0101e788 g     F .text	000000cc _raise_r
01013d18 g     F .text	00000064 __assert_func
0103520c g     O .rodata	000000c8 __mprec_tens
0102ecb8 g     O .rodata	00005794 Font38x59
0101ccdc g     F .text	00000008 __locale_charset
010109f4 g     F .text	0000052c __kernel_cos
010023f8 g     F .text	000000f8 buildObject
0101fdf8 g     F .text	000000a4 __fixunsdfsi
01028c4c g     F .text	00000090 alt_icache_flush
01038c08 g     O .bss	00000004 __malloc_top_pad
0101ea60 g     F .text	00000004 _getpid_r
0100d1f0 g     F .text	00000314 barycentric
01003800 g     F .text	00000110 buildKeysPage
01017aa4 g     F .text	00000024 strtoul
01036fc8 g     O .rwdata	00000004 __mb_cur_max
0101cce4 g     F .text	0000000c _localeconv_r
0100ba90 g     F .text	00000124 updateCoord
0101db74 g     F .text	0000003c __i2b
0101bc48 g     F .text	0000049c __sfvwrite_r
0101e8dc g     F .text	000000b4 __sigtramp_r
010239c0 g     F .text	000000c0 get_dir_divider_location
0100c6a0 g     F .text	000000d8 vsubp
01015894 g     F .text	00000070 _sbrk_r
010002b4 g     F .text	00000060 putcharBluetooth
01023660 g     F .text	000000d0 filename_to_upper_case
01025c0c g     F .text	00000090 alt_up_sd_card_set_attributes
010229e0 g     F .text	00000284 Read_File_Record_At_Offset
0101e0dc g     F .text	00000078 _read_r
01035d10 g     O .rwdata	0000000c __lc_ctype
01036fe0 g     O .rwdata	00000004 alt_max_fd
01027de0 g     F .text	00000050 alt_up_rs232_check_parity
01013b18 g     F .text	00000138 __unpack_d
01024280 g     F .text	00000464 find_file_in_directory
0101b414 g     F .text	00000110 _fclose_r
01000314 g     F .text	0000005c enterCommandMode
0101b734 g     F .text	00000034 fflush
01038c0c g     O .bss	00000004 __malloc_max_sbrked_mem
010288c8 g     F .text	000001c0 alt_irq_register
0100061c g     F .text	000000ac HLine
01011d9c g     F .text	00000318 __kernel_sin
0101253c g     F .text	00000054 __extendsfdf2
0100ca3c g     F .text	0000006c point
01004678 g     F .text	00000200 char2hex
01013e58 g     F .text	00000090 _fgetc_r
0102536c g     F .text	00000074 alt_up_sd_card_is_FAT16
01012a20 g     F .text	00000074 __adddf3
01020a28 g     F .text	00000078 __nesf2
01009828 g     F .text	0000004c putcharGPS
0101d138 g     F .text	00000120 __b2d
01009ae8 g     F .text	000000b4 checkBuff
01020478 g     F .text	000005b0 __umoddi3
010217c4 g     F .text	000000f0 lseek
01036fb0 g     O .rwdata	00000004 __fdlib_version
0100b364 g     F .text	00000140 readFromSDEncrypted
01036fb8 g     O .rwdata	00000004 _global_impure_ptr
0100bf28 g     F .text	00000114 writeCaptionObjectLarge
01023d6c g     F .text	00000514 get_home_directory_cluster_for_file
0101e154 g     F .text	000005f4 _realloc_r
0103966c g       *ABS*	00000000 __bss_end
0100ad34 g     F .text	00000144 writeToSD
01028b20 g     F .text	0000010c alt_tick
01038d74 g     O .bss	00000100 __hexdig
01038bc8 g     O .bss	00000004 passwordSetup
0101fe9c g     F .text	000005dc __udivdi3
01038bcc g     O .bss	00000004 encryptedtextlen
010352d4 g     O .rodata	00000028 __mprec_bigtens
0101ddd0 g     F .text	00000120 __s2b
01019bc0 g     F .text	00000018 abort
01020d14 g     F .text	00000194 __floatunsidf
0100c308 g     F .text	000000e0 dotp
01003ab8 g     F .text	0000015c buildPWLoginPage
0101d058 g     F .text	00000060 __mcmp
0100a2dc g     F .text	00000360 distance
01038c5c g     O .bss	00000004 current_sector_index
0100b5a8 g     F .text	0000006c Init_Touch
0100c850 g     F .text	000000c8 normsqv
010056b0 g     F .text	00000110 pad
01036fc4 g     O .rwdata	00000004 __ctype_ptr
0101401c g     F .text	00000018 __fp_lock_all
0100b4a4 g     F .text	00000104 formatAndSaveSDEncrypted
0100bbb4 g     F .text	000000a8 updateCoordNoPrint
01028a88 g     F .text	00000098 alt_alarm_stop
0102ac26 g     O .rodata	0000140a Font16x27
01017850 g     F .text	00000024 strtol
010097d8 g     F .text	00000050 GetData
0102274c g     F .text	000000e4 mark_cluster
01038c68 g     O .bss	00000004 alt_irq_active
0100643c g     F .text	0000007c drawKey
010000ec g     F .exceptions	000000cc alt_irq_handler
01035d1c g     O .rwdata	00000028 alt_dev_null
01005d7c g     F .text	000001d8 decryptCBC
01010f20 g     F .text	00000e7c __kernel_rem_pio2
01024c00 g     F .text	000001b8 convert_filename_to_name_extension
01008cb0 g     F .text	00000040 clearBuffer
01003308 g     F .text	000004f8 buildSelfPage
010093f8 g     F .text	000001d8 OutGraphicsCharFont1
01006a84 g     F .text	00000208 executePWLogin
0101373c g     F .text	000000c8 __unpack_f
01009974 g     F .text	00000070 FloatToLatitudeConversion
01027c84 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
010282d0 g     F .text	00000044 alt_dcache_flush_all
0101cf24 g     F .text	00000070 __hi0bits
01038bd0 g     O .bss	00000008 curLat
0100dc40 g     F .text	00000158 centroidEqualTo
01038c30 g     O .bss	00000004 is_sd_card_formated_as_FAT16
010133c8 g     F .text	000000d8 __fixdfsi
010006c8 g     F .text	000000ac VLine
0100c5a8 g     F .text	000000f8 vsubv
01008f28 g     F .text	000000f8 validkeypress
01024888 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0101752c g     F .text	0000001c strtod
01036ff8 g       *ABS*	00000000 __ram_rwdata_end
0100cbbc g     F .text	000000ac Vert
01036fd8 g     O .rwdata	00000008 alt_dev_list
010221e8 g     F .text	00000120 write
0101dff4 g     F .text	000000e8 _putc_r
01038c54 g     O .bss	00000004 device_pointer
01027760 g     F .text	00000028 alt_timestamp_freq
01013d90 g     F .text	00000008 atof
01020aa0 g     F .text	00000078 __gtsf2
01000c4c g     F .text	00000240 DrawCircleFill
01035438 g       *ABS*	00000000 __ram_rodata_end
010212c4 g     F .text	000000d4 fstat
0100b944 g     F .text	0000014c updateTime
010098cc g     F .text	00000038 StopLogging
01027f7c g     F .text	00000094 alt_up_rs232_write_fd
01021538 g     F .text	00000140 kill
01020c18 g     F .text	00000088 __ledf2
0100b88c g     F .text	00000068 putcharTouch
01009a54 g     F .text	00000094 swapEndian
01015b24 g     F .text	00000090 strcat
0100b614 g     F .text	00000030 ScreenTouched
01009208 g     F .text	000001f0 checkChoice
0101dcb0 g     F .text	00000120 __pow5mult
01038c14 g     O .bss	00000004 __nlocale_changed
0101eb30 g     F .text	000010a4 ___vfiprintf_internal_r
0101361c g     F .text	00000008 __umodsi3
01005b28 g     F .text	00000254 encryptCBC
0103966c g       *ABS*	00000000 end
0100a9b0 g     F .text	00000068 drawInputBox
0100c228 g     F .text	000000e0 dotv
01020f7c g     F .text	00000160 __pack_f
01013d98 g     F .text	0000000c _atoi_r
0100aafc g     F .text	000000f8 buildSDBox
0100c4c8 g     F .text	000000e0 crossv
01014760 g     F .text	00000024 fseek
01038bd8 g     O .bss	00000004 addresses
01026bc4 g     F .text	000000b8 altera_avalon_jtag_uart_init
01029084 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01027598 g     F .text	00000088 alt_avalon_timer_sc_init
010136bc g     F .text	00000080 __clzsi2
010272e4 g     F .text	00000240 altera_avalon_jtag_uart_write
0100ef78 g     F .text	00000168 cos
0100d504 g     F .text	000004f4 barycentric2
01013f40 g     F .text	00000004 __sfp_lock_acquire
0101ce18 g     F .text	000000e4 memchr
010278ac g     F .text	00000078 alt_up_character_lcd_write
01017b3c g     F .text	00001eac ___vfprintf_internal_r
01015978 g     F .text	00000060 _sprintf_r
0101b934 g     F .text	00000314 _free_r
01021c84 g     F .text	00000258 alt_printf
01028ed4 g     F .text	000001b0 __call_exitprocs
01015834 g     F .text	0000004c __srget_r
01038c18 g     O .bss	00000004 __mlocale_changed
01036fc0 g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
0100be04 g     F .text	00000124 writeCaptionObject
01038c6c g     O .bss	00000004 _alt_tick_rate
0100f0e0 g     F .text	0000016c sin
0101d840 g     F .text	0000014c __lshift
01038c70 g     O .bss	00000004 _alt_nticks
0101ea44 g     F .text	0000001c signal
01021f1c g     F .text	00000120 read
0102239c g     F .text	000000ac alt_sys_init
01027b10 g     F .text	000000b0 alt_up_character_lcd_shift_display
0101548c g     F .text	00000078 _open_r
010003f8 g     F .text	00000044 setBluetoothPassword
010003b4 g     F .text	00000044 factoryReset
01028d9c g     F .text	00000134 __register_exitproc
01038bdc g     O .bss	00000004 loggingSettings
01027da0 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
010066d0 g     F .text	00000034 drawMenu
0100cdcc g     F .text	00000424 makeTri
0101d98c g     F .text	000001e8 __multiply
01027bc0 g     F .text	00000090 alt_up_character_lcd_erase_pos
01026f58 g     F .text	00000074 altera_avalon_jtag_uart_close
01035438 g       *ABS*	00000000 __ram_rwdata_start
01029088 g       *ABS*	00000000 __ram_rodata_start
01015e20 g     F .text	000000bc strncpy
01038d3c g     O .bss	00000028 __malloc_current_mallinfo
0101d538 g     F .text	0000017c __d2b
0100043c g     F .text	00000058 putStringBluetooth
01038c2c g     O .bss	00000004 initialized
01004a60 g     F .text	00000088 find
0100a24c g     F .text	00000090 rad2deg
01026a7c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01017874 g     F .text	00000230 _strtoul_r
010286a4 g     F .text	000000b8 alt_get_fd
01038be0 g     O .bss	00000004 panic
01038e74 g     O .bss	00000014 search_data
010281a4 g     F .text	0000012c alt_busy_sleep
01006308 g     F .text	0000006c decryptData
01013c50 g     F .text	000000c8 __fpcmp_parts_d
01002830 g     F .text	0000041c buildDestPage
01019bd8 g     F .text	00000070 _close_r
01017548 g     F .text	00000018 strtok
01028d28 g     F .text	00000074 memcmp
01026b2c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0103966c g       *ABS*	00000000 __alt_stack_base
01026b74 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01019a84 g     F .text	0000013c __swsetup_r
01004e20 g     F .text	00000470 encrypt
01012e58 g     F .text	00000258 __divdf3
010140b8 g     F .text	000000f0 __sfp
01038e88 g     O .bss	00000054 boot_sector_data
010089c0 g     F .text	00000280 displayMenu
01015d70 g     F .text	000000b0 strncat
0101d39c g     F .text	00000058 __copybits
010358e0 g     O .rwdata	00000408 __malloc_av_
01013f4c g     F .text	00000004 __sinit_lock_release
01012a94 g     F .text	000003c4 __muldf3
01015ac4 g     F .text	00000060 __sread
01027d0c g     F .text	00000058 alt_up_rs232_disable_read_interrupt
01009904 g     F .text	00000038 ClearLogging
01028584 g     F .text	00000120 alt_find_file
01028314 g     F .text	000000b4 alt_dev_llist_insert
01021980 g     F .text	00000020 __malloc_lock
010220fc g     F .text	000000bc sbrk
01004ae8 g     F .text	00000230 keygen
0101b538 g     F .text	000001fc _fflush_r
0101fd44 g     F .text	000000b4 _calloc_r
01014308 g     F .text	0000001c fopen
01038bb8 g       *ABS*	00000000 __bss_start
010153f4 g     F .text	00000098 memset
0100ed04 g     F .text	00000060 main
0100b1c8 g     F .text	0000019c writeToSDEncrypted
01038c28 g     O .bss	00000004 alt_envp
01038c10 g     O .bss	00000004 __malloc_max_total_mem
01026ad4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0100e83c g     F .text	00000138 dot3
0101fd28 g     F .text	0000001c __swbuf
01020b18 g     F .text	00000078 __ltsf2
01025c9c g     F .text	0000008c alt_up_sd_card_get_attributes
01000510 g     F .text	00000090 ReadAPixel
01022480 g     F .text	000000c8 Write_Sector_Data
010260bc g     F .text	0000063c alt_up_sd_card_write
01027a60 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
010159d8 g     F .text	00000008 __sclose
01012320 g     F .text	00000008 matherr
01800000 g       *ABS*	00000000 __alt_heap_limit
0101b524 g     F .text	00000014 fclose
01020ca0 g     F .text	00000074 __truncdfsf2
0101760c g     F .text	00000244 _strtol_r
0100e0c8 g     F .text	0000060c DelaunayTriangulation
01027620 g     F .text	000000a4 alt_timestamp_start
010394dc g     O .bss	00000190 _atexit0
01019e60 g     F .text	000015b4 _dtoa_r
01009b9c g     F .text	0000031c printTime
01014b34 g     F .text	00000740 _malloc_r
01000370 g     F .text	00000044 setDeviceName
0100caa8 g     F .text	000000ac vtx
01000774 g     F .text	000000a0 Line
01036fe4 g     O .rwdata	00000004 alt_errno
01035438 g     O .rwdata	00000010 seven_seg_decode_table
010141ec g     F .text	00000028 _fiprintf_r
0101e8cc g     F .text	00000010 _init_signal
01038d64 g     O .bss	00000010 key
010148c0 g     F .text	000000b8 _fwalk
01006294 g     F .text	00000074 encryptData
0101def0 g     F .text	00000104 putc
01013554 g     F .text	00000060 __divsi3
01034d0c g     O .rodata	00000014 __thenan_df
0102786c g     F .text	00000040 alt_up_character_lcd_open_dev
0101b808 g     F .text	0000012c _malloc_trim_r
01029088 g       *ABS*	00000000 __CTOR_END__
01038c38 g     O .bss	00000004 status_register
01027838 g     F .text	00000034 alt_up_character_lcd_init
01015bb4 g     F .text	000000bc strcmp
01003910 g     F .text	000001a8 buildMenu
01038c40 g     O .bss	00000004 command_register
01029088 g       *ABS*	00000000 __flash_rodata_start
0100993c g     F .text	00000038 StartLogger
01029088 g       *ABS*	00000000 __DTOR_LIST__
01028010 g     F .text	00000040 alt_up_rs232_open_dev
0100de68 g     F .text	00000100 showMin
01012518 g     F .text	00000024 copysign
01020b90 g     F .text	00000088 __nedf2
01022368 g     F .text	00000034 alt_irq_init
0102209c g     F .text	00000060 alt_release_fd
01022694 g     F .text	000000b8 get_cluster_flag
01013dc0 g     F .text	00000098 fgetc
01015904 g     F .text	00000074 sprintf
01027c50 g     F .text	00000034 alt_up_character_lcd_cursor_off
01034d20 g     O .rodata	00000100 __clz_tab
01022c64 g     F .text	000002b8 Write_File_Record_At_Offset
01038c1c g     O .bss	00000004 _PathLocale
0100e6d4 g     F .text	00000168 CopyDelaunayTriangulation
01017408 g     F .text	00000124 strtof
0100c9a0 g     F .text	0000009c normp
01028cdc g     F .text	00000014 atexit
01019a0c g     F .text	00000078 _write_r
0101cd84 g     F .text	0000001c setlocale
01000240 g     F .text	00000074 getcharBluetooth
01022f1c g     F .text	00000640 Check_for_DOS_FAT
01024db8 g     F .text	000002d4 create_file
0100ac58 g     F .text	000000dc writeCaptionSDBox
01036fb4 g     O .rwdata	00000004 _impure_ptr
01038c3c g     O .bss	00000004 CSD_register_w0
01038c20 g     O .bss	00000004 alt_argc
0100db1c g     F .text	00000124 centroidGreaterThan
01000494 g     F .text	0000007c WriteAPixel
01012338 g     F .text	000001e0 scalbn
01038c60 g     O .bss	00000004 altera_avalon_timer_ts_base
0102848c g     F .text	00000064 _do_dtors
01014324 g     F .text	0000043c _fseek_r
01006030 g     F .text	00000144 writeCipher
01015654 g     F .text	000001c4 __srefill_r
01029f28 g     O .rodata	00000299 Font5x7
0100c918 g     F .text	00000088 normsqp
01000020 g       .exceptions	00000000 alt_irq_entry
0101d0b8 g     F .text	00000080 __ulp
0101e748 g     F .text	00000040 __isinfd
01014004 g     F .text	00000018 __fp_unlock_all
01006704 g     F .text	000000bc drawKeyboard
0100aa18 g     F .text	000000e4 updateInputBox
01038be4 g     O .bss	00000008 curLong
01036fd0 g     O .rwdata	00000008 alt_fs_list
0100a8c8 g     F .text	000000e8 buildInputBox
01023730 g     F .text	00000290 check_file_name_for_FAT16_compliance
01038c48 g     O .bss	00000004 buffer_memory
01027cb8 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
01027e30 g     F .text	00000048 alt_up_rs232_write_data
01012328 g     F .text	00000010 nan
0100af9c g     F .text	00000104 formatAndSaveSD
01000020 g       *ABS*	00000000 __ram_exceptions_start
0101ccf0 g     F .text	00000010 localeconv
010276c4 g     F .text	0000009c alt_timestamp
01000204 g     F .text	0000003c initBluetooth
0101072c g     F .text	000002c8 __ieee754_sqrt
01000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0100bc5c g     F .text	00000088 timerISR
010064b8 g     F .text	00000218 drawPage
0101c108 g     F .text	00000068 __hexdig_init
01038c4c g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
01036ff8 g       *ABS*	00000000 _edata
01004d18 g     F .text	00000108 printkey
0103966c g       *ABS*	00000000 _end
01038edc g     O .bss	00000500 active_files
010001b8 g       *ABS*	00000000 __ram_exceptions_end
0102508c g     F .text	00000154 copy_file_record_name_to_string
01026fcc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100abf4 g     F .text	00000064 drawSDBox
0102355c g     F .text	00000104 Look_for_FAT16
01000f90 g     F .text	000000f8 buildKey
01015a48 g     F .text	0000007c __swrite
01004034 g     F .text	00000220 buildPanicPage
01036fbc g     O .rwdata	00000004 __malloc_trim_threshold
01038bec g     O .bss	00000004 home
01028c2c g     F .text	00000020 altera_nios2_qsys_irq_init
01028cf0 g     F .text	00000038 exit
010141a8 g     F .text	00000044 fiprintf
01017ac8 g     F .text	0000001c _vfiprintf_r
01000a6c g     F .text	000001e0 DrawCircle
0100c03c g     F .text	00000160 writeCaptionKey
010254b4 g     F .text	000003b0 alt_up_sd_card_find_next
010147f8 g     F .text	000000c8 _fwalk_reent
0101d6b4 g     F .text	0000018c __mdiff
01005958 g     F .text	000000ec func_4char2int
010135b4 g     F .text	00000060 __modsi3
01038bf0 g     O .bss	00000004 panicFlag
01022598 g     F .text	000000fc Read_Sector_Data
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01013f44 g     F .text	00000004 __sfp_lock_release
0100d9f8 g     F .text	00000124 centroidLessThan
010295e8 g     O .rodata	00000400 ColourPalletteData
01027924 g     F .text	00000078 alt_up_character_lcd_string
010049d0 g     F .text	00000090 convertKey
01013da4 g     F .text	0000000c atoi
01034f1e g     O .rodata	00000101 _ctype_
0102c030 g     O .rodata	00002c88 Font22x40
01038bf4 g     O .bss	00000004 keys
0100979c g     F .text	0000003c Init_GPS
01020ea8 g     F .text	000000a8 __fpcmp_parts_f
01014214 g     F .text	000000f4 _fopen_r
010212a4 g     F .text	00000020 _exit
010122f0 g     F .text	00000030 __isnand
01028050 g     F .text	00000154 alt_alarm_start
01001088 g     F .text	00001370 buildKeyboard
01013624 g     F .text	00000098 __muldi3
010268f0 g     F .text	000000fc Read_Sector_Data_CRC
01025d28 g     F .text	00000394 alt_up_sd_card_read
01009874 g     F .text	00000058 putString
01006174 g     F .text	00000120 parseCipher
01038bf8 g     O .bss	00000004 globalCurrentPage
01014978 g     F .text	00000194 __smakebuf_r
01015cfc g     F .text	00000074 strlen
0100df68 g     F .text	00000160 nearestneighbour
0101e868 g     F .text	00000064 _init_signal_r
01021a9c g     F .text	00000188 open
010131c0 g     F .text	00000088 __gedf2
01021edc g     F .text	00000040 alt_putchar
0101c220 g     F .text	000007b8 __gethex
01006c8c g     F .text	0000025c executeLoggingSettings
01013d7c g     F .text	00000014 __assert
0100090c g     F .text	000000c0 DrawRectangle
010063d8 g     F .text	00000064 drawObject
01004254 g     F .text	00000424 buildAddressesPage
0102875c g     F .text	00000030 alt_icache_flush_all
01008e00 g     F .text	00000128 validpress
01002c4c g     F .text	000006bc buildMapPage
010279e8 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
01036fec g     O .rwdata	00000004 alt_priority_mask
0100cc68 g     F .text	00000164 computeCentroid
010067c0 g     F .text	000002c4 executePWSetupPress
010199e8 g     F .text	00000024 __vfprintf_internal
0100f24c g     F .text	00000130 acos
0100bce4 g     F .text	00000120 writeCaptionButton
0100ae78 g     F .text	00000124 readFromSD
010129a0 g     F .text	00000080 __subdf3
0101cf94 g     F .text	000000c4 __lo0bits
01036ff0 g     O .rwdata	00000008 alt_alarm_list
01028428 g     F .text	00000064 _do_ctors
0101e990 g     F .text	00000014 __sigtramp
01027d64 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
01006374 g     F .text	00000064 drawButton
010210dc g     F .text	000000fc close
01008064 g     F .text	00000354 executeKeyPress
010216d8 g     F .text	00000080 alt_load
0100b0a0 g     F .text	00000128 loadInfo
01013804 g     F .text	00000314 __pack_d
01023a80 g     F .text	000002ec match_file_record_to_name_ext
0101e854 g     F .text	00000014 raise
01014b0c g     F .text	00000014 free
01013f48 g     F .text	00000004 __sinit_lock_acquire
0100f4ac g     F .text	00000a58 __ieee754_acos
0101dbb0 g     F .text	00000100 __multadd
0101cefc g     F .text	00000028 _Bfree
0100cb54 g     F .text	00000068 v2p



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04134 	movhi	r3,260
 1000134:	18e4f704 	addi	r3,r3,-27684
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04134 	movhi	r3,260
 100014c:	18e4f704 	addi	r3,r3,-27684
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	068040f4 	movhi	gp,259
    ori gp, gp, %lo(_gp)
 10001d4:	d6bbea14 	ori	gp,gp,61352
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	008040f4 	movhi	r2,259
    ori r2, r2, %lo(__bss_start)
 10001dc:	10a2ee14 	ori	r2,r2,35768

    movhi r3, %hi(__bss_end)
 10001e0:	00c040f4 	movhi	r3,259
    ori r3, r3, %lo(__bss_end)
 10001e4:	18e59b14 	ori	r3,r3,38508

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	10216d80 	call	10216d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	10219140 	call	1021914 <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <initBluetooth>:
#include "Hardware.h"

void initBluetooth(void) {
 1000204:	deffff04 	addi	sp,sp,-4
 1000208:	df000015 	stw	fp,0(sp)
 100020c:	d839883a 	mov	fp,sp
	// set up 6850 Control Register to utilise a divide by 16 clock,
	// set RTS low, use 8 bits of data, no parity, 1 stop bit,
	// transmitter interrupt disabled
	// program baud rate generator to use 115k baud
	Bluetooth_Baud = 0x01;
 1000210:	00e10034 	movhi	r3,33792
 1000214:	18c08904 	addi	r3,r3,548
 1000218:	00800044 	movi	r2,1
 100021c:	18800005 	stb	r2,0(r3)
	Bluetooth_Control = 0x15; // x16 clock , 8 data , no parity , 1 stop , no interrupt
 1000220:	00e10034 	movhi	r3,33792
 1000224:	18c08804 	addi	r3,r3,544
 1000228:	00800544 	movi	r2,21
 100022c:	18800005 	stb	r2,0(r3)

}
 1000230:	e037883a 	mov	sp,fp
 1000234:	df000017 	ldw	fp,0(sp)
 1000238:	dec00104 	addi	sp,sp,4
 100023c:	f800283a 	ret

01000240 <getcharBluetooth>:

char getcharBluetooth(void) {
 1000240:	defffd04 	addi	sp,sp,-12
 1000244:	dfc00215 	stw	ra,8(sp)
 1000248:	df000115 	stw	fp,4(sp)
 100024c:	df000104 	addi	fp,sp,4
	int rx;
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received character from 6850 RxData register.
	while ((Bluetooth_Status & 0x01) != 0x01);
 1000250:	00a10034 	movhi	r2,33792
 1000254:	10808804 	addi	r2,r2,544
 1000258:	10800003 	ldbu	r2,0(r2)
 100025c:	10803fcc 	andi	r2,r2,255
 1000260:	1080004c 	andi	r2,r2,1
 1000264:	1005003a 	cmpeq	r2,r2,zero
 1000268:	103ff91e 	bne	r2,zero,1000250 <getcharBluetooth+0x10>

	rx = Bluetooth_RxData;
 100026c:	00a10034 	movhi	r2,33792
 1000270:	10808884 	addi	r2,r2,546
 1000274:	10800003 	ldbu	r2,0(r2)
 1000278:	10803fcc 	andi	r2,r2,255
 100027c:	e0bfff15 	stw	r2,-4(fp)
	printf("THIS IS WHAT WE RECIEVE : %c\n", rx);
 1000280:	010040f4 	movhi	r4,259
 1000284:	21242204 	addi	r4,r4,-28536
 1000288:	e17fff17 	ldw	r5,-4(fp)
 100028c:	10155040 	call	1015504 <printf>
	return rx;
 1000290:	e0bfff17 	ldw	r2,-4(fp)
 1000294:	10803fcc 	andi	r2,r2,255
 1000298:	1080201c 	xori	r2,r2,128
 100029c:	10bfe004 	addi	r2,r2,-128
}
 10002a0:	e037883a 	mov	sp,fp
 10002a4:	dfc00117 	ldw	ra,4(sp)
 10002a8:	df000017 	ldw	fp,0(sp)
 10002ac:	dec00204 	addi	sp,sp,8
 10002b0:	f800283a 	ret

010002b4 <putcharBluetooth>:

int putcharBluetooth(char c) {
 10002b4:	defffe04 	addi	sp,sp,-8
 10002b8:	df000115 	stw	fp,4(sp)
 10002bc:	df000104 	addi	fp,sp,4
 10002c0:	e13fff05 	stb	r4,-4(fp)
	// poll Tx bit in 6850 status register. Wait for it to become '1'

	// write 'c' to the 6850 TxData register to output the character

	while ((Bluetooth_Status & 0x02) != 0x02)
 10002c4:	00a10034 	movhi	r2,33792
 10002c8:	10808804 	addi	r2,r2,544
 10002cc:	10800003 	ldbu	r2,0(r2)
 10002d0:	10803fcc 	andi	r2,r2,255
 10002d4:	1080008c 	andi	r2,r2,2
 10002d8:	1005003a 	cmpeq	r2,r2,zero
 10002dc:	103ff91e 	bne	r2,zero,10002c4 <putcharBluetooth+0x10>
		;

	Bluetooth_TxData = c & (char) 0x7F;
 10002e0:	00e10034 	movhi	r3,33792
 10002e4:	18c08884 	addi	r3,r3,546
 10002e8:	e0bfff03 	ldbu	r2,-4(fp)
 10002ec:	10801fcc 	andi	r2,r2,127
 10002f0:	18800005 	stb	r2,0(r3)

	return Bluetooth_TxData; // return c
 10002f4:	00a10034 	movhi	r2,33792
 10002f8:	10808884 	addi	r2,r2,546
 10002fc:	10800003 	ldbu	r2,0(r2)
 1000300:	10803fcc 	andi	r2,r2,255
}
 1000304:	e037883a 	mov	sp,fp
 1000308:	df000017 	ldw	fp,0(sp)
 100030c:	dec00104 	addi	sp,sp,4
 1000310:	f800283a 	ret

01000314 <enterCommandMode>:

void enterCommandMode(void) {
 1000314:	defffd04 	addi	sp,sp,-12
 1000318:	dfc00215 	stw	ra,8(sp)
 100031c:	df000115 	stw	fp,4(sp)
 1000320:	df000104 	addi	fp,sp,4

	char *commandInit = "$$$";
 1000324:	008040f4 	movhi	r2,259
 1000328:	10a42a04 	addi	r2,r2,-28504
 100032c:	e0bfff15 	stw	r2,-4(fp)
	usleep(1000000);
 1000330:	010003f4 	movhi	r4,15
 1000334:	21109004 	addi	r4,r4,16960
 1000338:	10221b80 	call	10221b8 <usleep>
	putStringBluetooth(commandInit);
 100033c:	e13fff17 	ldw	r4,-4(fp)
 1000340:	100043c0 	call	100043c <putStringBluetooth>
	printf("Enter Command Mode\n");
 1000344:	010040f4 	movhi	r4,259
 1000348:	21242b04 	addi	r4,r4,-28500
 100034c:	10156400 	call	1015640 <puts>
	usleep(1000000);
 1000350:	010003f4 	movhi	r4,15
 1000354:	21109004 	addi	r4,r4,16960
 1000358:	10221b80 	call	10221b8 <usleep>
}
 100035c:	e037883a 	mov	sp,fp
 1000360:	dfc00117 	ldw	ra,4(sp)
 1000364:	df000017 	ldw	fp,0(sp)
 1000368:	dec00204 	addi	sp,sp,8
 100036c:	f800283a 	ret

01000370 <setDeviceName>:

void setDeviceName(void) {
 1000370:	defffd04 	addi	sp,sp,-12
 1000374:	dfc00215 	stw	ra,8(sp)
 1000378:	df000115 	stw	fp,4(sp)
 100037c:	df000104 	addi	fp,sp,4

	char *deviceName = "SN,CPEN GROUP 3\r\n";
 1000380:	008040f4 	movhi	r2,259
 1000384:	10a43004 	addi	r2,r2,-28480
 1000388:	e0bfff15 	stw	r2,-4(fp)
	printf("setting device name \n");
 100038c:	010040f4 	movhi	r4,259
 1000390:	21243504 	addi	r4,r4,-28460
 1000394:	10156400 	call	1015640 <puts>
	putStringBluetooth(deviceName);
 1000398:	e13fff17 	ldw	r4,-4(fp)
 100039c:	100043c0 	call	100043c <putStringBluetooth>
}
 10003a0:	e037883a 	mov	sp,fp
 10003a4:	dfc00117 	ldw	ra,4(sp)
 10003a8:	df000017 	ldw	fp,0(sp)
 10003ac:	dec00204 	addi	sp,sp,8
 10003b0:	f800283a 	ret

010003b4 <factoryReset>:

void factoryReset(void) {
 10003b4:	defffd04 	addi	sp,sp,-12
 10003b8:	dfc00215 	stw	ra,8(sp)
 10003bc:	df000115 	stw	fp,4(sp)
 10003c0:	df000104 	addi	fp,sp,4

	char *resetCommand = "SF,1\r\n";
 10003c4:	008040f4 	movhi	r2,259
 10003c8:	10a43b04 	addi	r2,r2,-28436
 10003cc:	e0bfff15 	stw	r2,-4(fp)
	printf("factory resetting \n");
 10003d0:	010040f4 	movhi	r4,259
 10003d4:	21243d04 	addi	r4,r4,-28428
 10003d8:	10156400 	call	1015640 <puts>
	putStringBluetooth(resetCommand);
 10003dc:	e13fff17 	ldw	r4,-4(fp)
 10003e0:	100043c0 	call	100043c <putStringBluetooth>
}
 10003e4:	e037883a 	mov	sp,fp
 10003e8:	dfc00117 	ldw	ra,4(sp)
 10003ec:	df000017 	ldw	fp,0(sp)
 10003f0:	dec00204 	addi	sp,sp,8
 10003f4:	f800283a 	ret

010003f8 <setBluetoothPassword>:

void setBluetoothPassword(void) {
 10003f8:	defffd04 	addi	sp,sp,-12
 10003fc:	dfc00215 	stw	ra,8(sp)
 1000400:	df000115 	stw	fp,4(sp)
 1000404:	df000104 	addi	fp,sp,4

	char *password = "SP,password\r\n";
 1000408:	008040f4 	movhi	r2,259
 100040c:	10a44204 	addi	r2,r2,-28408
 1000410:	e0bfff15 	stw	r2,-4(fp)
	printf("setting device password \n");
 1000414:	010040f4 	movhi	r4,259
 1000418:	21244604 	addi	r4,r4,-28392
 100041c:	10156400 	call	1015640 <puts>
	putStringBluetooth(password);
 1000420:	e13fff17 	ldw	r4,-4(fp)
 1000424:	100043c0 	call	100043c <putStringBluetooth>

}
 1000428:	e037883a 	mov	sp,fp
 100042c:	dfc00117 	ldw	ra,4(sp)
 1000430:	df000017 	ldw	fp,0(sp)
 1000434:	dec00204 	addi	sp,sp,8
 1000438:	f800283a 	ret

0100043c <putStringBluetooth>:

void putStringBluetooth(char *s) {
 100043c:	defffc04 	addi	sp,sp,-16
 1000440:	dfc00315 	stw	ra,12(sp)
 1000444:	df000215 	stw	fp,8(sp)
 1000448:	df000204 	addi	fp,sp,8
 100044c:	e13fff15 	stw	r4,-4(fp)
	char i;
	while ((i = *s) != 0) {
 1000450:	00000506 	br	1000468 <putStringBluetooth+0x2c>

		putcharBluetooth(i);
 1000454:	e13ffe07 	ldb	r4,-8(fp)
 1000458:	10002b40 	call	10002b4 <putcharBluetooth>
		s++;
 100045c:	e0bfff17 	ldw	r2,-4(fp)
 1000460:	10800044 	addi	r2,r2,1
 1000464:	e0bfff15 	stw	r2,-4(fp)

}

void putStringBluetooth(char *s) {
	char i;
	while ((i = *s) != 0) {
 1000468:	e0bfff17 	ldw	r2,-4(fp)
 100046c:	10800003 	ldbu	r2,0(r2)
 1000470:	e0bffe05 	stb	r2,-8(fp)
 1000474:	e0bffe07 	ldb	r2,-8(fp)
 1000478:	1004c03a 	cmpne	r2,r2,zero
 100047c:	103ff51e 	bne	r2,zero,1000454 <putStringBluetooth+0x18>

		putcharBluetooth(i);
		s++;
	}
}
 1000480:	e037883a 	mov	sp,fp
 1000484:	dfc00117 	ldw	ra,4(sp)
 1000488:	df000017 	ldw	fp,0(sp)
 100048c:	dec00204 	addi	sp,sp,8
 1000490:	f800283a 	ret

01000494 <WriteAPixel>:
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "Hardware.h"

void WriteAPixel(int x, int y, int Colour) {
 1000494:	defffc04 	addi	sp,sp,-16
 1000498:	df000315 	stw	fp,12(sp)
 100049c:	df000304 	addi	fp,sp,12
 10004a0:	e13ffd15 	stw	r4,-12(fp)
 10004a4:	e17ffe15 	stw	r5,-8(fp)
 10004a8:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS; // is graphics ready for new command
 10004ac:	00a10034 	movhi	r2,33792
 10004b0:	1080000b 	ldhu	r2,0(r2)
 10004b4:	10bfffcc 	andi	r2,r2,65535
 10004b8:	1080004c 	andi	r2,r2,1
 10004bc:	1005003a 	cmpeq	r2,r2,zero
 10004c0:	103ffa1e 	bne	r2,zero,10004ac <WriteAPixel+0x18>

	GraphicsX1Reg = x; // write coords to x1, y1
 10004c4:	00e10034 	movhi	r3,33792
 10004c8:	18c00084 	addi	r3,r3,2
 10004cc:	e0bffd17 	ldw	r2,-12(fp)
 10004d0:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y;
 10004d4:	00e10034 	movhi	r3,33792
 10004d8:	18c00104 	addi	r3,r3,4
 10004dc:	e0bffe17 	ldw	r2,-8(fp)
 10004e0:	1880000d 	sth	r2,0(r3)
	GraphicsColourReg = Colour; // set pixel colour
 10004e4:	00e10034 	movhi	r3,33792
 10004e8:	18c00384 	addi	r3,r3,14
 10004ec:	e0bfff17 	ldw	r2,-4(fp)
 10004f0:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = PutAPixel; // give graphics "write pixel" command
 10004f4:	00e10034 	movhi	r3,33792
 10004f8:	00800284 	movi	r2,10
 10004fc:	1880000d 	sth	r2,0(r3)
}
 1000500:	e037883a 	mov	sp,fp
 1000504:	df000017 	ldw	fp,0(sp)
 1000508:	dec00104 	addi	sp,sp,4
 100050c:	f800283a 	ret

01000510 <ReadAPixel>:

int ReadAPixel(int x, int y) {
 1000510:	defffd04 	addi	sp,sp,-12
 1000514:	df000215 	stw	fp,8(sp)
 1000518:	df000204 	addi	fp,sp,8
 100051c:	e13ffe15 	stw	r4,-8(fp)
 1000520:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS; // is graphics ready for new command
 1000524:	00a10034 	movhi	r2,33792
 1000528:	1080000b 	ldhu	r2,0(r2)
 100052c:	10bfffcc 	andi	r2,r2,65535
 1000530:	1080004c 	andi	r2,r2,1
 1000534:	1005003a 	cmpeq	r2,r2,zero
 1000538:	103ffa1e 	bne	r2,zero,1000524 <ReadAPixel+0x14>

	GraphicsX1Reg = x; // write coords to x1, y1
 100053c:	00e10034 	movhi	r3,33792
 1000540:	18c00084 	addi	r3,r3,2
 1000544:	e0bffe17 	ldw	r2,-8(fp)
 1000548:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y;
 100054c:	00e10034 	movhi	r3,33792
 1000550:	18c00104 	addi	r3,r3,4
 1000554:	e0bfff17 	ldw	r2,-4(fp)
 1000558:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = GetAPixel; // give graphics a "get pixel" command
 100055c:	00e10034 	movhi	r3,33792
 1000560:	008002c4 	movi	r2,11
 1000564:	1880000d 	sth	r2,0(r3)

	WAIT_FOR_GRAPHICS; // is graphics done reading pixel
 1000568:	00a10034 	movhi	r2,33792
 100056c:	1080000b 	ldhu	r2,0(r2)
 1000570:	10bfffcc 	andi	r2,r2,65535
 1000574:	1080004c 	andi	r2,r2,1
 1000578:	1005003a 	cmpeq	r2,r2,zero
 100057c:	103ffa1e 	bne	r2,zero,1000568 <ReadAPixel+0x58>
	return (int) (GraphicsColourReg); // return the palette number (colour)
 1000580:	00a10034 	movhi	r2,33792
 1000584:	10800384 	addi	r2,r2,14
 1000588:	1080000b 	ldhu	r2,0(r2)
 100058c:	10bfffcc 	andi	r2,r2,65535
}
 1000590:	e037883a 	mov	sp,fp
 1000594:	df000017 	ldw	fp,0(sp)
 1000598:	dec00104 	addi	sp,sp,4
 100059c:	f800283a 	ret

010005a0 <ProgramPalette>:

void ProgramPalette(int PaletteNumber, int RGB) {
 10005a0:	defffd04 	addi	sp,sp,-12
 10005a4:	df000215 	stw	fp,8(sp)
 10005a8:	df000204 	addi	fp,sp,8
 10005ac:	e13ffe15 	stw	r4,-8(fp)
 10005b0:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;
 10005b4:	00a10034 	movhi	r2,33792
 10005b8:	1080000b 	ldhu	r2,0(r2)
 10005bc:	10bfffcc 	andi	r2,r2,65535
 10005c0:	1080004c 	andi	r2,r2,1
 10005c4:	1005003a 	cmpeq	r2,r2,zero
 10005c8:	103ffa1e 	bne	r2,zero,10005b4 <ProgramPalette+0x14>
	GraphicsColourReg = PaletteNumber;
 10005cc:	00e10034 	movhi	r3,33792
 10005d0:	18c00384 	addi	r3,r3,14
 10005d4:	e0bffe17 	ldw	r2,-8(fp)
 10005d8:	1880000d 	sth	r2,0(r3)
	GraphicsX1Reg = RGB >> 16; // program red value in ls.8 bit of X1 reg
 10005dc:	00e10034 	movhi	r3,33792
 10005e0:	18c00084 	addi	r3,r3,2
 10005e4:	e0bfff17 	ldw	r2,-4(fp)
 10005e8:	1005d43a 	srai	r2,r2,16
 10005ec:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = RGB; // program green and blue into ls 16 bit of Y1 reg
 10005f0:	00e10034 	movhi	r3,33792
 10005f4:	18c00104 	addi	r3,r3,4
 10005f8:	e0bfff17 	ldw	r2,-4(fp)
 10005fc:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = ProgramPaletteColour; // issue command
 1000600:	00e10034 	movhi	r3,33792
 1000604:	00800404 	movi	r2,16
 1000608:	1880000d 	sth	r2,0(r3)
}
 100060c:	e037883a 	mov	sp,fp
 1000610:	df000017 	ldw	fp,0(sp)
 1000614:	dec00104 	addi	sp,sp,4
 1000618:	f800283a 	ret

0100061c <HLine>:

void HLine(int x1, int y1, int length, int Colour) {
 100061c:	defffb04 	addi	sp,sp,-20
 1000620:	df000415 	stw	fp,16(sp)
 1000624:	df000404 	addi	fp,sp,16
 1000628:	e13ffc15 	stw	r4,-16(fp)
 100062c:	e17ffd15 	stw	r5,-12(fp)
 1000630:	e1bffe15 	stw	r6,-8(fp)
 1000634:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS; // is graphics ready for new command
 1000638:	00a10034 	movhi	r2,33792
 100063c:	1080000b 	ldhu	r2,0(r2)
 1000640:	10bfffcc 	andi	r2,r2,65535
 1000644:	1080004c 	andi	r2,r2,1
 1000648:	1005003a 	cmpeq	r2,r2,zero
 100064c:	103ffa1e 	bne	r2,zero,1000638 <HLine+0x1c>

	GraphicsX1Reg = x1; // write coords to x1, y1
 1000650:	00e10034 	movhi	r3,33792
 1000654:	18c00084 	addi	r3,r3,2
 1000658:	e0bffc17 	ldw	r2,-16(fp)
 100065c:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y1;
 1000660:	00e10034 	movhi	r3,33792
 1000664:	18c00104 	addi	r3,r3,4
 1000668:	e0bffd17 	ldw	r2,-12(fp)
 100066c:	1880000d 	sth	r2,0(r3)
	GraphicsX2Reg = x1 + length;
 1000670:	01210034 	movhi	r4,33792
 1000674:	21000184 	addi	r4,r4,6
 1000678:	e0bffc17 	ldw	r2,-16(fp)
 100067c:	1007883a 	mov	r3,r2
 1000680:	e0bffe17 	ldw	r2,-8(fp)
 1000684:	1885883a 	add	r2,r3,r2
 1000688:	2080000d 	sth	r2,0(r4)
	GraphicsY2Reg = y1;
 100068c:	00e10034 	movhi	r3,33792
 1000690:	18c00204 	addi	r3,r3,8
 1000694:	e0bffd17 	ldw	r2,-12(fp)
 1000698:	1880000d 	sth	r2,0(r3)
	GraphicsColourReg = Colour; // set pixel colour
 100069c:	00e10034 	movhi	r3,33792
 10006a0:	18c00384 	addi	r3,r3,14
 10006a4:	e0bfff17 	ldw	r2,-4(fp)
 10006a8:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = DrawHLine; // give graphics "DrawHLine" command
 10006ac:	00e10034 	movhi	r3,33792
 10006b0:	00800044 	movi	r2,1
 10006b4:	1880000d 	sth	r2,0(r3)
}
 10006b8:	e037883a 	mov	sp,fp
 10006bc:	df000017 	ldw	fp,0(sp)
 10006c0:	dec00104 	addi	sp,sp,4
 10006c4:	f800283a 	ret

010006c8 <VLine>:

void VLine(int x1, int y1, int length, int Colour) {
 10006c8:	defffb04 	addi	sp,sp,-20
 10006cc:	df000415 	stw	fp,16(sp)
 10006d0:	df000404 	addi	fp,sp,16
 10006d4:	e13ffc15 	stw	r4,-16(fp)
 10006d8:	e17ffd15 	stw	r5,-12(fp)
 10006dc:	e1bffe15 	stw	r6,-8(fp)
 10006e0:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS; // is graphics ready for new command
 10006e4:	00a10034 	movhi	r2,33792
 10006e8:	1080000b 	ldhu	r2,0(r2)
 10006ec:	10bfffcc 	andi	r2,r2,65535
 10006f0:	1080004c 	andi	r2,r2,1
 10006f4:	1005003a 	cmpeq	r2,r2,zero
 10006f8:	103ffa1e 	bne	r2,zero,10006e4 <VLine+0x1c>

	GraphicsX1Reg = x1; // write coords to x1, y1
 10006fc:	00e10034 	movhi	r3,33792
 1000700:	18c00084 	addi	r3,r3,2
 1000704:	e0bffc17 	ldw	r2,-16(fp)
 1000708:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y1;
 100070c:	00e10034 	movhi	r3,33792
 1000710:	18c00104 	addi	r3,r3,4
 1000714:	e0bffd17 	ldw	r2,-12(fp)
 1000718:	1880000d 	sth	r2,0(r3)
	GraphicsX2Reg = x1;
 100071c:	00e10034 	movhi	r3,33792
 1000720:	18c00184 	addi	r3,r3,6
 1000724:	e0bffc17 	ldw	r2,-16(fp)
 1000728:	1880000d 	sth	r2,0(r3)
	GraphicsY2Reg = y1 + length;
 100072c:	01210034 	movhi	r4,33792
 1000730:	21000204 	addi	r4,r4,8
 1000734:	e0bffd17 	ldw	r2,-12(fp)
 1000738:	1007883a 	mov	r3,r2
 100073c:	e0bffe17 	ldw	r2,-8(fp)
 1000740:	1885883a 	add	r2,r3,r2
 1000744:	2080000d 	sth	r2,0(r4)
	GraphicsColourReg = Colour; // set pixel colour
 1000748:	00e10034 	movhi	r3,33792
 100074c:	18c00384 	addi	r3,r3,14
 1000750:	e0bfff17 	ldw	r2,-4(fp)
 1000754:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = DrawVLine; // give graphics "DrawVLine" command
 1000758:	00e10034 	movhi	r3,33792
 100075c:	00800084 	movi	r2,2
 1000760:	1880000d 	sth	r2,0(r3)
}
 1000764:	e037883a 	mov	sp,fp
 1000768:	df000017 	ldw	fp,0(sp)
 100076c:	dec00104 	addi	sp,sp,4
 1000770:	f800283a 	ret

01000774 <Line>:

void Line(int x1, int y1, int x2, int y2, int Colour) {
 1000774:	defffb04 	addi	sp,sp,-20
 1000778:	df000415 	stw	fp,16(sp)
 100077c:	df000404 	addi	fp,sp,16
 1000780:	e13ffc15 	stw	r4,-16(fp)
 1000784:	e17ffd15 	stw	r5,-12(fp)
 1000788:	e1bffe15 	stw	r6,-8(fp)
 100078c:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS; // is graphics ready for new command
 1000790:	00a10034 	movhi	r2,33792
 1000794:	1080000b 	ldhu	r2,0(r2)
 1000798:	10bfffcc 	andi	r2,r2,65535
 100079c:	1080004c 	andi	r2,r2,1
 10007a0:	1005003a 	cmpeq	r2,r2,zero
 10007a4:	103ffa1e 	bne	r2,zero,1000790 <Line+0x1c>

	GraphicsX1Reg = x1; // write coords to x1, y1
 10007a8:	00e10034 	movhi	r3,33792
 10007ac:	18c00084 	addi	r3,r3,2
 10007b0:	e0bffc17 	ldw	r2,-16(fp)
 10007b4:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y1;
 10007b8:	00e10034 	movhi	r3,33792
 10007bc:	18c00104 	addi	r3,r3,4
 10007c0:	e0bffd17 	ldw	r2,-12(fp)
 10007c4:	1880000d 	sth	r2,0(r3)
	GraphicsX2Reg = x2;
 10007c8:	00e10034 	movhi	r3,33792
 10007cc:	18c00184 	addi	r3,r3,6
 10007d0:	e0bffe17 	ldw	r2,-8(fp)
 10007d4:	1880000d 	sth	r2,0(r3)
	GraphicsY2Reg = y2;
 10007d8:	00e10034 	movhi	r3,33792
 10007dc:	18c00204 	addi	r3,r3,8
 10007e0:	e0bfff17 	ldw	r2,-4(fp)
 10007e4:	1880000d 	sth	r2,0(r3)
	GraphicsColourReg = Colour; // set pixel colour
 10007e8:	00e10034 	movhi	r3,33792
 10007ec:	18c00384 	addi	r3,r3,14
 10007f0:	e0800117 	ldw	r2,4(fp)
 10007f4:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = DrawLine; // give graphics "DrawLine" command
 10007f8:	00e10034 	movhi	r3,33792
 10007fc:	008000c4 	movi	r2,3
 1000800:	1880000d 	sth	r2,0(r3)
}
 1000804:	e037883a 	mov	sp,fp
 1000808:	df000017 	ldw	fp,0(sp)
 100080c:	dec00104 	addi	sp,sp,4
 1000810:	f800283a 	ret

01000814 <DrawRectangleFill>:

void DrawRectangleFill(int x1, int x2, int y1, int y2, int borderColour,
		int fillColour) {
 1000814:	defff704 	addi	sp,sp,-36
 1000818:	dfc00815 	stw	ra,32(sp)
 100081c:	df000715 	stw	fp,28(sp)
 1000820:	df000704 	addi	fp,sp,28
 1000824:	e13ffc15 	stw	r4,-16(fp)
 1000828:	e17ffd15 	stw	r5,-12(fp)
 100082c:	e1bffe15 	stw	r6,-8(fp)
 1000830:	e1ffff15 	stw	r7,-4(fp)
	int j;
	int h_length = x2 - x1;
 1000834:	e0fffd17 	ldw	r3,-12(fp)
 1000838:	e0bffc17 	ldw	r2,-16(fp)
 100083c:	1885c83a 	sub	r2,r3,r2
 1000840:	e0bffa15 	stw	r2,-24(fp)
	int v_length = y2 - y1;
 1000844:	e0ffff17 	ldw	r3,-4(fp)
 1000848:	e0bffe17 	ldw	r2,-8(fp)
 100084c:	1885c83a 	sub	r2,r3,r2
 1000850:	e0bff915 	stw	r2,-28(fp)

	WAIT_FOR_GRAPHICS;
 1000854:	00a10034 	movhi	r2,33792
 1000858:	1080000b 	ldhu	r2,0(r2)
 100085c:	10bfffcc 	andi	r2,r2,65535
 1000860:	1080004c 	andi	r2,r2,1
 1000864:	1005003a 	cmpeq	r2,r2,zero
 1000868:	103ffa1e 	bne	r2,zero,1000854 <DrawRectangleFill+0x40>

	for (j = y1; j < y2; j++) {
 100086c:	e0bffe17 	ldw	r2,-8(fp)
 1000870:	e0bffb15 	stw	r2,-20(fp)
 1000874:	00000806 	br	1000898 <DrawRectangleFill+0x84>
		HLine(x1, j, h_length, fillColour);
 1000878:	e13ffc17 	ldw	r4,-16(fp)
 100087c:	e17ffb17 	ldw	r5,-20(fp)
 1000880:	e1bffa17 	ldw	r6,-24(fp)
 1000884:	e1c00317 	ldw	r7,12(fp)
 1000888:	100061c0 	call	100061c <HLine>
	int h_length = x2 - x1;
	int v_length = y2 - y1;

	WAIT_FOR_GRAPHICS;

	for (j = y1; j < y2; j++) {
 100088c:	e0bffb17 	ldw	r2,-20(fp)
 1000890:	10800044 	addi	r2,r2,1
 1000894:	e0bffb15 	stw	r2,-20(fp)
 1000898:	e0fffb17 	ldw	r3,-20(fp)
 100089c:	e0bfff17 	ldw	r2,-4(fp)
 10008a0:	18bff516 	blt	r3,r2,1000878 <DrawRectangleFill+0x64>
		HLine(x1, j, h_length, fillColour);
	}
	HLine(x1, y1, h_length, borderColour);
 10008a4:	e13ffc17 	ldw	r4,-16(fp)
 10008a8:	e17ffe17 	ldw	r5,-8(fp)
 10008ac:	e1bffa17 	ldw	r6,-24(fp)
 10008b0:	e1c00217 	ldw	r7,8(fp)
 10008b4:	100061c0 	call	100061c <HLine>
	HLine(x1, y2, h_length, borderColour);
 10008b8:	e13ffc17 	ldw	r4,-16(fp)
 10008bc:	e17fff17 	ldw	r5,-4(fp)
 10008c0:	e1bffa17 	ldw	r6,-24(fp)
 10008c4:	e1c00217 	ldw	r7,8(fp)
 10008c8:	100061c0 	call	100061c <HLine>
	VLine(x1, y1, v_length, borderColour);
 10008cc:	e13ffc17 	ldw	r4,-16(fp)
 10008d0:	e17ffe17 	ldw	r5,-8(fp)
 10008d4:	e1bff917 	ldw	r6,-28(fp)
 10008d8:	e1c00217 	ldw	r7,8(fp)
 10008dc:	10006c80 	call	10006c8 <VLine>
	VLine(x2, y1, v_length + 1, borderColour);
 10008e0:	e0bff917 	ldw	r2,-28(fp)
 10008e4:	11800044 	addi	r6,r2,1
 10008e8:	e13ffd17 	ldw	r4,-12(fp)
 10008ec:	e17ffe17 	ldw	r5,-8(fp)
 10008f0:	e1c00217 	ldw	r7,8(fp)
 10008f4:	10006c80 	call	10006c8 <VLine>
}
 10008f8:	e037883a 	mov	sp,fp
 10008fc:	dfc00117 	ldw	ra,4(sp)
 1000900:	df000017 	ldw	fp,0(sp)
 1000904:	dec00204 	addi	sp,sp,8
 1000908:	f800283a 	ret

0100090c <DrawRectangle>:

void DrawRectangle(int x1, int x2, int y1, int y2, int borderColour) {
 100090c:	defff804 	addi	sp,sp,-32
 1000910:	dfc00715 	stw	ra,28(sp)
 1000914:	df000615 	stw	fp,24(sp)
 1000918:	df000604 	addi	fp,sp,24
 100091c:	e13ffc15 	stw	r4,-16(fp)
 1000920:	e17ffd15 	stw	r5,-12(fp)
 1000924:	e1bffe15 	stw	r6,-8(fp)
 1000928:	e1ffff15 	stw	r7,-4(fp)
	//int j;
	int h_length = x2 - x1;
 100092c:	e0fffd17 	ldw	r3,-12(fp)
 1000930:	e0bffc17 	ldw	r2,-16(fp)
 1000934:	1885c83a 	sub	r2,r3,r2
 1000938:	e0bffb15 	stw	r2,-20(fp)
	int v_length = y2 - y1;
 100093c:	e0ffff17 	ldw	r3,-4(fp)
 1000940:	e0bffe17 	ldw	r2,-8(fp)
 1000944:	1885c83a 	sub	r2,r3,r2
 1000948:	e0bffa15 	stw	r2,-24(fp)

	WAIT_FOR_GRAPHICS;
 100094c:	00a10034 	movhi	r2,33792
 1000950:	1080000b 	ldhu	r2,0(r2)
 1000954:	10bfffcc 	andi	r2,r2,65535
 1000958:	1080004c 	andi	r2,r2,1
 100095c:	1005003a 	cmpeq	r2,r2,zero
 1000960:	103ffa1e 	bne	r2,zero,100094c <DrawRectangle+0x40>

	HLine(x1, y1, h_length, borderColour);
 1000964:	e13ffc17 	ldw	r4,-16(fp)
 1000968:	e17ffe17 	ldw	r5,-8(fp)
 100096c:	e1bffb17 	ldw	r6,-20(fp)
 1000970:	e1c00217 	ldw	r7,8(fp)
 1000974:	100061c0 	call	100061c <HLine>
	HLine(x1, y2, h_length, borderColour);
 1000978:	e13ffc17 	ldw	r4,-16(fp)
 100097c:	e17fff17 	ldw	r5,-4(fp)
 1000980:	e1bffb17 	ldw	r6,-20(fp)
 1000984:	e1c00217 	ldw	r7,8(fp)
 1000988:	100061c0 	call	100061c <HLine>
	VLine(x1, y1, v_length, borderColour);
 100098c:	e13ffc17 	ldw	r4,-16(fp)
 1000990:	e17ffe17 	ldw	r5,-8(fp)
 1000994:	e1bffa17 	ldw	r6,-24(fp)
 1000998:	e1c00217 	ldw	r7,8(fp)
 100099c:	10006c80 	call	10006c8 <VLine>
	VLine(x2, y1, v_length + 1, borderColour);
 10009a0:	e0bffa17 	ldw	r2,-24(fp)
 10009a4:	11800044 	addi	r6,r2,1
 10009a8:	e13ffd17 	ldw	r4,-12(fp)
 10009ac:	e17ffe17 	ldw	r5,-8(fp)
 10009b0:	e1c00217 	ldw	r7,8(fp)
 10009b4:	10006c80 	call	10006c8 <VLine>
}
 10009b8:	e037883a 	mov	sp,fp
 10009bc:	dfc00117 	ldw	ra,4(sp)
 10009c0:	df000017 	ldw	fp,0(sp)
 10009c4:	dec00204 	addi	sp,sp,8
 10009c8:	f800283a 	ret

010009cc <DrawTriangles>:

void DrawTriangles(int x1, int y1, int x2, int y2, int x3, int y3,
		int borderColour) {
 10009cc:	defff904 	addi	sp,sp,-28
 10009d0:	dfc00615 	stw	ra,24(sp)
 10009d4:	df000515 	stw	fp,20(sp)
 10009d8:	df000504 	addi	fp,sp,20
 10009dc:	e13ffc15 	stw	r4,-16(fp)
 10009e0:	e17ffd15 	stw	r5,-12(fp)
 10009e4:	e1bffe15 	stw	r6,-8(fp)
 10009e8:	e1ffff15 	stw	r7,-4(fp)

	WAIT_FOR_GRAPHICS;
 10009ec:	00a10034 	movhi	r2,33792
 10009f0:	1080000b 	ldhu	r2,0(r2)
 10009f4:	10bfffcc 	andi	r2,r2,65535
 10009f8:	1080004c 	andi	r2,r2,1
 10009fc:	1005003a 	cmpeq	r2,r2,zero
 1000a00:	103ffa1e 	bne	r2,zero,10009ec <DrawTriangles+0x20>

	Line(x1, y1, x2, y2, borderColour);
 1000a04:	e0800417 	ldw	r2,16(fp)
 1000a08:	d8800015 	stw	r2,0(sp)
 1000a0c:	e13ffc17 	ldw	r4,-16(fp)
 1000a10:	e17ffd17 	ldw	r5,-12(fp)
 1000a14:	e1bffe17 	ldw	r6,-8(fp)
 1000a18:	e1ffff17 	ldw	r7,-4(fp)
 1000a1c:	10007740 	call	1000774 <Line>
	Line(x2, y2, x3, y3, borderColour);
 1000a20:	e0800417 	ldw	r2,16(fp)
 1000a24:	d8800015 	stw	r2,0(sp)
 1000a28:	e13ffe17 	ldw	r4,-8(fp)
 1000a2c:	e17fff17 	ldw	r5,-4(fp)
 1000a30:	e1800217 	ldw	r6,8(fp)
 1000a34:	e1c00317 	ldw	r7,12(fp)
 1000a38:	10007740 	call	1000774 <Line>
	Line(x3, y3, x1, y1, borderColour);
 1000a3c:	e0800417 	ldw	r2,16(fp)
 1000a40:	d8800015 	stw	r2,0(sp)
 1000a44:	e1000217 	ldw	r4,8(fp)
 1000a48:	e1400317 	ldw	r5,12(fp)
 1000a4c:	e1bffc17 	ldw	r6,-16(fp)
 1000a50:	e1fffd17 	ldw	r7,-12(fp)
 1000a54:	10007740 	call	1000774 <Line>
}
 1000a58:	e037883a 	mov	sp,fp
 1000a5c:	dfc00117 	ldw	ra,4(sp)
 1000a60:	df000017 	ldw	fp,0(sp)
 1000a64:	dec00204 	addi	sp,sp,8
 1000a68:	f800283a 	ret

01000a6c <DrawCircle>:

void DrawCircle(int x0, int y0, int radius, int COLOUR) {
 1000a6c:	defff704 	addi	sp,sp,-36
 1000a70:	dfc00815 	stw	ra,32(sp)
 1000a74:	df000715 	stw	fp,28(sp)
 1000a78:	df000704 	addi	fp,sp,28
 1000a7c:	e13ffc15 	stw	r4,-16(fp)
 1000a80:	e17ffd15 	stw	r5,-12(fp)
 1000a84:	e1bffe15 	stw	r6,-8(fp)
 1000a88:	e1ffff15 	stw	r7,-4(fp)
	int x = radius;
 1000a8c:	e0bffe17 	ldw	r2,-8(fp)
 1000a90:	e0bffb15 	stw	r2,-20(fp)
	int y = 0;
 1000a94:	e03ffa15 	stw	zero,-24(fp)
	int decisionOver2 = 1 - x; // Decision criterion divided by 2 evaluated at x=r, y=0
 1000a98:	00c00044 	movi	r3,1
 1000a9c:	e0bffb17 	ldw	r2,-20(fp)
 1000aa0:	1885c83a 	sub	r2,r3,r2
 1000aa4:	e0bff915 	stw	r2,-28(fp)

	WAIT_FOR_GRAPHICS;
 1000aa8:	00a10034 	movhi	r2,33792
 1000aac:	1080000b 	ldhu	r2,0(r2)
 1000ab0:	10bfffcc 	andi	r2,r2,65535
 1000ab4:	1080004c 	andi	r2,r2,1
 1000ab8:	1005003a 	cmpeq	r2,r2,zero
 1000abc:	103ffa1e 	bne	r2,zero,1000aa8 <DrawCircle+0x3c>

	while (y <= x) {
 1000ac0:	00005a06 	br	1000c2c <DrawCircle+0x1c0>

		WriteAPixel(x + x0, y + y0, COLOUR); // Octant 1
 1000ac4:	e0fffb17 	ldw	r3,-20(fp)
 1000ac8:	e0bffc17 	ldw	r2,-16(fp)
 1000acc:	1889883a 	add	r4,r3,r2
 1000ad0:	e0fffa17 	ldw	r3,-24(fp)
 1000ad4:	e0bffd17 	ldw	r2,-12(fp)
 1000ad8:	188b883a 	add	r5,r3,r2
 1000adc:	e1bfff17 	ldw	r6,-4(fp)
 1000ae0:	10004940 	call	1000494 <WriteAPixel>
		WriteAPixel(y + x0, x + y0, COLOUR); // Octant 2
 1000ae4:	e0fffa17 	ldw	r3,-24(fp)
 1000ae8:	e0bffc17 	ldw	r2,-16(fp)
 1000aec:	1889883a 	add	r4,r3,r2
 1000af0:	e0fffb17 	ldw	r3,-20(fp)
 1000af4:	e0bffd17 	ldw	r2,-12(fp)
 1000af8:	188b883a 	add	r5,r3,r2
 1000afc:	e1bfff17 	ldw	r6,-4(fp)
 1000b00:	10004940 	call	1000494 <WriteAPixel>
		WriteAPixel(-x + x0, y + y0, COLOUR); // Octant 4
 1000b04:	e0fffc17 	ldw	r3,-16(fp)
 1000b08:	e0bffb17 	ldw	r2,-20(fp)
 1000b0c:	1889c83a 	sub	r4,r3,r2
 1000b10:	e0fffa17 	ldw	r3,-24(fp)
 1000b14:	e0bffd17 	ldw	r2,-12(fp)
 1000b18:	188b883a 	add	r5,r3,r2
 1000b1c:	e1bfff17 	ldw	r6,-4(fp)
 1000b20:	10004940 	call	1000494 <WriteAPixel>
		WriteAPixel(-y + x0, x + y0, COLOUR); // Octant 3
 1000b24:	e0fffc17 	ldw	r3,-16(fp)
 1000b28:	e0bffa17 	ldw	r2,-24(fp)
 1000b2c:	1889c83a 	sub	r4,r3,r2
 1000b30:	e0fffb17 	ldw	r3,-20(fp)
 1000b34:	e0bffd17 	ldw	r2,-12(fp)
 1000b38:	188b883a 	add	r5,r3,r2
 1000b3c:	e1bfff17 	ldw	r6,-4(fp)
 1000b40:	10004940 	call	1000494 <WriteAPixel>
		WriteAPixel(-x + x0, -y + y0, COLOUR); // Octant 5
 1000b44:	e0fffc17 	ldw	r3,-16(fp)
 1000b48:	e0bffb17 	ldw	r2,-20(fp)
 1000b4c:	1889c83a 	sub	r4,r3,r2
 1000b50:	e0fffd17 	ldw	r3,-12(fp)
 1000b54:	e0bffa17 	ldw	r2,-24(fp)
 1000b58:	188bc83a 	sub	r5,r3,r2
 1000b5c:	e1bfff17 	ldw	r6,-4(fp)
 1000b60:	10004940 	call	1000494 <WriteAPixel>
		WriteAPixel(-y + x0, -x + y0, COLOUR); // Octant 6
 1000b64:	e0fffc17 	ldw	r3,-16(fp)
 1000b68:	e0bffa17 	ldw	r2,-24(fp)
 1000b6c:	1889c83a 	sub	r4,r3,r2
 1000b70:	e0fffd17 	ldw	r3,-12(fp)
 1000b74:	e0bffb17 	ldw	r2,-20(fp)
 1000b78:	188bc83a 	sub	r5,r3,r2
 1000b7c:	e1bfff17 	ldw	r6,-4(fp)
 1000b80:	10004940 	call	1000494 <WriteAPixel>
		WriteAPixel(x + x0, -y + y0, COLOUR); // Octant 7
 1000b84:	e0fffb17 	ldw	r3,-20(fp)
 1000b88:	e0bffc17 	ldw	r2,-16(fp)
 1000b8c:	1889883a 	add	r4,r3,r2
 1000b90:	e0fffd17 	ldw	r3,-12(fp)
 1000b94:	e0bffa17 	ldw	r2,-24(fp)
 1000b98:	188bc83a 	sub	r5,r3,r2
 1000b9c:	e1bfff17 	ldw	r6,-4(fp)
 1000ba0:	10004940 	call	1000494 <WriteAPixel>
		WriteAPixel(y + x0, -x + y0, COLOUR); // Octant 8
 1000ba4:	e0fffa17 	ldw	r3,-24(fp)
 1000ba8:	e0bffc17 	ldw	r2,-16(fp)
 1000bac:	1889883a 	add	r4,r3,r2
 1000bb0:	e0fffd17 	ldw	r3,-12(fp)
 1000bb4:	e0bffb17 	ldw	r2,-20(fp)
 1000bb8:	188bc83a 	sub	r5,r3,r2
 1000bbc:	e1bfff17 	ldw	r6,-4(fp)
 1000bc0:	10004940 	call	1000494 <WriteAPixel>
		y++;
 1000bc4:	e0bffa17 	ldw	r2,-24(fp)
 1000bc8:	10800044 	addi	r2,r2,1
 1000bcc:	e0bffa15 	stw	r2,-24(fp)
		if (decisionOver2 <= 0) {
 1000bd0:	e0bff917 	ldw	r2,-28(fp)
 1000bd4:	10800048 	cmpgei	r2,r2,1
 1000bd8:	1000081e 	bne	r2,zero,1000bfc <DrawCircle+0x190>
			decisionOver2 += 2 * y + 1; // Change in decision criterion for y -> y+1
 1000bdc:	e0bffa17 	ldw	r2,-24(fp)
 1000be0:	1085883a 	add	r2,r2,r2
 1000be4:	1007883a 	mov	r3,r2
 1000be8:	e0bff917 	ldw	r2,-28(fp)
 1000bec:	1885883a 	add	r2,r3,r2
 1000bf0:	10800044 	addi	r2,r2,1
 1000bf4:	e0bff915 	stw	r2,-28(fp)
 1000bf8:	00000c06 	br	1000c2c <DrawCircle+0x1c0>
		} else {
			x--;
 1000bfc:	e0bffb17 	ldw	r2,-20(fp)
 1000c00:	10bfffc4 	addi	r2,r2,-1
 1000c04:	e0bffb15 	stw	r2,-20(fp)
			decisionOver2 += 2 * (y - x) + 1; // Change for y -> y+1, x -> x-1
 1000c08:	e0fffa17 	ldw	r3,-24(fp)
 1000c0c:	e0bffb17 	ldw	r2,-20(fp)
 1000c10:	1885c83a 	sub	r2,r3,r2
 1000c14:	1085883a 	add	r2,r2,r2
 1000c18:	1007883a 	mov	r3,r2
 1000c1c:	e0bff917 	ldw	r2,-28(fp)
 1000c20:	1885883a 	add	r2,r3,r2
 1000c24:	10800044 	addi	r2,r2,1
 1000c28:	e0bff915 	stw	r2,-28(fp)
	int y = 0;
	int decisionOver2 = 1 - x; // Decision criterion divided by 2 evaluated at x=r, y=0

	WAIT_FOR_GRAPHICS;

	while (y <= x) {
 1000c2c:	e0fffa17 	ldw	r3,-24(fp)
 1000c30:	e0bffb17 	ldw	r2,-20(fp)
 1000c34:	10ffa30e 	bge	r2,r3,1000ac4 <DrawCircle+0x58>
		} else {
			x--;
			decisionOver2 += 2 * (y - x) + 1; // Change for y -> y+1, x -> x-1
		}
	}
}
 1000c38:	e037883a 	mov	sp,fp
 1000c3c:	dfc00117 	ldw	ra,4(sp)
 1000c40:	df000017 	ldw	fp,0(sp)
 1000c44:	dec00204 	addi	sp,sp,8
 1000c48:	f800283a 	ret

01000c4c <DrawCircleFill>:

void DrawCircleFill(int x0, int y0, int radius, int COLOUR) {
 1000c4c:	defff604 	addi	sp,sp,-40
 1000c50:	dfc00915 	stw	ra,36(sp)
 1000c54:	df000815 	stw	fp,32(sp)
 1000c58:	df000804 	addi	fp,sp,32
 1000c5c:	e13ffc15 	stw	r4,-16(fp)
 1000c60:	e17ffd15 	stw	r5,-12(fp)
 1000c64:	e1bffe15 	stw	r6,-8(fp)
 1000c68:	e1ffff15 	stw	r7,-4(fp)
	int x = radius;
 1000c6c:	e0bffe17 	ldw	r2,-8(fp)
 1000c70:	e0bffb15 	stw	r2,-20(fp)
	int y = 0;
 1000c74:	e03ffa15 	stw	zero,-24(fp)
	int decisionOver2 = 1 - x; // Decision criterion divided by 2 evaluated at x=r, y=0
 1000c78:	00c00044 	movi	r3,1
 1000c7c:	e0bffb17 	ldw	r2,-20(fp)
 1000c80:	1885c83a 	sub	r2,r3,r2
 1000c84:	e0bff915 	stw	r2,-28(fp)

	WAIT_FOR_GRAPHICS;
 1000c88:	00a10034 	movhi	r2,33792
 1000c8c:	1080000b 	ldhu	r2,0(r2)
 1000c90:	10bfffcc 	andi	r2,r2,65535
 1000c94:	1080004c 	andi	r2,r2,1
 1000c98:	1005003a 	cmpeq	r2,r2,zero
 1000c9c:	103ffa1e 	bne	r2,zero,1000c88 <DrawCircleFill+0x3c>

	while (y <= x) {
 1000ca0:	00007206 	br	1000e6c <DrawCircleFill+0x220>

		Line(x0, y0, x + x0, y + y0, COLOUR); // Octant 1
 1000ca4:	e0fffb17 	ldw	r3,-20(fp)
 1000ca8:	e0bffc17 	ldw	r2,-16(fp)
 1000cac:	188d883a 	add	r6,r3,r2
 1000cb0:	e0fffa17 	ldw	r3,-24(fp)
 1000cb4:	e0bffd17 	ldw	r2,-12(fp)
 1000cb8:	188f883a 	add	r7,r3,r2
 1000cbc:	e0bfff17 	ldw	r2,-4(fp)
 1000cc0:	d8800015 	stw	r2,0(sp)
 1000cc4:	e13ffc17 	ldw	r4,-16(fp)
 1000cc8:	e17ffd17 	ldw	r5,-12(fp)
 1000ccc:	10007740 	call	1000774 <Line>
		Line(x0, y0, y + x0, x + y0, COLOUR); // Octant 2
 1000cd0:	e0fffa17 	ldw	r3,-24(fp)
 1000cd4:	e0bffc17 	ldw	r2,-16(fp)
 1000cd8:	188d883a 	add	r6,r3,r2
 1000cdc:	e0fffb17 	ldw	r3,-20(fp)
 1000ce0:	e0bffd17 	ldw	r2,-12(fp)
 1000ce4:	188f883a 	add	r7,r3,r2
 1000ce8:	e0bfff17 	ldw	r2,-4(fp)
 1000cec:	d8800015 	stw	r2,0(sp)
 1000cf0:	e13ffc17 	ldw	r4,-16(fp)
 1000cf4:	e17ffd17 	ldw	r5,-12(fp)
 1000cf8:	10007740 	call	1000774 <Line>
		Line(x0, y0, -x + x0, y + y0, COLOUR); // Octant 4
 1000cfc:	e0fffc17 	ldw	r3,-16(fp)
 1000d00:	e0bffb17 	ldw	r2,-20(fp)
 1000d04:	188dc83a 	sub	r6,r3,r2
 1000d08:	e0fffa17 	ldw	r3,-24(fp)
 1000d0c:	e0bffd17 	ldw	r2,-12(fp)
 1000d10:	188f883a 	add	r7,r3,r2
 1000d14:	e0bfff17 	ldw	r2,-4(fp)
 1000d18:	d8800015 	stw	r2,0(sp)
 1000d1c:	e13ffc17 	ldw	r4,-16(fp)
 1000d20:	e17ffd17 	ldw	r5,-12(fp)
 1000d24:	10007740 	call	1000774 <Line>
		Line(x0, y0, -y + x0, x + y0, COLOUR); // Octant 3
 1000d28:	e0fffc17 	ldw	r3,-16(fp)
 1000d2c:	e0bffa17 	ldw	r2,-24(fp)
 1000d30:	188dc83a 	sub	r6,r3,r2
 1000d34:	e0fffb17 	ldw	r3,-20(fp)
 1000d38:	e0bffd17 	ldw	r2,-12(fp)
 1000d3c:	188f883a 	add	r7,r3,r2
 1000d40:	e0bfff17 	ldw	r2,-4(fp)
 1000d44:	d8800015 	stw	r2,0(sp)
 1000d48:	e13ffc17 	ldw	r4,-16(fp)
 1000d4c:	e17ffd17 	ldw	r5,-12(fp)
 1000d50:	10007740 	call	1000774 <Line>
		Line(x0, y0, -x + x0, -y + y0, COLOUR); // Octant 5
 1000d54:	e0fffc17 	ldw	r3,-16(fp)
 1000d58:	e0bffb17 	ldw	r2,-20(fp)
 1000d5c:	188dc83a 	sub	r6,r3,r2
 1000d60:	e0fffd17 	ldw	r3,-12(fp)
 1000d64:	e0bffa17 	ldw	r2,-24(fp)
 1000d68:	188fc83a 	sub	r7,r3,r2
 1000d6c:	e0bfff17 	ldw	r2,-4(fp)
 1000d70:	d8800015 	stw	r2,0(sp)
 1000d74:	e13ffc17 	ldw	r4,-16(fp)
 1000d78:	e17ffd17 	ldw	r5,-12(fp)
 1000d7c:	10007740 	call	1000774 <Line>
		Line(x0, y0, -y + x0, -x + y0, COLOUR); // Octant 6
 1000d80:	e0fffc17 	ldw	r3,-16(fp)
 1000d84:	e0bffa17 	ldw	r2,-24(fp)
 1000d88:	188dc83a 	sub	r6,r3,r2
 1000d8c:	e0fffd17 	ldw	r3,-12(fp)
 1000d90:	e0bffb17 	ldw	r2,-20(fp)
 1000d94:	188fc83a 	sub	r7,r3,r2
 1000d98:	e0bfff17 	ldw	r2,-4(fp)
 1000d9c:	d8800015 	stw	r2,0(sp)
 1000da0:	e13ffc17 	ldw	r4,-16(fp)
 1000da4:	e17ffd17 	ldw	r5,-12(fp)
 1000da8:	10007740 	call	1000774 <Line>
		Line(x0, y0, x + x0, -y + y0, COLOUR); // Octant 7
 1000dac:	e0fffb17 	ldw	r3,-20(fp)
 1000db0:	e0bffc17 	ldw	r2,-16(fp)
 1000db4:	188d883a 	add	r6,r3,r2
 1000db8:	e0fffd17 	ldw	r3,-12(fp)
 1000dbc:	e0bffa17 	ldw	r2,-24(fp)
 1000dc0:	188fc83a 	sub	r7,r3,r2
 1000dc4:	e0bfff17 	ldw	r2,-4(fp)
 1000dc8:	d8800015 	stw	r2,0(sp)
 1000dcc:	e13ffc17 	ldw	r4,-16(fp)
 1000dd0:	e17ffd17 	ldw	r5,-12(fp)
 1000dd4:	10007740 	call	1000774 <Line>
		Line(x0, y0, y + x0, -x + y0, COLOUR); // Octant 8
 1000dd8:	e0fffa17 	ldw	r3,-24(fp)
 1000ddc:	e0bffc17 	ldw	r2,-16(fp)
 1000de0:	188d883a 	add	r6,r3,r2
 1000de4:	e0fffd17 	ldw	r3,-12(fp)
 1000de8:	e0bffb17 	ldw	r2,-20(fp)
 1000dec:	188fc83a 	sub	r7,r3,r2
 1000df0:	e0bfff17 	ldw	r2,-4(fp)
 1000df4:	d8800015 	stw	r2,0(sp)
 1000df8:	e13ffc17 	ldw	r4,-16(fp)
 1000dfc:	e17ffd17 	ldw	r5,-12(fp)
 1000e00:	10007740 	call	1000774 <Line>
		y++;
 1000e04:	e0bffa17 	ldw	r2,-24(fp)
 1000e08:	10800044 	addi	r2,r2,1
 1000e0c:	e0bffa15 	stw	r2,-24(fp)
		if (decisionOver2 <= 0) {
 1000e10:	e0bff917 	ldw	r2,-28(fp)
 1000e14:	10800048 	cmpgei	r2,r2,1
 1000e18:	1000081e 	bne	r2,zero,1000e3c <DrawCircleFill+0x1f0>
			decisionOver2 += 2 * y + 1; // Change in decision criterion for y -> y+1
 1000e1c:	e0bffa17 	ldw	r2,-24(fp)
 1000e20:	1085883a 	add	r2,r2,r2
 1000e24:	1007883a 	mov	r3,r2
 1000e28:	e0bff917 	ldw	r2,-28(fp)
 1000e2c:	1885883a 	add	r2,r3,r2
 1000e30:	10800044 	addi	r2,r2,1
 1000e34:	e0bff915 	stw	r2,-28(fp)
 1000e38:	00000c06 	br	1000e6c <DrawCircleFill+0x220>
		} else {
			x--;
 1000e3c:	e0bffb17 	ldw	r2,-20(fp)
 1000e40:	10bfffc4 	addi	r2,r2,-1
 1000e44:	e0bffb15 	stw	r2,-20(fp)
			decisionOver2 += 2 * (y - x) + 1; // Change for y -> y+1, x -> x-1
 1000e48:	e0fffa17 	ldw	r3,-24(fp)
 1000e4c:	e0bffb17 	ldw	r2,-20(fp)
 1000e50:	1885c83a 	sub	r2,r3,r2
 1000e54:	1085883a 	add	r2,r2,r2
 1000e58:	1007883a 	mov	r3,r2
 1000e5c:	e0bff917 	ldw	r2,-28(fp)
 1000e60:	1885883a 	add	r2,r3,r2
 1000e64:	10800044 	addi	r2,r2,1
 1000e68:	e0bff915 	stw	r2,-28(fp)
	int y = 0;
	int decisionOver2 = 1 - x; // Decision criterion divided by 2 evaluated at x=r, y=0

	WAIT_FOR_GRAPHICS;

	while (y <= x) {
 1000e6c:	e0fffa17 	ldw	r3,-24(fp)
 1000e70:	e0bffb17 	ldw	r2,-20(fp)
 1000e74:	10ff8b0e 	bge	r2,r3,1000ca4 <DrawCircleFill+0x58>
		} else {
			x--;
			decisionOver2 += 2 * (y - x) + 1; // Change for y -> y+1, x -> x-1
		}
	}
}
 1000e78:	e037883a 	mov	sp,fp
 1000e7c:	dfc00117 	ldw	ra,4(sp)
 1000e80:	df000017 	ldw	fp,0(sp)
 1000e84:	dec00204 	addi	sp,sp,8
 1000e88:	f800283a 	ret

01000e8c <buildButton>:
#include "Colours.h"
#include <stdlib.h>

void buildButton(int x_centre, int y_centre, int button_width,
		int button_height, int outlineColour, int fillColour, int fontColor,
		char *text, Button * b, int numChar, Page * targetPage) {
 1000e8c:	defffb04 	addi	sp,sp,-20
 1000e90:	df000415 	stw	fp,16(sp)
 1000e94:	df000404 	addi	fp,sp,16
 1000e98:	e13ffc15 	stw	r4,-16(fp)
 1000e9c:	e17ffd15 	stw	r5,-12(fp)
 1000ea0:	e1bffe15 	stw	r6,-8(fp)
 1000ea4:	e1ffff15 	stw	r7,-4(fp)

	b->buttonText = text;
 1000ea8:	e0c00517 	ldw	r3,20(fp)
 1000eac:	e0800417 	ldw	r2,16(fp)
 1000eb0:	18800015 	stw	r2,0(r3)
	b->x1 = x_centre - (button_width / 2);
 1000eb4:	e0fffe17 	ldw	r3,-8(fp)
 1000eb8:	1804d7fa 	srli	r2,r3,31
 1000ebc:	10c5883a 	add	r2,r2,r3
 1000ec0:	1005d07a 	srai	r2,r2,1
 1000ec4:	1007883a 	mov	r3,r2
 1000ec8:	e0bffc17 	ldw	r2,-16(fp)
 1000ecc:	10c7c83a 	sub	r3,r2,r3
 1000ed0:	e0800517 	ldw	r2,20(fp)
 1000ed4:	10c00115 	stw	r3,4(r2)
	b->x2 = x_centre + (button_width / 2);
 1000ed8:	e0fffe17 	ldw	r3,-8(fp)
 1000edc:	1804d7fa 	srli	r2,r3,31
 1000ee0:	10c5883a 	add	r2,r2,r3
 1000ee4:	1005d07a 	srai	r2,r2,1
 1000ee8:	1007883a 	mov	r3,r2
 1000eec:	e0bffc17 	ldw	r2,-16(fp)
 1000ef0:	1887883a 	add	r3,r3,r2
 1000ef4:	e0800517 	ldw	r2,20(fp)
 1000ef8:	10c00215 	stw	r3,8(r2)
	b->y1 = y_centre - (button_height / 2);
 1000efc:	e0ffff17 	ldw	r3,-4(fp)
 1000f00:	1804d7fa 	srli	r2,r3,31
 1000f04:	10c5883a 	add	r2,r2,r3
 1000f08:	1005d07a 	srai	r2,r2,1
 1000f0c:	1007883a 	mov	r3,r2
 1000f10:	e0bffd17 	ldw	r2,-12(fp)
 1000f14:	10c7c83a 	sub	r3,r2,r3
 1000f18:	e0800517 	ldw	r2,20(fp)
 1000f1c:	10c00315 	stw	r3,12(r2)
	b->y2 = y_centre + (button_height / 2);
 1000f20:	e0ffff17 	ldw	r3,-4(fp)
 1000f24:	1804d7fa 	srli	r2,r3,31
 1000f28:	10c5883a 	add	r2,r2,r3
 1000f2c:	1005d07a 	srai	r2,r2,1
 1000f30:	1007883a 	mov	r3,r2
 1000f34:	e0bffd17 	ldw	r2,-12(fp)
 1000f38:	1887883a 	add	r3,r3,r2
 1000f3c:	e0800517 	ldw	r2,20(fp)
 1000f40:	10c00415 	stw	r3,16(r2)
	b->outlineColour = outlineColour;
 1000f44:	e0c00517 	ldw	r3,20(fp)
 1000f48:	e0800117 	ldw	r2,4(fp)
 1000f4c:	18800515 	stw	r2,20(r3)
	b->fillColour = fillColour;
 1000f50:	e0c00517 	ldw	r3,20(fp)
 1000f54:	e0800217 	ldw	r2,8(fp)
 1000f58:	18800615 	stw	r2,24(r3)
	b->fontColour = fontColor;
 1000f5c:	e0c00517 	ldw	r3,20(fp)
 1000f60:	e0800317 	ldw	r2,12(fp)
 1000f64:	18800715 	stw	r2,28(r3)
	b->captionLength = numChar;
 1000f68:	e0c00517 	ldw	r3,20(fp)
 1000f6c:	e0800617 	ldw	r2,24(fp)
 1000f70:	18800815 	stw	r2,32(r3)
	b->targetPage = targetPage;
 1000f74:	e0c00517 	ldw	r3,20(fp)
 1000f78:	e0800717 	ldw	r2,28(fp)
 1000f7c:	18800915 	stw	r2,36(r3)
}
 1000f80:	e037883a 	mov	sp,fp
 1000f84:	df000017 	ldw	fp,0(sp)
 1000f88:	dec00104 	addi	sp,sp,4
 1000f8c:	f800283a 	ret

01000f90 <buildKey>:

void buildKey(int x_centre, int y_centre, int button_width, int button_height,
		int outlineColour, int fillColour, int fontColor, char *text, Key * k,
		int numChar) {
 1000f90:	defffb04 	addi	sp,sp,-20
 1000f94:	df000415 	stw	fp,16(sp)
 1000f98:	df000404 	addi	fp,sp,16
 1000f9c:	e13ffc15 	stw	r4,-16(fp)
 1000fa0:	e17ffd15 	stw	r5,-12(fp)
 1000fa4:	e1bffe15 	stw	r6,-8(fp)
 1000fa8:	e1ffff15 	stw	r7,-4(fp)

	k->alpha = text;
 1000fac:	e0c00517 	ldw	r3,20(fp)
 1000fb0:	e0800417 	ldw	r2,16(fp)
 1000fb4:	18800715 	stw	r2,28(r3)
	k->len = numChar;
 1000fb8:	e0c00517 	ldw	r3,20(fp)
 1000fbc:	e0800617 	ldw	r2,24(fp)
 1000fc0:	18800815 	stw	r2,32(r3)
	k->x1 = x_centre - (button_width / 2);
 1000fc4:	e0fffe17 	ldw	r3,-8(fp)
 1000fc8:	1804d7fa 	srli	r2,r3,31
 1000fcc:	10c5883a 	add	r2,r2,r3
 1000fd0:	1005d07a 	srai	r2,r2,1
 1000fd4:	1007883a 	mov	r3,r2
 1000fd8:	e0bffc17 	ldw	r2,-16(fp)
 1000fdc:	10c7c83a 	sub	r3,r2,r3
 1000fe0:	e0800517 	ldw	r2,20(fp)
 1000fe4:	10c00315 	stw	r3,12(r2)
	k->x2 = x_centre + (button_width / 2);
 1000fe8:	e0fffe17 	ldw	r3,-8(fp)
 1000fec:	1804d7fa 	srli	r2,r3,31
 1000ff0:	10c5883a 	add	r2,r2,r3
 1000ff4:	1005d07a 	srai	r2,r2,1
 1000ff8:	1007883a 	mov	r3,r2
 1000ffc:	e0bffc17 	ldw	r2,-16(fp)
 1001000:	1887883a 	add	r3,r3,r2
 1001004:	e0800517 	ldw	r2,20(fp)
 1001008:	10c00415 	stw	r3,16(r2)
	k->y1 = y_centre - (button_height / 2);
 100100c:	e0ffff17 	ldw	r3,-4(fp)
 1001010:	1804d7fa 	srli	r2,r3,31
 1001014:	10c5883a 	add	r2,r2,r3
 1001018:	1005d07a 	srai	r2,r2,1
 100101c:	1007883a 	mov	r3,r2
 1001020:	e0bffd17 	ldw	r2,-12(fp)
 1001024:	10c7c83a 	sub	r3,r2,r3
 1001028:	e0800517 	ldw	r2,20(fp)
 100102c:	10c00515 	stw	r3,20(r2)
	k->y2 = y_centre + (button_height / 2);
 1001030:	e0ffff17 	ldw	r3,-4(fp)
 1001034:	1804d7fa 	srli	r2,r3,31
 1001038:	10c5883a 	add	r2,r2,r3
 100103c:	1005d07a 	srai	r2,r2,1
 1001040:	1007883a 	mov	r3,r2
 1001044:	e0bffd17 	ldw	r2,-12(fp)
 1001048:	1887883a 	add	r3,r3,r2
 100104c:	e0800517 	ldw	r2,20(fp)
 1001050:	10c00615 	stw	r3,24(r2)
	k->keyOutlineColour = outlineColour;
 1001054:	e0c00517 	ldw	r3,20(fp)
 1001058:	e0800117 	ldw	r2,4(fp)
 100105c:	18800115 	stw	r2,4(r3)
	k->keyFillColour = fillColour;
 1001060:	e0c00517 	ldw	r3,20(fp)
 1001064:	e0800217 	ldw	r2,8(fp)
 1001068:	18800215 	stw	r2,8(r3)
	k->fontColour = fontColor;
 100106c:	e0c00517 	ldw	r3,20(fp)
 1001070:	e0800317 	ldw	r2,12(fp)
 1001074:	18800015 	stw	r2,0(r3)

}
 1001078:	e037883a 	mov	sp,fp
 100107c:	df000017 	ldw	fp,0(sp)
 1001080:	dec00104 	addi	sp,sp,4
 1001084:	f800283a 	ret

01001088 <buildKeyboard>:

Keyboard buildKeyboard(Keyboard *kb) {
 1001088:	deffe704 	addi	sp,sp,-100
 100108c:	dfc01815 	stw	ra,96(sp)
 1001090:	df001715 	stw	fp,92(sp)
 1001094:	df001704 	addi	fp,sp,92
 1001098:	e13fff15 	stw	r4,-4(fp)
 100109c:	e17ffe15 	stw	r5,-8(fp)

	int i, j;
	Key *k, *space, *numbutton, *caps, *backspace, *lower, *donebutton;

	// build lower-case keyset
	kb->spacebar = malloc(sizeof(Key));
 10010a0:	01000a04 	movi	r4,40
 10010a4:	1014b200 	call	1014b20 <malloc>
 10010a8:	1007883a 	mov	r3,r2
 10010ac:	e0bffe17 	ldw	r2,-8(fp)
 10010b0:	10c04c15 	stw	r3,304(r2)
	kb->keyset_lowercase = malloc(sizeof(Key) * ALPHA_SIZE);
 10010b4:	01015e04 	movi	r4,1400
 10010b8:	1014b200 	call	1014b20 <malloc>
 10010bc:	1007883a 	mov	r3,r2
 10010c0:	e0bffe17 	ldw	r2,-8(fp)
 10010c4:	10c04915 	stw	r3,292(r2)
	j = 0; // indexes into keyset_lowercase
 10010c8:	e03ffc15 	stw	zero,-16(fp)
	for (i = 0; row1_low[i]; i++) { //qwertyuiop
 10010cc:	e03ffd15 	stw	zero,-12(fp)
 10010d0:	00004306 	br	10011e0 <buildKeyboard+0x158>
		k = malloc(sizeof(Key));
 10010d4:	01000a04 	movi	r4,40
 10010d8:	1014b200 	call	1014b20 <malloc>
 10010dc:	e0bffb15 	stw	r2,-20(fp)
		// reserve space of 2 keys for the side keys
		buildKey(80 + 65 * i, 300, 50, 30, BLACK, WHITE, BLACK, row1_low[i], k,
 10010e0:	e0bffd17 	ldw	r2,-12(fp)
 10010e4:	10801064 	muli	r2,r2,65
 10010e8:	11001404 	addi	r4,r2,80
 10010ec:	e0fffd17 	ldw	r3,-12(fp)
 10010f0:	008040f4 	movhi	r2,259
 10010f4:	10a44d04 	addi	r2,r2,-28364
 10010f8:	10c5883a 	add	r2,r2,r3
 10010fc:	10800003 	ldbu	r2,0(r2)
 1001100:	10803fcc 	andi	r2,r2,255
 1001104:	1080201c 	xori	r2,r2,128
 1001108:	10bfe004 	addi	r2,r2,-128
 100110c:	1007883a 	mov	r3,r2
 1001110:	d8000015 	stw	zero,0(sp)
 1001114:	00800044 	movi	r2,1
 1001118:	d8800115 	stw	r2,4(sp)
 100111c:	d8000215 	stw	zero,8(sp)
 1001120:	d8c00315 	stw	r3,12(sp)
 1001124:	e0bffb17 	ldw	r2,-20(fp)
 1001128:	d8800415 	stw	r2,16(sp)
 100112c:	00800044 	movi	r2,1
 1001130:	d8800515 	stw	r2,20(sp)
 1001134:	01404b04 	movi	r5,300
 1001138:	01800c84 	movi	r6,50
 100113c:	01c00784 	movi	r7,30
 1001140:	1000f900 	call	1000f90 <buildKey>
				1);
		k->writeChar = row1_low[i];
 1001144:	e0fffd17 	ldw	r3,-12(fp)
 1001148:	008040f4 	movhi	r2,259
 100114c:	10a44d04 	addi	r2,r2,-28364
 1001150:	10c5883a 	add	r2,r2,r3
 1001154:	10c00003 	ldbu	r3,0(r2)
 1001158:	e0bffb17 	ldw	r2,-20(fp)
 100115c:	10c00905 	stb	r3,36(r2)
		kb->keyset_lowercase[j++] = *k;
 1001160:	e0bffe17 	ldw	r2,-8(fp)
 1001164:	10c04917 	ldw	r3,292(r2)
 1001168:	e0bffc17 	ldw	r2,-16(fp)
 100116c:	10800a24 	muli	r2,r2,40
 1001170:	1889883a 	add	r4,r3,r2
 1001174:	e0fffb17 	ldw	r3,-20(fp)
 1001178:	18800017 	ldw	r2,0(r3)
 100117c:	20800015 	stw	r2,0(r4)
 1001180:	18800117 	ldw	r2,4(r3)
 1001184:	20800115 	stw	r2,4(r4)
 1001188:	18800217 	ldw	r2,8(r3)
 100118c:	20800215 	stw	r2,8(r4)
 1001190:	18800317 	ldw	r2,12(r3)
 1001194:	20800315 	stw	r2,12(r4)
 1001198:	18800417 	ldw	r2,16(r3)
 100119c:	20800415 	stw	r2,16(r4)
 10011a0:	18800517 	ldw	r2,20(r3)
 10011a4:	20800515 	stw	r2,20(r4)
 10011a8:	18800617 	ldw	r2,24(r3)
 10011ac:	20800615 	stw	r2,24(r4)
 10011b0:	18800717 	ldw	r2,28(r3)
 10011b4:	20800715 	stw	r2,28(r4)
 10011b8:	18800817 	ldw	r2,32(r3)
 10011bc:	20800815 	stw	r2,32(r4)
 10011c0:	18800917 	ldw	r2,36(r3)
 10011c4:	20800915 	stw	r2,36(r4)
 10011c8:	e0bffc17 	ldw	r2,-16(fp)
 10011cc:	10800044 	addi	r2,r2,1
 10011d0:	e0bffc15 	stw	r2,-16(fp)

	// build lower-case keyset
	kb->spacebar = malloc(sizeof(Key));
	kb->keyset_lowercase = malloc(sizeof(Key) * ALPHA_SIZE);
	j = 0; // indexes into keyset_lowercase
	for (i = 0; row1_low[i]; i++) { //qwertyuiop
 10011d4:	e0bffd17 	ldw	r2,-12(fp)
 10011d8:	10800044 	addi	r2,r2,1
 10011dc:	e0bffd15 	stw	r2,-12(fp)
 10011e0:	e0fffd17 	ldw	r3,-12(fp)
 10011e4:	008040f4 	movhi	r2,259
 10011e8:	10a44d04 	addi	r2,r2,-28364
 10011ec:	10c5883a 	add	r2,r2,r3
 10011f0:	10800003 	ldbu	r2,0(r2)
 10011f4:	10803fcc 	andi	r2,r2,255
 10011f8:	1080201c 	xori	r2,r2,128
 10011fc:	10bfe004 	addi	r2,r2,-128
 1001200:	1004c03a 	cmpne	r2,r2,zero
 1001204:	103fb31e 	bne	r2,zero,10010d4 <buildKeyboard+0x4c>
				1);
		k->writeChar = row1_low[i];
		kb->keyset_lowercase[j++] = *k;
	}

	for (i = 0; row2_low[i]; i++) { //asdfghjkl;'
 1001208:	e03ffd15 	stw	zero,-12(fp)
 100120c:	00004306 	br	100131c <buildKeyboard+0x294>
		k = malloc(sizeof(Key));
 1001210:	01000a04 	movi	r4,40
 1001214:	1014b200 	call	1014b20 <malloc>
 1001218:	e0bffb15 	stw	r2,-20(fp)
		// shift keys right half a key
		buildKey(90 + 65 * i, 350, 50, 30, BLACK, WHITE, BLACK, row2_low[i], k,
 100121c:	e0bffd17 	ldw	r2,-12(fp)
 1001220:	10801064 	muli	r2,r2,65
 1001224:	11001684 	addi	r4,r2,90
 1001228:	e0fffd17 	ldw	r3,-12(fp)
 100122c:	008040f4 	movhi	r2,259
 1001230:	10a45004 	addi	r2,r2,-28352
 1001234:	10c5883a 	add	r2,r2,r3
 1001238:	10800003 	ldbu	r2,0(r2)
 100123c:	10803fcc 	andi	r2,r2,255
 1001240:	1080201c 	xori	r2,r2,128
 1001244:	10bfe004 	addi	r2,r2,-128
 1001248:	1007883a 	mov	r3,r2
 100124c:	d8000015 	stw	zero,0(sp)
 1001250:	00800044 	movi	r2,1
 1001254:	d8800115 	stw	r2,4(sp)
 1001258:	d8000215 	stw	zero,8(sp)
 100125c:	d8c00315 	stw	r3,12(sp)
 1001260:	e0bffb17 	ldw	r2,-20(fp)
 1001264:	d8800415 	stw	r2,16(sp)
 1001268:	00800044 	movi	r2,1
 100126c:	d8800515 	stw	r2,20(sp)
 1001270:	01405784 	movi	r5,350
 1001274:	01800c84 	movi	r6,50
 1001278:	01c00784 	movi	r7,30
 100127c:	1000f900 	call	1000f90 <buildKey>
				1);
		k->writeChar = row2_low[i];
 1001280:	e0fffd17 	ldw	r3,-12(fp)
 1001284:	008040f4 	movhi	r2,259
 1001288:	10a45004 	addi	r2,r2,-28352
 100128c:	10c5883a 	add	r2,r2,r3
 1001290:	10c00003 	ldbu	r3,0(r2)
 1001294:	e0bffb17 	ldw	r2,-20(fp)
 1001298:	10c00905 	stb	r3,36(r2)
		kb->keyset_lowercase[j++] = *k;
 100129c:	e0bffe17 	ldw	r2,-8(fp)
 10012a0:	10c04917 	ldw	r3,292(r2)
 10012a4:	e0bffc17 	ldw	r2,-16(fp)
 10012a8:	10800a24 	muli	r2,r2,40
 10012ac:	1889883a 	add	r4,r3,r2
 10012b0:	e0fffb17 	ldw	r3,-20(fp)
 10012b4:	18800017 	ldw	r2,0(r3)
 10012b8:	20800015 	stw	r2,0(r4)
 10012bc:	18800117 	ldw	r2,4(r3)
 10012c0:	20800115 	stw	r2,4(r4)
 10012c4:	18800217 	ldw	r2,8(r3)
 10012c8:	20800215 	stw	r2,8(r4)
 10012cc:	18800317 	ldw	r2,12(r3)
 10012d0:	20800315 	stw	r2,12(r4)
 10012d4:	18800417 	ldw	r2,16(r3)
 10012d8:	20800415 	stw	r2,16(r4)
 10012dc:	18800517 	ldw	r2,20(r3)
 10012e0:	20800515 	stw	r2,20(r4)
 10012e4:	18800617 	ldw	r2,24(r3)
 10012e8:	20800615 	stw	r2,24(r4)
 10012ec:	18800717 	ldw	r2,28(r3)
 10012f0:	20800715 	stw	r2,28(r4)
 10012f4:	18800817 	ldw	r2,32(r3)
 10012f8:	20800815 	stw	r2,32(r4)
 10012fc:	18800917 	ldw	r2,36(r3)
 1001300:	20800915 	stw	r2,36(r4)
 1001304:	e0bffc17 	ldw	r2,-16(fp)
 1001308:	10800044 	addi	r2,r2,1
 100130c:	e0bffc15 	stw	r2,-16(fp)
				1);
		k->writeChar = row1_low[i];
		kb->keyset_lowercase[j++] = *k;
	}

	for (i = 0; row2_low[i]; i++) { //asdfghjkl;'
 1001310:	e0bffd17 	ldw	r2,-12(fp)
 1001314:	10800044 	addi	r2,r2,1
 1001318:	e0bffd15 	stw	r2,-12(fp)
 100131c:	e0fffd17 	ldw	r3,-12(fp)
 1001320:	008040f4 	movhi	r2,259
 1001324:	10a45004 	addi	r2,r2,-28352
 1001328:	10c5883a 	add	r2,r2,r3
 100132c:	10800003 	ldbu	r2,0(r2)
 1001330:	10803fcc 	andi	r2,r2,255
 1001334:	1080201c 	xori	r2,r2,128
 1001338:	10bfe004 	addi	r2,r2,-128
 100133c:	1004c03a 	cmpne	r2,r2,zero
 1001340:	103fb31e 	bne	r2,zero,1001210 <buildKeyboard+0x188>
		k->writeChar = row2_low[i];
		kb->keyset_lowercase[j++] = *k;

	}

	for (i = 0; row3_low[i]; i++) { //zxcvbnm,.
 1001344:	e03ffd15 	stw	zero,-12(fp)
 1001348:	00004306 	br	1001458 <buildKeyboard+0x3d0>
		k = malloc(sizeof(Key));
 100134c:	01000a04 	movi	r4,40
 1001350:	1014b200 	call	1014b20 <malloc>
 1001354:	e0bffb15 	stw	r2,-20(fp)
		// shift keys right half a key
		buildKey(95 + 65 * i, 400, 50, 30, BLACK, WHITE, BLACK, row3_low[i], k,
 1001358:	e0bffd17 	ldw	r2,-12(fp)
 100135c:	10801064 	muli	r2,r2,65
 1001360:	110017c4 	addi	r4,r2,95
 1001364:	e0fffd17 	ldw	r3,-12(fp)
 1001368:	008040f4 	movhi	r2,259
 100136c:	10a45304 	addi	r2,r2,-28340
 1001370:	10c5883a 	add	r2,r2,r3
 1001374:	10800003 	ldbu	r2,0(r2)
 1001378:	10803fcc 	andi	r2,r2,255
 100137c:	1080201c 	xori	r2,r2,128
 1001380:	10bfe004 	addi	r2,r2,-128
 1001384:	1007883a 	mov	r3,r2
 1001388:	d8000015 	stw	zero,0(sp)
 100138c:	00800044 	movi	r2,1
 1001390:	d8800115 	stw	r2,4(sp)
 1001394:	d8000215 	stw	zero,8(sp)
 1001398:	d8c00315 	stw	r3,12(sp)
 100139c:	e0bffb17 	ldw	r2,-20(fp)
 10013a0:	d8800415 	stw	r2,16(sp)
 10013a4:	00800044 	movi	r2,1
 10013a8:	d8800515 	stw	r2,20(sp)
 10013ac:	01406404 	movi	r5,400
 10013b0:	01800c84 	movi	r6,50
 10013b4:	01c00784 	movi	r7,30
 10013b8:	1000f900 	call	1000f90 <buildKey>
				1);
		k->writeChar = row3_low[i];
 10013bc:	e0fffd17 	ldw	r3,-12(fp)
 10013c0:	008040f4 	movhi	r2,259
 10013c4:	10a45304 	addi	r2,r2,-28340
 10013c8:	10c5883a 	add	r2,r2,r3
 10013cc:	10c00003 	ldbu	r3,0(r2)
 10013d0:	e0bffb17 	ldw	r2,-20(fp)
 10013d4:	10c00905 	stb	r3,36(r2)
		kb->keyset_lowercase[j++] = *k;
 10013d8:	e0bffe17 	ldw	r2,-8(fp)
 10013dc:	10c04917 	ldw	r3,292(r2)
 10013e0:	e0bffc17 	ldw	r2,-16(fp)
 10013e4:	10800a24 	muli	r2,r2,40
 10013e8:	1889883a 	add	r4,r3,r2
 10013ec:	e0fffb17 	ldw	r3,-20(fp)
 10013f0:	18800017 	ldw	r2,0(r3)
 10013f4:	20800015 	stw	r2,0(r4)
 10013f8:	18800117 	ldw	r2,4(r3)
 10013fc:	20800115 	stw	r2,4(r4)
 1001400:	18800217 	ldw	r2,8(r3)
 1001404:	20800215 	stw	r2,8(r4)
 1001408:	18800317 	ldw	r2,12(r3)
 100140c:	20800315 	stw	r2,12(r4)
 1001410:	18800417 	ldw	r2,16(r3)
 1001414:	20800415 	stw	r2,16(r4)
 1001418:	18800517 	ldw	r2,20(r3)
 100141c:	20800515 	stw	r2,20(r4)
 1001420:	18800617 	ldw	r2,24(r3)
 1001424:	20800615 	stw	r2,24(r4)
 1001428:	18800717 	ldw	r2,28(r3)
 100142c:	20800715 	stw	r2,28(r4)
 1001430:	18800817 	ldw	r2,32(r3)
 1001434:	20800815 	stw	r2,32(r4)
 1001438:	18800917 	ldw	r2,36(r3)
 100143c:	20800915 	stw	r2,36(r4)
 1001440:	e0bffc17 	ldw	r2,-16(fp)
 1001444:	10800044 	addi	r2,r2,1
 1001448:	e0bffc15 	stw	r2,-16(fp)
		k->writeChar = row2_low[i];
		kb->keyset_lowercase[j++] = *k;

	}

	for (i = 0; row3_low[i]; i++) { //zxcvbnm,.
 100144c:	e0bffd17 	ldw	r2,-12(fp)
 1001450:	10800044 	addi	r2,r2,1
 1001454:	e0bffd15 	stw	r2,-12(fp)
 1001458:	e0fffd17 	ldw	r3,-12(fp)
 100145c:	008040f4 	movhi	r2,259
 1001460:	10a45304 	addi	r2,r2,-28340
 1001464:	10c5883a 	add	r2,r2,r3
 1001468:	10800003 	ldbu	r2,0(r2)
 100146c:	10803fcc 	andi	r2,r2,255
 1001470:	1080201c 	xori	r2,r2,128
 1001474:	10bfe004 	addi	r2,r2,-128
 1001478:	1004c03a 	cmpne	r2,r2,zero
 100147c:	103fb31e 	bne	r2,zero,100134c <buildKeyboard+0x2c4>
		k->writeChar = row3_low[i];
		kb->keyset_lowercase[j++] = *k;
	}

	// build upper-case keyset
	kb->keyset_uppercase = malloc(sizeof(Key) * ALPHA_SIZE);
 1001480:	01015e04 	movi	r4,1400
 1001484:	1014b200 	call	1014b20 <malloc>
 1001488:	1007883a 	mov	r3,r2
 100148c:	e0bffe17 	ldw	r2,-8(fp)
 1001490:	10c04a15 	stw	r3,296(r2)
	j = 0; // reset counter
 1001494:	e03ffc15 	stw	zero,-16(fp)

	for (i = 0; row1_caps[i]; i++) { //QWERTYUIOP
 1001498:	e03ffd15 	stw	zero,-12(fp)
 100149c:	00004306 	br	10015ac <buildKeyboard+0x524>
		k = malloc(sizeof(Key));
 10014a0:	01000a04 	movi	r4,40
 10014a4:	1014b200 	call	1014b20 <malloc>
 10014a8:	e0bffb15 	stw	r2,-20(fp)
		// reserve space of 2 keys for the side keys
		buildKey(80 + 65 * i, 300, 50, 30, BLACK, WHITE, BLACK, row1_caps[i], k,
 10014ac:	e0bffd17 	ldw	r2,-12(fp)
 10014b0:	10801064 	muli	r2,r2,65
 10014b4:	11001404 	addi	r4,r2,80
 10014b8:	e0fffd17 	ldw	r3,-12(fp)
 10014bc:	008040f4 	movhi	r2,259
 10014c0:	10a45604 	addi	r2,r2,-28328
 10014c4:	10c5883a 	add	r2,r2,r3
 10014c8:	10800003 	ldbu	r2,0(r2)
 10014cc:	10803fcc 	andi	r2,r2,255
 10014d0:	1080201c 	xori	r2,r2,128
 10014d4:	10bfe004 	addi	r2,r2,-128
 10014d8:	1007883a 	mov	r3,r2
 10014dc:	d8000015 	stw	zero,0(sp)
 10014e0:	00800044 	movi	r2,1
 10014e4:	d8800115 	stw	r2,4(sp)
 10014e8:	d8000215 	stw	zero,8(sp)
 10014ec:	d8c00315 	stw	r3,12(sp)
 10014f0:	e0bffb17 	ldw	r2,-20(fp)
 10014f4:	d8800415 	stw	r2,16(sp)
 10014f8:	00800044 	movi	r2,1
 10014fc:	d8800515 	stw	r2,20(sp)
 1001500:	01404b04 	movi	r5,300
 1001504:	01800c84 	movi	r6,50
 1001508:	01c00784 	movi	r7,30
 100150c:	1000f900 	call	1000f90 <buildKey>
				1);
		k->writeChar = row1_caps[i];
 1001510:	e0fffd17 	ldw	r3,-12(fp)
 1001514:	008040f4 	movhi	r2,259
 1001518:	10a45604 	addi	r2,r2,-28328
 100151c:	10c5883a 	add	r2,r2,r3
 1001520:	10c00003 	ldbu	r3,0(r2)
 1001524:	e0bffb17 	ldw	r2,-20(fp)
 1001528:	10c00905 	stb	r3,36(r2)
		kb->keyset_uppercase[j++] = *k;
 100152c:	e0bffe17 	ldw	r2,-8(fp)
 1001530:	10c04a17 	ldw	r3,296(r2)
 1001534:	e0bffc17 	ldw	r2,-16(fp)
 1001538:	10800a24 	muli	r2,r2,40
 100153c:	1889883a 	add	r4,r3,r2
 1001540:	e0fffb17 	ldw	r3,-20(fp)
 1001544:	18800017 	ldw	r2,0(r3)
 1001548:	20800015 	stw	r2,0(r4)
 100154c:	18800117 	ldw	r2,4(r3)
 1001550:	20800115 	stw	r2,4(r4)
 1001554:	18800217 	ldw	r2,8(r3)
 1001558:	20800215 	stw	r2,8(r4)
 100155c:	18800317 	ldw	r2,12(r3)
 1001560:	20800315 	stw	r2,12(r4)
 1001564:	18800417 	ldw	r2,16(r3)
 1001568:	20800415 	stw	r2,16(r4)
 100156c:	18800517 	ldw	r2,20(r3)
 1001570:	20800515 	stw	r2,20(r4)
 1001574:	18800617 	ldw	r2,24(r3)
 1001578:	20800615 	stw	r2,24(r4)
 100157c:	18800717 	ldw	r2,28(r3)
 1001580:	20800715 	stw	r2,28(r4)
 1001584:	18800817 	ldw	r2,32(r3)
 1001588:	20800815 	stw	r2,32(r4)
 100158c:	18800917 	ldw	r2,36(r3)
 1001590:	20800915 	stw	r2,36(r4)
 1001594:	e0bffc17 	ldw	r2,-16(fp)
 1001598:	10800044 	addi	r2,r2,1
 100159c:	e0bffc15 	stw	r2,-16(fp)

	// build upper-case keyset
	kb->keyset_uppercase = malloc(sizeof(Key) * ALPHA_SIZE);
	j = 0; // reset counter

	for (i = 0; row1_caps[i]; i++) { //QWERTYUIOP
 10015a0:	e0bffd17 	ldw	r2,-12(fp)
 10015a4:	10800044 	addi	r2,r2,1
 10015a8:	e0bffd15 	stw	r2,-12(fp)
 10015ac:	e0fffd17 	ldw	r3,-12(fp)
 10015b0:	008040f4 	movhi	r2,259
 10015b4:	10a45604 	addi	r2,r2,-28328
 10015b8:	10c5883a 	add	r2,r2,r3
 10015bc:	10800003 	ldbu	r2,0(r2)
 10015c0:	10803fcc 	andi	r2,r2,255
 10015c4:	1080201c 	xori	r2,r2,128
 10015c8:	10bfe004 	addi	r2,r2,-128
 10015cc:	1004c03a 	cmpne	r2,r2,zero
 10015d0:	103fb31e 	bne	r2,zero,10014a0 <buildKeyboard+0x418>
				1);
		k->writeChar = row1_caps[i];
		kb->keyset_uppercase[j++] = *k;
	}

	for (i = 0; row2_caps[i]; i++) { //ASDFGHJKL:\"
 10015d4:	e03ffd15 	stw	zero,-12(fp)
 10015d8:	00004306 	br	10016e8 <buildKeyboard+0x660>
		k = malloc(sizeof(Key));
 10015dc:	01000a04 	movi	r4,40
 10015e0:	1014b200 	call	1014b20 <malloc>
 10015e4:	e0bffb15 	stw	r2,-20(fp)
		// shift keys right half a key
		buildKey(90 + 65 * i, 350, 50, 30, BLACK, WHITE, BLACK, row2_caps[i], k,
 10015e8:	e0bffd17 	ldw	r2,-12(fp)
 10015ec:	10801064 	muli	r2,r2,65
 10015f0:	11001684 	addi	r4,r2,90
 10015f4:	e0fffd17 	ldw	r3,-12(fp)
 10015f8:	008040f4 	movhi	r2,259
 10015fc:	10a45904 	addi	r2,r2,-28316
 1001600:	10c5883a 	add	r2,r2,r3
 1001604:	10800003 	ldbu	r2,0(r2)
 1001608:	10803fcc 	andi	r2,r2,255
 100160c:	1080201c 	xori	r2,r2,128
 1001610:	10bfe004 	addi	r2,r2,-128
 1001614:	1007883a 	mov	r3,r2
 1001618:	d8000015 	stw	zero,0(sp)
 100161c:	00800044 	movi	r2,1
 1001620:	d8800115 	stw	r2,4(sp)
 1001624:	d8000215 	stw	zero,8(sp)
 1001628:	d8c00315 	stw	r3,12(sp)
 100162c:	e0bffb17 	ldw	r2,-20(fp)
 1001630:	d8800415 	stw	r2,16(sp)
 1001634:	00800044 	movi	r2,1
 1001638:	d8800515 	stw	r2,20(sp)
 100163c:	01405784 	movi	r5,350
 1001640:	01800c84 	movi	r6,50
 1001644:	01c00784 	movi	r7,30
 1001648:	1000f900 	call	1000f90 <buildKey>
				1);
		k->writeChar = row2_caps[i];
 100164c:	e0fffd17 	ldw	r3,-12(fp)
 1001650:	008040f4 	movhi	r2,259
 1001654:	10a45904 	addi	r2,r2,-28316
 1001658:	10c5883a 	add	r2,r2,r3
 100165c:	10c00003 	ldbu	r3,0(r2)
 1001660:	e0bffb17 	ldw	r2,-20(fp)
 1001664:	10c00905 	stb	r3,36(r2)
		kb->keyset_uppercase[j++] = *k;
 1001668:	e0bffe17 	ldw	r2,-8(fp)
 100166c:	10c04a17 	ldw	r3,296(r2)
 1001670:	e0bffc17 	ldw	r2,-16(fp)
 1001674:	10800a24 	muli	r2,r2,40
 1001678:	1889883a 	add	r4,r3,r2
 100167c:	e0fffb17 	ldw	r3,-20(fp)
 1001680:	18800017 	ldw	r2,0(r3)
 1001684:	20800015 	stw	r2,0(r4)
 1001688:	18800117 	ldw	r2,4(r3)
 100168c:	20800115 	stw	r2,4(r4)
 1001690:	18800217 	ldw	r2,8(r3)
 1001694:	20800215 	stw	r2,8(r4)
 1001698:	18800317 	ldw	r2,12(r3)
 100169c:	20800315 	stw	r2,12(r4)
 10016a0:	18800417 	ldw	r2,16(r3)
 10016a4:	20800415 	stw	r2,16(r4)
 10016a8:	18800517 	ldw	r2,20(r3)
 10016ac:	20800515 	stw	r2,20(r4)
 10016b0:	18800617 	ldw	r2,24(r3)
 10016b4:	20800615 	stw	r2,24(r4)
 10016b8:	18800717 	ldw	r2,28(r3)
 10016bc:	20800715 	stw	r2,28(r4)
 10016c0:	18800817 	ldw	r2,32(r3)
 10016c4:	20800815 	stw	r2,32(r4)
 10016c8:	18800917 	ldw	r2,36(r3)
 10016cc:	20800915 	stw	r2,36(r4)
 10016d0:	e0bffc17 	ldw	r2,-16(fp)
 10016d4:	10800044 	addi	r2,r2,1
 10016d8:	e0bffc15 	stw	r2,-16(fp)
				1);
		k->writeChar = row1_caps[i];
		kb->keyset_uppercase[j++] = *k;
	}

	for (i = 0; row2_caps[i]; i++) { //ASDFGHJKL:\"
 10016dc:	e0bffd17 	ldw	r2,-12(fp)
 10016e0:	10800044 	addi	r2,r2,1
 10016e4:	e0bffd15 	stw	r2,-12(fp)
 10016e8:	e0fffd17 	ldw	r3,-12(fp)
 10016ec:	008040f4 	movhi	r2,259
 10016f0:	10a45904 	addi	r2,r2,-28316
 10016f4:	10c5883a 	add	r2,r2,r3
 10016f8:	10800003 	ldbu	r2,0(r2)
 10016fc:	10803fcc 	andi	r2,r2,255
 1001700:	1080201c 	xori	r2,r2,128
 1001704:	10bfe004 	addi	r2,r2,-128
 1001708:	1004c03a 	cmpne	r2,r2,zero
 100170c:	103fb31e 	bne	r2,zero,10015dc <buildKeyboard+0x554>
		k->writeChar = row2_caps[i];
		kb->keyset_uppercase[j++] = *k;

	}

	for (i = 0; row3_caps[i]; i++) { //ZXCVBNM!?
 1001710:	e03ffd15 	stw	zero,-12(fp)
 1001714:	00004306 	br	1001824 <buildKeyboard+0x79c>
		k = malloc(sizeof(Key));
 1001718:	01000a04 	movi	r4,40
 100171c:	1014b200 	call	1014b20 <malloc>
 1001720:	e0bffb15 	stw	r2,-20(fp)
		// shift keys right half a key
		buildKey(95 + 65 * i, 400, 50, 30, BLACK, WHITE, BLACK, row3_caps[i], k,
 1001724:	e0bffd17 	ldw	r2,-12(fp)
 1001728:	10801064 	muli	r2,r2,65
 100172c:	110017c4 	addi	r4,r2,95
 1001730:	e0fffd17 	ldw	r3,-12(fp)
 1001734:	008040f4 	movhi	r2,259
 1001738:	10a45c04 	addi	r2,r2,-28304
 100173c:	10c5883a 	add	r2,r2,r3
 1001740:	10800003 	ldbu	r2,0(r2)
 1001744:	10803fcc 	andi	r2,r2,255
 1001748:	1080201c 	xori	r2,r2,128
 100174c:	10bfe004 	addi	r2,r2,-128
 1001750:	1007883a 	mov	r3,r2
 1001754:	d8000015 	stw	zero,0(sp)
 1001758:	00800044 	movi	r2,1
 100175c:	d8800115 	stw	r2,4(sp)
 1001760:	d8000215 	stw	zero,8(sp)
 1001764:	d8c00315 	stw	r3,12(sp)
 1001768:	e0bffb17 	ldw	r2,-20(fp)
 100176c:	d8800415 	stw	r2,16(sp)
 1001770:	00800044 	movi	r2,1
 1001774:	d8800515 	stw	r2,20(sp)
 1001778:	01406404 	movi	r5,400
 100177c:	01800c84 	movi	r6,50
 1001780:	01c00784 	movi	r7,30
 1001784:	1000f900 	call	1000f90 <buildKey>
				1);
		k->writeChar = row3_caps[i];
 1001788:	e0fffd17 	ldw	r3,-12(fp)
 100178c:	008040f4 	movhi	r2,259
 1001790:	10a45c04 	addi	r2,r2,-28304
 1001794:	10c5883a 	add	r2,r2,r3
 1001798:	10c00003 	ldbu	r3,0(r2)
 100179c:	e0bffb17 	ldw	r2,-20(fp)
 10017a0:	10c00905 	stb	r3,36(r2)
		kb->keyset_uppercase[j++] = *k;
 10017a4:	e0bffe17 	ldw	r2,-8(fp)
 10017a8:	10c04a17 	ldw	r3,296(r2)
 10017ac:	e0bffc17 	ldw	r2,-16(fp)
 10017b0:	10800a24 	muli	r2,r2,40
 10017b4:	1889883a 	add	r4,r3,r2
 10017b8:	e0fffb17 	ldw	r3,-20(fp)
 10017bc:	18800017 	ldw	r2,0(r3)
 10017c0:	20800015 	stw	r2,0(r4)
 10017c4:	18800117 	ldw	r2,4(r3)
 10017c8:	20800115 	stw	r2,4(r4)
 10017cc:	18800217 	ldw	r2,8(r3)
 10017d0:	20800215 	stw	r2,8(r4)
 10017d4:	18800317 	ldw	r2,12(r3)
 10017d8:	20800315 	stw	r2,12(r4)
 10017dc:	18800417 	ldw	r2,16(r3)
 10017e0:	20800415 	stw	r2,16(r4)
 10017e4:	18800517 	ldw	r2,20(r3)
 10017e8:	20800515 	stw	r2,20(r4)
 10017ec:	18800617 	ldw	r2,24(r3)
 10017f0:	20800615 	stw	r2,24(r4)
 10017f4:	18800717 	ldw	r2,28(r3)
 10017f8:	20800715 	stw	r2,28(r4)
 10017fc:	18800817 	ldw	r2,32(r3)
 1001800:	20800815 	stw	r2,32(r4)
 1001804:	18800917 	ldw	r2,36(r3)
 1001808:	20800915 	stw	r2,36(r4)
 100180c:	e0bffc17 	ldw	r2,-16(fp)
 1001810:	10800044 	addi	r2,r2,1
 1001814:	e0bffc15 	stw	r2,-16(fp)
		k->writeChar = row2_caps[i];
		kb->keyset_uppercase[j++] = *k;

	}

	for (i = 0; row3_caps[i]; i++) { //ZXCVBNM!?
 1001818:	e0bffd17 	ldw	r2,-12(fp)
 100181c:	10800044 	addi	r2,r2,1
 1001820:	e0bffd15 	stw	r2,-12(fp)
 1001824:	e0fffd17 	ldw	r3,-12(fp)
 1001828:	008040f4 	movhi	r2,259
 100182c:	10a45c04 	addi	r2,r2,-28304
 1001830:	10c5883a 	add	r2,r2,r3
 1001834:	10800003 	ldbu	r2,0(r2)
 1001838:	10803fcc 	andi	r2,r2,255
 100183c:	1080201c 	xori	r2,r2,128
 1001840:	10bfe004 	addi	r2,r2,-128
 1001844:	1004c03a 	cmpne	r2,r2,zero
 1001848:	103fb31e 	bne	r2,zero,1001718 <buildKeyboard+0x690>
		buildKey(95 + 65 * i, 400, 50, 30, BLACK, WHITE, BLACK, row3_caps[i], k,
				1);
		k->writeChar = row3_caps[i];
		kb->keyset_uppercase[j++] = *k;
	}
	kb->numberset1 = malloc(sizeof(Key) * NUM_SIZE);
 100184c:	01008204 	movi	r4,520
 1001850:	1014b200 	call	1014b20 <malloc>
 1001854:	1007883a 	mov	r3,r2
 1001858:	e0bffe17 	ldw	r2,-8(fp)
 100185c:	10c04b15 	stw	r3,300(r2)
	j = 0;
 1001860:	e03ffc15 	stw	zero,-16(fp)

	for (i = 0; i < 3; i++) {
 1001864:	e03ffd15 	stw	zero,-12(fp)
 1001868:	00004306 	br	1001978 <buildKeyboard+0x8f0>

		k = malloc(sizeof(Key));
 100186c:	01000a04 	movi	r4,40
 1001870:	1014b200 	call	1014b20 <malloc>
 1001874:	e0bffb15 	stw	r2,-20(fp)
		buildKey(300 + 100 * i, 280, 100, 50, BLACK, WHITE, BLACK, numbers[j],
 1001878:	e0bffd17 	ldw	r2,-12(fp)
 100187c:	10801924 	muli	r2,r2,100
 1001880:	11004b04 	addi	r4,r2,300
 1001884:	e0fffc17 	ldw	r3,-16(fp)
 1001888:	008040f4 	movhi	r2,259
 100188c:	10a45f04 	addi	r2,r2,-28292
 1001890:	10c5883a 	add	r2,r2,r3
 1001894:	10800003 	ldbu	r2,0(r2)
 1001898:	10803fcc 	andi	r2,r2,255
 100189c:	1080201c 	xori	r2,r2,128
 10018a0:	10bfe004 	addi	r2,r2,-128
 10018a4:	1007883a 	mov	r3,r2
 10018a8:	d8000015 	stw	zero,0(sp)
 10018ac:	00800044 	movi	r2,1
 10018b0:	d8800115 	stw	r2,4(sp)
 10018b4:	d8000215 	stw	zero,8(sp)
 10018b8:	d8c00315 	stw	r3,12(sp)
 10018bc:	e0bffb17 	ldw	r2,-20(fp)
 10018c0:	d8800415 	stw	r2,16(sp)
 10018c4:	00800044 	movi	r2,1
 10018c8:	d8800515 	stw	r2,20(sp)
 10018cc:	01404604 	movi	r5,280
 10018d0:	01801904 	movi	r6,100
 10018d4:	01c00c84 	movi	r7,50
 10018d8:	1000f900 	call	1000f90 <buildKey>
				k, 1);
		k->writeChar = (char) numbers[j];
 10018dc:	e0fffc17 	ldw	r3,-16(fp)
 10018e0:	008040f4 	movhi	r2,259
 10018e4:	10a45f04 	addi	r2,r2,-28292
 10018e8:	10c5883a 	add	r2,r2,r3
 10018ec:	10c00003 	ldbu	r3,0(r2)
 10018f0:	e0bffb17 	ldw	r2,-20(fp)
 10018f4:	10c00905 	stb	r3,36(r2)
		kb->numberset1[j++] = *k;
 10018f8:	e0bffe17 	ldw	r2,-8(fp)
 10018fc:	10c04b17 	ldw	r3,300(r2)
 1001900:	e0bffc17 	ldw	r2,-16(fp)
 1001904:	10800a24 	muli	r2,r2,40
 1001908:	1889883a 	add	r4,r3,r2
 100190c:	e0fffb17 	ldw	r3,-20(fp)
 1001910:	18800017 	ldw	r2,0(r3)
 1001914:	20800015 	stw	r2,0(r4)
 1001918:	18800117 	ldw	r2,4(r3)
 100191c:	20800115 	stw	r2,4(r4)
 1001920:	18800217 	ldw	r2,8(r3)
 1001924:	20800215 	stw	r2,8(r4)
 1001928:	18800317 	ldw	r2,12(r3)
 100192c:	20800315 	stw	r2,12(r4)
 1001930:	18800417 	ldw	r2,16(r3)
 1001934:	20800415 	stw	r2,16(r4)
 1001938:	18800517 	ldw	r2,20(r3)
 100193c:	20800515 	stw	r2,20(r4)
 1001940:	18800617 	ldw	r2,24(r3)
 1001944:	20800615 	stw	r2,24(r4)
 1001948:	18800717 	ldw	r2,28(r3)
 100194c:	20800715 	stw	r2,28(r4)
 1001950:	18800817 	ldw	r2,32(r3)
 1001954:	20800815 	stw	r2,32(r4)
 1001958:	18800917 	ldw	r2,36(r3)
 100195c:	20800915 	stw	r2,36(r4)
 1001960:	e0bffc17 	ldw	r2,-16(fp)
 1001964:	10800044 	addi	r2,r2,1
 1001968:	e0bffc15 	stw	r2,-16(fp)
		kb->keyset_uppercase[j++] = *k;
	}
	kb->numberset1 = malloc(sizeof(Key) * NUM_SIZE);
	j = 0;

	for (i = 0; i < 3; i++) {
 100196c:	e0bffd17 	ldw	r2,-12(fp)
 1001970:	10800044 	addi	r2,r2,1
 1001974:	e0bffd15 	stw	r2,-12(fp)
 1001978:	e0bffd17 	ldw	r2,-12(fp)
 100197c:	108000d0 	cmplti	r2,r2,3
 1001980:	103fba1e 	bne	r2,zero,100186c <buildKeyboard+0x7e4>
		k->writeChar = (char) numbers[j];
		kb->numberset1[j++] = *k;

	}

	for (i = 0; i < 3; i++) {
 1001984:	e03ffd15 	stw	zero,-12(fp)
 1001988:	00004306 	br	1001a98 <buildKeyboard+0xa10>

		k = malloc(sizeof(Key));
 100198c:	01000a04 	movi	r4,40
 1001990:	1014b200 	call	1014b20 <malloc>
 1001994:	e0bffb15 	stw	r2,-20(fp)
		buildKey(300 + 100 * i, 340, 100, 50, BLACK, WHITE, BLACK, numbers[j],
 1001998:	e0bffd17 	ldw	r2,-12(fp)
 100199c:	10801924 	muli	r2,r2,100
 10019a0:	11004b04 	addi	r4,r2,300
 10019a4:	e0fffc17 	ldw	r3,-16(fp)
 10019a8:	008040f4 	movhi	r2,259
 10019ac:	10a45f04 	addi	r2,r2,-28292
 10019b0:	10c5883a 	add	r2,r2,r3
 10019b4:	10800003 	ldbu	r2,0(r2)
 10019b8:	10803fcc 	andi	r2,r2,255
 10019bc:	1080201c 	xori	r2,r2,128
 10019c0:	10bfe004 	addi	r2,r2,-128
 10019c4:	1007883a 	mov	r3,r2
 10019c8:	d8000015 	stw	zero,0(sp)
 10019cc:	00800044 	movi	r2,1
 10019d0:	d8800115 	stw	r2,4(sp)
 10019d4:	d8000215 	stw	zero,8(sp)
 10019d8:	d8c00315 	stw	r3,12(sp)
 10019dc:	e0bffb17 	ldw	r2,-20(fp)
 10019e0:	d8800415 	stw	r2,16(sp)
 10019e4:	00800044 	movi	r2,1
 10019e8:	d8800515 	stw	r2,20(sp)
 10019ec:	01405504 	movi	r5,340
 10019f0:	01801904 	movi	r6,100
 10019f4:	01c00c84 	movi	r7,50
 10019f8:	1000f900 	call	1000f90 <buildKey>
				k, 1);
		k->writeChar = numbers[j];
 10019fc:	e0fffc17 	ldw	r3,-16(fp)
 1001a00:	008040f4 	movhi	r2,259
 1001a04:	10a45f04 	addi	r2,r2,-28292
 1001a08:	10c5883a 	add	r2,r2,r3
 1001a0c:	10c00003 	ldbu	r3,0(r2)
 1001a10:	e0bffb17 	ldw	r2,-20(fp)
 1001a14:	10c00905 	stb	r3,36(r2)
		kb->numberset1[j++] = *k;
 1001a18:	e0bffe17 	ldw	r2,-8(fp)
 1001a1c:	10c04b17 	ldw	r3,300(r2)
 1001a20:	e0bffc17 	ldw	r2,-16(fp)
 1001a24:	10800a24 	muli	r2,r2,40
 1001a28:	1889883a 	add	r4,r3,r2
 1001a2c:	e0fffb17 	ldw	r3,-20(fp)
 1001a30:	18800017 	ldw	r2,0(r3)
 1001a34:	20800015 	stw	r2,0(r4)
 1001a38:	18800117 	ldw	r2,4(r3)
 1001a3c:	20800115 	stw	r2,4(r4)
 1001a40:	18800217 	ldw	r2,8(r3)
 1001a44:	20800215 	stw	r2,8(r4)
 1001a48:	18800317 	ldw	r2,12(r3)
 1001a4c:	20800315 	stw	r2,12(r4)
 1001a50:	18800417 	ldw	r2,16(r3)
 1001a54:	20800415 	stw	r2,16(r4)
 1001a58:	18800517 	ldw	r2,20(r3)
 1001a5c:	20800515 	stw	r2,20(r4)
 1001a60:	18800617 	ldw	r2,24(r3)
 1001a64:	20800615 	stw	r2,24(r4)
 1001a68:	18800717 	ldw	r2,28(r3)
 1001a6c:	20800715 	stw	r2,28(r4)
 1001a70:	18800817 	ldw	r2,32(r3)
 1001a74:	20800815 	stw	r2,32(r4)
 1001a78:	18800917 	ldw	r2,36(r3)
 1001a7c:	20800915 	stw	r2,36(r4)
 1001a80:	e0bffc17 	ldw	r2,-16(fp)
 1001a84:	10800044 	addi	r2,r2,1
 1001a88:	e0bffc15 	stw	r2,-16(fp)
		k->writeChar = (char) numbers[j];
		kb->numberset1[j++] = *k;

	}

	for (i = 0; i < 3; i++) {
 1001a8c:	e0bffd17 	ldw	r2,-12(fp)
 1001a90:	10800044 	addi	r2,r2,1
 1001a94:	e0bffd15 	stw	r2,-12(fp)
 1001a98:	e0bffd17 	ldw	r2,-12(fp)
 1001a9c:	108000d0 	cmplti	r2,r2,3
 1001aa0:	103fba1e 	bne	r2,zero,100198c <buildKeyboard+0x904>
		k->writeChar = numbers[j];
		kb->numberset1[j++] = *k;

	}

	for (i = 0; i < 3; i++) {
 1001aa4:	e03ffd15 	stw	zero,-12(fp)
 1001aa8:	00004306 	br	1001bb8 <buildKeyboard+0xb30>

		k = malloc(sizeof(Key));
 1001aac:	01000a04 	movi	r4,40
 1001ab0:	1014b200 	call	1014b20 <malloc>
 1001ab4:	e0bffb15 	stw	r2,-20(fp)
		buildKey(300 + 100 * i, 400, 100, 50, BLACK, WHITE, BLACK, numbers[j],
 1001ab8:	e0bffd17 	ldw	r2,-12(fp)
 1001abc:	10801924 	muli	r2,r2,100
 1001ac0:	11004b04 	addi	r4,r2,300
 1001ac4:	e0fffc17 	ldw	r3,-16(fp)
 1001ac8:	008040f4 	movhi	r2,259
 1001acc:	10a45f04 	addi	r2,r2,-28292
 1001ad0:	10c5883a 	add	r2,r2,r3
 1001ad4:	10800003 	ldbu	r2,0(r2)
 1001ad8:	10803fcc 	andi	r2,r2,255
 1001adc:	1080201c 	xori	r2,r2,128
 1001ae0:	10bfe004 	addi	r2,r2,-128
 1001ae4:	1007883a 	mov	r3,r2
 1001ae8:	d8000015 	stw	zero,0(sp)
 1001aec:	00800044 	movi	r2,1
 1001af0:	d8800115 	stw	r2,4(sp)
 1001af4:	d8000215 	stw	zero,8(sp)
 1001af8:	d8c00315 	stw	r3,12(sp)
 1001afc:	e0bffb17 	ldw	r2,-20(fp)
 1001b00:	d8800415 	stw	r2,16(sp)
 1001b04:	00800044 	movi	r2,1
 1001b08:	d8800515 	stw	r2,20(sp)
 1001b0c:	01406404 	movi	r5,400
 1001b10:	01801904 	movi	r6,100
 1001b14:	01c00c84 	movi	r7,50
 1001b18:	1000f900 	call	1000f90 <buildKey>
				k, 1);
		k->writeChar = numbers[j];
 1001b1c:	e0fffc17 	ldw	r3,-16(fp)
 1001b20:	008040f4 	movhi	r2,259
 1001b24:	10a45f04 	addi	r2,r2,-28292
 1001b28:	10c5883a 	add	r2,r2,r3
 1001b2c:	10c00003 	ldbu	r3,0(r2)
 1001b30:	e0bffb17 	ldw	r2,-20(fp)
 1001b34:	10c00905 	stb	r3,36(r2)
		kb->numberset1[j++] = *k;
 1001b38:	e0bffe17 	ldw	r2,-8(fp)
 1001b3c:	10c04b17 	ldw	r3,300(r2)
 1001b40:	e0bffc17 	ldw	r2,-16(fp)
 1001b44:	10800a24 	muli	r2,r2,40
 1001b48:	1889883a 	add	r4,r3,r2
 1001b4c:	e0fffb17 	ldw	r3,-20(fp)
 1001b50:	18800017 	ldw	r2,0(r3)
 1001b54:	20800015 	stw	r2,0(r4)
 1001b58:	18800117 	ldw	r2,4(r3)
 1001b5c:	20800115 	stw	r2,4(r4)
 1001b60:	18800217 	ldw	r2,8(r3)
 1001b64:	20800215 	stw	r2,8(r4)
 1001b68:	18800317 	ldw	r2,12(r3)
 1001b6c:	20800315 	stw	r2,12(r4)
 1001b70:	18800417 	ldw	r2,16(r3)
 1001b74:	20800415 	stw	r2,16(r4)
 1001b78:	18800517 	ldw	r2,20(r3)
 1001b7c:	20800515 	stw	r2,20(r4)
 1001b80:	18800617 	ldw	r2,24(r3)
 1001b84:	20800615 	stw	r2,24(r4)
 1001b88:	18800717 	ldw	r2,28(r3)
 1001b8c:	20800715 	stw	r2,28(r4)
 1001b90:	18800817 	ldw	r2,32(r3)
 1001b94:	20800815 	stw	r2,32(r4)
 1001b98:	18800917 	ldw	r2,36(r3)
 1001b9c:	20800915 	stw	r2,36(r4)
 1001ba0:	e0bffc17 	ldw	r2,-16(fp)
 1001ba4:	10800044 	addi	r2,r2,1
 1001ba8:	e0bffc15 	stw	r2,-16(fp)
		k->writeChar = numbers[j];
		kb->numberset1[j++] = *k;

	}

	for (i = 0; i < 3; i++) {
 1001bac:	e0bffd17 	ldw	r2,-12(fp)
 1001bb0:	10800044 	addi	r2,r2,1
 1001bb4:	e0bffd15 	stw	r2,-12(fp)
 1001bb8:	e0bffd17 	ldw	r2,-12(fp)
 1001bbc:	108000d0 	cmplti	r2,r2,3
 1001bc0:	103fba1e 	bne	r2,zero,1001aac <buildKeyboard+0xa24>
		k->writeChar = numbers[j];
		kb->numberset1[j++] = *k;

	}

	k = malloc(sizeof(Key));
 1001bc4:	01000a04 	movi	r4,40
 1001bc8:	1014b200 	call	1014b20 <malloc>
 1001bcc:	e0bffb15 	stw	r2,-20(fp)
	buildKey(400, 455, 100, 50, BLACK, WHITE, BLACK, numbers[j], k, 1);
 1001bd0:	e0fffc17 	ldw	r3,-16(fp)
 1001bd4:	008040f4 	movhi	r2,259
 1001bd8:	10a45f04 	addi	r2,r2,-28292
 1001bdc:	10c5883a 	add	r2,r2,r3
 1001be0:	10800003 	ldbu	r2,0(r2)
 1001be4:	10803fcc 	andi	r2,r2,255
 1001be8:	1080201c 	xori	r2,r2,128
 1001bec:	10bfe004 	addi	r2,r2,-128
 1001bf0:	1007883a 	mov	r3,r2
 1001bf4:	d8000015 	stw	zero,0(sp)
 1001bf8:	00800044 	movi	r2,1
 1001bfc:	d8800115 	stw	r2,4(sp)
 1001c00:	d8000215 	stw	zero,8(sp)
 1001c04:	d8c00315 	stw	r3,12(sp)
 1001c08:	e0bffb17 	ldw	r2,-20(fp)
 1001c0c:	d8800415 	stw	r2,16(sp)
 1001c10:	00800044 	movi	r2,1
 1001c14:	d8800515 	stw	r2,20(sp)
 1001c18:	01006404 	movi	r4,400
 1001c1c:	014071c4 	movi	r5,455
 1001c20:	01801904 	movi	r6,100
 1001c24:	01c00c84 	movi	r7,50
 1001c28:	1000f900 	call	1000f90 <buildKey>
	k->writeChar = numbers[j];
 1001c2c:	e0fffc17 	ldw	r3,-16(fp)
 1001c30:	008040f4 	movhi	r2,259
 1001c34:	10a45f04 	addi	r2,r2,-28292
 1001c38:	10c5883a 	add	r2,r2,r3
 1001c3c:	10c00003 	ldbu	r3,0(r2)
 1001c40:	e0bffb17 	ldw	r2,-20(fp)
 1001c44:	10c00905 	stb	r3,36(r2)
	kb->numberset1[j] = *k;
 1001c48:	e0bffe17 	ldw	r2,-8(fp)
 1001c4c:	10c04b17 	ldw	r3,300(r2)
 1001c50:	e0bffc17 	ldw	r2,-16(fp)
 1001c54:	10800a24 	muli	r2,r2,40
 1001c58:	1889883a 	add	r4,r3,r2
 1001c5c:	e0fffb17 	ldw	r3,-20(fp)
 1001c60:	18800017 	ldw	r2,0(r3)
 1001c64:	20800015 	stw	r2,0(r4)
 1001c68:	18800117 	ldw	r2,4(r3)
 1001c6c:	20800115 	stw	r2,4(r4)
 1001c70:	18800217 	ldw	r2,8(r3)
 1001c74:	20800215 	stw	r2,8(r4)
 1001c78:	18800317 	ldw	r2,12(r3)
 1001c7c:	20800315 	stw	r2,12(r4)
 1001c80:	18800417 	ldw	r2,16(r3)
 1001c84:	20800415 	stw	r2,16(r4)
 1001c88:	18800517 	ldw	r2,20(r3)
 1001c8c:	20800515 	stw	r2,20(r4)
 1001c90:	18800617 	ldw	r2,24(r3)
 1001c94:	20800615 	stw	r2,24(r4)
 1001c98:	18800717 	ldw	r2,28(r3)
 1001c9c:	20800715 	stw	r2,28(r4)
 1001ca0:	18800817 	ldw	r2,32(r3)
 1001ca4:	20800815 	stw	r2,32(r4)
 1001ca8:	18800917 	ldw	r2,36(r3)
 1001cac:	20800915 	stw	r2,36(r4)

	char *spacetext = "SPACE";
 1001cb0:	008040f4 	movhi	r2,259
 1001cb4:	10a46204 	addi	r2,r2,-28280
 1001cb8:	e0bff415 	stw	r2,-48(fp)
	space = malloc(sizeof(Key));
 1001cbc:	01000a04 	movi	r4,40
 1001cc0:	1014b200 	call	1014b20 <malloc>
 1001cc4:	e0bffa15 	stw	r2,-24(fp)
	buildKey(400, 450, 350, 30, BLACK, WHITE, BLACK, spacetext, space, 5);
 1001cc8:	d8000015 	stw	zero,0(sp)
 1001ccc:	00800044 	movi	r2,1
 1001cd0:	d8800115 	stw	r2,4(sp)
 1001cd4:	d8000215 	stw	zero,8(sp)
 1001cd8:	e0bff417 	ldw	r2,-48(fp)
 1001cdc:	d8800315 	stw	r2,12(sp)
 1001ce0:	e0bffa17 	ldw	r2,-24(fp)
 1001ce4:	d8800415 	stw	r2,16(sp)
 1001ce8:	00800144 	movi	r2,5
 1001cec:	d8800515 	stw	r2,20(sp)
 1001cf0:	01006404 	movi	r4,400
 1001cf4:	01407084 	movi	r5,450
 1001cf8:	01805784 	movi	r6,350
 1001cfc:	01c00784 	movi	r7,30
 1001d00:	1000f900 	call	1000f90 <buildKey>
	space->writeChar = ' ';
 1001d04:	e0fffa17 	ldw	r3,-24(fp)
 1001d08:	00800804 	movi	r2,32
 1001d0c:	18800905 	stb	r2,36(r3)
	kb->spacebar = space;
 1001d10:	e0fffe17 	ldw	r3,-8(fp)
 1001d14:	e0bffa17 	ldw	r2,-24(fp)
 1001d18:	18804c15 	stw	r2,304(r3)

	char *num = "123";
 1001d1c:	008040f4 	movhi	r2,259
 1001d20:	10a46404 	addi	r2,r2,-28272
 1001d24:	e0bff315 	stw	r2,-52(fp)
	numbutton = malloc(sizeof(Key));
 1001d28:	01000a04 	movi	r4,40
 1001d2c:	1014b200 	call	1014b20 <malloc>
 1001d30:	e0bff915 	stw	r2,-28(fp)
	buildKey(175, 450, 75, 30, BLACK, WHITE, BLACK, num, numbutton, 3);
 1001d34:	d8000015 	stw	zero,0(sp)
 1001d38:	00800044 	movi	r2,1
 1001d3c:	d8800115 	stw	r2,4(sp)
 1001d40:	d8000215 	stw	zero,8(sp)
 1001d44:	e0bff317 	ldw	r2,-52(fp)
 1001d48:	d8800315 	stw	r2,12(sp)
 1001d4c:	e0bff917 	ldw	r2,-28(fp)
 1001d50:	d8800415 	stw	r2,16(sp)
 1001d54:	008000c4 	movi	r2,3
 1001d58:	d8800515 	stw	r2,20(sp)
 1001d5c:	01002bc4 	movi	r4,175
 1001d60:	01407084 	movi	r5,450
 1001d64:	018012c4 	movi	r6,75
 1001d68:	01c00784 	movi	r7,30
 1001d6c:	1000f900 	call	1000f90 <buildKey>
	kb->numbers = numbutton;
 1001d70:	e0fffe17 	ldw	r3,-8(fp)
 1001d74:	e0bff917 	ldw	r2,-28(fp)
 1001d78:	18804d15 	stw	r2,308(r3)

	char *delete = "Delete";
 1001d7c:	008040f4 	movhi	r2,259
 1001d80:	10a46504 	addi	r2,r2,-28268
 1001d84:	e0bff215 	stw	r2,-56(fp)
	backspace = malloc(sizeof(Key));
 1001d88:	01000a04 	movi	r4,40
 1001d8c:	1014b200 	call	1014b20 <malloc>
 1001d90:	e0bff715 	stw	r2,-36(fp)
	buildKey(625, 450, 75, 30, BLACK, WHITE, BLACK, delete, backspace, 6);
 1001d94:	d8000015 	stw	zero,0(sp)
 1001d98:	00800044 	movi	r2,1
 1001d9c:	d8800115 	stw	r2,4(sp)
 1001da0:	d8000215 	stw	zero,8(sp)
 1001da4:	e0bff217 	ldw	r2,-56(fp)
 1001da8:	d8800315 	stw	r2,12(sp)
 1001dac:	e0bff717 	ldw	r2,-36(fp)
 1001db0:	d8800415 	stw	r2,16(sp)
 1001db4:	00800184 	movi	r2,6
 1001db8:	d8800515 	stw	r2,20(sp)
 1001dbc:	01009c44 	movi	r4,625
 1001dc0:	01407084 	movi	r5,450
 1001dc4:	018012c4 	movi	r6,75
 1001dc8:	01c00784 	movi	r7,30
 1001dcc:	1000f900 	call	1000f90 <buildKey>
	kb->backspace = backspace;
 1001dd0:	e0fffe17 	ldw	r3,-8(fp)
 1001dd4:	e0bff717 	ldw	r2,-36(fp)
 1001dd8:	18804f15 	stw	r2,316(r3)

	char *capitals = "ABC";
 1001ddc:	008040f4 	movhi	r2,259
 1001de0:	10a46704 	addi	r2,r2,-28260
 1001de4:	e0bff115 	stw	r2,-60(fp)
	caps = malloc(sizeof(Key));
 1001de8:	01000a04 	movi	r4,40
 1001dec:	1014b200 	call	1014b20 <malloc>
 1001df0:	e0bff815 	stw	r2,-32(fp)
	buildKey(90, 450, 75, 30, BLACK, WHITE, BLACK, capitals, caps, 3);
 1001df4:	d8000015 	stw	zero,0(sp)
 1001df8:	00800044 	movi	r2,1
 1001dfc:	d8800115 	stw	r2,4(sp)
 1001e00:	d8000215 	stw	zero,8(sp)
 1001e04:	e0bff117 	ldw	r2,-60(fp)
 1001e08:	d8800315 	stw	r2,12(sp)
 1001e0c:	e0bff817 	ldw	r2,-32(fp)
 1001e10:	d8800415 	stw	r2,16(sp)
 1001e14:	008000c4 	movi	r2,3
 1001e18:	d8800515 	stw	r2,20(sp)
 1001e1c:	01001684 	movi	r4,90
 1001e20:	01407084 	movi	r5,450
 1001e24:	018012c4 	movi	r6,75
 1001e28:	01c00784 	movi	r7,30
 1001e2c:	1000f900 	call	1000f90 <buildKey>
	kb->caps = caps;
 1001e30:	e0fffe17 	ldw	r3,-8(fp)
 1001e34:	e0bff817 	ldw	r2,-32(fp)
 1001e38:	18804e15 	stw	r2,312(r3)

	char *lowercase = "abc";
 1001e3c:	008040f4 	movhi	r2,259
 1001e40:	10a46804 	addi	r2,r2,-28256
 1001e44:	e0bff015 	stw	r2,-64(fp)
	lower = malloc(sizeof(Key));
 1001e48:	01000a04 	movi	r4,40
 1001e4c:	1014b200 	call	1014b20 <malloc>
 1001e50:	e0bff615 	stw	r2,-40(fp)
	buildKey(90, 450, 75, 30, BLACK, WHITE, BLACK, lowercase, lower, 3);
 1001e54:	d8000015 	stw	zero,0(sp)
 1001e58:	00800044 	movi	r2,1
 1001e5c:	d8800115 	stw	r2,4(sp)
 1001e60:	d8000215 	stw	zero,8(sp)
 1001e64:	e0bff017 	ldw	r2,-64(fp)
 1001e68:	d8800315 	stw	r2,12(sp)
 1001e6c:	e0bff617 	ldw	r2,-40(fp)
 1001e70:	d8800415 	stw	r2,16(sp)
 1001e74:	008000c4 	movi	r2,3
 1001e78:	d8800515 	stw	r2,20(sp)
 1001e7c:	01001684 	movi	r4,90
 1001e80:	01407084 	movi	r5,450
 1001e84:	018012c4 	movi	r6,75
 1001e88:	01c00784 	movi	r7,30
 1001e8c:	1000f900 	call	1000f90 <buildKey>

	char *done = "Done";
 1001e90:	008040f4 	movhi	r2,259
 1001e94:	10a46904 	addi	r2,r2,-28252
 1001e98:	e0bfef15 	stw	r2,-68(fp)
	donebutton = malloc(sizeof(Key));
 1001e9c:	01000a04 	movi	r4,40
 1001ea0:	1014b200 	call	1014b20 <malloc>
 1001ea4:	e0bff515 	stw	r2,-44(fp)
	buildKey(715, 450, 75, 30, BLACK, WHITE, BLACK, done, donebutton, 4);
 1001ea8:	d8000015 	stw	zero,0(sp)
 1001eac:	00800044 	movi	r2,1
 1001eb0:	d8800115 	stw	r2,4(sp)
 1001eb4:	d8000215 	stw	zero,8(sp)
 1001eb8:	e0bfef17 	ldw	r2,-68(fp)
 1001ebc:	d8800315 	stw	r2,12(sp)
 1001ec0:	e0bff517 	ldw	r2,-44(fp)
 1001ec4:	d8800415 	stw	r2,16(sp)
 1001ec8:	00800104 	movi	r2,4
 1001ecc:	d8800515 	stw	r2,20(sp)
 1001ed0:	0100b2c4 	movi	r4,715
 1001ed4:	01407084 	movi	r5,450
 1001ed8:	018012c4 	movi	r6,75
 1001edc:	01c00784 	movi	r7,30
 1001ee0:	1000f900 	call	1000f90 <buildKey>

	kb->numberset1[10] = *backspace;
 1001ee4:	e0bffe17 	ldw	r2,-8(fp)
 1001ee8:	10804b17 	ldw	r2,300(r2)
 1001eec:	11006404 	addi	r4,r2,400
 1001ef0:	e0fff717 	ldw	r3,-36(fp)
 1001ef4:	18800017 	ldw	r2,0(r3)
 1001ef8:	20800015 	stw	r2,0(r4)
 1001efc:	18800117 	ldw	r2,4(r3)
 1001f00:	20800115 	stw	r2,4(r4)
 1001f04:	18800217 	ldw	r2,8(r3)
 1001f08:	20800215 	stw	r2,8(r4)
 1001f0c:	18800317 	ldw	r2,12(r3)
 1001f10:	20800315 	stw	r2,12(r4)
 1001f14:	18800417 	ldw	r2,16(r3)
 1001f18:	20800415 	stw	r2,16(r4)
 1001f1c:	18800517 	ldw	r2,20(r3)
 1001f20:	20800515 	stw	r2,20(r4)
 1001f24:	18800617 	ldw	r2,24(r3)
 1001f28:	20800615 	stw	r2,24(r4)
 1001f2c:	18800717 	ldw	r2,28(r3)
 1001f30:	20800715 	stw	r2,28(r4)
 1001f34:	18800817 	ldw	r2,32(r3)
 1001f38:	20800815 	stw	r2,32(r4)
 1001f3c:	18800917 	ldw	r2,36(r3)
 1001f40:	20800915 	stw	r2,36(r4)
	kb->numberset1[11] = *lower;
 1001f44:	e0bffe17 	ldw	r2,-8(fp)
 1001f48:	10804b17 	ldw	r2,300(r2)
 1001f4c:	11006e04 	addi	r4,r2,440
 1001f50:	e0fff617 	ldw	r3,-40(fp)
 1001f54:	18800017 	ldw	r2,0(r3)
 1001f58:	20800015 	stw	r2,0(r4)
 1001f5c:	18800117 	ldw	r2,4(r3)
 1001f60:	20800115 	stw	r2,4(r4)
 1001f64:	18800217 	ldw	r2,8(r3)
 1001f68:	20800215 	stw	r2,8(r4)
 1001f6c:	18800317 	ldw	r2,12(r3)
 1001f70:	20800315 	stw	r2,12(r4)
 1001f74:	18800417 	ldw	r2,16(r3)
 1001f78:	20800415 	stw	r2,16(r4)
 1001f7c:	18800517 	ldw	r2,20(r3)
 1001f80:	20800515 	stw	r2,20(r4)
 1001f84:	18800617 	ldw	r2,24(r3)
 1001f88:	20800615 	stw	r2,24(r4)
 1001f8c:	18800717 	ldw	r2,28(r3)
 1001f90:	20800715 	stw	r2,28(r4)
 1001f94:	18800817 	ldw	r2,32(r3)
 1001f98:	20800815 	stw	r2,32(r4)
 1001f9c:	18800917 	ldw	r2,36(r3)
 1001fa0:	20800915 	stw	r2,36(r4)
	kb->numberset1[12] = *donebutton;
 1001fa4:	e0bffe17 	ldw	r2,-8(fp)
 1001fa8:	10804b17 	ldw	r2,300(r2)
 1001fac:	11007804 	addi	r4,r2,480
 1001fb0:	e0fff517 	ldw	r3,-44(fp)
 1001fb4:	18800017 	ldw	r2,0(r3)
 1001fb8:	20800015 	stw	r2,0(r4)
 1001fbc:	18800117 	ldw	r2,4(r3)
 1001fc0:	20800115 	stw	r2,4(r4)
 1001fc4:	18800217 	ldw	r2,8(r3)
 1001fc8:	20800215 	stw	r2,8(r4)
 1001fcc:	18800317 	ldw	r2,12(r3)
 1001fd0:	20800315 	stw	r2,12(r4)
 1001fd4:	18800417 	ldw	r2,16(r3)
 1001fd8:	20800415 	stw	r2,16(r4)
 1001fdc:	18800517 	ldw	r2,20(r3)
 1001fe0:	20800515 	stw	r2,20(r4)
 1001fe4:	18800617 	ldw	r2,24(r3)
 1001fe8:	20800615 	stw	r2,24(r4)
 1001fec:	18800717 	ldw	r2,28(r3)
 1001ff0:	20800715 	stw	r2,28(r4)
 1001ff4:	18800817 	ldw	r2,32(r3)
 1001ff8:	20800815 	stw	r2,32(r4)
 1001ffc:	18800917 	ldw	r2,36(r3)
 1002000:	20800915 	stw	r2,36(r4)

	kb->keyset_lowercase[30] = *space;
 1002004:	e0bffe17 	ldw	r2,-8(fp)
 1002008:	10804917 	ldw	r2,292(r2)
 100200c:	11012c04 	addi	r4,r2,1200
 1002010:	e0fffa17 	ldw	r3,-24(fp)
 1002014:	18800017 	ldw	r2,0(r3)
 1002018:	20800015 	stw	r2,0(r4)
 100201c:	18800117 	ldw	r2,4(r3)
 1002020:	20800115 	stw	r2,4(r4)
 1002024:	18800217 	ldw	r2,8(r3)
 1002028:	20800215 	stw	r2,8(r4)
 100202c:	18800317 	ldw	r2,12(r3)
 1002030:	20800315 	stw	r2,12(r4)
 1002034:	18800417 	ldw	r2,16(r3)
 1002038:	20800415 	stw	r2,16(r4)
 100203c:	18800517 	ldw	r2,20(r3)
 1002040:	20800515 	stw	r2,20(r4)
 1002044:	18800617 	ldw	r2,24(r3)
 1002048:	20800615 	stw	r2,24(r4)
 100204c:	18800717 	ldw	r2,28(r3)
 1002050:	20800715 	stw	r2,28(r4)
 1002054:	18800817 	ldw	r2,32(r3)
 1002058:	20800815 	stw	r2,32(r4)
 100205c:	18800917 	ldw	r2,36(r3)
 1002060:	20800915 	stw	r2,36(r4)
	kb->keyset_uppercase[30] = *space;
 1002064:	e0bffe17 	ldw	r2,-8(fp)
 1002068:	10804a17 	ldw	r2,296(r2)
 100206c:	11012c04 	addi	r4,r2,1200
 1002070:	e0fffa17 	ldw	r3,-24(fp)
 1002074:	18800017 	ldw	r2,0(r3)
 1002078:	20800015 	stw	r2,0(r4)
 100207c:	18800117 	ldw	r2,4(r3)
 1002080:	20800115 	stw	r2,4(r4)
 1002084:	18800217 	ldw	r2,8(r3)
 1002088:	20800215 	stw	r2,8(r4)
 100208c:	18800317 	ldw	r2,12(r3)
 1002090:	20800315 	stw	r2,12(r4)
 1002094:	18800417 	ldw	r2,16(r3)
 1002098:	20800415 	stw	r2,16(r4)
 100209c:	18800517 	ldw	r2,20(r3)
 10020a0:	20800515 	stw	r2,20(r4)
 10020a4:	18800617 	ldw	r2,24(r3)
 10020a8:	20800615 	stw	r2,24(r4)
 10020ac:	18800717 	ldw	r2,28(r3)
 10020b0:	20800715 	stw	r2,28(r4)
 10020b4:	18800817 	ldw	r2,32(r3)
 10020b8:	20800815 	stw	r2,32(r4)
 10020bc:	18800917 	ldw	r2,36(r3)
 10020c0:	20800915 	stw	r2,36(r4)

	kb->keyset_lowercase[31] = *backspace;
 10020c4:	e0bffe17 	ldw	r2,-8(fp)
 10020c8:	10804917 	ldw	r2,292(r2)
 10020cc:	11013604 	addi	r4,r2,1240
 10020d0:	e0fff717 	ldw	r3,-36(fp)
 10020d4:	18800017 	ldw	r2,0(r3)
 10020d8:	20800015 	stw	r2,0(r4)
 10020dc:	18800117 	ldw	r2,4(r3)
 10020e0:	20800115 	stw	r2,4(r4)
 10020e4:	18800217 	ldw	r2,8(r3)
 10020e8:	20800215 	stw	r2,8(r4)
 10020ec:	18800317 	ldw	r2,12(r3)
 10020f0:	20800315 	stw	r2,12(r4)
 10020f4:	18800417 	ldw	r2,16(r3)
 10020f8:	20800415 	stw	r2,16(r4)
 10020fc:	18800517 	ldw	r2,20(r3)
 1002100:	20800515 	stw	r2,20(r4)
 1002104:	18800617 	ldw	r2,24(r3)
 1002108:	20800615 	stw	r2,24(r4)
 100210c:	18800717 	ldw	r2,28(r3)
 1002110:	20800715 	stw	r2,28(r4)
 1002114:	18800817 	ldw	r2,32(r3)
 1002118:	20800815 	stw	r2,32(r4)
 100211c:	18800917 	ldw	r2,36(r3)
 1002120:	20800915 	stw	r2,36(r4)
	kb->keyset_uppercase[31] = *backspace;
 1002124:	e0bffe17 	ldw	r2,-8(fp)
 1002128:	10804a17 	ldw	r2,296(r2)
 100212c:	11013604 	addi	r4,r2,1240
 1002130:	e0fff717 	ldw	r3,-36(fp)
 1002134:	18800017 	ldw	r2,0(r3)
 1002138:	20800015 	stw	r2,0(r4)
 100213c:	18800117 	ldw	r2,4(r3)
 1002140:	20800115 	stw	r2,4(r4)
 1002144:	18800217 	ldw	r2,8(r3)
 1002148:	20800215 	stw	r2,8(r4)
 100214c:	18800317 	ldw	r2,12(r3)
 1002150:	20800315 	stw	r2,12(r4)
 1002154:	18800417 	ldw	r2,16(r3)
 1002158:	20800415 	stw	r2,16(r4)
 100215c:	18800517 	ldw	r2,20(r3)
 1002160:	20800515 	stw	r2,20(r4)
 1002164:	18800617 	ldw	r2,24(r3)
 1002168:	20800615 	stw	r2,24(r4)
 100216c:	18800717 	ldw	r2,28(r3)
 1002170:	20800715 	stw	r2,28(r4)
 1002174:	18800817 	ldw	r2,32(r3)
 1002178:	20800815 	stw	r2,32(r4)
 100217c:	18800917 	ldw	r2,36(r3)
 1002180:	20800915 	stw	r2,36(r4)

	kb->keyset_lowercase[32] = *caps;
 1002184:	e0bffe17 	ldw	r2,-8(fp)
 1002188:	10804917 	ldw	r2,292(r2)
 100218c:	11014004 	addi	r4,r2,1280
 1002190:	e0fff817 	ldw	r3,-32(fp)
 1002194:	18800017 	ldw	r2,0(r3)
 1002198:	20800015 	stw	r2,0(r4)
 100219c:	18800117 	ldw	r2,4(r3)
 10021a0:	20800115 	stw	r2,4(r4)
 10021a4:	18800217 	ldw	r2,8(r3)
 10021a8:	20800215 	stw	r2,8(r4)
 10021ac:	18800317 	ldw	r2,12(r3)
 10021b0:	20800315 	stw	r2,12(r4)
 10021b4:	18800417 	ldw	r2,16(r3)
 10021b8:	20800415 	stw	r2,16(r4)
 10021bc:	18800517 	ldw	r2,20(r3)
 10021c0:	20800515 	stw	r2,20(r4)
 10021c4:	18800617 	ldw	r2,24(r3)
 10021c8:	20800615 	stw	r2,24(r4)
 10021cc:	18800717 	ldw	r2,28(r3)
 10021d0:	20800715 	stw	r2,28(r4)
 10021d4:	18800817 	ldw	r2,32(r3)
 10021d8:	20800815 	stw	r2,32(r4)
 10021dc:	18800917 	ldw	r2,36(r3)
 10021e0:	20800915 	stw	r2,36(r4)
	kb->keyset_uppercase[32] = *lower;
 10021e4:	e0bffe17 	ldw	r2,-8(fp)
 10021e8:	10804a17 	ldw	r2,296(r2)
 10021ec:	11014004 	addi	r4,r2,1280
 10021f0:	e0fff617 	ldw	r3,-40(fp)
 10021f4:	18800017 	ldw	r2,0(r3)
 10021f8:	20800015 	stw	r2,0(r4)
 10021fc:	18800117 	ldw	r2,4(r3)
 1002200:	20800115 	stw	r2,4(r4)
 1002204:	18800217 	ldw	r2,8(r3)
 1002208:	20800215 	stw	r2,8(r4)
 100220c:	18800317 	ldw	r2,12(r3)
 1002210:	20800315 	stw	r2,12(r4)
 1002214:	18800417 	ldw	r2,16(r3)
 1002218:	20800415 	stw	r2,16(r4)
 100221c:	18800517 	ldw	r2,20(r3)
 1002220:	20800515 	stw	r2,20(r4)
 1002224:	18800617 	ldw	r2,24(r3)
 1002228:	20800615 	stw	r2,24(r4)
 100222c:	18800717 	ldw	r2,28(r3)
 1002230:	20800715 	stw	r2,28(r4)
 1002234:	18800817 	ldw	r2,32(r3)
 1002238:	20800815 	stw	r2,32(r4)
 100223c:	18800917 	ldw	r2,36(r3)
 1002240:	20800915 	stw	r2,36(r4)

	kb->keyset_lowercase[33] = *numbutton;
 1002244:	e0bffe17 	ldw	r2,-8(fp)
 1002248:	10804917 	ldw	r2,292(r2)
 100224c:	11014a04 	addi	r4,r2,1320
 1002250:	e0fff917 	ldw	r3,-28(fp)
 1002254:	18800017 	ldw	r2,0(r3)
 1002258:	20800015 	stw	r2,0(r4)
 100225c:	18800117 	ldw	r2,4(r3)
 1002260:	20800115 	stw	r2,4(r4)
 1002264:	18800217 	ldw	r2,8(r3)
 1002268:	20800215 	stw	r2,8(r4)
 100226c:	18800317 	ldw	r2,12(r3)
 1002270:	20800315 	stw	r2,12(r4)
 1002274:	18800417 	ldw	r2,16(r3)
 1002278:	20800415 	stw	r2,16(r4)
 100227c:	18800517 	ldw	r2,20(r3)
 1002280:	20800515 	stw	r2,20(r4)
 1002284:	18800617 	ldw	r2,24(r3)
 1002288:	20800615 	stw	r2,24(r4)
 100228c:	18800717 	ldw	r2,28(r3)
 1002290:	20800715 	stw	r2,28(r4)
 1002294:	18800817 	ldw	r2,32(r3)
 1002298:	20800815 	stw	r2,32(r4)
 100229c:	18800917 	ldw	r2,36(r3)
 10022a0:	20800915 	stw	r2,36(r4)
	kb->keyset_uppercase[33] = *numbutton;
 10022a4:	e0bffe17 	ldw	r2,-8(fp)
 10022a8:	10804a17 	ldw	r2,296(r2)
 10022ac:	11014a04 	addi	r4,r2,1320
 10022b0:	e0fff917 	ldw	r3,-28(fp)
 10022b4:	18800017 	ldw	r2,0(r3)
 10022b8:	20800015 	stw	r2,0(r4)
 10022bc:	18800117 	ldw	r2,4(r3)
 10022c0:	20800115 	stw	r2,4(r4)
 10022c4:	18800217 	ldw	r2,8(r3)
 10022c8:	20800215 	stw	r2,8(r4)
 10022cc:	18800317 	ldw	r2,12(r3)
 10022d0:	20800315 	stw	r2,12(r4)
 10022d4:	18800417 	ldw	r2,16(r3)
 10022d8:	20800415 	stw	r2,16(r4)
 10022dc:	18800517 	ldw	r2,20(r3)
 10022e0:	20800515 	stw	r2,20(r4)
 10022e4:	18800617 	ldw	r2,24(r3)
 10022e8:	20800615 	stw	r2,24(r4)
 10022ec:	18800717 	ldw	r2,28(r3)
 10022f0:	20800715 	stw	r2,28(r4)
 10022f4:	18800817 	ldw	r2,32(r3)
 10022f8:	20800815 	stw	r2,32(r4)
 10022fc:	18800917 	ldw	r2,36(r3)
 1002300:	20800915 	stw	r2,36(r4)

	kb->keyset_lowercase[34] = *donebutton;
 1002304:	e0bffe17 	ldw	r2,-8(fp)
 1002308:	10804917 	ldw	r2,292(r2)
 100230c:	11015404 	addi	r4,r2,1360
 1002310:	e0fff517 	ldw	r3,-44(fp)
 1002314:	18800017 	ldw	r2,0(r3)
 1002318:	20800015 	stw	r2,0(r4)
 100231c:	18800117 	ldw	r2,4(r3)
 1002320:	20800115 	stw	r2,4(r4)
 1002324:	18800217 	ldw	r2,8(r3)
 1002328:	20800215 	stw	r2,8(r4)
 100232c:	18800317 	ldw	r2,12(r3)
 1002330:	20800315 	stw	r2,12(r4)
 1002334:	18800417 	ldw	r2,16(r3)
 1002338:	20800415 	stw	r2,16(r4)
 100233c:	18800517 	ldw	r2,20(r3)
 1002340:	20800515 	stw	r2,20(r4)
 1002344:	18800617 	ldw	r2,24(r3)
 1002348:	20800615 	stw	r2,24(r4)
 100234c:	18800717 	ldw	r2,28(r3)
 1002350:	20800715 	stw	r2,28(r4)
 1002354:	18800817 	ldw	r2,32(r3)
 1002358:	20800815 	stw	r2,32(r4)
 100235c:	18800917 	ldw	r2,36(r3)
 1002360:	20800915 	stw	r2,36(r4)
	kb->keyset_uppercase[34] = *donebutton;
 1002364:	e0bffe17 	ldw	r2,-8(fp)
 1002368:	10804a17 	ldw	r2,296(r2)
 100236c:	11015404 	addi	r4,r2,1360
 1002370:	e0fff517 	ldw	r3,-44(fp)
 1002374:	18800017 	ldw	r2,0(r3)
 1002378:	20800015 	stw	r2,0(r4)
 100237c:	18800117 	ldw	r2,4(r3)
 1002380:	20800115 	stw	r2,4(r4)
 1002384:	18800217 	ldw	r2,8(r3)
 1002388:	20800215 	stw	r2,8(r4)
 100238c:	18800317 	ldw	r2,12(r3)
 1002390:	20800315 	stw	r2,12(r4)
 1002394:	18800417 	ldw	r2,16(r3)
 1002398:	20800415 	stw	r2,16(r4)
 100239c:	18800517 	ldw	r2,20(r3)
 10023a0:	20800515 	stw	r2,20(r4)
 10023a4:	18800617 	ldw	r2,24(r3)
 10023a8:	20800615 	stw	r2,24(r4)
 10023ac:	18800717 	ldw	r2,28(r3)
 10023b0:	20800715 	stw	r2,28(r4)
 10023b4:	18800817 	ldw	r2,32(r3)
 10023b8:	20800815 	stw	r2,32(r4)
 10023bc:	18800917 	ldw	r2,36(r3)
 10023c0:	20800915 	stw	r2,36(r4)

	kb->curInputBoxIndex = -1;
 10023c4:	e0fffe17 	ldw	r3,-8(fp)
 10023c8:	00bfffc4 	movi	r2,-1
 10023cc:	18804715 	stw	r2,284(r3)

	return *kb;
 10023d0:	e17ffe17 	ldw	r5,-8(fp)
 10023d4:	e13fff17 	ldw	r4,-4(fp)
 10023d8:	01805304 	movi	r6,332
 10023dc:	10153140 	call	1015314 <memmove>
}
 10023e0:	e0bfff17 	ldw	r2,-4(fp)
 10023e4:	e037883a 	mov	sp,fp
 10023e8:	dfc00117 	ldw	ra,4(sp)
 10023ec:	df000017 	ldw	fp,0(sp)
 10023f0:	dec00204 	addi	sp,sp,8
 10023f4:	f800283a 	ret

010023f8 <buildObject>:

void buildObject(int x_centre, int y_centre, int object_width,
		int object_height, int outlineColour, int fillColour, int fontColor,
		char *text, Object * o, int numChar) {
 10023f8:	defffb04 	addi	sp,sp,-20
 10023fc:	df000415 	stw	fp,16(sp)
 1002400:	df000404 	addi	fp,sp,16
 1002404:	e13ffc15 	stw	r4,-16(fp)
 1002408:	e17ffd15 	stw	r5,-12(fp)
 100240c:	e1bffe15 	stw	r6,-8(fp)
 1002410:	e1ffff15 	stw	r7,-4(fp)

	o->objectText = text;
 1002414:	e0c00517 	ldw	r3,20(fp)
 1002418:	e0800417 	ldw	r2,16(fp)
 100241c:	18800015 	stw	r2,0(r3)
	o->x1 = x_centre - (object_width / 2);
 1002420:	e0fffe17 	ldw	r3,-8(fp)
 1002424:	1804d7fa 	srli	r2,r3,31
 1002428:	10c5883a 	add	r2,r2,r3
 100242c:	1005d07a 	srai	r2,r2,1
 1002430:	1007883a 	mov	r3,r2
 1002434:	e0bffc17 	ldw	r2,-16(fp)
 1002438:	10c7c83a 	sub	r3,r2,r3
 100243c:	e0800517 	ldw	r2,20(fp)
 1002440:	10c00115 	stw	r3,4(r2)
	o->x2 = x_centre + (object_width / 2);
 1002444:	e0fffe17 	ldw	r3,-8(fp)
 1002448:	1804d7fa 	srli	r2,r3,31
 100244c:	10c5883a 	add	r2,r2,r3
 1002450:	1005d07a 	srai	r2,r2,1
 1002454:	1007883a 	mov	r3,r2
 1002458:	e0bffc17 	ldw	r2,-16(fp)
 100245c:	1887883a 	add	r3,r3,r2
 1002460:	e0800517 	ldw	r2,20(fp)
 1002464:	10c00215 	stw	r3,8(r2)
	o->y1 = y_centre - (object_height / 2);
 1002468:	e0ffff17 	ldw	r3,-4(fp)
 100246c:	1804d7fa 	srli	r2,r3,31
 1002470:	10c5883a 	add	r2,r2,r3
 1002474:	1005d07a 	srai	r2,r2,1
 1002478:	1007883a 	mov	r3,r2
 100247c:	e0bffd17 	ldw	r2,-12(fp)
 1002480:	10c7c83a 	sub	r3,r2,r3
 1002484:	e0800517 	ldw	r2,20(fp)
 1002488:	10c00315 	stw	r3,12(r2)
	o->y2 = y_centre + (object_height / 2);
 100248c:	e0ffff17 	ldw	r3,-4(fp)
 1002490:	1804d7fa 	srli	r2,r3,31
 1002494:	10c5883a 	add	r2,r2,r3
 1002498:	1005d07a 	srai	r2,r2,1
 100249c:	1007883a 	mov	r3,r2
 10024a0:	e0bffd17 	ldw	r2,-12(fp)
 10024a4:	1887883a 	add	r3,r3,r2
 10024a8:	e0800517 	ldw	r2,20(fp)
 10024ac:	10c00415 	stw	r3,16(r2)
	o->outlineColour = outlineColour;
 10024b0:	e0c00517 	ldw	r3,20(fp)
 10024b4:	e0800117 	ldw	r2,4(fp)
 10024b8:	18800515 	stw	r2,20(r3)
	o->fillColour = fillColour;
 10024bc:	e0c00517 	ldw	r3,20(fp)
 10024c0:	e0800217 	ldw	r2,8(fp)
 10024c4:	18800615 	stw	r2,24(r3)
	o->fontColour = fontColor;
 10024c8:	e0c00517 	ldw	r3,20(fp)
 10024cc:	e0800317 	ldw	r2,12(fp)
 10024d0:	18800715 	stw	r2,28(r3)
	o->captionLength = numChar;
 10024d4:	e0c00517 	ldw	r3,20(fp)
 10024d8:	e0800617 	ldw	r2,24(fp)
 10024dc:	18800815 	stw	r2,32(r3)
}
 10024e0:	e037883a 	mov	sp,fp
 10024e4:	df000017 	ldw	fp,0(sp)
 10024e8:	dec00104 	addi	sp,sp,4
 10024ec:	f800283a 	ret

010024f0 <buildHomePage>:
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <string.h>

void buildHomePage(Page *home) {
 10024f0:	defff604 	addi	sp,sp,-40
 10024f4:	dfc00915 	stw	ra,36(sp)
 10024f8:	df000815 	stw	fp,32(sp)
 10024fc:	df000804 	addi	fp,sp,32
 1002500:	e13fff15 	stw	r4,-4(fp)

	// Allocate memory for home screen buttons
	home->buttons = malloc(sizeof(Button) * 6);
 1002504:	01003c04 	movi	r4,240
 1002508:	1014b200 	call	1014b20 <malloc>
 100250c:	1007883a 	mov	r3,r2
 1002510:	e0bfff17 	ldw	r2,-4(fp)
 1002514:	10c00815 	stw	r3,32(r2)
	home->objects = malloc(sizeof(Object) * 3);
 1002518:	01001b04 	movi	r4,108
 100251c:	1014b200 	call	1014b20 <malloc>
 1002520:	1007883a 	mov	r3,r2
 1002524:	e0bfff17 	ldw	r2,-4(fp)
 1002528:	10c00915 	stw	r3,36(r2)
	home->numButtons = 6;
 100252c:	e0ffff17 	ldw	r3,-4(fp)
 1002530:	00800184 	movi	r2,6
 1002534:	18800315 	stw	r2,12(r3)
	home->numObjects = 3;
 1002538:	e0ffff17 	ldw	r3,-4(fp)
 100253c:	008000c4 	movi	r2,3
 1002540:	18800415 	stw	r2,16(r3)
	home->numInputBoxes = 0;
 1002544:	e0bfff17 	ldw	r2,-4(fp)
 1002548:	10000215 	stw	zero,8(r2)
	home->numSDBoxes = 0;
 100254c:	e0bfff17 	ldw	r2,-4(fp)
 1002550:	10000515 	stw	zero,20(r2)
	home->backColour = WHITE;
 1002554:	e0ffff17 	ldw	r3,-4(fp)
 1002558:	00800044 	movi	r2,1
 100255c:	18800015 	stw	r2,0(r3)

	// Destination button
	buildButton(400, 359, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, LIME_GREEN, BLACK,
 1002560:	e0bfff17 	ldw	r2,-4(fp)
 1002564:	10c00817 	ldw	r3,32(r2)
 1002568:	d1270717 	ldw	r4,-25572(gp)
 100256c:	d8000015 	stw	zero,0(sp)
 1002570:	00800c04 	movi	r2,48
 1002574:	d8800115 	stw	r2,4(sp)
 1002578:	d8000215 	stw	zero,8(sp)
 100257c:	008040f4 	movhi	r2,259
 1002580:	10a48004 	addi	r2,r2,-28160
 1002584:	d8800315 	stw	r2,12(sp)
 1002588:	d8c00415 	stw	r3,16(sp)
 100258c:	008002c4 	movi	r2,11
 1002590:	d8800515 	stw	r2,20(sp)
 1002594:	d9000615 	stw	r4,24(sp)
 1002598:	01006404 	movi	r4,400
 100259c:	014059c4 	movi	r5,359
 10025a0:	01802584 	movi	r6,150
 10025a4:	01c00c84 	movi	r7,50
 10025a8:	1000e8c0 	call	1000e8c <buildButton>
			"Destination", &(home->buttons[0]), strlen("Destination"),
			destination);

	// "Where am I?" button
	buildButton(600, 359, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, GOLD, BLACK,
 10025ac:	e0bfff17 	ldw	r2,-4(fp)
 10025b0:	10800817 	ldw	r2,32(r2)
 10025b4:	10c00a04 	addi	r3,r2,40
 10025b8:	d1270517 	ldw	r4,-25580(gp)
 10025bc:	d8000015 	stw	zero,0(sp)
 10025c0:	00800784 	movi	r2,30
 10025c4:	d8800115 	stw	r2,4(sp)
 10025c8:	d8000215 	stw	zero,8(sp)
 10025cc:	008040f4 	movhi	r2,259
 10025d0:	10a48304 	addi	r2,r2,-28148
 10025d4:	d8800315 	stw	r2,12(sp)
 10025d8:	d8c00415 	stw	r3,16(sp)
 10025dc:	008002c4 	movi	r2,11
 10025e0:	d8800515 	stw	r2,20(sp)
 10025e4:	d9000615 	stw	r4,24(sp)
 10025e8:	01009604 	movi	r4,600
 10025ec:	014059c4 	movi	r5,359
 10025f0:	01802584 	movi	r6,150
 10025f4:	01c00c84 	movi	r7,50
 10025f8:	1000e8c0 	call	1000e8c <buildButton>
			"Where am I?", &(home->buttons[1]), strlen("Where am I?"), self);

	//Password
	buildButton(200, 359, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, GOLD, BLACK,
 10025fc:	e0bfff17 	ldw	r2,-4(fp)
 1002600:	10800817 	ldw	r2,32(r2)
 1002604:	10c01404 	addi	r3,r2,80
 1002608:	d1270817 	ldw	r4,-25568(gp)
 100260c:	d8000015 	stw	zero,0(sp)
 1002610:	00800784 	movi	r2,30
 1002614:	d8800115 	stw	r2,4(sp)
 1002618:	d8000215 	stw	zero,8(sp)
 100261c:	008040f4 	movhi	r2,259
 1002620:	10a48604 	addi	r2,r2,-28136
 1002624:	d8800315 	stw	r2,12(sp)
 1002628:	d8c00415 	stw	r3,16(sp)
 100262c:	00800304 	movi	r2,12
 1002630:	d8800515 	stw	r2,20(sp)
 1002634:	d9000615 	stw	r4,24(sp)
 1002638:	01003204 	movi	r4,200
 100263c:	014059c4 	movi	r5,359
 1002640:	01802584 	movi	r6,150
 1002644:	01c00c84 	movi	r7,50
 1002648:	1000e8c0 	call	1000e8c <buildButton>
			"Set Password", &(home->buttons[2]), strlen("Set Password"),
			passwordSetup);

	//map
	buildButton(266, 250, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, LIME_GREEN, BLACK,
 100264c:	e0bfff17 	ldw	r2,-4(fp)
 1002650:	10800817 	ldw	r2,32(r2)
 1002654:	10c01e04 	addi	r3,r2,120
 1002658:	d1270617 	ldw	r4,-25576(gp)
 100265c:	d8000015 	stw	zero,0(sp)
 1002660:	00800c04 	movi	r2,48
 1002664:	d8800115 	stw	r2,4(sp)
 1002668:	d8000215 	stw	zero,8(sp)
 100266c:	008040f4 	movhi	r2,259
 1002670:	10a48a04 	addi	r2,r2,-28120
 1002674:	d8800315 	stw	r2,12(sp)
 1002678:	d8c00415 	stw	r3,16(sp)
 100267c:	008000c4 	movi	r2,3
 1002680:	d8800515 	stw	r2,20(sp)
 1002684:	d9000615 	stw	r4,24(sp)
 1002688:	01004284 	movi	r4,266
 100268c:	01403e84 	movi	r5,250
 1002690:	01802584 	movi	r6,150
 1002694:	01c00c84 	movi	r7,50
 1002698:	1000e8c0 	call	1000e8c <buildButton>
			"Map", &(home->buttons[3]), strlen("Map"), map);

	//loggingSettings
	buildButton(533, 250, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, LIME_GREEN, BLACK,
 100269c:	e0bfff17 	ldw	r2,-4(fp)
 10026a0:	10800817 	ldw	r2,32(r2)
 10026a4:	10c02804 	addi	r3,r2,160
 10026a8:	d1270d17 	ldw	r4,-25548(gp)
 10026ac:	d8000015 	stw	zero,0(sp)
 10026b0:	00800c04 	movi	r2,48
 10026b4:	d8800115 	stw	r2,4(sp)
 10026b8:	d8000215 	stw	zero,8(sp)
 10026bc:	008040f4 	movhi	r2,259
 10026c0:	10a48b04 	addi	r2,r2,-28116
 10026c4:	d8800315 	stw	r2,12(sp)
 10026c8:	d8c00415 	stw	r3,16(sp)
 10026cc:	00800304 	movi	r2,12
 10026d0:	d8800515 	stw	r2,20(sp)
 10026d4:	d9000615 	stw	r4,24(sp)
 10026d8:	01008544 	movi	r4,533
 10026dc:	01403e84 	movi	r5,250
 10026e0:	01802584 	movi	r6,150
 10026e4:	01c00c84 	movi	r7,50
 10026e8:	1000e8c0 	call	1000e8c <buildButton>
			"Log Settings", &(home->buttons[4]), strlen("Log Settings"),
			loggingSettings);

	//addresses
	buildButton(400, 150, 300, 50, BLACK, GOLD, BLACK, "Addresses",
 10026ec:	e0bfff17 	ldw	r2,-4(fp)
 10026f0:	10800817 	ldw	r2,32(r2)
 10026f4:	10c03204 	addi	r3,r2,200
 10026f8:	d1270c17 	ldw	r4,-25552(gp)
 10026fc:	d8000015 	stw	zero,0(sp)
 1002700:	00800784 	movi	r2,30
 1002704:	d8800115 	stw	r2,4(sp)
 1002708:	d8000215 	stw	zero,8(sp)
 100270c:	008040f4 	movhi	r2,259
 1002710:	10a48f04 	addi	r2,r2,-28100
 1002714:	d8800315 	stw	r2,12(sp)
 1002718:	d8c00415 	stw	r3,16(sp)
 100271c:	00800244 	movi	r2,9
 1002720:	d8800515 	stw	r2,20(sp)
 1002724:	d9000615 	stw	r4,24(sp)
 1002728:	01006404 	movi	r4,400
 100272c:	01402584 	movi	r5,150
 1002730:	01804b04 	movi	r6,300
 1002734:	01c00c84 	movi	r7,50
 1002738:	1000e8c0 	call	1000e8c <buildButton>
			&(home->buttons[5]), strlen("Addresses"), addresses);

	// Title Object
	buildObject(100, 100, OBJECT_WIDTH, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 100273c:	e0bfff17 	ldw	r2,-4(fp)
 1002740:	10c00917 	ldw	r3,36(r2)
 1002744:	00800044 	movi	r2,1
 1002748:	d8800015 	stw	r2,0(sp)
 100274c:	00800044 	movi	r2,1
 1002750:	d8800115 	stw	r2,4(sp)
 1002754:	d8000215 	stw	zero,8(sp)
 1002758:	008040f4 	movhi	r2,259
 100275c:	10a49204 	addi	r2,r2,-28088
 1002760:	d8800315 	stw	r2,12(sp)
 1002764:	d8c00415 	stw	r3,16(sp)
 1002768:	008003c4 	movi	r2,15
 100276c:	d8800515 	stw	r2,20(sp)
 1002770:	01001904 	movi	r4,100
 1002774:	01401904 	movi	r5,100
 1002778:	01802584 	movi	r6,150
 100277c:	01c00f04 	movi	r7,60
 1002780:	10023f80 	call	10023f8 <buildObject>
			"SPRINT2 GROUP 3", &(home->objects[0]), strlen("SPRINT2 GROUP 3"));

	// Course Title Object
	buildObject(700, 100, OBJECT_WIDTH, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1002784:	e0bfff17 	ldw	r2,-4(fp)
 1002788:	10800917 	ldw	r2,36(r2)
 100278c:	10c00904 	addi	r3,r2,36
 1002790:	00800044 	movi	r2,1
 1002794:	d8800015 	stw	r2,0(sp)
 1002798:	00800044 	movi	r2,1
 100279c:	d8800115 	stw	r2,4(sp)
 10027a0:	d8000215 	stw	zero,8(sp)
 10027a4:	008040f4 	movhi	r2,259
 10027a8:	10a49604 	addi	r2,r2,-28072
 10027ac:	d8800315 	stw	r2,12(sp)
 10027b0:	d8c00415 	stw	r3,16(sp)
 10027b4:	008001c4 	movi	r2,7
 10027b8:	d8800515 	stw	r2,20(sp)
 10027bc:	0100af04 	movi	r4,700
 10027c0:	01401904 	movi	r5,100
 10027c4:	01802584 	movi	r6,150
 10027c8:	01c00f04 	movi	r7,60
 10027cc:	10023f80 	call	10023f8 <buildObject>
			"CPEN391", &(home->objects[1]), strlen("CPEN391"));

	// Time Object
	buildObject(770, 20, BUTTON_WIDTH, BUTTON_HEIGHT, WHITE, WHITE, BLACK,
 10027d0:	e0bfff17 	ldw	r2,-4(fp)
 10027d4:	10800917 	ldw	r2,36(r2)
 10027d8:	10c01204 	addi	r3,r2,72
 10027dc:	00800044 	movi	r2,1
 10027e0:	d8800015 	stw	r2,0(sp)
 10027e4:	00800044 	movi	r2,1
 10027e8:	d8800115 	stw	r2,4(sp)
 10027ec:	d8000215 	stw	zero,8(sp)
 10027f0:	008040f4 	movhi	r2,259
 10027f4:	10a49804 	addi	r2,r2,-28064
 10027f8:	d8800315 	stw	r2,12(sp)
 10027fc:	d8c00415 	stw	r3,16(sp)
 1002800:	00800144 	movi	r2,5
 1002804:	d8800515 	stw	r2,20(sp)
 1002808:	0100c084 	movi	r4,770
 100280c:	01400504 	movi	r5,20
 1002810:	01802584 	movi	r6,150
 1002814:	01c00c84 	movi	r7,50
 1002818:	10023f80 	call	10023f8 <buildObject>
			"     ", &(home->objects[2]), strlen("00:00"));

}
 100281c:	e037883a 	mov	sp,fp
 1002820:	dfc00117 	ldw	ra,4(sp)
 1002824:	df000017 	ldw	fp,0(sp)
 1002828:	dec00204 	addi	sp,sp,8
 100282c:	f800283a 	ret

01002830 <buildDestPage>:

void buildDestPage(Page *destination) {
 1002830:	defff604 	addi	sp,sp,-40
 1002834:	dfc00915 	stw	ra,36(sp)
 1002838:	df000815 	stw	fp,32(sp)
 100283c:	df000804 	addi	fp,sp,32
 1002840:	e13fff15 	stw	r4,-4(fp)

	// Definitions for Destination Page
	// Memory management
	destination->hasKeyboard = 0;
 1002844:	e0bfff17 	ldw	r2,-4(fp)
 1002848:	10000615 	stw	zero,24(r2)
	destination->buttons = malloc(sizeof(Button) * 1);
 100284c:	01000a04 	movi	r4,40
 1002850:	1014b200 	call	1014b20 <malloc>
 1002854:	1007883a 	mov	r3,r2
 1002858:	e0bfff17 	ldw	r2,-4(fp)
 100285c:	10c00815 	stw	r3,32(r2)
	destination->objects = malloc(sizeof(Object) * 4);
 1002860:	01002404 	movi	r4,144
 1002864:	1014b200 	call	1014b20 <malloc>
 1002868:	1007883a 	mov	r3,r2
 100286c:	e0bfff17 	ldw	r2,-4(fp)
 1002870:	10c00915 	stw	r3,36(r2)
	destination->inputBoxes = malloc(sizeof(InputBox) * 4);
 1002874:	01011c04 	movi	r4,1136
 1002878:	1014b200 	call	1014b20 <malloc>
 100287c:	1007883a 	mov	r3,r2
 1002880:	e0bfff17 	ldw	r2,-4(fp)
 1002884:	10c05d15 	stw	r3,372(r2)
	destination->sdBoxes = malloc(sizeof(SDBox) * 4);
 1002888:	01002404 	movi	r4,144
 100288c:	1014b200 	call	1014b20 <malloc>
 1002890:	1007883a 	mov	r3,r2
 1002894:	e0bfff17 	ldw	r2,-4(fp)
 1002898:	10c05e15 	stw	r3,376(r2)
	destination->numButtons = 1;
 100289c:	e0ffff17 	ldw	r3,-4(fp)
 10028a0:	00800044 	movi	r2,1
 10028a4:	18800315 	stw	r2,12(r3)
	destination->numObjects = 4;
 10028a8:	e0ffff17 	ldw	r3,-4(fp)
 10028ac:	00800104 	movi	r2,4
 10028b0:	18800415 	stw	r2,16(r3)
	destination->backColour = WHITE;
 10028b4:	e0ffff17 	ldw	r3,-4(fp)
 10028b8:	00800044 	movi	r2,1
 10028bc:	18800015 	stw	r2,0(r3)
	destination->numInputBoxes = 4;
 10028c0:	e0ffff17 	ldw	r3,-4(fp)
 10028c4:	00800104 	movi	r2,4
 10028c8:	18800215 	stw	r2,8(r3)
	destination->numSDBoxes = 4;
 10028cc:	e0ffff17 	ldw	r3,-4(fp)
 10028d0:	00800104 	movi	r2,4
 10028d4:	18800515 	stw	r2,20(r3)

	// Home button
	buildButton(160, 330, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 10028d8:	e0bfff17 	ldw	r2,-4(fp)
 10028dc:	10c00817 	ldw	r3,32(r2)
 10028e0:	d1271117 	ldw	r4,-25532(gp)
 10028e4:	d8000015 	stw	zero,0(sp)
 10028e8:	00800f44 	movi	r2,61
 10028ec:	d8800115 	stw	r2,4(sp)
 10028f0:	d8000215 	stw	zero,8(sp)
 10028f4:	008040f4 	movhi	r2,259
 10028f8:	10a49a04 	addi	r2,r2,-28056
 10028fc:	d8800315 	stw	r2,12(sp)
 1002900:	d8c00415 	stw	r3,16(sp)
 1002904:	00800104 	movi	r2,4
 1002908:	d8800515 	stw	r2,20(sp)
 100290c:	d9000615 	stw	r4,24(sp)
 1002910:	01002804 	movi	r4,160
 1002914:	01405284 	movi	r5,330
 1002918:	01802584 	movi	r6,150
 100291c:	01c00c84 	movi	r7,50
 1002920:	1000e8c0 	call	1000e8c <buildButton>
			"Home", &(destination->buttons[0]), strlen("Home"), home);

	//Save Plaintext To SD
	buildSDBox(160, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 1002924:	e0bfff17 	ldw	r2,-4(fp)
 1002928:	10c05e17 	ldw	r3,376(r2)
 100292c:	d8000015 	stw	zero,0(sp)
 1002930:	00800f44 	movi	r2,61
 1002934:	d8800115 	stw	r2,4(sp)
 1002938:	d8000215 	stw	zero,8(sp)
 100293c:	008040f4 	movhi	r2,259
 1002940:	10a49c04 	addi	r2,r2,-28048
 1002944:	d8800315 	stw	r2,12(sp)
 1002948:	d8c00415 	stw	r3,16(sp)
 100294c:	00800384 	movi	r2,14
 1002950:	d8800515 	stw	r2,20(sp)
 1002954:	01002804 	movi	r4,160
 1002958:	01406404 	movi	r5,400
 100295c:	01802584 	movi	r6,150
 1002960:	01c00c84 	movi	r7,50
 1002964:	100aafc0 	call	100aafc <buildSDBox>
			"Save Plaintext", &(destination->sdBoxes[0]),
			strlen("Save Plaintext"));
	//Save Encrypted To SD
	buildSDBox(320, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 1002968:	e0bfff17 	ldw	r2,-4(fp)
 100296c:	10805e17 	ldw	r2,376(r2)
 1002970:	10c00904 	addi	r3,r2,36
 1002974:	d8000015 	stw	zero,0(sp)
 1002978:	00800f44 	movi	r2,61
 100297c:	d8800115 	stw	r2,4(sp)
 1002980:	d8000215 	stw	zero,8(sp)
 1002984:	008040f4 	movhi	r2,259
 1002988:	10a4a004 	addi	r2,r2,-28032
 100298c:	d8800315 	stw	r2,12(sp)
 1002990:	d8c00415 	stw	r3,16(sp)
 1002994:	00800384 	movi	r2,14
 1002998:	d8800515 	stw	r2,20(sp)
 100299c:	01005004 	movi	r4,320
 10029a0:	01406404 	movi	r5,400
 10029a4:	01802584 	movi	r6,150
 10029a8:	01c00c84 	movi	r7,50
 10029ac:	100aafc0 	call	100aafc <buildSDBox>
			"Save Encrypted", &(destination->sdBoxes[1]),
			strlen("Save Encrypted"));
	//Load from SD
	buildSDBox(480, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 10029b0:	e0bfff17 	ldw	r2,-4(fp)
 10029b4:	10805e17 	ldw	r2,376(r2)
 10029b8:	10c01204 	addi	r3,r2,72
 10029bc:	d8000015 	stw	zero,0(sp)
 10029c0:	00800f44 	movi	r2,61
 10029c4:	d8800115 	stw	r2,4(sp)
 10029c8:	d8000215 	stw	zero,8(sp)
 10029cc:	008040f4 	movhi	r2,259
 10029d0:	10a4a404 	addi	r2,r2,-28016
 10029d4:	d8800315 	stw	r2,12(sp)
 10029d8:	d8c00415 	stw	r3,16(sp)
 10029dc:	00800244 	movi	r2,9
 10029e0:	d8800515 	stw	r2,20(sp)
 10029e4:	01007804 	movi	r4,480
 10029e8:	01406404 	movi	r5,400
 10029ec:	01802584 	movi	r6,150
 10029f0:	01c00c84 	movi	r7,50
 10029f4:	100aafc0 	call	100aafc <buildSDBox>
			"Load Data", &(destination->sdBoxes[2]), strlen("Load Data"));

	buildSDBox(640, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 10029f8:	e0bfff17 	ldw	r2,-4(fp)
 10029fc:	10805e17 	ldw	r2,376(r2)
 1002a00:	10c01b04 	addi	r3,r2,108
 1002a04:	d8000015 	stw	zero,0(sp)
 1002a08:	00800f44 	movi	r2,61
 1002a0c:	d8800115 	stw	r2,4(sp)
 1002a10:	d8000215 	stw	zero,8(sp)
 1002a14:	008040f4 	movhi	r2,259
 1002a18:	10a4a704 	addi	r2,r2,-28004
 1002a1c:	d8800315 	stw	r2,12(sp)
 1002a20:	d8c00415 	stw	r3,16(sp)
 1002a24:	008002c4 	movi	r2,11
 1002a28:	d8800515 	stw	r2,20(sp)
 1002a2c:	0100a004 	movi	r4,640
 1002a30:	01406404 	movi	r5,400
 1002a34:	01802584 	movi	r6,150
 1002a38:	01c00c84 	movi	r7,50
 1002a3c:	100aafc0 	call	100aafc <buildSDBox>
			"Load Secure", &(destination->sdBoxes[3]), strlen("Load Secure"));

	// Page contents
	// Headings
	buildObject(150, 100, BUTTON_WIDTH, BUTTON_HEIGHT, WHITE, WHITE, BLACK,
 1002a40:	e0bfff17 	ldw	r2,-4(fp)
 1002a44:	10c00917 	ldw	r3,36(r2)
 1002a48:	00800044 	movi	r2,1
 1002a4c:	d8800015 	stw	r2,0(sp)
 1002a50:	00800044 	movi	r2,1
 1002a54:	d8800115 	stw	r2,4(sp)
 1002a58:	d8000215 	stw	zero,8(sp)
 1002a5c:	008040f4 	movhi	r2,259
 1002a60:	10a4aa04 	addi	r2,r2,-27992
 1002a64:	d8800315 	stw	r2,12(sp)
 1002a68:	d8c00415 	stw	r3,16(sp)
 1002a6c:	00800544 	movi	r2,21
 1002a70:	d8800515 	stw	r2,20(sp)
 1002a74:	01002584 	movi	r4,150
 1002a78:	01401904 	movi	r5,100
 1002a7c:	01802584 	movi	r6,150
 1002a80:	01c00c84 	movi	r7,50
 1002a84:	10023f80 	call	10023f8 <buildObject>
			"Your Destination Is: ", &(destination->objects[0]),
			strlen("Your Destination Is: "));
	buildObject(150, 150, BUTTON_WIDTH, BUTTON_HEIGHT, WHITE, WHITE, BLACK,
 1002a88:	e0bfff17 	ldw	r2,-4(fp)
 1002a8c:	10800917 	ldw	r2,36(r2)
 1002a90:	10c00904 	addi	r3,r2,36
 1002a94:	00800044 	movi	r2,1
 1002a98:	d8800015 	stw	r2,0(sp)
 1002a9c:	00800044 	movi	r2,1
 1002aa0:	d8800115 	stw	r2,4(sp)
 1002aa4:	d8000215 	stw	zero,8(sp)
 1002aa8:	008040f4 	movhi	r2,259
 1002aac:	10a4b004 	addi	r2,r2,-27968
 1002ab0:	d8800315 	stw	r2,12(sp)
 1002ab4:	d8c00415 	stw	r3,16(sp)
 1002ab8:	00800384 	movi	r2,14
 1002abc:	d8800515 	stw	r2,20(sp)
 1002ac0:	01002584 	movi	r4,150
 1002ac4:	01402584 	movi	r5,150
 1002ac8:	01802584 	movi	r6,150
 1002acc:	01c00c84 	movi	r7,50
 1002ad0:	10023f80 	call	10023f8 <buildObject>
			"Home Address: ", &(destination->objects[1]),
			strlen("Home Address: "));
	buildObject(150, 200, BUTTON_WIDTH, BUTTON_HEIGHT, WHITE, WHITE, BLACK,
 1002ad4:	e0bfff17 	ldw	r2,-4(fp)
 1002ad8:	10800917 	ldw	r2,36(r2)
 1002adc:	10c01204 	addi	r3,r2,72
 1002ae0:	00800044 	movi	r2,1
 1002ae4:	d8800015 	stw	r2,0(sp)
 1002ae8:	00800044 	movi	r2,1
 1002aec:	d8800115 	stw	r2,4(sp)
 1002af0:	d8000215 	stw	zero,8(sp)
 1002af4:	008040f4 	movhi	r2,259
 1002af8:	10a4b404 	addi	r2,r2,-27952
 1002afc:	d8800315 	stw	r2,12(sp)
 1002b00:	d8c00415 	stw	r3,16(sp)
 1002b04:	00800244 	movi	r2,9
 1002b08:	d8800515 	stw	r2,20(sp)
 1002b0c:	01002584 	movi	r4,150
 1002b10:	01403204 	movi	r5,200
 1002b14:	01802584 	movi	r6,150
 1002b18:	01c00c84 	movi	r7,50
 1002b1c:	10023f80 	call	10023f8 <buildObject>
			"Phone #: ", &(destination->objects[2]), strlen("Phone #: "));
	buildObject(150, 250, BUTTON_WIDTH, BUTTON_HEIGHT, WHITE, WHITE, BLACK,
 1002b20:	e0bfff17 	ldw	r2,-4(fp)
 1002b24:	10800917 	ldw	r2,36(r2)
 1002b28:	10c01b04 	addi	r3,r2,108
 1002b2c:	00800044 	movi	r2,1
 1002b30:	d8800015 	stw	r2,0(sp)
 1002b34:	00800044 	movi	r2,1
 1002b38:	d8800115 	stw	r2,4(sp)
 1002b3c:	d8000215 	stw	zero,8(sp)
 1002b40:	008040f4 	movhi	r2,259
 1002b44:	10a4b704 	addi	r2,r2,-27940
 1002b48:	d8800315 	stw	r2,12(sp)
 1002b4c:	d8c00415 	stw	r3,16(sp)
 1002b50:	00800184 	movi	r2,6
 1002b54:	d8800515 	stw	r2,20(sp)
 1002b58:	01002584 	movi	r4,150
 1002b5c:	01403e84 	movi	r5,250
 1002b60:	01802584 	movi	r6,150
 1002b64:	01c00c84 	movi	r7,50
 1002b68:	10023f80 	call	10023f8 <buildObject>
			"Name: ", &(destination->objects[3]), strlen("Name: "));

	// Text Fields for Input Boxes from top to bottom respectively
	buildInputBox(&(destination->inputBoxes[0]), 450, 100, OBJECT_WIDTH + 100,
 1002b6c:	e0bfff17 	ldw	r2,-4(fp)
 1002b70:	11005d17 	ldw	r4,372(r2)
 1002b74:	00800784 	movi	r2,30
 1002b78:	d8800015 	stw	r2,0(sp)
 1002b7c:	00800044 	movi	r2,1
 1002b80:	d8800115 	stw	r2,4(sp)
 1002b84:	d8000215 	stw	zero,8(sp)
 1002b88:	d8000315 	stw	zero,12(sp)
 1002b8c:	01407084 	movi	r5,450
 1002b90:	01801904 	movi	r6,100
 1002b94:	01c03e84 	movi	r7,250
 1002b98:	100a8c80 	call	100a8c8 <buildInputBox>
			OBJECT_HEIGHT / 2, WHITE, BLACK, BLACK);
	buildInputBox(&(destination->inputBoxes[1]), 450, 150, OBJECT_WIDTH + 100,
 1002b9c:	e0bfff17 	ldw	r2,-4(fp)
 1002ba0:	10805d17 	ldw	r2,372(r2)
 1002ba4:	11004704 	addi	r4,r2,284
 1002ba8:	00800784 	movi	r2,30
 1002bac:	d8800015 	stw	r2,0(sp)
 1002bb0:	00800044 	movi	r2,1
 1002bb4:	d8800115 	stw	r2,4(sp)
 1002bb8:	d8000215 	stw	zero,8(sp)
 1002bbc:	d8000315 	stw	zero,12(sp)
 1002bc0:	01407084 	movi	r5,450
 1002bc4:	01802584 	movi	r6,150
 1002bc8:	01c03e84 	movi	r7,250
 1002bcc:	100a8c80 	call	100a8c8 <buildInputBox>
			OBJECT_HEIGHT / 2, WHITE, BLACK, BLACK);
	buildInputBox(&(destination->inputBoxes[2]), 450, 200, OBJECT_WIDTH + 100,
 1002bd0:	e0bfff17 	ldw	r2,-4(fp)
 1002bd4:	10805d17 	ldw	r2,372(r2)
 1002bd8:	11008e04 	addi	r4,r2,568
 1002bdc:	00800784 	movi	r2,30
 1002be0:	d8800015 	stw	r2,0(sp)
 1002be4:	00800044 	movi	r2,1
 1002be8:	d8800115 	stw	r2,4(sp)
 1002bec:	d8000215 	stw	zero,8(sp)
 1002bf0:	d8000315 	stw	zero,12(sp)
 1002bf4:	01407084 	movi	r5,450
 1002bf8:	01803204 	movi	r6,200
 1002bfc:	01c03e84 	movi	r7,250
 1002c00:	100a8c80 	call	100a8c8 <buildInputBox>
			OBJECT_HEIGHT / 2, WHITE, BLACK, BLACK);
	buildInputBox(&(destination->inputBoxes[3]), 450, 250, OBJECT_WIDTH + 100,
 1002c04:	e0bfff17 	ldw	r2,-4(fp)
 1002c08:	10805d17 	ldw	r2,372(r2)
 1002c0c:	1100d504 	addi	r4,r2,852
 1002c10:	00800784 	movi	r2,30
 1002c14:	d8800015 	stw	r2,0(sp)
 1002c18:	00800044 	movi	r2,1
 1002c1c:	d8800115 	stw	r2,4(sp)
 1002c20:	d8000215 	stw	zero,8(sp)
 1002c24:	d8000315 	stw	zero,12(sp)
 1002c28:	01407084 	movi	r5,450
 1002c2c:	01803e84 	movi	r6,250
 1002c30:	01c03e84 	movi	r7,250
 1002c34:	100a8c80 	call	100a8c8 <buildInputBox>
			OBJECT_HEIGHT / 2, WHITE, BLACK, BLACK);

}
 1002c38:	e037883a 	mov	sp,fp
 1002c3c:	dfc00117 	ldw	ra,4(sp)
 1002c40:	df000017 	ldw	fp,0(sp)
 1002c44:	dec00204 	addi	sp,sp,8
 1002c48:	f800283a 	ret

01002c4c <buildMapPage>:

void buildMapPage(Page *Map) {
 1002c4c:	defff604 	addi	sp,sp,-40
 1002c50:	dfc00915 	stw	ra,36(sp)
 1002c54:	df000815 	stw	fp,32(sp)
 1002c58:	df000804 	addi	fp,sp,32
 1002c5c:	e13fff15 	stw	r4,-4(fp)

	Map->buttons = malloc(sizeof(Button) * 15);
 1002c60:	01009604 	movi	r4,600
 1002c64:	1014b200 	call	1014b20 <malloc>
 1002c68:	1007883a 	mov	r3,r2
 1002c6c:	e0bfff17 	ldw	r2,-4(fp)
 1002c70:	10c00815 	stw	r3,32(r2)
	Map->objects = malloc(sizeof(Object) * 5);
 1002c74:	01002d04 	movi	r4,180
 1002c78:	1014b200 	call	1014b20 <malloc>
 1002c7c:	1007883a 	mov	r3,r2
 1002c80:	e0bfff17 	ldw	r2,-4(fp)
 1002c84:	10c00915 	stw	r3,36(r2)
	Map->numButtons = 15;
 1002c88:	e0ffff17 	ldw	r3,-4(fp)
 1002c8c:	008003c4 	movi	r2,15
 1002c90:	18800315 	stw	r2,12(r3)
	Map->numObjects = 5;
 1002c94:	e0ffff17 	ldw	r3,-4(fp)
 1002c98:	00800144 	movi	r2,5
 1002c9c:	18800415 	stw	r2,16(r3)
	Map->backColour = GRAY_REPEAT;
 1002ca0:	e0ffff17 	ldw	r3,-4(fp)
 1002ca4:	00802444 	movi	r2,145
 1002ca8:	18800015 	stw	r2,0(r3)
	Map->numInputBoxes = 0;
 1002cac:	e0bfff17 	ldw	r2,-4(fp)
 1002cb0:	10000215 	stw	zero,8(r2)
	Map->numSDBoxes = 0;
 1002cb4:	e0bfff17 	ldw	r2,-4(fp)
 1002cb8:	10000515 	stw	zero,20(r2)
	//Kaiser Red
	buildButton(700, 420, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 1002cbc:	e0bfff17 	ldw	r2,-4(fp)
 1002cc0:	10c00817 	ldw	r3,32(r2)
 1002cc4:	d1271117 	ldw	r4,-25532(gp)
 1002cc8:	d8000015 	stw	zero,0(sp)
 1002ccc:	00800f44 	movi	r2,61
 1002cd0:	d8800115 	stw	r2,4(sp)
 1002cd4:	d8000215 	stw	zero,8(sp)
 1002cd8:	008040f4 	movhi	r2,259
 1002cdc:	10a4b904 	addi	r2,r2,-27932
 1002ce0:	d8800315 	stw	r2,12(sp)
 1002ce4:	d8c00415 	stw	r3,16(sp)
 1002ce8:	00800104 	movi	r2,4
 1002cec:	d8800515 	stw	r2,20(sp)
 1002cf0:	d9000615 	stw	r4,24(sp)
 1002cf4:	0100af04 	movi	r4,700
 1002cf8:	01406904 	movi	r5,420
 1002cfc:	01802584 	movi	r6,150
 1002d00:	01c00c84 	movi	r7,50
 1002d04:	1000e8c0 	call	1000e8c <buildButton>
			"Menu", &(Map->buttons[0]), strlen("Menu"), home);
	buildButton(190, 90, 120, 200, RED, RED, RED, "Kaiser", &(Map->buttons[1]),
 1002d08:	e0bfff17 	ldw	r2,-4(fp)
 1002d0c:	10800817 	ldw	r2,32(r2)
 1002d10:	10c00a04 	addi	r3,r2,40
 1002d14:	00800084 	movi	r2,2
 1002d18:	d8800015 	stw	r2,0(sp)
 1002d1c:	00800084 	movi	r2,2
 1002d20:	d8800115 	stw	r2,4(sp)
 1002d24:	00800084 	movi	r2,2
 1002d28:	d8800215 	stw	r2,8(sp)
 1002d2c:	008040f4 	movhi	r2,259
 1002d30:	10a4bb04 	addi	r2,r2,-27924
 1002d34:	d8800315 	stw	r2,12(sp)
 1002d38:	d8c00415 	stw	r3,16(sp)
 1002d3c:	00800184 	movi	r2,6
 1002d40:	d8800515 	stw	r2,20(sp)
 1002d44:	d8000615 	stw	zero,24(sp)
 1002d48:	01002f84 	movi	r4,190
 1002d4c:	01401684 	movi	r5,90
 1002d50:	01801e04 	movi	r6,120
 1002d54:	01c03204 	movi	r7,200
 1002d58:	1000e8c0 	call	1000e8c <buildButton>
			strlen("Kaiser"), NULL);
	buildButton(190, 196, 85, 10, RED, RED, RED, "", &(Map->buttons[2]),
 1002d5c:	e0bfff17 	ldw	r2,-4(fp)
 1002d60:	10800817 	ldw	r2,32(r2)
 1002d64:	10c01404 	addi	r3,r2,80
 1002d68:	00800084 	movi	r2,2
 1002d6c:	d8800015 	stw	r2,0(sp)
 1002d70:	00800084 	movi	r2,2
 1002d74:	d8800115 	stw	r2,4(sp)
 1002d78:	00800084 	movi	r2,2
 1002d7c:	d8800215 	stw	r2,8(sp)
 1002d80:	008040f4 	movhi	r2,259
 1002d84:	10a4bd04 	addi	r2,r2,-27916
 1002d88:	d8800315 	stw	r2,12(sp)
 1002d8c:	d8c00415 	stw	r3,16(sp)
 1002d90:	d8000515 	stw	zero,20(sp)
 1002d94:	d8000615 	stw	zero,24(sp)
 1002d98:	01002f84 	movi	r4,190
 1002d9c:	01403104 	movi	r5,196
 1002da0:	01801544 	movi	r6,85
 1002da4:	01c00284 	movi	r7,10
 1002da8:	1000e8c0 	call	1000e8c <buildButton>
			strlen(""), NULL);
	buildButton(293, 40, 85, 20, RED, RED, RED, "", &(Map->buttons[3]),
 1002dac:	e0bfff17 	ldw	r2,-4(fp)
 1002db0:	10800817 	ldw	r2,32(r2)
 1002db4:	10c01e04 	addi	r3,r2,120
 1002db8:	00800084 	movi	r2,2
 1002dbc:	d8800015 	stw	r2,0(sp)
 1002dc0:	00800084 	movi	r2,2
 1002dc4:	d8800115 	stw	r2,4(sp)
 1002dc8:	00800084 	movi	r2,2
 1002dcc:	d8800215 	stw	r2,8(sp)
 1002dd0:	008040f4 	movhi	r2,259
 1002dd4:	10a4bd04 	addi	r2,r2,-27916
 1002dd8:	d8800315 	stw	r2,12(sp)
 1002ddc:	d8c00415 	stw	r3,16(sp)
 1002de0:	d8000515 	stw	zero,20(sp)
 1002de4:	d8000615 	stw	zero,24(sp)
 1002de8:	01004944 	movi	r4,293
 1002dec:	01400a04 	movi	r5,40
 1002df0:	01801544 	movi	r6,85
 1002df4:	01c00504 	movi	r7,20
 1002df8:	1000e8c0 	call	1000e8c <buildButton>
			strlen(""), NULL);
	//Mcleod Yellow
	buildButton(190, 276, 35, 150, ORANGE, ORANGE, ORANGE, "",
 1002dfc:	e0bfff17 	ldw	r2,-4(fp)
 1002e00:	10800817 	ldw	r2,32(r2)
 1002e04:	10c02804 	addi	r3,r2,160
 1002e08:	00800744 	movi	r2,29
 1002e0c:	d8800015 	stw	r2,0(sp)
 1002e10:	00800744 	movi	r2,29
 1002e14:	d8800115 	stw	r2,4(sp)
 1002e18:	00800744 	movi	r2,29
 1002e1c:	d8800215 	stw	r2,8(sp)
 1002e20:	008040f4 	movhi	r2,259
 1002e24:	10a4bd04 	addi	r2,r2,-27916
 1002e28:	d8800315 	stw	r2,12(sp)
 1002e2c:	d8c00415 	stw	r3,16(sp)
 1002e30:	d8000515 	stw	zero,20(sp)
 1002e34:	d8000615 	stw	zero,24(sp)
 1002e38:	01002f84 	movi	r4,190
 1002e3c:	01404504 	movi	r5,276
 1002e40:	018008c4 	movi	r6,35
 1002e44:	01c02584 	movi	r7,150
 1002e48:	1000e8c0 	call	1000e8c <buildButton>
			&(Map->buttons[4]), strlen(""), NULL);
	buildButton(288, 370, 230, 47, ORANGE, ORANGE, ORANGE, "MacLeod",
 1002e4c:	e0bfff17 	ldw	r2,-4(fp)
 1002e50:	10800817 	ldw	r2,32(r2)
 1002e54:	10c03204 	addi	r3,r2,200
 1002e58:	00800744 	movi	r2,29
 1002e5c:	d8800015 	stw	r2,0(sp)
 1002e60:	00800744 	movi	r2,29
 1002e64:	d8800115 	stw	r2,4(sp)
 1002e68:	00800744 	movi	r2,29
 1002e6c:	d8800215 	stw	r2,8(sp)
 1002e70:	008040f4 	movhi	r2,259
 1002e74:	10a4be04 	addi	r2,r2,-27912
 1002e78:	d8800315 	stw	r2,12(sp)
 1002e7c:	d8c00415 	stw	r3,16(sp)
 1002e80:	008001c4 	movi	r2,7
 1002e84:	d8800515 	stw	r2,20(sp)
 1002e88:	d8000615 	stw	zero,24(sp)
 1002e8c:	01004804 	movi	r4,288
 1002e90:	01405c84 	movi	r5,370
 1002e94:	01803984 	movi	r6,230
 1002e98:	01c00bc4 	movi	r7,47
 1002e9c:	1000e8c0 	call	1000e8c <buildButton>
			&(Map->buttons[5]), strlen("MacLeod"), NULL);
	buildButton(406, 370, 10, 23, ORANGE, ORANGE, ORANGE, "",
 1002ea0:	e0bfff17 	ldw	r2,-4(fp)
 1002ea4:	10800817 	ldw	r2,32(r2)
 1002ea8:	10c03c04 	addi	r3,r2,240
 1002eac:	00800744 	movi	r2,29
 1002eb0:	d8800015 	stw	r2,0(sp)
 1002eb4:	00800744 	movi	r2,29
 1002eb8:	d8800115 	stw	r2,4(sp)
 1002ebc:	00800744 	movi	r2,29
 1002ec0:	d8800215 	stw	r2,8(sp)
 1002ec4:	008040f4 	movhi	r2,259
 1002ec8:	10a4bd04 	addi	r2,r2,-27916
 1002ecc:	d8800315 	stw	r2,12(sp)
 1002ed0:	d8c00415 	stw	r3,16(sp)
 1002ed4:	d8000515 	stw	zero,20(sp)
 1002ed8:	d8000615 	stw	zero,24(sp)
 1002edc:	01006584 	movi	r4,406
 1002ee0:	01405c84 	movi	r5,370
 1002ee4:	01800284 	movi	r6,10
 1002ee8:	01c005c4 	movi	r7,23
 1002eec:	1000e8c0 	call	1000e8c <buildButton>
			&(Map->buttons[6]), strlen(""), NULL);
	//CEME
	buildButton(500, 39, 350, 74, INDIGO, INDIGO, INDIGO,
 1002ef0:	e0bfff17 	ldw	r2,-4(fp)
 1002ef4:	10800817 	ldw	r2,32(r2)
 1002ef8:	10c04604 	addi	r3,r2,280
 1002efc:	00801504 	movi	r2,84
 1002f00:	d8800015 	stw	r2,0(sp)
 1002f04:	00801504 	movi	r2,84
 1002f08:	d8800115 	stw	r2,4(sp)
 1002f0c:	00801504 	movi	r2,84
 1002f10:	d8800215 	stw	r2,8(sp)
 1002f14:	008040f4 	movhi	r2,259
 1002f18:	10a4c004 	addi	r2,r2,-27904
 1002f1c:	d8800315 	stw	r2,12(sp)
 1002f20:	d8c00415 	stw	r3,16(sp)
 1002f24:	00800504 	movi	r2,20
 1002f28:	d8800515 	stw	r2,20(sp)
 1002f2c:	d8000615 	stw	zero,24(sp)
 1002f30:	01007d04 	movi	r4,500
 1002f34:	014009c4 	movi	r5,39
 1002f38:	01805784 	movi	r6,350
 1002f3c:	01c01284 	movi	r7,74
 1002f40:	1000e8c0 	call	1000e8c <buildButton>
			"Civil and Mechanical", &(Map->buttons[7]),
			strlen("Civil and Mechanical"), NULL);
	buildButton(455, 170, 70, 240, INDIGO, INDIGO, INDIGO, "",
 1002f44:	e0bfff17 	ldw	r2,-4(fp)
 1002f48:	10800817 	ldw	r2,32(r2)
 1002f4c:	10c05004 	addi	r3,r2,320
 1002f50:	00801504 	movi	r2,84
 1002f54:	d8800015 	stw	r2,0(sp)
 1002f58:	00801504 	movi	r2,84
 1002f5c:	d8800115 	stw	r2,4(sp)
 1002f60:	00801504 	movi	r2,84
 1002f64:	d8800215 	stw	r2,8(sp)
 1002f68:	008040f4 	movhi	r2,259
 1002f6c:	10a4bd04 	addi	r2,r2,-27916
 1002f70:	d8800315 	stw	r2,12(sp)
 1002f74:	d8c00415 	stw	r3,16(sp)
 1002f78:	d8000515 	stw	zero,20(sp)
 1002f7c:	d8000615 	stw	zero,24(sp)
 1002f80:	010071c4 	movi	r4,455
 1002f84:	01402a84 	movi	r5,170
 1002f88:	01801184 	movi	r6,70
 1002f8c:	01c03c04 	movi	r7,240
 1002f90:	1000e8c0 	call	1000e8c <buildButton>
			&(Map->buttons[8]), strlen(""), NULL);
	buildButton(660, 120, 100, 200, INDIGO, INDIGO, INDIGO, "",
 1002f94:	e0bfff17 	ldw	r2,-4(fp)
 1002f98:	10800817 	ldw	r2,32(r2)
 1002f9c:	10c05a04 	addi	r3,r2,360
 1002fa0:	00801504 	movi	r2,84
 1002fa4:	d8800015 	stw	r2,0(sp)
 1002fa8:	00801504 	movi	r2,84
 1002fac:	d8800115 	stw	r2,4(sp)
 1002fb0:	00801504 	movi	r2,84
 1002fb4:	d8800215 	stw	r2,8(sp)
 1002fb8:	008040f4 	movhi	r2,259
 1002fbc:	10a4bd04 	addi	r2,r2,-27916
 1002fc0:	d8800315 	stw	r2,12(sp)
 1002fc4:	d8c00415 	stw	r3,16(sp)
 1002fc8:	d8000515 	stw	zero,20(sp)
 1002fcc:	d8000615 	stw	zero,24(sp)
 1002fd0:	0100a504 	movi	r4,660
 1002fd4:	01401e04 	movi	r5,120
 1002fd8:	01801904 	movi	r6,100
 1002fdc:	01c03204 	movi	r7,200
 1002fe0:	1000e8c0 	call	1000e8c <buildButton>
			&(Map->buttons[9]), strlen(""), NULL);
	//CHEESE
	buildButton(330, 250, 90, 60, WHITE, WHITE, BLACK, "CHEESE",
 1002fe4:	e0bfff17 	ldw	r2,-4(fp)
 1002fe8:	10800817 	ldw	r2,32(r2)
 1002fec:	10c06404 	addi	r3,r2,400
 1002ff0:	00800044 	movi	r2,1
 1002ff4:	d8800015 	stw	r2,0(sp)
 1002ff8:	00800044 	movi	r2,1
 1002ffc:	d8800115 	stw	r2,4(sp)
 1003000:	d8000215 	stw	zero,8(sp)
 1003004:	008040f4 	movhi	r2,259
 1003008:	10a4c604 	addi	r2,r2,-27880
 100300c:	d8800315 	stw	r2,12(sp)
 1003010:	d8c00415 	stw	r3,16(sp)
 1003014:	00800184 	movi	r2,6
 1003018:	d8800515 	stw	r2,20(sp)
 100301c:	d8000615 	stw	zero,24(sp)
 1003020:	01005284 	movi	r4,330
 1003024:	01403e84 	movi	r5,250
 1003028:	01801684 	movi	r6,90
 100302c:	01c00f04 	movi	r7,60
 1003030:	1000e8c0 	call	1000e8c <buildButton>
			&(Map->buttons[10]), strlen("CHEESE"), NULL);
	//Brimacombe Building
	buildButton(500, 390, 90, 170, ORANGE_RED, ORANGE_RED, ORANGE_RED, "",
 1003034:	e0bfff17 	ldw	r2,-4(fp)
 1003038:	10800817 	ldw	r2,32(r2)
 100303c:	10c06e04 	addi	r3,r2,440
 1003040:	008006c4 	movi	r2,27
 1003044:	d8800015 	stw	r2,0(sp)
 1003048:	008006c4 	movi	r2,27
 100304c:	d8800115 	stw	r2,4(sp)
 1003050:	008006c4 	movi	r2,27
 1003054:	d8800215 	stw	r2,8(sp)
 1003058:	008040f4 	movhi	r2,259
 100305c:	10a4bd04 	addi	r2,r2,-27916
 1003060:	d8800315 	stw	r2,12(sp)
 1003064:	d8c00415 	stw	r3,16(sp)
 1003068:	d8000515 	stw	zero,20(sp)
 100306c:	d8000615 	stw	zero,24(sp)
 1003070:	01007d04 	movi	r4,500
 1003074:	01406184 	movi	r5,390
 1003078:	01801684 	movi	r6,90
 100307c:	01c02a84 	movi	r7,170
 1003080:	1000e8c0 	call	1000e8c <buildButton>
			&(Map->buttons[11]), strlen(""), NULL);
	buildButton(630, 340, 190, 50, ORANGE_RED, ORANGE_RED, ORANGE_RED,
 1003084:	e0bfff17 	ldw	r2,-4(fp)
 1003088:	10800817 	ldw	r2,32(r2)
 100308c:	10c07804 	addi	r3,r2,480
 1003090:	008006c4 	movi	r2,27
 1003094:	d8800015 	stw	r2,0(sp)
 1003098:	008006c4 	movi	r2,27
 100309c:	d8800115 	stw	r2,4(sp)
 10030a0:	008006c4 	movi	r2,27
 10030a4:	d8800215 	stw	r2,8(sp)
 10030a8:	008040f4 	movhi	r2,259
 10030ac:	10a4c804 	addi	r2,r2,-27872
 10030b0:	d8800315 	stw	r2,12(sp)
 10030b4:	d8c00415 	stw	r3,16(sp)
 10030b8:	00800244 	movi	r2,9
 10030bc:	d8800515 	stw	r2,20(sp)
 10030c0:	d8000615 	stw	zero,24(sp)
 10030c4:	01009d84 	movi	r4,630
 10030c8:	01405504 	movi	r5,340
 10030cc:	01802f84 	movi	r6,190
 10030d0:	01c00c84 	movi	r7,50
 10030d4:	1000e8c0 	call	1000e8c <buildButton>
			"Brimacomb", &(Map->buttons[12]), strlen("Brimacomb"), NULL);
	//ICICS
	buildButton(230, 450, 180, 80, CORN_FLOWER_BLUE, CORN_FLOWER_BLUE,
 10030d8:	e0bfff17 	ldw	r2,-4(fp)
 10030dc:	10800817 	ldw	r2,32(r2)
 10030e0:	10c08204 	addi	r3,r2,520
 10030e4:	008011c4 	movi	r2,71
 10030e8:	d8800015 	stw	r2,0(sp)
 10030ec:	008011c4 	movi	r2,71
 10030f0:	d8800115 	stw	r2,4(sp)
 10030f4:	008011c4 	movi	r2,71
 10030f8:	d8800215 	stw	r2,8(sp)
 10030fc:	008040f4 	movhi	r2,259
 1003100:	10a4cb04 	addi	r2,r2,-27860
 1003104:	d8800315 	stw	r2,12(sp)
 1003108:	d8c00415 	stw	r3,16(sp)
 100310c:	00800144 	movi	r2,5
 1003110:	d8800515 	stw	r2,20(sp)
 1003114:	d8000615 	stw	zero,24(sp)
 1003118:	01003984 	movi	r4,230
 100311c:	01407084 	movi	r5,450
 1003120:	01802d04 	movi	r6,180
 1003124:	01c01404 	movi	r7,80
 1003128:	1000e8c0 	call	1000e8c <buildButton>
			CORN_FLOWER_BLUE, "ICICS", &(Map->buttons[13]), strlen("ICICS"),
			NULL);
	buildButton(135, 445, 10, 30, CORN_FLOWER_BLUE, CORN_FLOWER_BLUE,
 100312c:	e0bfff17 	ldw	r2,-4(fp)
 1003130:	10800817 	ldw	r2,32(r2)
 1003134:	10c08c04 	addi	r3,r2,560
 1003138:	008011c4 	movi	r2,71
 100313c:	d8800015 	stw	r2,0(sp)
 1003140:	008011c4 	movi	r2,71
 1003144:	d8800115 	stw	r2,4(sp)
 1003148:	008011c4 	movi	r2,71
 100314c:	d8800215 	stw	r2,8(sp)
 1003150:	008040f4 	movhi	r2,259
 1003154:	10a4bd04 	addi	r2,r2,-27916
 1003158:	d8800315 	stw	r2,12(sp)
 100315c:	d8c00415 	stw	r3,16(sp)
 1003160:	d8000515 	stw	zero,20(sp)
 1003164:	d8000615 	stw	zero,24(sp)
 1003168:	010021c4 	movi	r4,135
 100316c:	01406f44 	movi	r5,445
 1003170:	01800284 	movi	r6,10
 1003174:	01c00784 	movi	r7,30
 1003178:	1000e8c0 	call	1000e8c <buildButton>
			CORN_FLOWER_BLUE, "", &(Map->buttons[14]), strlen(""), NULL);

	//GRASS
	buildObject(50, 120, 70, 200, FOREST_GREEN, FOREST_GREEN, FOREST_GREEN, "",
 100317c:	e0bfff17 	ldw	r2,-4(fp)
 1003180:	10c00917 	ldw	r3,36(r2)
 1003184:	00800b84 	movi	r2,46
 1003188:	d8800015 	stw	r2,0(sp)
 100318c:	00800b84 	movi	r2,46
 1003190:	d8800115 	stw	r2,4(sp)
 1003194:	00800b84 	movi	r2,46
 1003198:	d8800215 	stw	r2,8(sp)
 100319c:	008040f4 	movhi	r2,259
 10031a0:	10a4bd04 	addi	r2,r2,-27916
 10031a4:	d8800315 	stw	r2,12(sp)
 10031a8:	d8c00415 	stw	r3,16(sp)
 10031ac:	d8000515 	stw	zero,20(sp)
 10031b0:	01000c84 	movi	r4,50
 10031b4:	01401e04 	movi	r5,120
 10031b8:	01801184 	movi	r6,70
 10031bc:	01c03204 	movi	r7,200
 10031c0:	10023f80 	call	10023f8 <buildObject>
			&(Map->objects[0]), strlen(""));
	buildObject(50, 340, 70, 200, FOREST_GREEN, FOREST_GREEN, FOREST_GREEN, "",
 10031c4:	e0bfff17 	ldw	r2,-4(fp)
 10031c8:	10800917 	ldw	r2,36(r2)
 10031cc:	10c00904 	addi	r3,r2,36
 10031d0:	00800b84 	movi	r2,46
 10031d4:	d8800015 	stw	r2,0(sp)
 10031d8:	00800b84 	movi	r2,46
 10031dc:	d8800115 	stw	r2,4(sp)
 10031e0:	00800b84 	movi	r2,46
 10031e4:	d8800215 	stw	r2,8(sp)
 10031e8:	008040f4 	movhi	r2,259
 10031ec:	10a4bd04 	addi	r2,r2,-27916
 10031f0:	d8800315 	stw	r2,12(sp)
 10031f4:	d8c00415 	stw	r3,16(sp)
 10031f8:	d8000515 	stw	zero,20(sp)
 10031fc:	01000c84 	movi	r4,50
 1003200:	01405504 	movi	r5,340
 1003204:	01801184 	movi	r6,70
 1003208:	01c03204 	movi	r7,200
 100320c:	10023f80 	call	10023f8 <buildObject>
			&(Map->objects[1]), strlen(""));
	//Main Mall road
	buildObject(95, 230, 156, 15, LIGHT_GRAY, LIGHT_GRAY, LIGHT_GRAY, "",
 1003210:	e0bfff17 	ldw	r2,-4(fp)
 1003214:	10800917 	ldw	r2,36(r2)
 1003218:	10c01204 	addi	r3,r2,72
 100321c:	008024c4 	movi	r2,147
 1003220:	d8800015 	stw	r2,0(sp)
 1003224:	008024c4 	movi	r2,147
 1003228:	d8800115 	stw	r2,4(sp)
 100322c:	008024c4 	movi	r2,147
 1003230:	d8800215 	stw	r2,8(sp)
 1003234:	008040f4 	movhi	r2,259
 1003238:	10a4bd04 	addi	r2,r2,-27916
 100323c:	d8800315 	stw	r2,12(sp)
 1003240:	d8c00415 	stw	r3,16(sp)
 1003244:	d8000515 	stw	zero,20(sp)
 1003248:	010017c4 	movi	r4,95
 100324c:	01403984 	movi	r5,230
 1003250:	01802704 	movi	r6,156
 1003254:	01c003c4 	movi	r7,15
 1003258:	10023f80 	call	10023f8 <buildObject>
			&(Map->objects[2]), strlen(""));
	//Engineering Road
	buildObject(435, 385, 15, 189, LIGHT_GRAY, LIGHT_GRAY, LIGHT_GRAY, "",
 100325c:	e0bfff17 	ldw	r2,-4(fp)
 1003260:	10800917 	ldw	r2,36(r2)
 1003264:	10c01b04 	addi	r3,r2,108
 1003268:	008024c4 	movi	r2,147
 100326c:	d8800015 	stw	r2,0(sp)
 1003270:	008024c4 	movi	r2,147
 1003274:	d8800115 	stw	r2,4(sp)
 1003278:	008024c4 	movi	r2,147
 100327c:	d8800215 	stw	r2,8(sp)
 1003280:	008040f4 	movhi	r2,259
 1003284:	10a4bd04 	addi	r2,r2,-27916
 1003288:	d8800315 	stw	r2,12(sp)
 100328c:	d8c00415 	stw	r3,16(sp)
 1003290:	d8000515 	stw	zero,20(sp)
 1003294:	01006cc4 	movi	r4,435
 1003298:	01406044 	movi	r5,385
 100329c:	018003c4 	movi	r6,15
 10032a0:	01c02f44 	movi	r7,189
 10032a4:	10023f80 	call	10023f8 <buildObject>
			&(Map->objects[3]), strlen(""));
	//.road.
	buildObject(100, 200, 20, 600, LIGHT_GRAY, LIGHT_GRAY, LIGHT_GRAY, "",
 10032a8:	e0bfff17 	ldw	r2,-4(fp)
 10032ac:	10800917 	ldw	r2,36(r2)
 10032b0:	10c02404 	addi	r3,r2,144
 10032b4:	008024c4 	movi	r2,147
 10032b8:	d8800015 	stw	r2,0(sp)
 10032bc:	008024c4 	movi	r2,147
 10032c0:	d8800115 	stw	r2,4(sp)
 10032c4:	008024c4 	movi	r2,147
 10032c8:	d8800215 	stw	r2,8(sp)
 10032cc:	008040f4 	movhi	r2,259
 10032d0:	10a4bd04 	addi	r2,r2,-27916
 10032d4:	d8800315 	stw	r2,12(sp)
 10032d8:	d8c00415 	stw	r3,16(sp)
 10032dc:	d8000515 	stw	zero,20(sp)
 10032e0:	01001904 	movi	r4,100
 10032e4:	01403204 	movi	r5,200
 10032e8:	01800504 	movi	r6,20
 10032ec:	01c09604 	movi	r7,600
 10032f0:	10023f80 	call	10023f8 <buildObject>
			&(Map->objects[4]), strlen(""));
}
 10032f4:	e037883a 	mov	sp,fp
 10032f8:	dfc00117 	ldw	ra,4(sp)
 10032fc:	df000017 	ldw	fp,0(sp)
 1003300:	dec00204 	addi	sp,sp,8
 1003304:	f800283a 	ret

01003308 <buildSelfPage>:

void buildSelfPage(Page *self) {
 1003308:	defff604 	addi	sp,sp,-40
 100330c:	dfc00915 	stw	ra,36(sp)
 1003310:	df000815 	stw	fp,32(sp)
 1003314:	df000804 	addi	fp,sp,32
 1003318:	e13fff15 	stw	r4,-4(fp)

	// Definitions for "Where am I?"
	// Memory Management
	self->buttons = malloc(sizeof(Button) * 1);
 100331c:	01000a04 	movi	r4,40
 1003320:	1014b200 	call	1014b20 <malloc>
 1003324:	1007883a 	mov	r3,r2
 1003328:	e0bfff17 	ldw	r2,-4(fp)
 100332c:	10c00815 	stw	r3,32(r2)
	self->objects = malloc(sizeof(Object) * 7);
 1003330:	01003f04 	movi	r4,252
 1003334:	1014b200 	call	1014b20 <malloc>
 1003338:	1007883a 	mov	r3,r2
 100333c:	e0bfff17 	ldw	r2,-4(fp)
 1003340:	10c00915 	stw	r3,36(r2)
	self->inputBoxes = malloc(sizeof(InputBox) * 4);
 1003344:	01011c04 	movi	r4,1136
 1003348:	1014b200 	call	1014b20 <malloc>
 100334c:	1007883a 	mov	r3,r2
 1003350:	e0bfff17 	ldw	r2,-4(fp)
 1003354:	10c05d15 	stw	r3,372(r2)
	self->sdBoxes = malloc(sizeof(SDBox) * 4);
 1003358:	01002404 	movi	r4,144
 100335c:	1014b200 	call	1014b20 <malloc>
 1003360:	1007883a 	mov	r3,r2
 1003364:	e0bfff17 	ldw	r2,-4(fp)
 1003368:	10c05e15 	stw	r3,376(r2)
	self->numButtons = 1;
 100336c:	e0ffff17 	ldw	r3,-4(fp)
 1003370:	00800044 	movi	r2,1
 1003374:	18800315 	stw	r2,12(r3)
	self->numObjects = 7;
 1003378:	e0ffff17 	ldw	r3,-4(fp)
 100337c:	008001c4 	movi	r2,7
 1003380:	18800415 	stw	r2,16(r3)
	self->backColour = WHITE;
 1003384:	e0ffff17 	ldw	r3,-4(fp)
 1003388:	00800044 	movi	r2,1
 100338c:	18800015 	stw	r2,0(r3)
	self->numInputBoxes = 4;
 1003390:	e0ffff17 	ldw	r3,-4(fp)
 1003394:	00800104 	movi	r2,4
 1003398:	18800215 	stw	r2,8(r3)
	self->numSDBoxes = 4;
 100339c:	e0ffff17 	ldw	r3,-4(fp)
 10033a0:	00800104 	movi	r2,4
 10033a4:	18800515 	stw	r2,20(r3)
	// Buttons
	buildButton(160, 330, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 10033a8:	e0bfff17 	ldw	r2,-4(fp)
 10033ac:	10c00817 	ldw	r3,32(r2)
 10033b0:	d1271117 	ldw	r4,-25532(gp)
 10033b4:	d8000015 	stw	zero,0(sp)
 10033b8:	00800f44 	movi	r2,61
 10033bc:	d8800115 	stw	r2,4(sp)
 10033c0:	d8000215 	stw	zero,8(sp)
 10033c4:	008040f4 	movhi	r2,259
 10033c8:	10a49a04 	addi	r2,r2,-28056
 10033cc:	d8800315 	stw	r2,12(sp)
 10033d0:	d8c00415 	stw	r3,16(sp)
 10033d4:	00800104 	movi	r2,4
 10033d8:	d8800515 	stw	r2,20(sp)
 10033dc:	d9000615 	stw	r4,24(sp)
 10033e0:	01002804 	movi	r4,160
 10033e4:	01405284 	movi	r5,330
 10033e8:	01802584 	movi	r6,150
 10033ec:	01c00c84 	movi	r7,50
 10033f0:	1000e8c0 	call	1000e8c <buildButton>
			"Home", &(self->buttons[0]), strlen("Home"), home);

	//Save Plaintext To SD
	buildSDBox(160, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 10033f4:	e0bfff17 	ldw	r2,-4(fp)
 10033f8:	10c05e17 	ldw	r3,376(r2)
 10033fc:	d8000015 	stw	zero,0(sp)
 1003400:	00800f44 	movi	r2,61
 1003404:	d8800115 	stw	r2,4(sp)
 1003408:	d8000215 	stw	zero,8(sp)
 100340c:	008040f4 	movhi	r2,259
 1003410:	10a49c04 	addi	r2,r2,-28048
 1003414:	d8800315 	stw	r2,12(sp)
 1003418:	d8c00415 	stw	r3,16(sp)
 100341c:	00800384 	movi	r2,14
 1003420:	d8800515 	stw	r2,20(sp)
 1003424:	01002804 	movi	r4,160
 1003428:	01406404 	movi	r5,400
 100342c:	01802584 	movi	r6,150
 1003430:	01c00c84 	movi	r7,50
 1003434:	100aafc0 	call	100aafc <buildSDBox>
			"Save Plaintext", &(self->sdBoxes[0]), strlen("Save Plaintext"));
	//Save Encrypted To SD
	buildSDBox(320, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 1003438:	e0bfff17 	ldw	r2,-4(fp)
 100343c:	10805e17 	ldw	r2,376(r2)
 1003440:	10c00904 	addi	r3,r2,36
 1003444:	d8000015 	stw	zero,0(sp)
 1003448:	00800f44 	movi	r2,61
 100344c:	d8800115 	stw	r2,4(sp)
 1003450:	d8000215 	stw	zero,8(sp)
 1003454:	008040f4 	movhi	r2,259
 1003458:	10a4a004 	addi	r2,r2,-28032
 100345c:	d8800315 	stw	r2,12(sp)
 1003460:	d8c00415 	stw	r3,16(sp)
 1003464:	00800384 	movi	r2,14
 1003468:	d8800515 	stw	r2,20(sp)
 100346c:	01005004 	movi	r4,320
 1003470:	01406404 	movi	r5,400
 1003474:	01802584 	movi	r6,150
 1003478:	01c00c84 	movi	r7,50
 100347c:	100aafc0 	call	100aafc <buildSDBox>
			"Save Encrypted", &(self->sdBoxes[1]), strlen("Save Encrypted"));
	//Load from SD
	buildSDBox(480, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 1003480:	e0bfff17 	ldw	r2,-4(fp)
 1003484:	10805e17 	ldw	r2,376(r2)
 1003488:	10c01204 	addi	r3,r2,72
 100348c:	d8000015 	stw	zero,0(sp)
 1003490:	00800f44 	movi	r2,61
 1003494:	d8800115 	stw	r2,4(sp)
 1003498:	d8000215 	stw	zero,8(sp)
 100349c:	008040f4 	movhi	r2,259
 10034a0:	10a4a404 	addi	r2,r2,-28016
 10034a4:	d8800315 	stw	r2,12(sp)
 10034a8:	d8c00415 	stw	r3,16(sp)
 10034ac:	00800244 	movi	r2,9
 10034b0:	d8800515 	stw	r2,20(sp)
 10034b4:	01007804 	movi	r4,480
 10034b8:	01406404 	movi	r5,400
 10034bc:	01802584 	movi	r6,150
 10034c0:	01c00c84 	movi	r7,50
 10034c4:	100aafc0 	call	100aafc <buildSDBox>
			"Load Data", &(self->sdBoxes[2]), strlen("Load Data"));

	buildSDBox(640, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 10034c8:	e0bfff17 	ldw	r2,-4(fp)
 10034cc:	10805e17 	ldw	r2,376(r2)
 10034d0:	10c01b04 	addi	r3,r2,108
 10034d4:	d8000015 	stw	zero,0(sp)
 10034d8:	00800f44 	movi	r2,61
 10034dc:	d8800115 	stw	r2,4(sp)
 10034e0:	d8000215 	stw	zero,8(sp)
 10034e4:	008040f4 	movhi	r2,259
 10034e8:	10a4a704 	addi	r2,r2,-28004
 10034ec:	d8800315 	stw	r2,12(sp)
 10034f0:	d8c00415 	stw	r3,16(sp)
 10034f4:	008002c4 	movi	r2,11
 10034f8:	d8800515 	stw	r2,20(sp)
 10034fc:	0100a004 	movi	r4,640
 1003500:	01406404 	movi	r5,400
 1003504:	01802584 	movi	r6,150
 1003508:	01c00c84 	movi	r7,50
 100350c:	100aafc0 	call	100aafc <buildSDBox>
			"Load Secure", &(self->sdBoxes[3]), strlen("Load Secure"));

	// Info fields
	// Name
	buildObject(150, 50, OBJECT_WIDTH, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1003510:	e0bfff17 	ldw	r2,-4(fp)
 1003514:	10c00917 	ldw	r3,36(r2)
 1003518:	00800044 	movi	r2,1
 100351c:	d8800015 	stw	r2,0(sp)
 1003520:	00800044 	movi	r2,1
 1003524:	d8800115 	stw	r2,4(sp)
 1003528:	d8000215 	stw	zero,8(sp)
 100352c:	008040f4 	movhi	r2,259
 1003530:	10a4cd04 	addi	r2,r2,-27852
 1003534:	d8800315 	stw	r2,12(sp)
 1003538:	d8c00415 	stw	r3,16(sp)
 100353c:	00800384 	movi	r2,14
 1003540:	d8800515 	stw	r2,20(sp)
 1003544:	01002584 	movi	r4,150
 1003548:	01400c84 	movi	r5,50
 100354c:	01802584 	movi	r6,150
 1003550:	01c00f04 	movi	r7,60
 1003554:	10023f80 	call	10023f8 <buildObject>
			"Your Name Is: ", &(self->objects[0]), strlen("Your Name Is: "));

	// Address
	buildObject(150, 100, OBJECT_WIDTH, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1003558:	e0bfff17 	ldw	r2,-4(fp)
 100355c:	10800917 	ldw	r2,36(r2)
 1003560:	10c00904 	addi	r3,r2,36
 1003564:	00800044 	movi	r2,1
 1003568:	d8800015 	stw	r2,0(sp)
 100356c:	00800044 	movi	r2,1
 1003570:	d8800115 	stw	r2,4(sp)
 1003574:	d8000215 	stw	zero,8(sp)
 1003578:	008040f4 	movhi	r2,259
 100357c:	10a4b004 	addi	r2,r2,-27968
 1003580:	d8800315 	stw	r2,12(sp)
 1003584:	d8c00415 	stw	r3,16(sp)
 1003588:	00800384 	movi	r2,14
 100358c:	d8800515 	stw	r2,20(sp)
 1003590:	01002584 	movi	r4,150
 1003594:	01401904 	movi	r5,100
 1003598:	01802584 	movi	r6,150
 100359c:	01c00f04 	movi	r7,60
 10035a0:	10023f80 	call	10023f8 <buildObject>
			"Home Address: ", &(self->objects[1]), strlen("Home Address: "));

	// Phone
	buildObject(150, 150, OBJECT_WIDTH, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 10035a4:	e0bfff17 	ldw	r2,-4(fp)
 10035a8:	10800917 	ldw	r2,36(r2)
 10035ac:	10c01204 	addi	r3,r2,72
 10035b0:	00800044 	movi	r2,1
 10035b4:	d8800015 	stw	r2,0(sp)
 10035b8:	00800044 	movi	r2,1
 10035bc:	d8800115 	stw	r2,4(sp)
 10035c0:	d8000215 	stw	zero,8(sp)
 10035c4:	008040f4 	movhi	r2,259
 10035c8:	10a4b404 	addi	r2,r2,-27952
 10035cc:	d8800315 	stw	r2,12(sp)
 10035d0:	d8c00415 	stw	r3,16(sp)
 10035d4:	00800244 	movi	r2,9
 10035d8:	d8800515 	stw	r2,20(sp)
 10035dc:	01002584 	movi	r4,150
 10035e0:	01402584 	movi	r5,150
 10035e4:	01802584 	movi	r6,150
 10035e8:	01c00f04 	movi	r7,60
 10035ec:	10023f80 	call	10023f8 <buildObject>
			"Phone #: ", &(self->objects[2]), strlen("Phone #: "));

	// Emergency Contact
	buildObject(150, 200, OBJECT_WIDTH, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 10035f0:	e0bfff17 	ldw	r2,-4(fp)
 10035f4:	10800917 	ldw	r2,36(r2)
 10035f8:	10c01b04 	addi	r3,r2,108
 10035fc:	00800044 	movi	r2,1
 1003600:	d8800015 	stw	r2,0(sp)
 1003604:	00800044 	movi	r2,1
 1003608:	d8800115 	stw	r2,4(sp)
 100360c:	d8000215 	stw	zero,8(sp)
 1003610:	008040f4 	movhi	r2,259
 1003614:	10a4d104 	addi	r2,r2,-27836
 1003618:	d8800315 	stw	r2,12(sp)
 100361c:	d8c00415 	stw	r3,16(sp)
 1003620:	00800344 	movi	r2,13
 1003624:	d8800515 	stw	r2,20(sp)
 1003628:	01002584 	movi	r4,150
 100362c:	01403204 	movi	r5,200
 1003630:	01802584 	movi	r6,150
 1003634:	01c00f04 	movi	r7,60
 1003638:	10023f80 	call	10023f8 <buildObject>
			"Emergency #: ", &(self->objects[3]), strlen("Emergency #: "));

	// Current Location
	buildObject(150, 250, OBJECT_WIDTH, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 100363c:	e0bfff17 	ldw	r2,-4(fp)
 1003640:	10800917 	ldw	r2,36(r2)
 1003644:	10c02404 	addi	r3,r2,144
 1003648:	00800044 	movi	r2,1
 100364c:	d8800015 	stw	r2,0(sp)
 1003650:	00800044 	movi	r2,1
 1003654:	d8800115 	stw	r2,4(sp)
 1003658:	d8000215 	stw	zero,8(sp)
 100365c:	008040f4 	movhi	r2,259
 1003660:	10a4d504 	addi	r2,r2,-27820
 1003664:	d8800315 	stw	r2,12(sp)
 1003668:	d8c00415 	stw	r3,16(sp)
 100366c:	00800484 	movi	r2,18
 1003670:	d8800515 	stw	r2,20(sp)
 1003674:	01002584 	movi	r4,150
 1003678:	01403e84 	movi	r5,250
 100367c:	01802584 	movi	r6,150
 1003680:	01c00f04 	movi	r7,60
 1003684:	10023f80 	call	10023f8 <buildObject>
			"Your Location Is: ", &(self->objects[4]),
			strlen("Your Location Is: "));
	// Latitude
	buildObject(450, 250, OBJECT_WIDTH + 100, OBJECT_HEIGHT / 2, WHITE, WHITE,
 1003688:	e0bfff17 	ldw	r2,-4(fp)
 100368c:	10800917 	ldw	r2,36(r2)
 1003690:	10c02d04 	addi	r3,r2,180
 1003694:	00800044 	movi	r2,1
 1003698:	d8800015 	stw	r2,0(sp)
 100369c:	00800044 	movi	r2,1
 10036a0:	d8800115 	stw	r2,4(sp)
 10036a4:	d8000215 	stw	zero,8(sp)
 10036a8:	008040f4 	movhi	r2,259
 10036ac:	10a4da04 	addi	r2,r2,-27800
 10036b0:	d8800315 	stw	r2,12(sp)
 10036b4:	d8c00415 	stw	r3,16(sp)
 10036b8:	00800304 	movi	r2,12
 10036bc:	d8800515 	stw	r2,20(sp)
 10036c0:	01007084 	movi	r4,450
 10036c4:	01403e84 	movi	r5,250
 10036c8:	01803e84 	movi	r6,250
 10036cc:	01c00784 	movi	r7,30
 10036d0:	10023f80 	call	10023f8 <buildObject>
			BLACK, "------------", &(self->objects[5]), 12);
	// Longitude
	buildObject(450, 300, OBJECT_WIDTH + 100, OBJECT_HEIGHT / 2, WHITE, WHITE,
 10036d4:	e0bfff17 	ldw	r2,-4(fp)
 10036d8:	10800917 	ldw	r2,36(r2)
 10036dc:	10c03604 	addi	r3,r2,216
 10036e0:	00800044 	movi	r2,1
 10036e4:	d8800015 	stw	r2,0(sp)
 10036e8:	00800044 	movi	r2,1
 10036ec:	d8800115 	stw	r2,4(sp)
 10036f0:	d8000215 	stw	zero,8(sp)
 10036f4:	008040f4 	movhi	r2,259
 10036f8:	10a4de04 	addi	r2,r2,-27784
 10036fc:	d8800315 	stw	r2,12(sp)
 1003700:	d8c00415 	stw	r3,16(sp)
 1003704:	00800344 	movi	r2,13
 1003708:	d8800515 	stw	r2,20(sp)
 100370c:	01007084 	movi	r4,450
 1003710:	01404b04 	movi	r5,300
 1003714:	01803e84 	movi	r6,250
 1003718:	01c00784 	movi	r7,30
 100371c:	10023f80 	call	10023f8 <buildObject>
			BLACK, "-------------", &(self->objects[6]), 13);

	// Input boxes on screen from top to bottom respectively
	buildInputBox(&(self->inputBoxes[0]), 450, 50, OBJECT_WIDTH + 100,
 1003720:	e0bfff17 	ldw	r2,-4(fp)
 1003724:	11005d17 	ldw	r4,372(r2)
 1003728:	00800784 	movi	r2,30
 100372c:	d8800015 	stw	r2,0(sp)
 1003730:	00800044 	movi	r2,1
 1003734:	d8800115 	stw	r2,4(sp)
 1003738:	d8000215 	stw	zero,8(sp)
 100373c:	d8000315 	stw	zero,12(sp)
 1003740:	01407084 	movi	r5,450
 1003744:	01800c84 	movi	r6,50
 1003748:	01c03e84 	movi	r7,250
 100374c:	100a8c80 	call	100a8c8 <buildInputBox>
			OBJECT_HEIGHT / 2, WHITE, BLACK, BLACK);
	buildInputBox(&(self->inputBoxes[1]), 450, 100, OBJECT_WIDTH + 100,
 1003750:	e0bfff17 	ldw	r2,-4(fp)
 1003754:	10805d17 	ldw	r2,372(r2)
 1003758:	11004704 	addi	r4,r2,284
 100375c:	00800784 	movi	r2,30
 1003760:	d8800015 	stw	r2,0(sp)
 1003764:	00800044 	movi	r2,1
 1003768:	d8800115 	stw	r2,4(sp)
 100376c:	d8000215 	stw	zero,8(sp)
 1003770:	d8000315 	stw	zero,12(sp)
 1003774:	01407084 	movi	r5,450
 1003778:	01801904 	movi	r6,100
 100377c:	01c03e84 	movi	r7,250
 1003780:	100a8c80 	call	100a8c8 <buildInputBox>
			OBJECT_HEIGHT / 2, WHITE, BLACK, BLACK);
	buildInputBox(&(self->inputBoxes[2]), 450, 150, OBJECT_WIDTH + 100,
 1003784:	e0bfff17 	ldw	r2,-4(fp)
 1003788:	10805d17 	ldw	r2,372(r2)
 100378c:	11008e04 	addi	r4,r2,568
 1003790:	00800784 	movi	r2,30
 1003794:	d8800015 	stw	r2,0(sp)
 1003798:	00800044 	movi	r2,1
 100379c:	d8800115 	stw	r2,4(sp)
 10037a0:	d8000215 	stw	zero,8(sp)
 10037a4:	d8000315 	stw	zero,12(sp)
 10037a8:	01407084 	movi	r5,450
 10037ac:	01802584 	movi	r6,150
 10037b0:	01c03e84 	movi	r7,250
 10037b4:	100a8c80 	call	100a8c8 <buildInputBox>
			OBJECT_HEIGHT / 2, WHITE, BLACK, BLACK);
	buildInputBox(&(self->inputBoxes[3]), 450, 200, OBJECT_WIDTH + 100,
 10037b8:	e0bfff17 	ldw	r2,-4(fp)
 10037bc:	10805d17 	ldw	r2,372(r2)
 10037c0:	1100d504 	addi	r4,r2,852
 10037c4:	00800784 	movi	r2,30
 10037c8:	d8800015 	stw	r2,0(sp)
 10037cc:	00800044 	movi	r2,1
 10037d0:	d8800115 	stw	r2,4(sp)
 10037d4:	d8000215 	stw	zero,8(sp)
 10037d8:	d8000315 	stw	zero,12(sp)
 10037dc:	01407084 	movi	r5,450
 10037e0:	01803204 	movi	r6,200
 10037e4:	01c03e84 	movi	r7,250
 10037e8:	100a8c80 	call	100a8c8 <buildInputBox>
			OBJECT_HEIGHT / 2, WHITE, BLACK, BLACK);
}
 10037ec:	e037883a 	mov	sp,fp
 10037f0:	dfc00117 	ldw	ra,4(sp)
 10037f4:	df000017 	ldw	fp,0(sp)
 10037f8:	dec00204 	addi	sp,sp,8
 10037fc:	f800283a 	ret

01003800 <buildKeysPage>:

void buildKeysPage(Page *keys) {
 1003800:	deffa304 	addi	sp,sp,-372
 1003804:	dfc05c15 	stw	ra,368(sp)
 1003808:	df005b15 	stw	fp,364(sp)
 100380c:	df005b04 	addi	fp,sp,364
 1003810:	e13fac15 	stw	r4,-336(fp)

	keys->objects = malloc(sizeof(Object) * 1);
 1003814:	01000904 	movi	r4,36
 1003818:	1014b200 	call	1014b20 <malloc>
 100381c:	1007883a 	mov	r3,r2
 1003820:	e0bfac17 	ldw	r2,-336(fp)
 1003824:	10c00915 	stw	r3,36(r2)
	keys->backColour = WHITE;
 1003828:	e0ffac17 	ldw	r3,-336(fp)
 100382c:	00800044 	movi	r2,1
 1003830:	18800015 	stw	r2,0(r3)
	keys->hasKeyboard = 1; //ONLY THIS PAGE WILL HAVE THIS FLAG HIGH
 1003834:	e0ffac17 	ldw	r3,-336(fp)
 1003838:	00800044 	movi	r2,1
 100383c:	18800615 	stw	r2,24(r3)
	keys->numObjects = 1;
 1003840:	e0ffac17 	ldw	r3,-336(fp)
 1003844:	00800044 	movi	r2,1
 1003848:	18800415 	stw	r2,16(r3)
	keys->numButtons = 0;
 100384c:	e0bfac17 	ldw	r2,-336(fp)
 1003850:	10000315 	stw	zero,12(r2)
	Keyboard *kb = malloc(sizeof(Keyboard));
 1003854:	01005304 	movi	r4,332
 1003858:	1014b200 	call	1014b20 <malloc>
 100385c:	e0bfab15 	stw	r2,-340(fp)
	buildKeyboard(kb);
 1003860:	e13fad04 	addi	r4,fp,-332
 1003864:	e17fab17 	ldw	r5,-340(fp)
 1003868:	10010880 	call	1001088 <buildKeyboard>
	keys->keyboard = *kb;
 100386c:	e0bfac17 	ldw	r2,-336(fp)
 1003870:	e0ffab17 	ldw	r3,-340(fp)
 1003874:	11000a04 	addi	r4,r2,40
 1003878:	180b883a 	mov	r5,r3
 100387c:	01805304 	movi	r6,332
 1003880:	10152740 	call	1015274 <memcpy>
	keys->keyboard.isNum = 0;
 1003884:	e0bfac17 	ldw	r2,-336(fp)
 1003888:	10005015 	stw	zero,320(r2)
	keys->keyboard.isUpper = 0;
 100388c:	e0bfac17 	ldw	r2,-336(fp)
 1003890:	10004f15 	stw	zero,316(r2)
	keys->keyboard.bufCount = 0;
 1003894:	e0bfac17 	ldw	r2,-336(fp)
 1003898:	10004b15 	stw	zero,300(r2)
	keys->keyboard.currentKeyset = keys->keyboard.keyset_lowercase;
 100389c:	e0bfac17 	ldw	r2,-336(fp)
 10038a0:	10c05317 	ldw	r3,332(r2)
 10038a4:	e0bfac17 	ldw	r2,-336(fp)
 10038a8:	10c05b15 	stw	r3,364(r2)
	keys->numInputBoxes = 0;
 10038ac:	e0bfac17 	ldw	r2,-336(fp)
 10038b0:	10000215 	stw	zero,8(r2)
	keys->numSDBoxes = 0;
 10038b4:	e0bfac17 	ldw	r2,-336(fp)
 10038b8:	10000515 	stw	zero,20(r2)

	buildObject(380, 200, BUTTON_WIDTH * 4, BUTTON_HEIGHT * 2, BLACK, WHITE,
 10038bc:	e0bfac17 	ldw	r2,-336(fp)
 10038c0:	10c00917 	ldw	r3,36(r2)
 10038c4:	d8000015 	stw	zero,0(sp)
 10038c8:	00800044 	movi	r2,1
 10038cc:	d8800115 	stw	r2,4(sp)
 10038d0:	d8000215 	stw	zero,8(sp)
 10038d4:	008040f4 	movhi	r2,259
 10038d8:	10a4bd04 	addi	r2,r2,-27916
 10038dc:	d8800315 	stw	r2,12(sp)
 10038e0:	d8c00415 	stw	r3,16(sp)
 10038e4:	d8000515 	stw	zero,20(sp)
 10038e8:	01005f04 	movi	r4,380
 10038ec:	01403204 	movi	r5,200
 10038f0:	01809604 	movi	r6,600
 10038f4:	01c01904 	movi	r7,100
 10038f8:	10023f80 	call	10023f8 <buildObject>
			BLACK, "", &(keys->objects[0]), 0);

}
 10038fc:	e037883a 	mov	sp,fp
 1003900:	dfc00117 	ldw	ra,4(sp)
 1003904:	df000017 	ldw	fp,0(sp)
 1003908:	dec00204 	addi	sp,sp,8
 100390c:	f800283a 	ret

01003910 <buildMenu>:

Page* buildMenu(void) {
 1003910:	defffc04 	addi	sp,sp,-16
 1003914:	dfc00315 	stw	ra,12(sp)
 1003918:	df000215 	stw	fp,8(sp)
 100391c:	df000204 	addi	fp,sp,8

	// Build/allocate pages
	home = malloc(sizeof(Page));
 1003920:	01005f04 	movi	r4,380
 1003924:	1014b200 	call	1014b20 <malloc>
 1003928:	d0a71115 	stw	r2,-25532(gp)
	password = malloc(sizeof(Page));
 100392c:	01005f04 	movi	r4,380
 1003930:	1014b200 	call	1014b20 <malloc>
 1003934:	d0a70415 	stw	r2,-25584(gp)
	passwordSetup = malloc(sizeof(Page));
 1003938:	01005f04 	movi	r4,380
 100393c:	1014b200 	call	1014b20 <malloc>
 1003940:	d0a70815 	stw	r2,-25568(gp)
	destination = malloc(sizeof(Page));
 1003944:	01005f04 	movi	r4,380
 1003948:	1014b200 	call	1014b20 <malloc>
 100394c:	d0a70715 	stw	r2,-25572(gp)
	self = malloc(sizeof(Page));
 1003950:	01005f04 	movi	r4,380
 1003954:	1014b200 	call	1014b20 <malloc>
 1003958:	d0a70515 	stw	r2,-25580(gp)
	keys = malloc(sizeof(Page));
 100395c:	01005f04 	movi	r4,380
 1003960:	1014b200 	call	1014b20 <malloc>
 1003964:	d0a71315 	stw	r2,-25524(gp)
	map = malloc(sizeof(Page));
 1003968:	01005f04 	movi	r4,380
 100396c:	1014b200 	call	1014b20 <malloc>
 1003970:	d0a70615 	stw	r2,-25576(gp)
	panic = malloc(sizeof(Page));
 1003974:	01005f04 	movi	r4,380
 1003978:	1014b200 	call	1014b20 <malloc>
 100397c:	d0a70e15 	stw	r2,-25544(gp)
	loggingSettings = malloc(sizeof(Page));
 1003980:	01005f04 	movi	r4,380
 1003984:	1014b200 	call	1014b20 <malloc>
 1003988:	d0a70d15 	stw	r2,-25548(gp)
	addresses = malloc(sizeof(Page));
 100398c:	01005f04 	movi	r4,380
 1003990:	1014b200 	call	1014b20 <malloc>
 1003994:	d0a70c15 	stw	r2,-25552(gp)

	home->hasKeyboard = 0;
 1003998:	d0a71117 	ldw	r2,-25532(gp)
 100399c:	10000615 	stw	zero,24(r2)
	destination->hasKeyboard = 0;
 10039a0:	d0a70717 	ldw	r2,-25572(gp)
 10039a4:	10000615 	stw	zero,24(r2)
	password->hasKeyboard = 0;
 10039a8:	d0a70417 	ldw	r2,-25584(gp)
 10039ac:	10000615 	stw	zero,24(r2)
	passwordSetup->hasKeyboard = 0;
 10039b0:	d0a70817 	ldw	r2,-25568(gp)
 10039b4:	10000615 	stw	zero,24(r2)
	self->hasKeyboard = 0;
 10039b8:	d0a70517 	ldw	r2,-25580(gp)
 10039bc:	10000615 	stw	zero,24(r2)
	keys->hasKeyboard = 1;
 10039c0:	d0e71317 	ldw	r3,-25524(gp)
 10039c4:	00800044 	movi	r2,1
 10039c8:	18800615 	stw	r2,24(r3)
	map->hasKeyboard = 0;
 10039cc:	d0a70617 	ldw	r2,-25576(gp)
 10039d0:	10000615 	stw	zero,24(r2)
	loggingSettings->hasKeyboard = 0;
 10039d4:	d0a70d17 	ldw	r2,-25548(gp)
 10039d8:	10000615 	stw	zero,24(r2)
	panic->hasKeyboard = 0;
 10039dc:	d0a70e17 	ldw	r2,-25544(gp)
 10039e0:	10000615 	stw	zero,24(r2)
	addresses->hasKeyboard = 0;
 10039e4:	d0a70c17 	ldw	r2,-25552(gp)
 10039e8:	10000615 	stw	zero,24(r2)

	buildHomePage(home);
 10039ec:	d1271117 	ldw	r4,-25532(gp)
 10039f0:	10024f00 	call	10024f0 <buildHomePage>
	buildDestPage(destination);
 10039f4:	d1270717 	ldw	r4,-25572(gp)
 10039f8:	10028300 	call	1002830 <buildDestPage>
	buildSelfPage(self);
 10039fc:	d1270517 	ldw	r4,-25580(gp)
 1003a00:	10033080 	call	1003308 <buildSelfPage>
	buildKeysPage(keys);
 1003a04:	d1271317 	ldw	r4,-25524(gp)
 1003a08:	10038000 	call	1003800 <buildKeysPage>
	buildMapPage(map);
 1003a0c:	d1270617 	ldw	r4,-25576(gp)
 1003a10:	1002c4c0 	call	1002c4c <buildMapPage>
	buildPWLoginPage(password);
 1003a14:	d1270417 	ldw	r4,-25584(gp)
 1003a18:	1003ab80 	call	1003ab8 <buildPWLoginPage>
	buildPWSetupPage(passwordSetup);
 1003a1c:	d1270817 	ldw	r4,-25568(gp)
 1003a20:	1003c140 	call	1003c14 <buildPWSetupPage>
	buildLoggingSettingsPage(loggingSettings);
 1003a24:	d1270d17 	ldw	r4,-25548(gp)
 1003a28:	1003dec0 	call	1003dec <buildLoggingSettingsPage>
	buildPanicPage(panic);
 1003a2c:	d1270e17 	ldw	r4,-25544(gp)
 1003a30:	10040340 	call	1004034 <buildPanicPage>
	buildAddressesPage(addresses);
 1003a34:	d1270c17 	ldw	r4,-25552(gp)
 1003a38:	10042540 	call	1004254 <buildAddressesPage>

	char buf[2] = "";
 1003a3c:	008040f4 	movhi	r2,259
 1003a40:	10a4ea04 	addi	r2,r2,-27736
 1003a44:	10800003 	ldbu	r2,0(r2)
 1003a48:	e0bffe05 	stb	r2,-8(fp)
 1003a4c:	e03ffe45 	stb	zero,-7(fp)

	readFromSD(buf, "passMode.txt", 1);
 1003a50:	e13ffe04 	addi	r4,fp,-8
 1003a54:	014040f4 	movhi	r5,259
 1003a58:	2964e204 	addi	r5,r5,-27768
 1003a5c:	01800044 	movi	r6,1
 1003a60:	100ae780 	call	100ae78 <readFromSD>
	printf("enable: %s\n", buf);
 1003a64:	010040f4 	movhi	r4,259
 1003a68:	2124e604 	addi	r4,r4,-27752
 1003a6c:	e17ffe04 	addi	r5,fp,-8
 1003a70:	10155040 	call	1015504 <printf>

	if (strcmp(buf, "E") == 0) {
 1003a74:	e13ffe04 	addi	r4,fp,-8
 1003a78:	014040f4 	movhi	r5,259
 1003a7c:	2964e904 	addi	r5,r5,-27740
 1003a80:	1015bb40 	call	1015bb4 <strcmp>
 1003a84:	1004c03a 	cmpne	r2,r2,zero
 1003a88:	1000031e 	bne	r2,zero,1003a98 <buildMenu+0x188>
		return password;
 1003a8c:	d0a70417 	ldw	r2,-25584(gp)
 1003a90:	e0bfff15 	stw	r2,-4(fp)
 1003a94:	00000206 	br	1003aa0 <buildMenu+0x190>
	}

	return home;
 1003a98:	d0a71117 	ldw	r2,-25532(gp)
 1003a9c:	e0bfff15 	stw	r2,-4(fp)
 1003aa0:	e0bfff17 	ldw	r2,-4(fp)

}
 1003aa4:	e037883a 	mov	sp,fp
 1003aa8:	dfc00117 	ldw	ra,4(sp)
 1003aac:	df000017 	ldw	fp,0(sp)
 1003ab0:	dec00204 	addi	sp,sp,8
 1003ab4:	f800283a 	ret

01003ab8 <buildPWLoginPage>:

void buildPWLoginPage(Page *password) {
 1003ab8:	defff604 	addi	sp,sp,-40
 1003abc:	dfc00915 	stw	ra,36(sp)
 1003ac0:	df000815 	stw	fp,32(sp)
 1003ac4:	df000804 	addi	fp,sp,32
 1003ac8:	e13fff15 	stw	r4,-4(fp)

	password->buttons = malloc(sizeof(Button) * 1);
 1003acc:	01000a04 	movi	r4,40
 1003ad0:	1014b200 	call	1014b20 <malloc>
 1003ad4:	1007883a 	mov	r3,r2
 1003ad8:	e0bfff17 	ldw	r2,-4(fp)
 1003adc:	10c00815 	stw	r3,32(r2)
	password->objects = malloc(sizeof(Object) * 1);
 1003ae0:	01000904 	movi	r4,36
 1003ae4:	1014b200 	call	1014b20 <malloc>
 1003ae8:	1007883a 	mov	r3,r2
 1003aec:	e0bfff17 	ldw	r2,-4(fp)
 1003af0:	10c00915 	stw	r3,36(r2)
	password->inputBoxes = malloc(sizeof(InputBox) * 1);
 1003af4:	01004704 	movi	r4,284
 1003af8:	1014b200 	call	1014b20 <malloc>
 1003afc:	1007883a 	mov	r3,r2
 1003b00:	e0bfff17 	ldw	r2,-4(fp)
 1003b04:	10c05d15 	stw	r3,372(r2)
	password->backColour = WHITE;
 1003b08:	e0ffff17 	ldw	r3,-4(fp)
 1003b0c:	00800044 	movi	r2,1
 1003b10:	18800015 	stw	r2,0(r3)
	password->numObjects = 1;
 1003b14:	e0ffff17 	ldw	r3,-4(fp)
 1003b18:	00800044 	movi	r2,1
 1003b1c:	18800415 	stw	r2,16(r3)
	password->numButtons = 1;
 1003b20:	e0ffff17 	ldw	r3,-4(fp)
 1003b24:	00800044 	movi	r2,1
 1003b28:	18800315 	stw	r2,12(r3)
	password->numInputBoxes = 1;
 1003b2c:	e0ffff17 	ldw	r3,-4(fp)
 1003b30:	00800044 	movi	r2,1
 1003b34:	18800215 	stw	r2,8(r3)
	password->numSDBoxes = 0;
 1003b38:	e0bfff17 	ldw	r2,-4(fp)
 1003b3c:	10000515 	stw	zero,20(r2)

	// Enter Button
	buildButton(400, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 1003b40:	e0bfff17 	ldw	r2,-4(fp)
 1003b44:	10c00817 	ldw	r3,32(r2)
 1003b48:	d1271117 	ldw	r4,-25532(gp)
 1003b4c:	d8000015 	stw	zero,0(sp)
 1003b50:	00800f44 	movi	r2,61
 1003b54:	d8800115 	stw	r2,4(sp)
 1003b58:	d8000215 	stw	zero,8(sp)
 1003b5c:	008040f4 	movhi	r2,259
 1003b60:	10a4eb04 	addi	r2,r2,-27732
 1003b64:	d8800315 	stw	r2,12(sp)
 1003b68:	d8c00415 	stw	r3,16(sp)
 1003b6c:	00800144 	movi	r2,5
 1003b70:	d8800515 	stw	r2,20(sp)
 1003b74:	d9000615 	stw	r4,24(sp)
 1003b78:	01006404 	movi	r4,400
 1003b7c:	01406404 	movi	r5,400
 1003b80:	01802584 	movi	r6,150
 1003b84:	01c00c84 	movi	r7,50
 1003b88:	1000e8c0 	call	1000e8c <buildButton>
			"Enter", &(password->buttons[0]), strlen("Enter"), home);

	// Incorrect Password Message
	buildObject(400, 100, BUTTON_WIDTH * 3, BUTTON_HEIGHT, BLACK, GOLD, BLACK,
 1003b8c:	e0bfff17 	ldw	r2,-4(fp)
 1003b90:	10c00917 	ldw	r3,36(r2)
 1003b94:	d8000015 	stw	zero,0(sp)
 1003b98:	00800784 	movi	r2,30
 1003b9c:	d8800115 	stw	r2,4(sp)
 1003ba0:	d8000215 	stw	zero,8(sp)
 1003ba4:	008040f4 	movhi	r2,259
 1003ba8:	10a4ed04 	addi	r2,r2,-27724
 1003bac:	d8800315 	stw	r2,12(sp)
 1003bb0:	d8c00415 	stw	r3,16(sp)
 1003bb4:	00800684 	movi	r2,26
 1003bb8:	d8800515 	stw	r2,20(sp)
 1003bbc:	01006404 	movi	r4,400
 1003bc0:	01401904 	movi	r5,100
 1003bc4:	01807084 	movi	r6,450
 1003bc8:	01c00c84 	movi	r7,50
 1003bcc:	10023f80 	call	10023f8 <buildObject>
			"Please Enter Your Password", &(password->objects[0]),
			strlen("Please Enter Your Password"));

	// Input Box
	buildInputBox(&(password->inputBoxes[0]), 380, 200, BUTTON_WIDTH * 4,
 1003bd0:	e0bfff17 	ldw	r2,-4(fp)
 1003bd4:	11005d17 	ldw	r4,372(r2)
 1003bd8:	00801904 	movi	r2,100
 1003bdc:	d8800015 	stw	r2,0(sp)
 1003be0:	00800784 	movi	r2,30
 1003be4:	d8800115 	stw	r2,4(sp)
 1003be8:	d8000215 	stw	zero,8(sp)
 1003bec:	d8000315 	stw	zero,12(sp)
 1003bf0:	01405f04 	movi	r5,380
 1003bf4:	01803204 	movi	r6,200
 1003bf8:	01c09604 	movi	r7,600
 1003bfc:	100a8c80 	call	100a8c8 <buildInputBox>
			BUTTON_HEIGHT * 2, GOLD, BLACK, BLACK);

}
 1003c00:	e037883a 	mov	sp,fp
 1003c04:	dfc00117 	ldw	ra,4(sp)
 1003c08:	df000017 	ldw	fp,0(sp)
 1003c0c:	dec00204 	addi	sp,sp,8
 1003c10:	f800283a 	ret

01003c14 <buildPWSetupPage>:

void buildPWSetupPage(Page *passwordSetup) {
 1003c14:	defff604 	addi	sp,sp,-40
 1003c18:	dfc00915 	stw	ra,36(sp)
 1003c1c:	df000815 	stw	fp,32(sp)
 1003c20:	df000804 	addi	fp,sp,32
 1003c24:	e13fff15 	stw	r4,-4(fp)

	passwordSetup->buttons = malloc(sizeof(Button) * 3);
 1003c28:	01001e04 	movi	r4,120
 1003c2c:	1014b200 	call	1014b20 <malloc>
 1003c30:	1007883a 	mov	r3,r2
 1003c34:	e0bfff17 	ldw	r2,-4(fp)
 1003c38:	10c00815 	stw	r3,32(r2)
	passwordSetup->inputBoxes = malloc(sizeof(InputBox) * 1);
 1003c3c:	01004704 	movi	r4,284
 1003c40:	1014b200 	call	1014b20 <malloc>
 1003c44:	1007883a 	mov	r3,r2
 1003c48:	e0bfff17 	ldw	r2,-4(fp)
 1003c4c:	10c05d15 	stw	r3,372(r2)
	passwordSetup->backColour = WHITE;
 1003c50:	e0ffff17 	ldw	r3,-4(fp)
 1003c54:	00800044 	movi	r2,1
 1003c58:	18800015 	stw	r2,0(r3)
	passwordSetup->numObjects = 0;
 1003c5c:	e0bfff17 	ldw	r2,-4(fp)
 1003c60:	10000415 	stw	zero,16(r2)
	passwordSetup->numButtons = 1;
 1003c64:	e0ffff17 	ldw	r3,-4(fp)
 1003c68:	00800044 	movi	r2,1
 1003c6c:	18800315 	stw	r2,12(r3)
	passwordSetup->numInputBoxes = 1;
 1003c70:	e0ffff17 	ldw	r3,-4(fp)
 1003c74:	00800044 	movi	r2,1
 1003c78:	18800215 	stw	r2,8(r3)
	passwordSetup->numSDBoxes = 3;
 1003c7c:	e0ffff17 	ldw	r3,-4(fp)
 1003c80:	008000c4 	movi	r2,3
 1003c84:	18800515 	stw	r2,20(r3)

	// Home button
	buildButton(100, 50, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 1003c88:	e0bfff17 	ldw	r2,-4(fp)
 1003c8c:	10c00817 	ldw	r3,32(r2)
 1003c90:	d1271117 	ldw	r4,-25532(gp)
 1003c94:	d8000015 	stw	zero,0(sp)
 1003c98:	00800f44 	movi	r2,61
 1003c9c:	d8800115 	stw	r2,4(sp)
 1003ca0:	d8000215 	stw	zero,8(sp)
 1003ca4:	008040f4 	movhi	r2,259
 1003ca8:	10a49a04 	addi	r2,r2,-28056
 1003cac:	d8800315 	stw	r2,12(sp)
 1003cb0:	d8c00415 	stw	r3,16(sp)
 1003cb4:	00800104 	movi	r2,4
 1003cb8:	d8800515 	stw	r2,20(sp)
 1003cbc:	d9000615 	stw	r4,24(sp)
 1003cc0:	01001904 	movi	r4,100
 1003cc4:	01400c84 	movi	r5,50
 1003cc8:	01802584 	movi	r6,150
 1003ccc:	01c00c84 	movi	r7,50
 1003cd0:	1000e8c0 	call	1000e8c <buildButton>
			"Home", &(passwordSetup->buttons[0]), strlen("Home"), home);

	buildSDBox(600, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 1003cd4:	e0bfff17 	ldw	r2,-4(fp)
 1003cd8:	10c05e17 	ldw	r3,376(r2)
 1003cdc:	d8000015 	stw	zero,0(sp)
 1003ce0:	00800f44 	movi	r2,61
 1003ce4:	d8800115 	stw	r2,4(sp)
 1003ce8:	d8000215 	stw	zero,8(sp)
 1003cec:	008040f4 	movhi	r2,259
 1003cf0:	10a4f404 	addi	r2,r2,-27696
 1003cf4:	d8800315 	stw	r2,12(sp)
 1003cf8:	d8c00415 	stw	r3,16(sp)
 1003cfc:	00800244 	movi	r2,9
 1003d00:	d8800515 	stw	r2,20(sp)
 1003d04:	01009604 	movi	r4,600
 1003d08:	01406404 	movi	r5,400
 1003d0c:	01802584 	movi	r6,150
 1003d10:	01c00c84 	movi	r7,50
 1003d14:	100aafc0 	call	100aafc <buildSDBox>
			"Change PW", &(passwordSetup->sdBoxes[0]), strlen("Change PW"));

	buildSDBox(200, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 1003d18:	e0bfff17 	ldw	r2,-4(fp)
 1003d1c:	10805e17 	ldw	r2,376(r2)
 1003d20:	10c00904 	addi	r3,r2,36
 1003d24:	d8000015 	stw	zero,0(sp)
 1003d28:	00800f44 	movi	r2,61
 1003d2c:	d8800115 	stw	r2,4(sp)
 1003d30:	d8000215 	stw	zero,8(sp)
 1003d34:	008040f4 	movhi	r2,259
 1003d38:	10a4f704 	addi	r2,r2,-27684
 1003d3c:	d8800315 	stw	r2,12(sp)
 1003d40:	d8c00415 	stw	r3,16(sp)
 1003d44:	00800184 	movi	r2,6
 1003d48:	d8800515 	stw	r2,20(sp)
 1003d4c:	01003204 	movi	r4,200
 1003d50:	01406404 	movi	r5,400
 1003d54:	01802584 	movi	r6,150
 1003d58:	01c00c84 	movi	r7,50
 1003d5c:	100aafc0 	call	100aafc <buildSDBox>
			"Enable", &(passwordSetup->sdBoxes[1]), strlen("Enable"));

	buildSDBox(400, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, RED, BLACK,
 1003d60:	e0bfff17 	ldw	r2,-4(fp)
 1003d64:	10805e17 	ldw	r2,376(r2)
 1003d68:	10c01204 	addi	r3,r2,72
 1003d6c:	d8000015 	stw	zero,0(sp)
 1003d70:	00800084 	movi	r2,2
 1003d74:	d8800115 	stw	r2,4(sp)
 1003d78:	d8000215 	stw	zero,8(sp)
 1003d7c:	008040f4 	movhi	r2,259
 1003d80:	10a4f904 	addi	r2,r2,-27676
 1003d84:	d8800315 	stw	r2,12(sp)
 1003d88:	d8c00415 	stw	r3,16(sp)
 1003d8c:	008001c4 	movi	r2,7
 1003d90:	d8800515 	stw	r2,20(sp)
 1003d94:	01006404 	movi	r4,400
 1003d98:	01406404 	movi	r5,400
 1003d9c:	01802584 	movi	r6,150
 1003da0:	01c00c84 	movi	r7,50
 1003da4:	100aafc0 	call	100aafc <buildSDBox>
			"Disable", &(passwordSetup->sdBoxes[2]), strlen("Disable"));

	buildInputBox(&(passwordSetup->inputBoxes[0]), 380, 200, BUTTON_WIDTH * 4,
 1003da8:	e0bfff17 	ldw	r2,-4(fp)
 1003dac:	11005d17 	ldw	r4,372(r2)
 1003db0:	00801904 	movi	r2,100
 1003db4:	d8800015 	stw	r2,0(sp)
 1003db8:	00800044 	movi	r2,1
 1003dbc:	d8800115 	stw	r2,4(sp)
 1003dc0:	d8000215 	stw	zero,8(sp)
 1003dc4:	d8000315 	stw	zero,12(sp)
 1003dc8:	01405f04 	movi	r5,380
 1003dcc:	01803204 	movi	r6,200
 1003dd0:	01c09604 	movi	r7,600
 1003dd4:	100a8c80 	call	100a8c8 <buildInputBox>
			BUTTON_HEIGHT * 2, WHITE, BLACK, BLACK);

}
 1003dd8:	e037883a 	mov	sp,fp
 1003ddc:	dfc00117 	ldw	ra,4(sp)
 1003de0:	df000017 	ldw	fp,0(sp)
 1003de4:	dec00204 	addi	sp,sp,8
 1003de8:	f800283a 	ret

01003dec <buildLoggingSettingsPage>:

void buildLoggingSettingsPage(Page * loggingSettings) {
 1003dec:	defff604 	addi	sp,sp,-40
 1003df0:	dfc00915 	stw	ra,36(sp)
 1003df4:	df000815 	stw	fp,32(sp)
 1003df8:	df000804 	addi	fp,sp,32
 1003dfc:	e13fff15 	stw	r4,-4(fp)

	loggingSettings->buttons = malloc(sizeof(Button) * 1);
 1003e00:	01000a04 	movi	r4,40
 1003e04:	1014b200 	call	1014b20 <malloc>
 1003e08:	1007883a 	mov	r3,r2
 1003e0c:	e0bfff17 	ldw	r2,-4(fp)
 1003e10:	10c00815 	stw	r3,32(r2)
	loggingSettings->objects = malloc(sizeof(Object) * 1);
 1003e14:	01000904 	movi	r4,36
 1003e18:	1014b200 	call	1014b20 <malloc>
 1003e1c:	1007883a 	mov	r3,r2
 1003e20:	e0bfff17 	ldw	r2,-4(fp)
 1003e24:	10c00915 	stw	r3,36(r2)
	loggingSettings->inputBoxes = malloc(sizeof(InputBox) * 1);
 1003e28:	01004704 	movi	r4,284
 1003e2c:	1014b200 	call	1014b20 <malloc>
 1003e30:	1007883a 	mov	r3,r2
 1003e34:	e0bfff17 	ldw	r2,-4(fp)
 1003e38:	10c05d15 	stw	r3,372(r2)
	loggingSettings->sdBoxes = malloc(sizeof(SDBox) * 3);
 1003e3c:	01001b04 	movi	r4,108
 1003e40:	1014b200 	call	1014b20 <malloc>
 1003e44:	1007883a 	mov	r3,r2
 1003e48:	e0bfff17 	ldw	r2,-4(fp)
 1003e4c:	10c05e15 	stw	r3,376(r2)
	loggingSettings->numButtons = 1;
 1003e50:	e0ffff17 	ldw	r3,-4(fp)
 1003e54:	00800044 	movi	r2,1
 1003e58:	18800315 	stw	r2,12(r3)
	loggingSettings->numObjects = 1;
 1003e5c:	e0ffff17 	ldw	r3,-4(fp)
 1003e60:	00800044 	movi	r2,1
 1003e64:	18800415 	stw	r2,16(r3)
	loggingSettings->backColour = WHITE;
 1003e68:	e0ffff17 	ldw	r3,-4(fp)
 1003e6c:	00800044 	movi	r2,1
 1003e70:	18800015 	stw	r2,0(r3)
	loggingSettings->numInputBoxes = 1;
 1003e74:	e0ffff17 	ldw	r3,-4(fp)
 1003e78:	00800044 	movi	r2,1
 1003e7c:	18800215 	stw	r2,8(r3)
	loggingSettings->numSDBoxes = 3;
 1003e80:	e0ffff17 	ldw	r3,-4(fp)
 1003e84:	008000c4 	movi	r2,3
 1003e88:	18800515 	stw	r2,20(r3)

	buildButton(160, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 1003e8c:	e0bfff17 	ldw	r2,-4(fp)
 1003e90:	10c00817 	ldw	r3,32(r2)
 1003e94:	d1271117 	ldw	r4,-25532(gp)
 1003e98:	d8000015 	stw	zero,0(sp)
 1003e9c:	00800f44 	movi	r2,61
 1003ea0:	d8800115 	stw	r2,4(sp)
 1003ea4:	d8000215 	stw	zero,8(sp)
 1003ea8:	008040f4 	movhi	r2,259
 1003eac:	10a49a04 	addi	r2,r2,-28056
 1003eb0:	d8800315 	stw	r2,12(sp)
 1003eb4:	d8c00415 	stw	r3,16(sp)
 1003eb8:	00800104 	movi	r2,4
 1003ebc:	d8800515 	stw	r2,20(sp)
 1003ec0:	d9000615 	stw	r4,24(sp)
 1003ec4:	01002804 	movi	r4,160
 1003ec8:	01406404 	movi	r5,400
 1003ecc:	01802584 	movi	r6,150
 1003ed0:	01c00c84 	movi	r7,50
 1003ed4:	1000e8c0 	call	1000e8c <buildButton>
			"Home", &(loggingSettings->buttons[0]), strlen("Home"), home);

	buildObject(380 + 15, 150, BUTTON_WIDTH * 3 + 30, BUTTON_HEIGHT, BLACK,
 1003ed8:	e0bfff17 	ldw	r2,-4(fp)
 1003edc:	10c00917 	ldw	r3,36(r2)
 1003ee0:	d8000015 	stw	zero,0(sp)
 1003ee4:	00800f44 	movi	r2,61
 1003ee8:	d8800115 	stw	r2,4(sp)
 1003eec:	d8000215 	stw	zero,8(sp)
 1003ef0:	008040f4 	movhi	r2,259
 1003ef4:	10a4fb04 	addi	r2,r2,-27668
 1003ef8:	d8800315 	stw	r2,12(sp)
 1003efc:	d8c00415 	stw	r3,16(sp)
 1003f00:	00800884 	movi	r2,34
 1003f04:	d8800515 	stw	r2,20(sp)
 1003f08:	010062c4 	movi	r4,395
 1003f0c:	01402584 	movi	r5,150
 1003f10:	01807804 	movi	r6,480
 1003f14:	01c00c84 	movi	r7,50
 1003f18:	10023f80 	call	10023f8 <buildObject>
			AQUA, BLACK, "Please Set Fence Radius In Metres:",
			&(loggingSettings->objects[0]),
			strlen("Please Set Fence Radius In Metres:"));

	buildInputBox(&(loggingSettings->inputBoxes[0]), 380, 200, BUTTON_WIDTH * 3,
 1003f1c:	e0bfff17 	ldw	r2,-4(fp)
 1003f20:	11005d17 	ldw	r4,372(r2)
 1003f24:	00800c84 	movi	r2,50
 1003f28:	d8800015 	stw	r2,0(sp)
 1003f2c:	00800044 	movi	r2,1
 1003f30:	d8800115 	stw	r2,4(sp)
 1003f34:	d8000215 	stw	zero,8(sp)
 1003f38:	d8000315 	stw	zero,12(sp)
 1003f3c:	01405f04 	movi	r5,380
 1003f40:	01803204 	movi	r6,200
 1003f44:	01c07084 	movi	r7,450
 1003f48:	100a8c80 	call	100a8c8 <buildInputBox>
			BUTTON_HEIGHT, WHITE, BLACK, BLACK);

	buildSDBox(320, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 1003f4c:	e0bfff17 	ldw	r2,-4(fp)
 1003f50:	10c05e17 	ldw	r3,376(r2)
 1003f54:	d8000015 	stw	zero,0(sp)
 1003f58:	00800f44 	movi	r2,61
 1003f5c:	d8800115 	stw	r2,4(sp)
 1003f60:	d8000215 	stw	zero,8(sp)
 1003f64:	008040f4 	movhi	r2,259
 1003f68:	10a50404 	addi	r2,r2,-27632
 1003f6c:	d8800315 	stw	r2,12(sp)
 1003f70:	d8c00415 	stw	r3,16(sp)
 1003f74:	00800384 	movi	r2,14
 1003f78:	d8800515 	stw	r2,20(sp)
 1003f7c:	01005004 	movi	r4,320
 1003f80:	01406404 	movi	r5,400
 1003f84:	01802584 	movi	r6,150
 1003f88:	01c00c84 	movi	r7,50
 1003f8c:	100aafc0 	call	100aafc <buildSDBox>
			"Enable Logging", &(loggingSettings->sdBoxes[0]),
			strlen("Enable Logging"));

	buildSDBox(480, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, RED, BLACK,
 1003f90:	e0bfff17 	ldw	r2,-4(fp)
 1003f94:	10805e17 	ldw	r2,376(r2)
 1003f98:	10c00904 	addi	r3,r2,36
 1003f9c:	d8000015 	stw	zero,0(sp)
 1003fa0:	00800084 	movi	r2,2
 1003fa4:	d8800115 	stw	r2,4(sp)
 1003fa8:	d8000215 	stw	zero,8(sp)
 1003fac:	008040f4 	movhi	r2,259
 1003fb0:	10a50804 	addi	r2,r2,-27616
 1003fb4:	d8800315 	stw	r2,12(sp)
 1003fb8:	d8c00415 	stw	r3,16(sp)
 1003fbc:	008003c4 	movi	r2,15
 1003fc0:	d8800515 	stw	r2,20(sp)
 1003fc4:	01007804 	movi	r4,480
 1003fc8:	01406404 	movi	r5,400
 1003fcc:	01802584 	movi	r6,150
 1003fd0:	01c00c84 	movi	r7,50
 1003fd4:	100aafc0 	call	100aafc <buildSDBox>
			"Disable Logging", &(loggingSettings->sdBoxes[1]),
			strlen("Disable Logging"));

	buildSDBox(640, 400, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, LIME_GREEN, BLACK,
 1003fd8:	e0bfff17 	ldw	r2,-4(fp)
 1003fdc:	10805e17 	ldw	r2,376(r2)
 1003fe0:	10c01204 	addi	r3,r2,72
 1003fe4:	d8000015 	stw	zero,0(sp)
 1003fe8:	00800c04 	movi	r2,48
 1003fec:	d8800115 	stw	r2,4(sp)
 1003ff0:	d8000215 	stw	zero,8(sp)
 1003ff4:	008040f4 	movhi	r2,259
 1003ff8:	10a50c04 	addi	r2,r2,-27600
 1003ffc:	d8800315 	stw	r2,12(sp)
 1004000:	d8c00415 	stw	r3,16(sp)
 1004004:	00800344 	movi	r2,13
 1004008:	d8800515 	stw	r2,20(sp)
 100400c:	0100a004 	movi	r4,640
 1004010:	01406404 	movi	r5,400
 1004014:	01802584 	movi	r6,150
 1004018:	01c00c84 	movi	r7,50
 100401c:	100aafc0 	call	100aafc <buildSDBox>
			"Save Distance", &(loggingSettings->sdBoxes[2]),
			strlen("Save Distance"));
}
 1004020:	e037883a 	mov	sp,fp
 1004024:	dfc00117 	ldw	ra,4(sp)
 1004028:	df000017 	ldw	fp,0(sp)
 100402c:	dec00204 	addi	sp,sp,8
 1004030:	f800283a 	ret

01004034 <buildPanicPage>:

void buildPanicPage(Page *panicPage) {
 1004034:	defff604 	addi	sp,sp,-40
 1004038:	dfc00915 	stw	ra,36(sp)
 100403c:	df000815 	stw	fp,32(sp)
 1004040:	df000804 	addi	fp,sp,32
 1004044:	e13fff15 	stw	r4,-4(fp)
	panicPage->buttons = malloc(sizeof(Button) * 4);
 1004048:	01002804 	movi	r4,160
 100404c:	1014b200 	call	1014b20 <malloc>
 1004050:	1007883a 	mov	r3,r2
 1004054:	e0bfff17 	ldw	r2,-4(fp)
 1004058:	10c00815 	stw	r3,32(r2)
	panicPage->objects = malloc(sizeof(Object) * 1);
 100405c:	01000904 	movi	r4,36
 1004060:	1014b200 	call	1014b20 <malloc>
 1004064:	1007883a 	mov	r3,r2
 1004068:	e0bfff17 	ldw	r2,-4(fp)
 100406c:	10c00915 	stw	r3,36(r2)
	panicPage->numButtons = 4;
 1004070:	e0ffff17 	ldw	r3,-4(fp)
 1004074:	00800104 	movi	r2,4
 1004078:	18800315 	stw	r2,12(r3)
	panicPage->numObjects = 1;
 100407c:	e0ffff17 	ldw	r3,-4(fp)
 1004080:	00800044 	movi	r2,1
 1004084:	18800415 	stw	r2,16(r3)
	panicPage->backColour = BLACK;
 1004088:	e0bfff17 	ldw	r2,-4(fp)
 100408c:	10000015 	stw	zero,0(r2)
	panicPage->numInputBoxes = 0;
 1004090:	e0bfff17 	ldw	r2,-4(fp)
 1004094:	10000215 	stw	zero,8(r2)
	panicPage->numSDBoxes = 0;
 1004098:	e0bfff17 	ldw	r2,-4(fp)
 100409c:	10000515 	stw	zero,20(r2)

	buildButton(700, 420, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 10040a0:	e0bfff17 	ldw	r2,-4(fp)
 10040a4:	10c00817 	ldw	r3,32(r2)
 10040a8:	d1271117 	ldw	r4,-25532(gp)
 10040ac:	d8000015 	stw	zero,0(sp)
 10040b0:	00800f44 	movi	r2,61
 10040b4:	d8800115 	stw	r2,4(sp)
 10040b8:	d8000215 	stw	zero,8(sp)
 10040bc:	008040f4 	movhi	r2,259
 10040c0:	10a4b904 	addi	r2,r2,-27932
 10040c4:	d8800315 	stw	r2,12(sp)
 10040c8:	d8c00415 	stw	r3,16(sp)
 10040cc:	00800104 	movi	r2,4
 10040d0:	d8800515 	stw	r2,20(sp)
 10040d4:	d9000615 	stw	r4,24(sp)
 10040d8:	0100af04 	movi	r4,700
 10040dc:	01406904 	movi	r5,420
 10040e0:	01802584 	movi	r6,150
 10040e4:	01c00c84 	movi	r7,50
 10040e8:	1000e8c0 	call	1000e8c <buildButton>
			"Menu", &(panicPage->buttons[0]), strlen("Menu"), home);
	buildButton(200, 300, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 10040ec:	e0bfff17 	ldw	r2,-4(fp)
 10040f0:	10800817 	ldw	r2,32(r2)
 10040f4:	10c00a04 	addi	r3,r2,40
 10040f8:	d1270617 	ldw	r4,-25576(gp)
 10040fc:	d8000015 	stw	zero,0(sp)
 1004100:	00800f44 	movi	r2,61
 1004104:	d8800115 	stw	r2,4(sp)
 1004108:	d8000215 	stw	zero,8(sp)
 100410c:	008040f4 	movhi	r2,259
 1004110:	10a48304 	addi	r2,r2,-28148
 1004114:	d8800315 	stw	r2,12(sp)
 1004118:	d8c00415 	stw	r3,16(sp)
 100411c:	008002c4 	movi	r2,11
 1004120:	d8800515 	stw	r2,20(sp)
 1004124:	d9000615 	stw	r4,24(sp)
 1004128:	01003204 	movi	r4,200
 100412c:	01404b04 	movi	r5,300
 1004130:	01802584 	movi	r6,150
 1004134:	01c00c84 	movi	r7,50
 1004138:	1000e8c0 	call	1000e8c <buildButton>
			"Where am I?", &(panicPage->buttons[1]), strlen("Where am I?"),
			map);
	buildButton(600, 300, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 100413c:	e0bfff17 	ldw	r2,-4(fp)
 1004140:	10800817 	ldw	r2,32(r2)
 1004144:	10c01404 	addi	r3,r2,80
 1004148:	d1270517 	ldw	r4,-25580(gp)
 100414c:	d8000015 	stw	zero,0(sp)
 1004150:	00800f44 	movi	r2,61
 1004154:	d8800115 	stw	r2,4(sp)
 1004158:	d8000215 	stw	zero,8(sp)
 100415c:	008040f4 	movhi	r2,259
 1004160:	10a51004 	addi	r2,r2,-27584
 1004164:	d8800315 	stw	r2,12(sp)
 1004168:	d8c00415 	stw	r3,16(sp)
 100416c:	00800244 	movi	r2,9
 1004170:	d8800515 	stw	r2,20(sp)
 1004174:	d9000615 	stw	r4,24(sp)
 1004178:	01009604 	movi	r4,600
 100417c:	01404b04 	movi	r5,300
 1004180:	01802584 	movi	r6,150
 1004184:	01c00c84 	movi	r7,50
 1004188:	1000e8c0 	call	1000e8c <buildButton>
			"Remind Me", &(panicPage->buttons[2]), strlen("Remind Me"), self);
	buildButton(400, 300, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 100418c:	e0bfff17 	ldw	r2,-4(fp)
 1004190:	10800817 	ldw	r2,32(r2)
 1004194:	10c01e04 	addi	r3,r2,120
 1004198:	d1270d17 	ldw	r4,-25548(gp)
 100419c:	d8000015 	stw	zero,0(sp)
 10041a0:	00800f44 	movi	r2,61
 10041a4:	d8800115 	stw	r2,4(sp)
 10041a8:	d8000215 	stw	zero,8(sp)
 10041ac:	008040f4 	movhi	r2,259
 10041b0:	10a51304 	addi	r2,r2,-27572
 10041b4:	d8800315 	stw	r2,12(sp)
 10041b8:	d8c00415 	stw	r3,16(sp)
 10041bc:	008001c4 	movi	r2,7
 10041c0:	d8800515 	stw	r2,20(sp)
 10041c4:	d9000615 	stw	r4,24(sp)
 10041c8:	01006404 	movi	r4,400
 10041cc:	01404b04 	movi	r5,300
 10041d0:	01802584 	movi	r6,150
 10041d4:	01c00c84 	movi	r7,50
 10041d8:	1000e8c0 	call	1000e8c <buildButton>
			"Logging", &(panicPage->buttons[3]), strlen("Logging"),
			loggingSettings);

	buildObject(400, 200, 500, 100, RED, RED, RED, "You Got Out Of The Fence",
 10041dc:	e0bfff17 	ldw	r2,-4(fp)
 10041e0:	10c00917 	ldw	r3,36(r2)
 10041e4:	00800084 	movi	r2,2
 10041e8:	d8800015 	stw	r2,0(sp)
 10041ec:	00800084 	movi	r2,2
 10041f0:	d8800115 	stw	r2,4(sp)
 10041f4:	00800084 	movi	r2,2
 10041f8:	d8800215 	stw	r2,8(sp)
 10041fc:	008040f4 	movhi	r2,259
 1004200:	10a51504 	addi	r2,r2,-27564
 1004204:	d8800315 	stw	r2,12(sp)
 1004208:	d8c00415 	stw	r3,16(sp)
 100420c:	00800604 	movi	r2,24
 1004210:	d8800515 	stw	r2,20(sp)
 1004214:	01006404 	movi	r4,400
 1004218:	01403204 	movi	r5,200
 100421c:	01807d04 	movi	r6,500
 1004220:	01c01904 	movi	r7,100
 1004224:	10023f80 	call	10023f8 <buildObject>
			&(panicPage->objects[0]), strlen("You Got Out Of The Fence"));

	// disable logging intially
	writeToSD("n", "logfl.txt");
 1004228:	010040f4 	movhi	r4,259
 100422c:	21251c04 	addi	r4,r4,-27536
 1004230:	014040f4 	movhi	r5,259
 1004234:	29651d04 	addi	r5,r5,-27532
 1004238:	100ad340 	call	100ad34 <writeToSD>
	// intialize panicFlag
	panicFlag = 0;
 100423c:	d0271215 	stw	zero,-25528(gp)
}
 1004240:	e037883a 	mov	sp,fp
 1004244:	dfc00117 	ldw	ra,4(sp)
 1004248:	df000017 	ldw	fp,0(sp)
 100424c:	dec00204 	addi	sp,sp,8
 1004250:	f800283a 	ret

01004254 <buildAddressesPage>:

void buildAddressesPage(Page *addresses) {
 1004254:	defe7104 	addi	sp,sp,-1596
 1004258:	dfc18e15 	stw	ra,1592(sp)
 100425c:	df018d15 	stw	fp,1588(sp)
 1004260:	dc018c15 	stw	r16,1584(sp)
 1004264:	df018c04 	addi	fp,sp,1584
 1004268:	e13fff15 	stw	r4,-4(fp)
	addresses->buttons = malloc(sizeof(Button) * 1);
 100426c:	01000a04 	movi	r4,40
 1004270:	1014b200 	call	1014b20 <malloc>
 1004274:	1007883a 	mov	r3,r2
 1004278:	e0bfff17 	ldw	r2,-4(fp)
 100427c:	10c00815 	stw	r3,32(r2)
	addresses->objects = malloc(sizeof(Object) * 4);
 1004280:	01002404 	movi	r4,144
 1004284:	1014b200 	call	1014b20 <malloc>
 1004288:	1007883a 	mov	r3,r2
 100428c:	e0bfff17 	ldw	r2,-4(fp)
 1004290:	10c00915 	stw	r3,36(r2)
	addresses->numButtons = 1;
 1004294:	e0ffff17 	ldw	r3,-4(fp)
 1004298:	00800044 	movi	r2,1
 100429c:	18800315 	stw	r2,12(r3)
	addresses->numObjects = 4;
 10042a0:	e0ffff17 	ldw	r3,-4(fp)
 10042a4:	00800104 	movi	r2,4
 10042a8:	18800415 	stw	r2,16(r3)
	addresses->backColour = POWDER_BLUE;
 10042ac:	e0ffff17 	ldw	r3,-4(fp)
 10042b0:	00801104 	movi	r2,68
 10042b4:	18800015 	stw	r2,0(r3)
	addresses->numInputBoxes = 0;
 10042b8:	e0bfff17 	ldw	r2,-4(fp)
 10042bc:	10000215 	stw	zero,8(r2)
	addresses->numSDBoxes = 0;
 10042c0:	e0bfff17 	ldw	r2,-4(fp)
 10042c4:	10000515 	stw	zero,20(r2)

	char read[512] = "";
 10042c8:	008040f4 	movhi	r2,259
 10042cc:	10a4ea04 	addi	r2,r2,-27736
 10042d0:	10800003 	ldbu	r2,0(r2)
 10042d4:	e0be7f05 	stb	r2,-1540(fp)
 10042d8:	e13e7f44 	addi	r4,fp,-1539
 10042dc:	01807fc4 	movi	r6,511
 10042e0:	000b883a 	mov	r5,zero
 10042e4:	10153f40 	call	10153f4 <memset>
	char read2[512] = "";
 10042e8:	008040f4 	movhi	r2,259
 10042ec:	10a4ea04 	addi	r2,r2,-27736
 10042f0:	10800003 	ldbu	r2,0(r2)
 10042f4:	e0beff05 	stb	r2,-1028(fp)
 10042f8:	e13eff44 	addi	r4,fp,-1027
 10042fc:	01807fc4 	movi	r6,511
 1004300:	000b883a 	mov	r5,zero
 1004304:	10153f40 	call	10153f4 <memset>
	char read3[512] = "";
 1004308:	008040f4 	movhi	r2,259
 100430c:	10a4ea04 	addi	r2,r2,-27736
 1004310:	10800003 	ldbu	r2,0(r2)
 1004314:	e0bf7f05 	stb	r2,-516(fp)
 1004318:	e13f7f44 	addi	r4,fp,-515
 100431c:	01807fc4 	movi	r6,511
 1004320:	000b883a 	mov	r5,zero
 1004324:	10153f40 	call	10153f4 <memset>
	char* ad;
	char* ad2;
	char* ad3;
	int i;

	readFromSD(read, AD1, 512);
 1004328:	e13e7f04 	addi	r4,fp,-1540
 100432c:	014040f4 	movhi	r5,259
 1004330:	29652004 	addi	r5,r5,-27520
 1004334:	01808004 	movi	r6,512
 1004338:	100ae780 	call	100ae78 <readFromSD>
	for(i=0;i<512;i++){
 100433c:	e03e7b15 	stw	zero,-1556(fp)
 1004340:	00001106 	br	1004388 <buildAddressesPage+0x134>
		if(read[i]=='$'){
 1004344:	e0fe7b17 	ldw	r3,-1556(fp)
 1004348:	e0be7f04 	addi	r2,fp,-1540
 100434c:	10c5883a 	add	r2,r2,r3
 1004350:	10800003 	ldbu	r2,0(r2)
 1004354:	10803fcc 	andi	r2,r2,255
 1004358:	1080201c 	xori	r2,r2,128
 100435c:	10bfe004 	addi	r2,r2,-128
 1004360:	10800918 	cmpnei	r2,r2,36
 1004364:	1000051e 	bne	r2,zero,100437c <buildAddressesPage+0x128>
		read[i]='\0';
 1004368:	e0be7b17 	ldw	r2,-1556(fp)
 100436c:	e0fe7f04 	addi	r3,fp,-1540
 1004370:	1885883a 	add	r2,r3,r2
 1004374:	10000005 	stb	zero,0(r2)
		break;
 1004378:	00000606 	br	1004394 <buildAddressesPage+0x140>
	char* ad2;
	char* ad3;
	int i;

	readFromSD(read, AD1, 512);
	for(i=0;i<512;i++){
 100437c:	e0be7b17 	ldw	r2,-1556(fp)
 1004380:	10800044 	addi	r2,r2,1
 1004384:	e0be7b15 	stw	r2,-1556(fp)
 1004388:	e0be7b17 	ldw	r2,-1556(fp)
 100438c:	10808010 	cmplti	r2,r2,512
 1004390:	103fec1e 	bne	r2,zero,1004344 <buildAddressesPage+0xf0>
		if(read[i]=='$'){
		read[i]='\0';
		break;
		}
	}
	ad = malloc(strlen(read) * sizeof(char));
 1004394:	e13e7f04 	addi	r4,fp,-1540
 1004398:	1015cfc0 	call	1015cfc <strlen>
 100439c:	1009883a 	mov	r4,r2
 10043a0:	1014b200 	call	1014b20 <malloc>
 10043a4:	e0be7e15 	stw	r2,-1544(fp)
	strcpy(ad,read);
 10043a8:	e17e7f04 	addi	r5,fp,-1540
 10043ac:	e13e7e17 	ldw	r4,-1544(fp)
 10043b0:	1015c700 	call	1015c70 <strcpy>

	readFromSD(read2, AD2, 512);
 10043b4:	e13eff04 	addi	r4,fp,-1028
 10043b8:	014040f4 	movhi	r5,259
 10043bc:	29652204 	addi	r5,r5,-27512
 10043c0:	01808004 	movi	r6,512
 10043c4:	100ae780 	call	100ae78 <readFromSD>
	for(i=0;i<512;i++){
 10043c8:	e03e7b15 	stw	zero,-1556(fp)
 10043cc:	00001106 	br	1004414 <buildAddressesPage+0x1c0>
		if(read2[i]=='$'){
 10043d0:	e0fe7b17 	ldw	r3,-1556(fp)
 10043d4:	e0beff04 	addi	r2,fp,-1028
 10043d8:	10c5883a 	add	r2,r2,r3
 10043dc:	10800003 	ldbu	r2,0(r2)
 10043e0:	10803fcc 	andi	r2,r2,255
 10043e4:	1080201c 	xori	r2,r2,128
 10043e8:	10bfe004 	addi	r2,r2,-128
 10043ec:	10800918 	cmpnei	r2,r2,36
 10043f0:	1000051e 	bne	r2,zero,1004408 <buildAddressesPage+0x1b4>
		read2[i]='\0';
 10043f4:	e0be7b17 	ldw	r2,-1556(fp)
 10043f8:	e0feff04 	addi	r3,fp,-1028
 10043fc:	1885883a 	add	r2,r3,r2
 1004400:	10000005 	stb	zero,0(r2)
		break;
 1004404:	00000606 	br	1004420 <buildAddressesPage+0x1cc>
	}
	ad = malloc(strlen(read) * sizeof(char));
	strcpy(ad,read);

	readFromSD(read2, AD2, 512);
	for(i=0;i<512;i++){
 1004408:	e0be7b17 	ldw	r2,-1556(fp)
 100440c:	10800044 	addi	r2,r2,1
 1004410:	e0be7b15 	stw	r2,-1556(fp)
 1004414:	e0be7b17 	ldw	r2,-1556(fp)
 1004418:	10808010 	cmplti	r2,r2,512
 100441c:	103fec1e 	bne	r2,zero,10043d0 <buildAddressesPage+0x17c>
		if(read2[i]=='$'){
		read2[i]='\0';
		break;
		}
	}
	ad2 = malloc(strlen(read2) * sizeof(char));
 1004420:	e13eff04 	addi	r4,fp,-1028
 1004424:	1015cfc0 	call	1015cfc <strlen>
 1004428:	1009883a 	mov	r4,r2
 100442c:	1014b200 	call	1014b20 <malloc>
 1004430:	e0be7d15 	stw	r2,-1548(fp)
	strcpy(ad2,read2);
 1004434:	e17eff04 	addi	r5,fp,-1028
 1004438:	e13e7d17 	ldw	r4,-1548(fp)
 100443c:	1015c700 	call	1015c70 <strcpy>

	readFromSD(read3, AD3, 512);
 1004440:	e13f7f04 	addi	r4,fp,-516
 1004444:	014040f4 	movhi	r5,259
 1004448:	29652404 	addi	r5,r5,-27504
 100444c:	01808004 	movi	r6,512
 1004450:	100ae780 	call	100ae78 <readFromSD>
	for(i=0;i<512;i++){
 1004454:	e03e7b15 	stw	zero,-1556(fp)
 1004458:	00001106 	br	10044a0 <buildAddressesPage+0x24c>
		if(read3[i]=='$'){
 100445c:	e0fe7b17 	ldw	r3,-1556(fp)
 1004460:	e0bf7f04 	addi	r2,fp,-516
 1004464:	10c5883a 	add	r2,r2,r3
 1004468:	10800003 	ldbu	r2,0(r2)
 100446c:	10803fcc 	andi	r2,r2,255
 1004470:	1080201c 	xori	r2,r2,128
 1004474:	10bfe004 	addi	r2,r2,-128
 1004478:	10800918 	cmpnei	r2,r2,36
 100447c:	1000051e 	bne	r2,zero,1004494 <buildAddressesPage+0x240>
		read3[i]='\0';
 1004480:	e0be7b17 	ldw	r2,-1556(fp)
 1004484:	e0ff7f04 	addi	r3,fp,-516
 1004488:	1885883a 	add	r2,r3,r2
 100448c:	10000005 	stb	zero,0(r2)
		break;
 1004490:	00000606 	br	10044ac <buildAddressesPage+0x258>
	}
	ad2 = malloc(strlen(read2) * sizeof(char));
	strcpy(ad2,read2);

	readFromSD(read3, AD3, 512);
	for(i=0;i<512;i++){
 1004494:	e0be7b17 	ldw	r2,-1556(fp)
 1004498:	10800044 	addi	r2,r2,1
 100449c:	e0be7b15 	stw	r2,-1556(fp)
 10044a0:	e0be7b17 	ldw	r2,-1556(fp)
 10044a4:	10808010 	cmplti	r2,r2,512
 10044a8:	103fec1e 	bne	r2,zero,100445c <buildAddressesPage+0x208>
		if(read3[i]=='$'){
		read3[i]='\0';
		break;
		}
	}
	ad3 = malloc(strlen(read3) * sizeof(char));
 10044ac:	e13f7f04 	addi	r4,fp,-516
 10044b0:	1015cfc0 	call	1015cfc <strlen>
 10044b4:	1009883a 	mov	r4,r2
 10044b8:	1014b200 	call	1014b20 <malloc>
 10044bc:	e0be7c15 	stw	r2,-1552(fp)
	strcpy(ad3,read3);
 10044c0:	e17f7f04 	addi	r5,fp,-516
 10044c4:	e13e7c17 	ldw	r4,-1552(fp)
 10044c8:	1015c700 	call	1015c70 <strcpy>

	buildButton(700, 420, BUTTON_WIDTH, BUTTON_HEIGHT, BLACK, AQUA, BLACK,
 10044cc:	e0bfff17 	ldw	r2,-4(fp)
 10044d0:	10c00817 	ldw	r3,32(r2)
 10044d4:	d1271117 	ldw	r4,-25532(gp)
 10044d8:	d8000015 	stw	zero,0(sp)
 10044dc:	00800f44 	movi	r2,61
 10044e0:	d8800115 	stw	r2,4(sp)
 10044e4:	d8000215 	stw	zero,8(sp)
 10044e8:	008040f4 	movhi	r2,259
 10044ec:	10a4b904 	addi	r2,r2,-27932
 10044f0:	d8800315 	stw	r2,12(sp)
 10044f4:	d8c00415 	stw	r3,16(sp)
 10044f8:	00800104 	movi	r2,4
 10044fc:	d8800515 	stw	r2,20(sp)
 1004500:	d9000615 	stw	r4,24(sp)
 1004504:	0100af04 	movi	r4,700
 1004508:	01406904 	movi	r5,420
 100450c:	01802584 	movi	r6,150
 1004510:	01c00c84 	movi	r7,50
 1004514:	1000e8c0 	call	1000e8c <buildButton>
			"Menu", &(addresses->buttons[0]), strlen("Menu"), home);

	buildObject(400, 50, 400, 30, CORN_FLOWER_BLUE, CORN_FLOWER_BLUE,
 1004518:	e0bfff17 	ldw	r2,-4(fp)
 100451c:	10c00917 	ldw	r3,36(r2)
 1004520:	008011c4 	movi	r2,71
 1004524:	d8800015 	stw	r2,0(sp)
 1004528:	008011c4 	movi	r2,71
 100452c:	d8800115 	stw	r2,4(sp)
 1004530:	008011c4 	movi	r2,71
 1004534:	d8800215 	stw	r2,8(sp)
 1004538:	008040f4 	movhi	r2,259
 100453c:	10a52604 	addi	r2,r2,-27496
 1004540:	d8800315 	stw	r2,12(sp)
 1004544:	d8c00415 	stw	r3,16(sp)
 1004548:	00800444 	movi	r2,17
 100454c:	d8800515 	stw	r2,20(sp)
 1004550:	01006404 	movi	r4,400
 1004554:	01400c84 	movi	r5,50
 1004558:	01806404 	movi	r6,400
 100455c:	01c00784 	movi	r7,30
 1004560:	10023f80 	call	10023f8 <buildObject>
			CORN_FLOWER_BLUE, "List of Addresses", &(addresses->objects[0]),
			strlen("List of Addresses"));
	buildObject(400, 170, 650, 50, WHITE, WHITE, WHITE, ad,
 1004564:	e0bfff17 	ldw	r2,-4(fp)
 1004568:	10800917 	ldw	r2,36(r2)
 100456c:	14000904 	addi	r16,r2,36
 1004570:	e13e7e17 	ldw	r4,-1544(fp)
 1004574:	1015cfc0 	call	1015cfc <strlen>
 1004578:	1007883a 	mov	r3,r2
 100457c:	00800044 	movi	r2,1
 1004580:	d8800015 	stw	r2,0(sp)
 1004584:	00800044 	movi	r2,1
 1004588:	d8800115 	stw	r2,4(sp)
 100458c:	00800044 	movi	r2,1
 1004590:	d8800215 	stw	r2,8(sp)
 1004594:	e0be7e17 	ldw	r2,-1544(fp)
 1004598:	d8800315 	stw	r2,12(sp)
 100459c:	dc000415 	stw	r16,16(sp)
 10045a0:	d8c00515 	stw	r3,20(sp)
 10045a4:	01006404 	movi	r4,400
 10045a8:	01402a84 	movi	r5,170
 10045ac:	0180a284 	movi	r6,650
 10045b0:	01c00c84 	movi	r7,50
 10045b4:	10023f80 	call	10023f8 <buildObject>
			&(addresses->objects[1]), strlen(ad));
	buildObject(400, 250, 650, 50, WHITE, WHITE, WHITE, ad2,
 10045b8:	e0bfff17 	ldw	r2,-4(fp)
 10045bc:	10800917 	ldw	r2,36(r2)
 10045c0:	14001204 	addi	r16,r2,72
 10045c4:	e13e7d17 	ldw	r4,-1548(fp)
 10045c8:	1015cfc0 	call	1015cfc <strlen>
 10045cc:	1007883a 	mov	r3,r2
 10045d0:	00800044 	movi	r2,1
 10045d4:	d8800015 	stw	r2,0(sp)
 10045d8:	00800044 	movi	r2,1
 10045dc:	d8800115 	stw	r2,4(sp)
 10045e0:	00800044 	movi	r2,1
 10045e4:	d8800215 	stw	r2,8(sp)
 10045e8:	e0be7d17 	ldw	r2,-1548(fp)
 10045ec:	d8800315 	stw	r2,12(sp)
 10045f0:	dc000415 	stw	r16,16(sp)
 10045f4:	d8c00515 	stw	r3,20(sp)
 10045f8:	01006404 	movi	r4,400
 10045fc:	01403e84 	movi	r5,250
 1004600:	0180a284 	movi	r6,650
 1004604:	01c00c84 	movi	r7,50
 1004608:	10023f80 	call	10023f8 <buildObject>
			&(addresses->objects[2]), strlen(ad2));
	buildObject(400, 345, 650, 50, WHITE, WHITE, WHITE, ad3,
 100460c:	e0bfff17 	ldw	r2,-4(fp)
 1004610:	10800917 	ldw	r2,36(r2)
 1004614:	14001b04 	addi	r16,r2,108
 1004618:	e13e7c17 	ldw	r4,-1552(fp)
 100461c:	1015cfc0 	call	1015cfc <strlen>
 1004620:	1007883a 	mov	r3,r2
 1004624:	00800044 	movi	r2,1
 1004628:	d8800015 	stw	r2,0(sp)
 100462c:	00800044 	movi	r2,1
 1004630:	d8800115 	stw	r2,4(sp)
 1004634:	00800044 	movi	r2,1
 1004638:	d8800215 	stw	r2,8(sp)
 100463c:	e0be7c17 	ldw	r2,-1552(fp)
 1004640:	d8800315 	stw	r2,12(sp)
 1004644:	dc000415 	stw	r16,16(sp)
 1004648:	d8c00515 	stw	r3,20(sp)
 100464c:	01006404 	movi	r4,400
 1004650:	01405644 	movi	r5,345
 1004654:	0180a284 	movi	r6,650
 1004658:	01c00c84 	movi	r7,50
 100465c:	10023f80 	call	10023f8 <buildObject>
			&(addresses->objects[3]), strlen(ad3));

}
 1004660:	e037883a 	mov	sp,fp
 1004664:	dfc00217 	ldw	ra,8(sp)
 1004668:	df000117 	ldw	fp,4(sp)
 100466c:	dc000017 	ldw	r16,0(sp)
 1004670:	dec00304 	addi	sp,sp,12
 1004674:	f800283a 	ret

01004678 <char2hex>:
#include <math.h>
#include "Structures.h"
#include "Cipher.h"
#include "SD_CARD.h"

int char2hex(char c) {
 1004678:	defffc04 	addi	sp,sp,-16
 100467c:	df000315 	stw	fp,12(sp)
 1004680:	df000304 	addi	fp,sp,12
 1004684:	e13ffd05 	stb	r4,-12(fp)
	switch (c) {
 1004688:	e0bffd07 	ldb	r2,-12(fp)
 100468c:	10bff404 	addi	r2,r2,-48
 1004690:	e0bfff15 	stw	r2,-4(fp)
 1004694:	e0ffff17 	ldw	r3,-4(fp)
 1004698:	18800de8 	cmpgeui	r2,r3,55
 100469c:	10006f1e 	bne	r2,zero,100485c <char2hex+0x1e4>
 10046a0:	e13fff17 	ldw	r4,-4(fp)
 10046a4:	e13fff17 	ldw	r4,-4(fp)
 10046a8:	2105883a 	add	r2,r4,r4
 10046ac:	1087883a 	add	r3,r2,r2
 10046b0:	00804034 	movhi	r2,256
 10046b4:	1091b104 	addi	r2,r2,18116
 10046b8:	1885883a 	add	r2,r3,r2
 10046bc:	10800017 	ldw	r2,0(r2)
 10046c0:	1000683a 	jmp	r2
 10046c4:	010047a0 	cmpeqi	r4,zero,286
 10046c8:	010047a8 	cmpgeui	r4,zero,286
 10046cc:	010047b4 	movhi	r4,286
 10046d0:	010047c0 	call	10047c <__alt_mem_onchip_memory2_0+0x10047c>
 10046d4:	010047cc 	andi	r4,zero,287
 10046d8:	010047d8 	cmpnei	r4,zero,287
 10046dc:	010047e4 	muli	r4,zero,287
 10046e0:	010047f0 	cmpltui	r4,zero,287
 10046e4:	010047fc 	xorhi	r4,zero,287
 10046e8:	01004808 	cmpgei	r4,zero,288
 10046ec:	0100485c 	xori	r4,zero,289
 10046f0:	0100485c 	xori	r4,zero,289
 10046f4:	0100485c 	xori	r4,zero,289
 10046f8:	0100485c 	xori	r4,zero,289
 10046fc:	0100485c 	xori	r4,zero,289
 1004700:	0100485c 	xori	r4,zero,289
 1004704:	0100485c 	xori	r4,zero,289
 1004708:	0100485c 	xori	r4,zero,289
 100470c:	0100485c 	xori	r4,zero,289
 1004710:	0100485c 	xori	r4,zero,289
 1004714:	0100485c 	xori	r4,zero,289
 1004718:	0100485c 	xori	r4,zero,289
 100471c:	0100485c 	xori	r4,zero,289
 1004720:	0100485c 	xori	r4,zero,289
 1004724:	0100485c 	xori	r4,zero,289
 1004728:	0100485c 	xori	r4,zero,289
 100472c:	0100485c 	xori	r4,zero,289
 1004730:	0100485c 	xori	r4,zero,289
 1004734:	0100485c 	xori	r4,zero,289
 1004738:	0100485c 	xori	r4,zero,289
 100473c:	0100485c 	xori	r4,zero,289
 1004740:	0100485c 	xori	r4,zero,289
 1004744:	0100485c 	xori	r4,zero,289
 1004748:	0100485c 	xori	r4,zero,289
 100474c:	0100485c 	xori	r4,zero,289
 1004750:	0100485c 	xori	r4,zero,289
 1004754:	0100485c 	xori	r4,zero,289
 1004758:	0100485c 	xori	r4,zero,289
 100475c:	0100485c 	xori	r4,zero,289
 1004760:	0100485c 	xori	r4,zero,289
 1004764:	0100485c 	xori	r4,zero,289
 1004768:	0100485c 	xori	r4,zero,289
 100476c:	0100485c 	xori	r4,zero,289
 1004770:	0100485c 	xori	r4,zero,289
 1004774:	0100485c 	xori	r4,zero,289
 1004778:	0100485c 	xori	r4,zero,289
 100477c:	0100485c 	xori	r4,zero,289
 1004780:	0100485c 	xori	r4,zero,289
 1004784:	0100485c 	xori	r4,zero,289
 1004788:	01004814 	movui	r4,288
 100478c:	01004820 	cmpeqi	r4,zero,288
 1004790:	0100482c 	andhi	r4,zero,288
 1004794:	01004838 	rdprs	r4,zero,288
 1004798:	01004844 	movi	r4,289
 100479c:	01004850 	cmplti	r4,zero,289
	case '0':
		return 0;
 10047a0:	e03ffe15 	stw	zero,-8(fp)
 10047a4:	00002f06 	br	1004864 <char2hex+0x1ec>
	case '1':
		return 1;
 10047a8:	00800044 	movi	r2,1
 10047ac:	e0bffe15 	stw	r2,-8(fp)
 10047b0:	00002c06 	br	1004864 <char2hex+0x1ec>
	case '2':
		return 2;
 10047b4:	00c00084 	movi	r3,2
 10047b8:	e0fffe15 	stw	r3,-8(fp)
 10047bc:	00002906 	br	1004864 <char2hex+0x1ec>
	case '3':
		return 3;
 10047c0:	010000c4 	movi	r4,3
 10047c4:	e13ffe15 	stw	r4,-8(fp)
 10047c8:	00002606 	br	1004864 <char2hex+0x1ec>
	case '4':
		return 4;
 10047cc:	00800104 	movi	r2,4
 10047d0:	e0bffe15 	stw	r2,-8(fp)
 10047d4:	00002306 	br	1004864 <char2hex+0x1ec>
	case '5':
		return 5;
 10047d8:	00c00144 	movi	r3,5
 10047dc:	e0fffe15 	stw	r3,-8(fp)
 10047e0:	00002006 	br	1004864 <char2hex+0x1ec>
	case '6':
		return 6;
 10047e4:	01000184 	movi	r4,6
 10047e8:	e13ffe15 	stw	r4,-8(fp)
 10047ec:	00001d06 	br	1004864 <char2hex+0x1ec>
	case '7':
		return 7;
 10047f0:	008001c4 	movi	r2,7
 10047f4:	e0bffe15 	stw	r2,-8(fp)
 10047f8:	00001a06 	br	1004864 <char2hex+0x1ec>
	case '8':
		return 8;
 10047fc:	00c00204 	movi	r3,8
 1004800:	e0fffe15 	stw	r3,-8(fp)
 1004804:	00001706 	br	1004864 <char2hex+0x1ec>
	case '9':
		return 9;
 1004808:	01000244 	movi	r4,9
 100480c:	e13ffe15 	stw	r4,-8(fp)
 1004810:	00001406 	br	1004864 <char2hex+0x1ec>
	case 'a':
		return 10;
 1004814:	00800284 	movi	r2,10
 1004818:	e0bffe15 	stw	r2,-8(fp)
 100481c:	00001106 	br	1004864 <char2hex+0x1ec>
	case 'b':
		return 11;
 1004820:	00c002c4 	movi	r3,11
 1004824:	e0fffe15 	stw	r3,-8(fp)
 1004828:	00000e06 	br	1004864 <char2hex+0x1ec>
	case 'c':
		return 12;
 100482c:	01000304 	movi	r4,12
 1004830:	e13ffe15 	stw	r4,-8(fp)
 1004834:	00000b06 	br	1004864 <char2hex+0x1ec>
	case 'd':
		return 13;
 1004838:	00800344 	movi	r2,13
 100483c:	e0bffe15 	stw	r2,-8(fp)
 1004840:	00000806 	br	1004864 <char2hex+0x1ec>
	case 'e':
		return 14;
 1004844:	00c00384 	movi	r3,14
 1004848:	e0fffe15 	stw	r3,-8(fp)
 100484c:	00000506 	br	1004864 <char2hex+0x1ec>
	case 'f':
		return 15;
 1004850:	010003c4 	movi	r4,15
 1004854:	e13ffe15 	stw	r4,-8(fp)
 1004858:	00000206 	br	1004864 <char2hex+0x1ec>
	default:
		return -1;
 100485c:	00bfffc4 	movi	r2,-1
 1004860:	e0bffe15 	stw	r2,-8(fp)
 1004864:	e0bffe17 	ldw	r2,-8(fp)
	}
}
 1004868:	e037883a 	mov	sp,fp
 100486c:	df000017 	ldw	fp,0(sp)
 1004870:	dec00104 	addi	sp,sp,4
 1004874:	f800283a 	ret

01004878 <hex2char>:

char hex2char(int h) {
 1004878:	defffd04 	addi	sp,sp,-12
 100487c:	df000215 	stw	fp,8(sp)
 1004880:	df000204 	addi	fp,sp,8
 1004884:	e13ffe15 	stw	r4,-8(fp)
	switch (h) {
 1004888:	e0bffe17 	ldw	r2,-8(fp)
 100488c:	10800428 	cmpgeui	r2,r2,16
 1004890:	1000481e 	bne	r2,zero,10049b4 <hex2char+0x13c>
 1004894:	e0bffe17 	ldw	r2,-8(fp)
 1004898:	1085883a 	add	r2,r2,r2
 100489c:	1087883a 	add	r3,r2,r2
 10048a0:	00804034 	movhi	r2,256
 10048a4:	10922d04 	addi	r2,r2,18612
 10048a8:	1885883a 	add	r2,r3,r2
 10048ac:	10800017 	ldw	r2,0(r2)
 10048b0:	1000683a 	jmp	r2
 10048b4:	010048f4 	movhi	r4,291
 10048b8:	01004900 	call	100490 <__alt_mem_onchip_memory2_0+0x100490>
 10048bc:	0100490c 	andi	r4,zero,292
 10048c0:	01004918 	cmpnei	r4,zero,292
 10048c4:	01004924 	muli	r4,zero,292
 10048c8:	01004930 	cmpltui	r4,zero,292
 10048cc:	0100493c 	xorhi	r4,zero,292
 10048d0:	01004948 	cmpgei	r4,zero,293
 10048d4:	01004954 	movui	r4,293
 10048d8:	01004960 	cmpeqi	r4,zero,293
 10048dc:	0100496c 	andhi	r4,zero,293
 10048e0:	01004978 	rdprs	r4,zero,293
 10048e4:	01004984 	movi	r4,294
 10048e8:	01004990 	cmplti	r4,zero,294
 10048ec:	0100499c 	xori	r4,zero,294
 10048f0:	010049a8 	cmpgeui	r4,zero,294
	case 0:
		return '0';
 10048f4:	00800c04 	movi	r2,48
 10048f8:	e0bfff15 	stw	r2,-4(fp)
 10048fc:	00002f06 	br	10049bc <hex2char+0x144>
	case 1:
		return '1';
 1004900:	00800c44 	movi	r2,49
 1004904:	e0bfff15 	stw	r2,-4(fp)
 1004908:	00002c06 	br	10049bc <hex2char+0x144>
	case 2:
		return '2';
 100490c:	00800c84 	movi	r2,50
 1004910:	e0bfff15 	stw	r2,-4(fp)
 1004914:	00002906 	br	10049bc <hex2char+0x144>
	case 3:
		return '3';
 1004918:	00800cc4 	movi	r2,51
 100491c:	e0bfff15 	stw	r2,-4(fp)
 1004920:	00002606 	br	10049bc <hex2char+0x144>
	case 4:
		return '4';
 1004924:	00800d04 	movi	r2,52
 1004928:	e0bfff15 	stw	r2,-4(fp)
 100492c:	00002306 	br	10049bc <hex2char+0x144>
	case 5:
		return '5';
 1004930:	00800d44 	movi	r2,53
 1004934:	e0bfff15 	stw	r2,-4(fp)
 1004938:	00002006 	br	10049bc <hex2char+0x144>
	case 6:
		return '6';
 100493c:	00800d84 	movi	r2,54
 1004940:	e0bfff15 	stw	r2,-4(fp)
 1004944:	00001d06 	br	10049bc <hex2char+0x144>
	case 7:
		return '7';
 1004948:	00800dc4 	movi	r2,55
 100494c:	e0bfff15 	stw	r2,-4(fp)
 1004950:	00001a06 	br	10049bc <hex2char+0x144>
	case 8:
		return '8';
 1004954:	00800e04 	movi	r2,56
 1004958:	e0bfff15 	stw	r2,-4(fp)
 100495c:	00001706 	br	10049bc <hex2char+0x144>
	case 9:
		return '9';
 1004960:	00800e44 	movi	r2,57
 1004964:	e0bfff15 	stw	r2,-4(fp)
 1004968:	00001406 	br	10049bc <hex2char+0x144>
	case 10:
		return 'a';
 100496c:	00801844 	movi	r2,97
 1004970:	e0bfff15 	stw	r2,-4(fp)
 1004974:	00001106 	br	10049bc <hex2char+0x144>
	case 11:
		return 'b';
 1004978:	00801884 	movi	r2,98
 100497c:	e0bfff15 	stw	r2,-4(fp)
 1004980:	00000e06 	br	10049bc <hex2char+0x144>
	case 12:
		return 'c';
 1004984:	008018c4 	movi	r2,99
 1004988:	e0bfff15 	stw	r2,-4(fp)
 100498c:	00000b06 	br	10049bc <hex2char+0x144>
	case 13:
		return 'd';
 1004990:	00801904 	movi	r2,100
 1004994:	e0bfff15 	stw	r2,-4(fp)
 1004998:	00000806 	br	10049bc <hex2char+0x144>
	case 14:
		return 'e';
 100499c:	00801944 	movi	r2,101
 10049a0:	e0bfff15 	stw	r2,-4(fp)
 10049a4:	00000506 	br	10049bc <hex2char+0x144>
	case 15:
		return 'f';
 10049a8:	00801984 	movi	r2,102
 10049ac:	e0bfff15 	stw	r2,-4(fp)
 10049b0:	00000206 	br	10049bc <hex2char+0x144>
	default:
		return -1;
 10049b4:	00bfffc4 	movi	r2,-1
 10049b8:	e0bfff15 	stw	r2,-4(fp)
 10049bc:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 10049c0:	e037883a 	mov	sp,fp
 10049c4:	df000017 	ldw	fp,0(sp)
 10049c8:	dec00104 	addi	sp,sp,4
 10049cc:	f800283a 	ret

010049d0 <convertKey>:

char* convertKey(char* key, int len) {
 10049d0:	defffa04 	addi	sp,sp,-24
 10049d4:	dfc00515 	stw	ra,20(sp)
 10049d8:	df000415 	stw	fp,16(sp)
 10049dc:	dc000315 	stw	r16,12(sp)
 10049e0:	df000304 	addi	fp,sp,12
 10049e4:	e13ffe15 	stw	r4,-8(fp)
 10049e8:	e17fff15 	stw	r5,-4(fp)
	int i;
	for (i = 0; i < len; i++) {
 10049ec:	e03ffd15 	stw	zero,-12(fp)
 10049f0:	00001106 	br	1004a38 <convertKey+0x68>
		key[i] = hex2char(key[i]);
 10049f4:	e0bffd17 	ldw	r2,-12(fp)
 10049f8:	1007883a 	mov	r3,r2
 10049fc:	e0bffe17 	ldw	r2,-8(fp)
 1004a00:	18a1883a 	add	r16,r3,r2
 1004a04:	e0bffd17 	ldw	r2,-12(fp)
 1004a08:	1007883a 	mov	r3,r2
 1004a0c:	e0bffe17 	ldw	r2,-8(fp)
 1004a10:	1885883a 	add	r2,r3,r2
 1004a14:	10800003 	ldbu	r2,0(r2)
 1004a18:	11003fcc 	andi	r4,r2,255
 1004a1c:	2100201c 	xori	r4,r4,128
 1004a20:	213fe004 	addi	r4,r4,-128
 1004a24:	10048780 	call	1004878 <hex2char>
 1004a28:	80800005 	stb	r2,0(r16)
	}
}

char* convertKey(char* key, int len) {
	int i;
	for (i = 0; i < len; i++) {
 1004a2c:	e0bffd17 	ldw	r2,-12(fp)
 1004a30:	10800044 	addi	r2,r2,1
 1004a34:	e0bffd15 	stw	r2,-12(fp)
 1004a38:	e0fffd17 	ldw	r3,-12(fp)
 1004a3c:	e0bfff17 	ldw	r2,-4(fp)
 1004a40:	18bfec16 	blt	r3,r2,10049f4 <convertKey+0x24>
		key[i] = hex2char(key[i]);
	}
	return key;
 1004a44:	e0bffe17 	ldw	r2,-8(fp)
}
 1004a48:	e037883a 	mov	sp,fp
 1004a4c:	dfc00217 	ldw	ra,8(sp)
 1004a50:	df000117 	ldw	fp,4(sp)
 1004a54:	dc000017 	ldw	r16,0(sp)
 1004a58:	dec00304 	addi	sp,sp,12
 1004a5c:	f800283a 	ret

01004a60 <find>:

int find(char* buf, int bufsize, char c) {
 1004a60:	defffa04 	addi	sp,sp,-24
 1004a64:	df000515 	stw	fp,20(sp)
 1004a68:	df000504 	addi	fp,sp,20
 1004a6c:	e13ffc15 	stw	r4,-16(fp)
 1004a70:	e17ffd15 	stw	r5,-12(fp)
 1004a74:	e1bffe05 	stb	r6,-8(fp)
	int i;
	for (i = 0; i < bufsize; i++) {
 1004a78:	e03ffb15 	stw	zero,-20(fp)
 1004a7c:	00001006 	br	1004ac0 <find+0x60>
		if ((buf[i]) == (c))
 1004a80:	e0bffb17 	ldw	r2,-20(fp)
 1004a84:	1007883a 	mov	r3,r2
 1004a88:	e0bffc17 	ldw	r2,-16(fp)
 1004a8c:	1885883a 	add	r2,r3,r2
 1004a90:	10800003 	ldbu	r2,0(r2)
 1004a94:	10c03fcc 	andi	r3,r2,255
 1004a98:	18c0201c 	xori	r3,r3,128
 1004a9c:	18ffe004 	addi	r3,r3,-128
 1004aa0:	e0bffe07 	ldb	r2,-8(fp)
 1004aa4:	1880031e 	bne	r3,r2,1004ab4 <find+0x54>
			return i;
 1004aa8:	e0bffb17 	ldw	r2,-20(fp)
 1004aac:	e0bfff15 	stw	r2,-4(fp)
 1004ab0:	00000806 	br	1004ad4 <find+0x74>
	return key;
}

int find(char* buf, int bufsize, char c) {
	int i;
	for (i = 0; i < bufsize; i++) {
 1004ab4:	e0bffb17 	ldw	r2,-20(fp)
 1004ab8:	10800044 	addi	r2,r2,1
 1004abc:	e0bffb15 	stw	r2,-20(fp)
 1004ac0:	e0fffb17 	ldw	r3,-20(fp)
 1004ac4:	e0bffd17 	ldw	r2,-12(fp)
 1004ac8:	18bfed16 	blt	r3,r2,1004a80 <find+0x20>
		if ((buf[i]) == (c))
			return i;
	}
	return -1;
 1004acc:	00bfffc4 	movi	r2,-1
 1004ad0:	e0bfff15 	stw	r2,-4(fp)
 1004ad4:	e0bfff17 	ldw	r2,-4(fp)
}
 1004ad8:	e037883a 	mov	sp,fp
 1004adc:	df000017 	ldw	fp,0(sp)
 1004ae0:	dec00104 	addi	sp,sp,4
 1004ae4:	f800283a 	ret

01004ae8 <keygen>:

void keygen(char* key, char* pw, int pwlen) {
 1004ae8:	defff804 	addi	sp,sp,-32
 1004aec:	dfc00715 	stw	ra,28(sp)
 1004af0:	df000615 	stw	fp,24(sp)
 1004af4:	df000604 	addi	fp,sp,24
 1004af8:	e13ffd15 	stw	r4,-12(fp)
 1004afc:	e17ffe15 	stw	r5,-8(fp)
 1004b00:	e1bfff15 	stw	r6,-4(fp)
	// assert(strlen(pw)==pwlen);
	assert(pwlen<16);
 1004b04:	e0bfff17 	ldw	r2,-4(fp)
 1004b08:	10800410 	cmplti	r2,r2,16
 1004b0c:	1000071e 	bne	r2,zero,1004b2c <keygen+0x44>
 1004b10:	010040f4 	movhi	r4,259
 1004b14:	21254004 	addi	r4,r4,-27392
 1004b18:	01401ac4 	movi	r5,107
 1004b1c:	d1a00004 	addi	r6,gp,-32768
 1004b20:	01c040f4 	movhi	r7,259
 1004b24:	39e54304 	addi	r7,r7,-27380
 1004b28:	1013d180 	call	1013d18 <__assert_func>
	int i, j;
	for (i = 0; i < 16; i++)
 1004b2c:	e03ffc15 	stw	zero,-16(fp)
 1004b30:	00000906 	br	1004b58 <keygen+0x70>
		key[i] = (-1 & 0xff);
 1004b34:	e0bffc17 	ldw	r2,-16(fp)
 1004b38:	1007883a 	mov	r3,r2
 1004b3c:	e0bffd17 	ldw	r2,-12(fp)
 1004b40:	1887883a 	add	r3,r3,r2
 1004b44:	00bfffc4 	movi	r2,-1
 1004b48:	18800005 	stb	r2,0(r3)

void keygen(char* key, char* pw, int pwlen) {
	// assert(strlen(pw)==pwlen);
	assert(pwlen<16);
	int i, j;
	for (i = 0; i < 16; i++)
 1004b4c:	e0bffc17 	ldw	r2,-16(fp)
 1004b50:	10800044 	addi	r2,r2,1
 1004b54:	e0bffc15 	stw	r2,-16(fp)
 1004b58:	e0bffc17 	ldw	r2,-16(fp)
 1004b5c:	10800410 	cmplti	r2,r2,16
 1004b60:	103ff41e 	bne	r2,zero,1004b34 <keygen+0x4c>
		key[i] = (-1 & 0xff);
	for (i = 0, j = 0; i < pwlen; i++) {
 1004b64:	e03ffc15 	stw	zero,-16(fp)
 1004b68:	e03ffb15 	stw	zero,-20(fp)
 1004b6c:	00004106 	br	1004c74 <keygen+0x18c>
		char xor_ = (pw[i] & 0xf) ^ (pw[i] >> 4);
 1004b70:	e0bffc17 	ldw	r2,-16(fp)
 1004b74:	1007883a 	mov	r3,r2
 1004b78:	e0bffe17 	ldw	r2,-8(fp)
 1004b7c:	1885883a 	add	r2,r3,r2
 1004b80:	10800003 	ldbu	r2,0(r2)
 1004b84:	108003cc 	andi	r2,r2,15
 1004b88:	1009883a 	mov	r4,r2
 1004b8c:	e0bffc17 	ldw	r2,-16(fp)
 1004b90:	1007883a 	mov	r3,r2
 1004b94:	e0bffe17 	ldw	r2,-8(fp)
 1004b98:	1885883a 	add	r2,r3,r2
 1004b9c:	10800003 	ldbu	r2,0(r2)
 1004ba0:	10803fcc 	andi	r2,r2,255
 1004ba4:	1080201c 	xori	r2,r2,128
 1004ba8:	10bfe004 	addi	r2,r2,-128
 1004bac:	1005d13a 	srai	r2,r2,4
 1004bb0:	2084f03a 	xor	r2,r4,r2
 1004bb4:	e0bffa05 	stb	r2,-24(fp)
		// search if we have seen this char before
		if (find(key, 16, xor_) != -1) {
 1004bb8:	e1bffa07 	ldb	r6,-24(fp)
 1004bbc:	e13ffd17 	ldw	r4,-12(fp)
 1004bc0:	01400404 	movi	r5,16
 1004bc4:	1004a600 	call	1004a60 <find>
 1004bc8:	10bfffe0 	cmpeqi	r2,r2,-1
 1004bcc:	10001f1e 	bne	r2,zero,1004c4c <keygen+0x164>
			while (find(key, 16, xor_) != -1) {
 1004bd0:	00000c06 	br	1004c04 <keygen+0x11c>
				xor_++;
 1004bd4:	e0bffa03 	ldbu	r2,-24(fp)
 1004bd8:	10800044 	addi	r2,r2,1
 1004bdc:	e0bffa05 	stb	r2,-24(fp)
				xor_ %= 0xf;
 1004be0:	e0fffa07 	ldb	r3,-24(fp)
 1004be4:	008003c4 	movi	r2,15
 1004be8:	1885283a 	div	r2,r3,r2
 1004bec:	108003e4 	muli	r2,r2,15
 1004bf0:	1885c83a 	sub	r2,r3,r2
 1004bf4:	e0bffa05 	stb	r2,-24(fp)
				xor_ &= 0xf;
 1004bf8:	e0bffa03 	ldbu	r2,-24(fp)
 1004bfc:	108003cc 	andi	r2,r2,15
 1004c00:	e0bffa05 	stb	r2,-24(fp)
		key[i] = (-1 & 0xff);
	for (i = 0, j = 0; i < pwlen; i++) {
		char xor_ = (pw[i] & 0xf) ^ (pw[i] >> 4);
		// search if we have seen this char before
		if (find(key, 16, xor_) != -1) {
			while (find(key, 16, xor_) != -1) {
 1004c04:	e1bffa07 	ldb	r6,-24(fp)
 1004c08:	e13ffd17 	ldw	r4,-12(fp)
 1004c0c:	01400404 	movi	r5,16
 1004c10:	1004a600 	call	1004a60 <find>
 1004c14:	10bfffd8 	cmpnei	r2,r2,-1
 1004c18:	103fee1e 	bne	r2,zero,1004bd4 <keygen+0xec>
				xor_++;
				xor_ %= 0xf;
				xor_ &= 0xf;
			}
			key[i] = ((xor_ % 15) & 0xf);
 1004c1c:	e0bffc17 	ldw	r2,-16(fp)
 1004c20:	1007883a 	mov	r3,r2
 1004c24:	e0bffd17 	ldw	r2,-12(fp)
 1004c28:	1889883a 	add	r4,r3,r2
 1004c2c:	e0fffa07 	ldb	r3,-24(fp)
 1004c30:	008003c4 	movi	r2,15
 1004c34:	1885283a 	div	r2,r3,r2
 1004c38:	108003e4 	muli	r2,r2,15
 1004c3c:	1885c83a 	sub	r2,r3,r2
 1004c40:	108003cc 	andi	r2,r2,15
 1004c44:	20800005 	stb	r2,0(r4)
 1004c48:	00000706 	br	1004c68 <keygen+0x180>
		} else
			key[i] = (xor_ & 0xf); // add as usual
 1004c4c:	e0bffc17 	ldw	r2,-16(fp)
 1004c50:	1007883a 	mov	r3,r2
 1004c54:	e0bffd17 	ldw	r2,-12(fp)
 1004c58:	1887883a 	add	r3,r3,r2
 1004c5c:	e0bffa03 	ldbu	r2,-24(fp)
 1004c60:	108003cc 	andi	r2,r2,15
 1004c64:	18800005 	stb	r2,0(r3)
	// assert(strlen(pw)==pwlen);
	assert(pwlen<16);
	int i, j;
	for (i = 0; i < 16; i++)
		key[i] = (-1 & 0xff);
	for (i = 0, j = 0; i < pwlen; i++) {
 1004c68:	e0bffc17 	ldw	r2,-16(fp)
 1004c6c:	10800044 	addi	r2,r2,1
 1004c70:	e0bffc15 	stw	r2,-16(fp)
 1004c74:	e0fffc17 	ldw	r3,-16(fp)
 1004c78:	e0bfff17 	ldw	r2,-4(fp)
 1004c7c:	18bfbc16 	blt	r3,r2,1004b70 <keygen+0x88>
			}
			key[i] = ((xor_ % 15) & 0xf);
		} else
			key[i] = (xor_ & 0xf); // add as usual
	}
	for (j = 0, i = pwlen; i < 16; i++) {
 1004c80:	e03ffb15 	stw	zero,-20(fp)
 1004c84:	e0bfff17 	ldw	r2,-4(fp)
 1004c88:	e0bffc15 	stw	r2,-16(fp)
 1004c8c:	00001606 	br	1004ce8 <keygen+0x200>
		while (find(key, 16, j) != -1)
			j++;
 1004c90:	e0bffb17 	ldw	r2,-20(fp)
 1004c94:	10800044 	addi	r2,r2,1
 1004c98:	e0bffb15 	stw	r2,-20(fp)
			key[i] = ((xor_ % 15) & 0xf);
		} else
			key[i] = (xor_ & 0xf); // add as usual
	}
	for (j = 0, i = pwlen; i < 16; i++) {
		while (find(key, 16, j) != -1)
 1004c9c:	e0bffb17 	ldw	r2,-20(fp)
 1004ca0:	11803fcc 	andi	r6,r2,255
 1004ca4:	3180201c 	xori	r6,r6,128
 1004ca8:	31bfe004 	addi	r6,r6,-128
 1004cac:	e13ffd17 	ldw	r4,-12(fp)
 1004cb0:	01400404 	movi	r5,16
 1004cb4:	1004a600 	call	1004a60 <find>
 1004cb8:	10bfffd8 	cmpnei	r2,r2,-1
 1004cbc:	103ff41e 	bne	r2,zero,1004c90 <keygen+0x1a8>
			j++;
		key[i] = j & 0xf;
 1004cc0:	e0bffc17 	ldw	r2,-16(fp)
 1004cc4:	1007883a 	mov	r3,r2
 1004cc8:	e0bffd17 	ldw	r2,-12(fp)
 1004ccc:	1887883a 	add	r3,r3,r2
 1004cd0:	e0bffb17 	ldw	r2,-20(fp)
 1004cd4:	108003cc 	andi	r2,r2,15
 1004cd8:	18800005 	stb	r2,0(r3)
			}
			key[i] = ((xor_ % 15) & 0xf);
		} else
			key[i] = (xor_ & 0xf); // add as usual
	}
	for (j = 0, i = pwlen; i < 16; i++) {
 1004cdc:	e0bffc17 	ldw	r2,-16(fp)
 1004ce0:	10800044 	addi	r2,r2,1
 1004ce4:	e0bffc15 	stw	r2,-16(fp)
 1004ce8:	e0bffc17 	ldw	r2,-16(fp)
 1004cec:	10800410 	cmplti	r2,r2,16
 1004cf0:	103fea1e 	bne	r2,zero,1004c9c <keygen+0x1b4>
		while (find(key, 16, j) != -1)
			j++;
		key[i] = j & 0xf;
	}

	writeToSD(key, KEYFILE);
 1004cf4:	e13ffd17 	ldw	r4,-12(fp)
 1004cf8:	014040f4 	movhi	r5,259
 1004cfc:	29654604 	addi	r5,r5,-27368
 1004d00:	100ad340 	call	100ad34 <writeToSD>
}
 1004d04:	e037883a 	mov	sp,fp
 1004d08:	dfc00117 	ldw	ra,4(sp)
 1004d0c:	df000017 	ldw	fp,0(sp)
 1004d10:	dec00204 	addi	sp,sp,8
 1004d14:	f800283a 	ret

01004d18 <printkey>:

void printkey(char* key) {
 1004d18:	defffb04 	addi	sp,sp,-20
 1004d1c:	dfc00415 	stw	ra,16(sp)
 1004d20:	df000315 	stw	fp,12(sp)
 1004d24:	df000304 	addi	fp,sp,12
 1004d28:	e13ffe15 	stw	r4,-8(fp)
	int i;
	for (i = 0; i < 16; i++)
 1004d2c:	e03ffd15 	stw	zero,-12(fp)
 1004d30:	00003106 	br	1004df8 <printkey+0xe0>
		(i % 4 == 3) ?
 1004d34:	e0bffd17 	ldw	r2,-12(fp)
 1004d38:	00e00034 	movhi	r3,32768
 1004d3c:	18c000c4 	addi	r3,r3,3
 1004d40:	10c4703a 	and	r2,r2,r3
 1004d44:	e0bfff15 	stw	r2,-4(fp)
 1004d48:	e0ffff17 	ldw	r3,-4(fp)
 1004d4c:	1804403a 	cmpge	r2,r3,zero
 1004d50:	10000a1e 	bne	r2,zero,1004d7c <printkey+0x64>
 1004d54:	e0bfff17 	ldw	r2,-4(fp)
 1004d58:	10bfffc4 	addi	r2,r2,-1
 1004d5c:	e0bfff15 	stw	r2,-4(fp)
 1004d60:	00bfff04 	movi	r2,-4
 1004d64:	e0ffff17 	ldw	r3,-4(fp)
 1004d68:	1886b03a 	or	r3,r3,r2
 1004d6c:	e0ffff15 	stw	r3,-4(fp)
 1004d70:	e0bfff17 	ldw	r2,-4(fp)
 1004d74:	10800044 	addi	r2,r2,1
 1004d78:	e0bfff15 	stw	r2,-4(fp)
 1004d7c:	e0bfff17 	ldw	r2,-4(fp)
 1004d80:	108000d8 	cmpnei	r2,r2,3
 1004d84:	10000d1e 	bne	r2,zero,1004dbc <printkey+0xa4>
 1004d88:	e0bffd17 	ldw	r2,-12(fp)
 1004d8c:	1007883a 	mov	r3,r2
 1004d90:	e0bffe17 	ldw	r2,-8(fp)
 1004d94:	1885883a 	add	r2,r3,r2
 1004d98:	10800003 	ldbu	r2,0(r2)
 1004d9c:	10803fcc 	andi	r2,r2,255
 1004da0:	1080201c 	xori	r2,r2,128
 1004da4:	10bfe004 	addi	r2,r2,-128
 1004da8:	11403fcc 	andi	r5,r2,255
 1004dac:	010040f4 	movhi	r4,259
 1004db0:	21254804 	addi	r4,r4,-27360
 1004db4:	10155040 	call	1015504 <printf>
 1004db8:	00000c06 	br	1004dec <printkey+0xd4>
 1004dbc:	e0bffd17 	ldw	r2,-12(fp)
 1004dc0:	1007883a 	mov	r3,r2
 1004dc4:	e0bffe17 	ldw	r2,-8(fp)
 1004dc8:	1885883a 	add	r2,r3,r2
 1004dcc:	10800003 	ldbu	r2,0(r2)
 1004dd0:	10803fcc 	andi	r2,r2,255
 1004dd4:	1080201c 	xori	r2,r2,128
 1004dd8:	10bfe004 	addi	r2,r2,-128
 1004ddc:	11403fcc 	andi	r5,r2,255
 1004de0:	010040f4 	movhi	r4,259
 1004de4:	21254904 	addi	r4,r4,-27356
 1004de8:	10155040 	call	1015504 <printf>
	writeToSD(key, KEYFILE);
}

void printkey(char* key) {
	int i;
	for (i = 0; i < 16; i++)
 1004dec:	e0bffd17 	ldw	r2,-12(fp)
 1004df0:	10800044 	addi	r2,r2,1
 1004df4:	e0bffd15 	stw	r2,-12(fp)
 1004df8:	e0bffd17 	ldw	r2,-12(fp)
 1004dfc:	10800410 	cmplti	r2,r2,16
 1004e00:	103fcc1e 	bne	r2,zero,1004d34 <printkey+0x1c>
		(i % 4 == 3) ?
				printf("%x\n", (key[i] & 0xff)) : printf("%x", (key[i] & 0xff));
	printf("\n");
 1004e04:	01000284 	movi	r4,10
 1004e08:	101557c0 	call	101557c <putchar>
}
 1004e0c:	e037883a 	mov	sp,fp
 1004e10:	dfc00117 	ldw	ra,4(sp)
 1004e14:	df000017 	ldw	fp,0(sp)
 1004e18:	dec00204 	addi	sp,sp,8
 1004e1c:	f800283a 	ret

01004e20 <encrypt>:

char* encrypt(char* key, char* plaintext, int textlen) {
 1004e20:	deffe704 	addi	sp,sp,-100
 1004e24:	dfc01815 	stw	ra,96(sp)
 1004e28:	df001715 	stw	fp,92(sp)
 1004e2c:	df001704 	addi	fp,sp,92
 1004e30:	e13ff315 	stw	r4,-52(fp)
 1004e34:	e17ff415 	stw	r5,-48(fp)
 1004e38:	e1bff515 	stw	r6,-44(fp)
	char *ciphertext = (char*) malloc(sizeof(char) * textlen);
 1004e3c:	e13ff517 	ldw	r4,-44(fp)
 1004e40:	1014b200 	call	1014b20 <malloc>
 1004e44:	e0bff215 	stw	r2,-56(fp)
	char a, b, a_, b_; // a: MS nibble, b: LS nibble of char
	int ai, aj, ak; // ai, aj: 2D coords, ak: 1D index
	int bi, bj, bk; // bi, bj: 2D coords, bk: 1D index
	int coldiff; // abs(bj-aj) difference of columns

	for (i = 0; i < textlen; i++) {
 1004e48:	e03ff115 	stw	zero,-60(fp)
 1004e4c:	00010706 	br	100526c <encrypt+0x44c>
		a = (plaintext[i] >> 4) & 0xf;
 1004e50:	e0bff117 	ldw	r2,-60(fp)
 1004e54:	1007883a 	mov	r3,r2
 1004e58:	e0bff417 	ldw	r2,-48(fp)
 1004e5c:	1885883a 	add	r2,r3,r2
 1004e60:	10800003 	ldbu	r2,0(r2)
 1004e64:	10803fcc 	andi	r2,r2,255
 1004e68:	1080201c 	xori	r2,r2,128
 1004e6c:	10bfe004 	addi	r2,r2,-128
 1004e70:	1005d13a 	srai	r2,r2,4
 1004e74:	108003cc 	andi	r2,r2,15
 1004e78:	e0bff0c5 	stb	r2,-61(fp)
		b = (plaintext[i] & 0xf);
 1004e7c:	e0bff117 	ldw	r2,-60(fp)
 1004e80:	1007883a 	mov	r3,r2
 1004e84:	e0bff417 	ldw	r2,-48(fp)
 1004e88:	1885883a 	add	r2,r3,r2
 1004e8c:	10800003 	ldbu	r2,0(r2)
 1004e90:	108003cc 	andi	r2,r2,15
 1004e94:	e0bff085 	stb	r2,-62(fp)
		ak = find(key, 16, a);
 1004e98:	e1bff0c7 	ldb	r6,-61(fp)
 1004e9c:	e13ff317 	ldw	r4,-52(fp)
 1004ea0:	01400404 	movi	r5,16
 1004ea4:	1004a600 	call	1004a60 <find>
 1004ea8:	e0bfed15 	stw	r2,-76(fp)
		bk = find(key, 16, b);
 1004eac:	e1bff087 	ldb	r6,-62(fp)
 1004eb0:	e13ff317 	ldw	r4,-52(fp)
 1004eb4:	01400404 	movi	r5,16
 1004eb8:	1004a600 	call	1004a60 <find>
 1004ebc:	e0bfea15 	stw	r2,-88(fp)
		ai = ak / 4;
 1004ec0:	e0bfed17 	ldw	r2,-76(fp)
 1004ec4:	e0bffa15 	stw	r2,-24(fp)
 1004ec8:	e0fffa17 	ldw	r3,-24(fp)
 1004ecc:	1804403a 	cmpge	r2,r3,zero
 1004ed0:	1000031e 	bne	r2,zero,1004ee0 <encrypt+0xc0>
 1004ed4:	e13ffa17 	ldw	r4,-24(fp)
 1004ed8:	210000c4 	addi	r4,r4,3
 1004edc:	e13ffa15 	stw	r4,-24(fp)
 1004ee0:	e0fffa17 	ldw	r3,-24(fp)
 1004ee4:	1805d0ba 	srai	r2,r3,2
 1004ee8:	e0bfef15 	stw	r2,-68(fp)
		bi = bk / 4;
 1004eec:	e0bfea17 	ldw	r2,-88(fp)
 1004ef0:	e0bffb15 	stw	r2,-20(fp)
 1004ef4:	e13ffb17 	ldw	r4,-20(fp)
 1004ef8:	2004403a 	cmpge	r2,r4,zero
 1004efc:	1000031e 	bne	r2,zero,1004f0c <encrypt+0xec>
 1004f00:	e0bffb17 	ldw	r2,-20(fp)
 1004f04:	108000c4 	addi	r2,r2,3
 1004f08:	e0bffb15 	stw	r2,-20(fp)
 1004f0c:	e0fffb17 	ldw	r3,-20(fp)
 1004f10:	1805d0ba 	srai	r2,r3,2
 1004f14:	e0bfec15 	stw	r2,-80(fp)
		aj = ak % 4;
 1004f18:	e0ffed17 	ldw	r3,-76(fp)
 1004f1c:	00a00034 	movhi	r2,32768
 1004f20:	108000c4 	addi	r2,r2,3
 1004f24:	1886703a 	and	r3,r3,r2
 1004f28:	e0fffc15 	stw	r3,-16(fp)
 1004f2c:	e13ffc17 	ldw	r4,-16(fp)
 1004f30:	2004403a 	cmpge	r2,r4,zero
 1004f34:	10000a1e 	bne	r2,zero,1004f60 <encrypt+0x140>
 1004f38:	e0bffc17 	ldw	r2,-16(fp)
 1004f3c:	10bfffc4 	addi	r2,r2,-1
 1004f40:	e0bffc15 	stw	r2,-16(fp)
 1004f44:	00bfff04 	movi	r2,-4
 1004f48:	e0fffc17 	ldw	r3,-16(fp)
 1004f4c:	1886b03a 	or	r3,r3,r2
 1004f50:	e0fffc15 	stw	r3,-16(fp)
 1004f54:	e13ffc17 	ldw	r4,-16(fp)
 1004f58:	21000044 	addi	r4,r4,1
 1004f5c:	e13ffc15 	stw	r4,-16(fp)
 1004f60:	e0bffc17 	ldw	r2,-16(fp)
 1004f64:	e0bfee15 	stw	r2,-72(fp)
		bj = bk % 4;
 1004f68:	e0bfea17 	ldw	r2,-88(fp)
 1004f6c:	00e00034 	movhi	r3,32768
 1004f70:	18c000c4 	addi	r3,r3,3
 1004f74:	10c4703a 	and	r2,r2,r3
 1004f78:	e0bffd15 	stw	r2,-12(fp)
 1004f7c:	e0fffd17 	ldw	r3,-12(fp)
 1004f80:	1804403a 	cmpge	r2,r3,zero
 1004f84:	10000a1e 	bne	r2,zero,1004fb0 <encrypt+0x190>
 1004f88:	e13ffd17 	ldw	r4,-12(fp)
 1004f8c:	213fffc4 	addi	r4,r4,-1
 1004f90:	e13ffd15 	stw	r4,-12(fp)
 1004f94:	00bfff04 	movi	r2,-4
 1004f98:	e0fffd17 	ldw	r3,-12(fp)
 1004f9c:	1886b03a 	or	r3,r3,r2
 1004fa0:	e0fffd15 	stw	r3,-12(fp)
 1004fa4:	e13ffd17 	ldw	r4,-12(fp)
 1004fa8:	21000044 	addi	r4,r4,1
 1004fac:	e13ffd15 	stw	r4,-12(fp)
 1004fb0:	e0bffd17 	ldw	r2,-12(fp)
 1004fb4:	e0bfeb15 	stw	r2,-84(fp)
		coldiff = abs(bj - aj);
 1004fb8:	e0ffeb17 	ldw	r3,-84(fp)
 1004fbc:	e0bfee17 	ldw	r2,-72(fp)
 1004fc0:	1885c83a 	sub	r2,r3,r2
 1004fc4:	e0bfe915 	stw	r2,-92(fp)
 1004fc8:	e0bfe917 	ldw	r2,-92(fp)
 1004fcc:	1004403a 	cmpge	r2,r2,zero
 1004fd0:	1000031e 	bne	r2,zero,1004fe0 <encrypt+0x1c0>
 1004fd4:	e0bfe917 	ldw	r2,-92(fp)
 1004fd8:	0085c83a 	sub	r2,zero,r2
 1004fdc:	e0bfe915 	stw	r2,-92(fp)

		if (ai == bi) { //same row
 1004fe0:	e0ffef17 	ldw	r3,-68(fp)
 1004fe4:	e0bfec17 	ldw	r2,-80(fp)
 1004fe8:	1880291e 	bne	r3,r2,1005090 <encrypt+0x270>
			a_ = key[ai * 4 + ((aj + 1 > 3) ? 0 : aj + 1)];
 1004fec:	e0bfef17 	ldw	r2,-68(fp)
 1004ff0:	1085883a 	add	r2,r2,r2
 1004ff4:	1085883a 	add	r2,r2,r2
 1004ff8:	e0bff915 	stw	r2,-28(fp)
 1004ffc:	e0bfee17 	ldw	r2,-72(fp)
 1005000:	108000c8 	cmpgei	r2,r2,3
 1005004:	1000041e 	bne	r2,zero,1005018 <encrypt+0x1f8>
 1005008:	e0bfee17 	ldw	r2,-72(fp)
 100500c:	10800044 	addi	r2,r2,1
 1005010:	e0bff815 	stw	r2,-32(fp)
 1005014:	00000106 	br	100501c <encrypt+0x1fc>
 1005018:	e03ff815 	stw	zero,-32(fp)
 100501c:	e0fff917 	ldw	r3,-28(fp)
 1005020:	e13ff817 	ldw	r4,-32(fp)
 1005024:	1905883a 	add	r2,r3,r4
 1005028:	1007883a 	mov	r3,r2
 100502c:	e0bff317 	ldw	r2,-52(fp)
 1005030:	1885883a 	add	r2,r3,r2
 1005034:	10800003 	ldbu	r2,0(r2)
 1005038:	e0bff045 	stb	r2,-63(fp)
			b_ = key[bi * 4 + ((bj + 1 > 3) ? 0 : bj + 1)];
 100503c:	e0bfec17 	ldw	r2,-80(fp)
 1005040:	1085883a 	add	r2,r2,r2
 1005044:	1085883a 	add	r2,r2,r2
 1005048:	e0bff715 	stw	r2,-36(fp)
 100504c:	e0bfeb17 	ldw	r2,-84(fp)
 1005050:	108000c8 	cmpgei	r2,r2,3
 1005054:	1000041e 	bne	r2,zero,1005068 <encrypt+0x248>
 1005058:	e0bfeb17 	ldw	r2,-84(fp)
 100505c:	10800044 	addi	r2,r2,1
 1005060:	e0bff615 	stw	r2,-40(fp)
 1005064:	00000106 	br	100506c <encrypt+0x24c>
 1005068:	e03ff615 	stw	zero,-40(fp)
 100506c:	e0fff717 	ldw	r3,-36(fp)
 1005070:	e13ff617 	ldw	r4,-40(fp)
 1005074:	1905883a 	add	r2,r3,r4
 1005078:	1007883a 	mov	r3,r2
 100507c:	e0bff317 	ldw	r2,-52(fp)
 1005080:	1885883a 	add	r2,r3,r2
 1005084:	10800003 	ldbu	r2,0(r2)
 1005088:	e0bff005 	stb	r2,-64(fp)
 100508c:	00006706 	br	100522c <encrypt+0x40c>
		} else if (aj == bj) { //same column
 1005090:	e0ffee17 	ldw	r3,-72(fp)
 1005094:	e0bfeb17 	ldw	r2,-84(fp)
 1005098:	18803d1e 	bne	r3,r2,1005190 <encrypt+0x370>
			a_ = key[(((ai + 1) % 4) * 4 + aj)];
 100509c:	e0bfef17 	ldw	r2,-68(fp)
 10050a0:	10c00044 	addi	r3,r2,1
 10050a4:	00a00034 	movhi	r2,32768
 10050a8:	108000c4 	addi	r2,r2,3
 10050ac:	1886703a 	and	r3,r3,r2
 10050b0:	e0fffe15 	stw	r3,-8(fp)
 10050b4:	e0fffe17 	ldw	r3,-8(fp)
 10050b8:	1804403a 	cmpge	r2,r3,zero
 10050bc:	10000a1e 	bne	r2,zero,10050e8 <encrypt+0x2c8>
 10050c0:	e13ffe17 	ldw	r4,-8(fp)
 10050c4:	213fffc4 	addi	r4,r4,-1
 10050c8:	e13ffe15 	stw	r4,-8(fp)
 10050cc:	00bfff04 	movi	r2,-4
 10050d0:	e0fffe17 	ldw	r3,-8(fp)
 10050d4:	1886b03a 	or	r3,r3,r2
 10050d8:	e0fffe15 	stw	r3,-8(fp)
 10050dc:	e13ffe17 	ldw	r4,-8(fp)
 10050e0:	21000044 	addi	r4,r4,1
 10050e4:	e13ffe15 	stw	r4,-8(fp)
 10050e8:	e0bffe17 	ldw	r2,-8(fp)
 10050ec:	1085883a 	add	r2,r2,r2
 10050f0:	1085883a 	add	r2,r2,r2
 10050f4:	1007883a 	mov	r3,r2
 10050f8:	e0bfee17 	ldw	r2,-72(fp)
 10050fc:	1885883a 	add	r2,r3,r2
 1005100:	1007883a 	mov	r3,r2
 1005104:	e0bff317 	ldw	r2,-52(fp)
 1005108:	1885883a 	add	r2,r3,r2
 100510c:	10800003 	ldbu	r2,0(r2)
 1005110:	e0bff045 	stb	r2,-63(fp)
			b_ = key[(((bi + 1) % 4) * 4 + bj)];
 1005114:	e0bfec17 	ldw	r2,-80(fp)
 1005118:	10c00044 	addi	r3,r2,1
 100511c:	00a00034 	movhi	r2,32768
 1005120:	108000c4 	addi	r2,r2,3
 1005124:	1886703a 	and	r3,r3,r2
 1005128:	e0ffff15 	stw	r3,-4(fp)
 100512c:	e0ffff17 	ldw	r3,-4(fp)
 1005130:	1804403a 	cmpge	r2,r3,zero
 1005134:	10000a1e 	bne	r2,zero,1005160 <encrypt+0x340>
 1005138:	e13fff17 	ldw	r4,-4(fp)
 100513c:	213fffc4 	addi	r4,r4,-1
 1005140:	e13fff15 	stw	r4,-4(fp)
 1005144:	00bfff04 	movi	r2,-4
 1005148:	e0ffff17 	ldw	r3,-4(fp)
 100514c:	1886b03a 	or	r3,r3,r2
 1005150:	e0ffff15 	stw	r3,-4(fp)
 1005154:	e13fff17 	ldw	r4,-4(fp)
 1005158:	21000044 	addi	r4,r4,1
 100515c:	e13fff15 	stw	r4,-4(fp)
 1005160:	e0bfff17 	ldw	r2,-4(fp)
 1005164:	1085883a 	add	r2,r2,r2
 1005168:	1085883a 	add	r2,r2,r2
 100516c:	1007883a 	mov	r3,r2
 1005170:	e0bfeb17 	ldw	r2,-84(fp)
 1005174:	1885883a 	add	r2,r3,r2
 1005178:	1007883a 	mov	r3,r2
 100517c:	e0bff317 	ldw	r2,-52(fp)
 1005180:	1885883a 	add	r2,r3,r2
 1005184:	10800003 	ldbu	r2,0(r2)
 1005188:	e0bff005 	stb	r2,-64(fp)
 100518c:	00002706 	br	100522c <encrypt+0x40c>
		} else if (aj > bj) { //first char to the right of the second char
 1005190:	e0ffee17 	ldw	r3,-72(fp)
 1005194:	e0bfeb17 	ldw	r2,-84(fp)
 1005198:	10c0110e 	bge	r2,r3,10051e0 <encrypt+0x3c0>
			a_ = key[ak - coldiff];
 100519c:	e0ffed17 	ldw	r3,-76(fp)
 10051a0:	e0bfe917 	ldw	r2,-92(fp)
 10051a4:	1885c83a 	sub	r2,r3,r2
 10051a8:	1007883a 	mov	r3,r2
 10051ac:	e0bff317 	ldw	r2,-52(fp)
 10051b0:	1885883a 	add	r2,r3,r2
 10051b4:	10800003 	ldbu	r2,0(r2)
 10051b8:	e0bff045 	stb	r2,-63(fp)
			b_ = key[bk + coldiff];
 10051bc:	e0ffea17 	ldw	r3,-88(fp)
 10051c0:	e0bfe917 	ldw	r2,-92(fp)
 10051c4:	1885883a 	add	r2,r3,r2
 10051c8:	1007883a 	mov	r3,r2
 10051cc:	e0bff317 	ldw	r2,-52(fp)
 10051d0:	1885883a 	add	r2,r3,r2
 10051d4:	10800003 	ldbu	r2,0(r2)
 10051d8:	e0bff005 	stb	r2,-64(fp)
 10051dc:	00001306 	br	100522c <encrypt+0x40c>
		} else if (bj > aj) { //second char to the right of the first char
 10051e0:	e0ffeb17 	ldw	r3,-84(fp)
 10051e4:	e0bfee17 	ldw	r2,-72(fp)
 10051e8:	10c0100e 	bge	r2,r3,100522c <encrypt+0x40c>
			a_ = key[ak + coldiff];
 10051ec:	e0ffed17 	ldw	r3,-76(fp)
 10051f0:	e0bfe917 	ldw	r2,-92(fp)
 10051f4:	1885883a 	add	r2,r3,r2
 10051f8:	1007883a 	mov	r3,r2
 10051fc:	e0bff317 	ldw	r2,-52(fp)
 1005200:	1885883a 	add	r2,r3,r2
 1005204:	10800003 	ldbu	r2,0(r2)
 1005208:	e0bff045 	stb	r2,-63(fp)
			b_ = key[bk - coldiff];
 100520c:	e0ffea17 	ldw	r3,-88(fp)
 1005210:	e0bfe917 	ldw	r2,-92(fp)
 1005214:	1885c83a 	sub	r2,r3,r2
 1005218:	1007883a 	mov	r3,r2
 100521c:	e0bff317 	ldw	r2,-52(fp)
 1005220:	1885883a 	add	r2,r3,r2
 1005224:	10800003 	ldbu	r2,0(r2)
 1005228:	e0bff005 	stb	r2,-64(fp)
		}
		ciphertext[i] = ((a_ << 4) | b_) & 0xff;
 100522c:	e0bff117 	ldw	r2,-60(fp)
 1005230:	1007883a 	mov	r3,r2
 1005234:	e0bff217 	ldw	r2,-56(fp)
 1005238:	1889883a 	add	r4,r3,r2
 100523c:	e0bff047 	ldb	r2,-63(fp)
 1005240:	1004913a 	slli	r2,r2,4
 1005244:	1007883a 	mov	r3,r2
 1005248:	e0bff003 	ldbu	r2,-64(fp)
 100524c:	1884b03a 	or	r2,r3,r2
 1005250:	1007883a 	mov	r3,r2
 1005254:	00bfffc4 	movi	r2,-1
 1005258:	1884703a 	and	r2,r3,r2
 100525c:	20800005 	stb	r2,0(r4)
	char a, b, a_, b_; // a: MS nibble, b: LS nibble of char
	int ai, aj, ak; // ai, aj: 2D coords, ak: 1D index
	int bi, bj, bk; // bi, bj: 2D coords, bk: 1D index
	int coldiff; // abs(bj-aj) difference of columns

	for (i = 0; i < textlen; i++) {
 1005260:	e0bff117 	ldw	r2,-60(fp)
 1005264:	10800044 	addi	r2,r2,1
 1005268:	e0bff115 	stw	r2,-60(fp)
 100526c:	e0fff117 	ldw	r3,-60(fp)
 1005270:	e0bff517 	ldw	r2,-44(fp)
 1005274:	18bef616 	blt	r3,r2,1004e50 <encrypt+0x30>
			a_ = key[ak + coldiff];
			b_ = key[bk - coldiff];
		}
		ciphertext[i] = ((a_ << 4) | b_) & 0xff;
	}
	return ciphertext;
 1005278:	e0bff217 	ldw	r2,-56(fp)
}
 100527c:	e037883a 	mov	sp,fp
 1005280:	dfc00117 	ldw	ra,4(sp)
 1005284:	df000017 	ldw	fp,0(sp)
 1005288:	dec00204 	addi	sp,sp,8
 100528c:	f800283a 	ret

01005290 <decrypt>:

char* decrypt(char* key, char* ciphertext, int textlen) {
 1005290:	deffe704 	addi	sp,sp,-100
 1005294:	dfc01815 	stw	ra,96(sp)
 1005298:	df001715 	stw	fp,92(sp)
 100529c:	df001704 	addi	fp,sp,92
 10052a0:	e13ff315 	stw	r4,-52(fp)
 10052a4:	e17ff415 	stw	r5,-48(fp)
 10052a8:	e1bff515 	stw	r6,-44(fp)
	char *plaintext = (char*) malloc(sizeof(char) * textlen);
 10052ac:	e13ff517 	ldw	r4,-44(fp)
 10052b0:	1014b200 	call	1014b20 <malloc>
 10052b4:	e0bff215 	stw	r2,-56(fp)
	char a, b, a_, b_; // a: MS nibble, b: LS nibble of char
	int ai, aj, ak; // ai, aj: 2D coords, ak: 1D index
	int bi, bj, bk; // bi, bj: 2D coords, bk: 1D index
	int coldiff; // abs(bj-aj) difference of columns

	for (i = 0; i < textlen; i++) {
 10052b8:	e03ff115 	stw	zero,-60(fp)
 10052bc:	0000f306 	br	100568c <decrypt+0x3fc>
		a = (ciphertext[i] >> 4) & 0xf;
 10052c0:	e0bff117 	ldw	r2,-60(fp)
 10052c4:	1007883a 	mov	r3,r2
 10052c8:	e0bff417 	ldw	r2,-48(fp)
 10052cc:	1885883a 	add	r2,r3,r2
 10052d0:	10800003 	ldbu	r2,0(r2)
 10052d4:	10803fcc 	andi	r2,r2,255
 10052d8:	1080201c 	xori	r2,r2,128
 10052dc:	10bfe004 	addi	r2,r2,-128
 10052e0:	1005d13a 	srai	r2,r2,4
 10052e4:	108003cc 	andi	r2,r2,15
 10052e8:	e0bff0c5 	stb	r2,-61(fp)
		b = (ciphertext[i] & 0xf);
 10052ec:	e0bff117 	ldw	r2,-60(fp)
 10052f0:	1007883a 	mov	r3,r2
 10052f4:	e0bff417 	ldw	r2,-48(fp)
 10052f8:	1885883a 	add	r2,r3,r2
 10052fc:	10800003 	ldbu	r2,0(r2)
 1005300:	108003cc 	andi	r2,r2,15
 1005304:	e0bff085 	stb	r2,-62(fp)
		ak = find(key, 16, a);
 1005308:	e1bff0c7 	ldb	r6,-61(fp)
 100530c:	e13ff317 	ldw	r4,-52(fp)
 1005310:	01400404 	movi	r5,16
 1005314:	1004a600 	call	1004a60 <find>
 1005318:	e0bfed15 	stw	r2,-76(fp)
		bk = find(key, 16, b);
 100531c:	e1bff087 	ldb	r6,-62(fp)
 1005320:	e13ff317 	ldw	r4,-52(fp)
 1005324:	01400404 	movi	r5,16
 1005328:	1004a600 	call	1004a60 <find>
 100532c:	e0bfea15 	stw	r2,-88(fp)
		ai = ak / 4;
 1005330:	e0bfed17 	ldw	r2,-76(fp)
 1005334:	e0bffc15 	stw	r2,-16(fp)
 1005338:	e0fffc17 	ldw	r3,-16(fp)
 100533c:	1804403a 	cmpge	r2,r3,zero
 1005340:	1000031e 	bne	r2,zero,1005350 <decrypt+0xc0>
 1005344:	e13ffc17 	ldw	r4,-16(fp)
 1005348:	210000c4 	addi	r4,r4,3
 100534c:	e13ffc15 	stw	r4,-16(fp)
 1005350:	e0fffc17 	ldw	r3,-16(fp)
 1005354:	1805d0ba 	srai	r2,r3,2
 1005358:	e0bfef15 	stw	r2,-68(fp)
		bi = bk / 4;
 100535c:	e0bfea17 	ldw	r2,-88(fp)
 1005360:	e0bffd15 	stw	r2,-12(fp)
 1005364:	e13ffd17 	ldw	r4,-12(fp)
 1005368:	2004403a 	cmpge	r2,r4,zero
 100536c:	1000031e 	bne	r2,zero,100537c <decrypt+0xec>
 1005370:	e0bffd17 	ldw	r2,-12(fp)
 1005374:	108000c4 	addi	r2,r2,3
 1005378:	e0bffd15 	stw	r2,-12(fp)
 100537c:	e0fffd17 	ldw	r3,-12(fp)
 1005380:	1805d0ba 	srai	r2,r3,2
 1005384:	e0bfec15 	stw	r2,-80(fp)
		aj = ak % 4;
 1005388:	e0ffed17 	ldw	r3,-76(fp)
 100538c:	00a00034 	movhi	r2,32768
 1005390:	108000c4 	addi	r2,r2,3
 1005394:	1886703a 	and	r3,r3,r2
 1005398:	e0fffe15 	stw	r3,-8(fp)
 100539c:	e13ffe17 	ldw	r4,-8(fp)
 10053a0:	2004403a 	cmpge	r2,r4,zero
 10053a4:	10000a1e 	bne	r2,zero,10053d0 <decrypt+0x140>
 10053a8:	e0bffe17 	ldw	r2,-8(fp)
 10053ac:	10bfffc4 	addi	r2,r2,-1
 10053b0:	e0bffe15 	stw	r2,-8(fp)
 10053b4:	00bfff04 	movi	r2,-4
 10053b8:	e0fffe17 	ldw	r3,-8(fp)
 10053bc:	1886b03a 	or	r3,r3,r2
 10053c0:	e0fffe15 	stw	r3,-8(fp)
 10053c4:	e13ffe17 	ldw	r4,-8(fp)
 10053c8:	21000044 	addi	r4,r4,1
 10053cc:	e13ffe15 	stw	r4,-8(fp)
 10053d0:	e0bffe17 	ldw	r2,-8(fp)
 10053d4:	e0bfee15 	stw	r2,-72(fp)
		bj = bk % 4;
 10053d8:	e0bfea17 	ldw	r2,-88(fp)
 10053dc:	00e00034 	movhi	r3,32768
 10053e0:	18c000c4 	addi	r3,r3,3
 10053e4:	10c4703a 	and	r2,r2,r3
 10053e8:	e0bfff15 	stw	r2,-4(fp)
 10053ec:	e0ffff17 	ldw	r3,-4(fp)
 10053f0:	1804403a 	cmpge	r2,r3,zero
 10053f4:	10000a1e 	bne	r2,zero,1005420 <decrypt+0x190>
 10053f8:	e13fff17 	ldw	r4,-4(fp)
 10053fc:	213fffc4 	addi	r4,r4,-1
 1005400:	e13fff15 	stw	r4,-4(fp)
 1005404:	00bfff04 	movi	r2,-4
 1005408:	e0ffff17 	ldw	r3,-4(fp)
 100540c:	1886b03a 	or	r3,r3,r2
 1005410:	e0ffff15 	stw	r3,-4(fp)
 1005414:	e13fff17 	ldw	r4,-4(fp)
 1005418:	21000044 	addi	r4,r4,1
 100541c:	e13fff15 	stw	r4,-4(fp)
 1005420:	e0bfff17 	ldw	r2,-4(fp)
 1005424:	e0bfeb15 	stw	r2,-84(fp)
		coldiff = abs(bj - aj);
 1005428:	e0ffeb17 	ldw	r3,-84(fp)
 100542c:	e0bfee17 	ldw	r2,-72(fp)
 1005430:	1885c83a 	sub	r2,r3,r2
 1005434:	e0bfe915 	stw	r2,-92(fp)
 1005438:	e0bfe917 	ldw	r2,-92(fp)
 100543c:	1004403a 	cmpge	r2,r2,zero
 1005440:	1000031e 	bne	r2,zero,1005450 <decrypt+0x1c0>
 1005444:	e0bfe917 	ldw	r2,-92(fp)
 1005448:	0085c83a 	sub	r2,zero,r2
 100544c:	e0bfe915 	stw	r2,-92(fp)

		if (ai == bi) { //same row
 1005450:	e0ffef17 	ldw	r3,-68(fp)
 1005454:	e0bfec17 	ldw	r2,-80(fp)
 1005458:	18802b1e 	bne	r3,r2,1005508 <decrypt+0x278>
			a_ = key[ai * 4 + ((aj - 1 < 0) ? 3 : aj - 1)];
 100545c:	e0bfef17 	ldw	r2,-68(fp)
 1005460:	1085883a 	add	r2,r2,r2
 1005464:	1085883a 	add	r2,r2,r2
 1005468:	e0bffb15 	stw	r2,-20(fp)
 100546c:	e0bfee17 	ldw	r2,-72(fp)
 1005470:	10800050 	cmplti	r2,r2,1
 1005474:	1000041e 	bne	r2,zero,1005488 <decrypt+0x1f8>
 1005478:	e0bfee17 	ldw	r2,-72(fp)
 100547c:	10bfffc4 	addi	r2,r2,-1
 1005480:	e0bffa15 	stw	r2,-24(fp)
 1005484:	00000206 	br	1005490 <decrypt+0x200>
 1005488:	00c000c4 	movi	r3,3
 100548c:	e0fffa15 	stw	r3,-24(fp)
 1005490:	e13ffb17 	ldw	r4,-20(fp)
 1005494:	e0fffa17 	ldw	r3,-24(fp)
 1005498:	20c5883a 	add	r2,r4,r3
 100549c:	1007883a 	mov	r3,r2
 10054a0:	e0bff317 	ldw	r2,-52(fp)
 10054a4:	1885883a 	add	r2,r3,r2
 10054a8:	10800003 	ldbu	r2,0(r2)
 10054ac:	e0bff045 	stb	r2,-63(fp)
			b_ = key[bi * 4 + ((bj - 1 < 0) ? 3 : bj - 1)];
 10054b0:	e0bfec17 	ldw	r2,-80(fp)
 10054b4:	1085883a 	add	r2,r2,r2
 10054b8:	1085883a 	add	r2,r2,r2
 10054bc:	e0bff915 	stw	r2,-28(fp)
 10054c0:	e0bfeb17 	ldw	r2,-84(fp)
 10054c4:	10800050 	cmplti	r2,r2,1
 10054c8:	1000041e 	bne	r2,zero,10054dc <decrypt+0x24c>
 10054cc:	e0bfeb17 	ldw	r2,-84(fp)
 10054d0:	10bfffc4 	addi	r2,r2,-1
 10054d4:	e0bff815 	stw	r2,-32(fp)
 10054d8:	00000206 	br	10054e4 <decrypt+0x254>
 10054dc:	010000c4 	movi	r4,3
 10054e0:	e13ff815 	stw	r4,-32(fp)
 10054e4:	e0fff917 	ldw	r3,-28(fp)
 10054e8:	e13ff817 	ldw	r4,-32(fp)
 10054ec:	1905883a 	add	r2,r3,r4
 10054f0:	1007883a 	mov	r3,r2
 10054f4:	e0bff317 	ldw	r2,-52(fp)
 10054f8:	1885883a 	add	r2,r3,r2
 10054fc:	10800003 	ldbu	r2,0(r2)
 1005500:	e0bff005 	stb	r2,-64(fp)
 1005504:	00005106 	br	100564c <decrypt+0x3bc>
		} else if (aj == bj) { //same column
 1005508:	e0ffee17 	ldw	r3,-72(fp)
 100550c:	e0bfeb17 	ldw	r2,-84(fp)
 1005510:	1880271e 	bne	r3,r2,10055b0 <decrypt+0x320>
			a_ = key[(((ai - 1) < 0) ? 3 : ai - 1) * 4 + aj];
 1005514:	e0bfef17 	ldw	r2,-68(fp)
 1005518:	10800050 	cmplti	r2,r2,1
 100551c:	1000061e 	bne	r2,zero,1005538 <decrypt+0x2a8>
 1005520:	e0bfef17 	ldw	r2,-68(fp)
 1005524:	1085883a 	add	r2,r2,r2
 1005528:	1085883a 	add	r2,r2,r2
 100552c:	10bfff04 	addi	r2,r2,-4
 1005530:	e0bff715 	stw	r2,-36(fp)
 1005534:	00000206 	br	1005540 <decrypt+0x2b0>
 1005538:	00800304 	movi	r2,12
 100553c:	e0bff715 	stw	r2,-36(fp)
 1005540:	e0bfee17 	ldw	r2,-72(fp)
 1005544:	e0fff717 	ldw	r3,-36(fp)
 1005548:	1885883a 	add	r2,r3,r2
 100554c:	1007883a 	mov	r3,r2
 1005550:	e0bff317 	ldw	r2,-52(fp)
 1005554:	1885883a 	add	r2,r3,r2
 1005558:	10800003 	ldbu	r2,0(r2)
 100555c:	e0bff045 	stb	r2,-63(fp)
			b_ = key[(((bi - 1) < 0) ? 3 : bi - 1) * 4 + bj];
 1005560:	e0bfec17 	ldw	r2,-80(fp)
 1005564:	10800050 	cmplti	r2,r2,1
 1005568:	1000061e 	bne	r2,zero,1005584 <decrypt+0x2f4>
 100556c:	e0bfec17 	ldw	r2,-80(fp)
 1005570:	1085883a 	add	r2,r2,r2
 1005574:	1085883a 	add	r2,r2,r2
 1005578:	10bfff04 	addi	r2,r2,-4
 100557c:	e0bff615 	stw	r2,-40(fp)
 1005580:	00000206 	br	100558c <decrypt+0x2fc>
 1005584:	01000304 	movi	r4,12
 1005588:	e13ff615 	stw	r4,-40(fp)
 100558c:	e0bfeb17 	ldw	r2,-84(fp)
 1005590:	e0fff617 	ldw	r3,-40(fp)
 1005594:	1885883a 	add	r2,r3,r2
 1005598:	1007883a 	mov	r3,r2
 100559c:	e0bff317 	ldw	r2,-52(fp)
 10055a0:	1885883a 	add	r2,r3,r2
 10055a4:	10800003 	ldbu	r2,0(r2)
 10055a8:	e0bff005 	stb	r2,-64(fp)
 10055ac:	00002706 	br	100564c <decrypt+0x3bc>
		} else if (aj > bj) { //first char to the right of the second char
 10055b0:	e0ffee17 	ldw	r3,-72(fp)
 10055b4:	e0bfeb17 	ldw	r2,-84(fp)
 10055b8:	10c0110e 	bge	r2,r3,1005600 <decrypt+0x370>
			a_ = key[ak - coldiff];
 10055bc:	e0ffed17 	ldw	r3,-76(fp)
 10055c0:	e0bfe917 	ldw	r2,-92(fp)
 10055c4:	1885c83a 	sub	r2,r3,r2
 10055c8:	1007883a 	mov	r3,r2
 10055cc:	e0bff317 	ldw	r2,-52(fp)
 10055d0:	1885883a 	add	r2,r3,r2
 10055d4:	10800003 	ldbu	r2,0(r2)
 10055d8:	e0bff045 	stb	r2,-63(fp)
			b_ = key[bk + coldiff];
 10055dc:	e0ffea17 	ldw	r3,-88(fp)
 10055e0:	e0bfe917 	ldw	r2,-92(fp)
 10055e4:	1885883a 	add	r2,r3,r2
 10055e8:	1007883a 	mov	r3,r2
 10055ec:	e0bff317 	ldw	r2,-52(fp)
 10055f0:	1885883a 	add	r2,r3,r2
 10055f4:	10800003 	ldbu	r2,0(r2)
 10055f8:	e0bff005 	stb	r2,-64(fp)
 10055fc:	00001306 	br	100564c <decrypt+0x3bc>
		} else if (bj > aj) { //second char to the right of the first char
 1005600:	e0ffeb17 	ldw	r3,-84(fp)
 1005604:	e0bfee17 	ldw	r2,-72(fp)
 1005608:	10c0100e 	bge	r2,r3,100564c <decrypt+0x3bc>
			a_ = key[ak + coldiff];
 100560c:	e0ffed17 	ldw	r3,-76(fp)
 1005610:	e0bfe917 	ldw	r2,-92(fp)
 1005614:	1885883a 	add	r2,r3,r2
 1005618:	1007883a 	mov	r3,r2
 100561c:	e0bff317 	ldw	r2,-52(fp)
 1005620:	1885883a 	add	r2,r3,r2
 1005624:	10800003 	ldbu	r2,0(r2)
 1005628:	e0bff045 	stb	r2,-63(fp)
			b_ = key[bk - coldiff];
 100562c:	e0ffea17 	ldw	r3,-88(fp)
 1005630:	e0bfe917 	ldw	r2,-92(fp)
 1005634:	1885c83a 	sub	r2,r3,r2
 1005638:	1007883a 	mov	r3,r2
 100563c:	e0bff317 	ldw	r2,-52(fp)
 1005640:	1885883a 	add	r2,r3,r2
 1005644:	10800003 	ldbu	r2,0(r2)
 1005648:	e0bff005 	stb	r2,-64(fp)
		}
		plaintext[i] = ((a_ << 4) | b_) & 0xff;
 100564c:	e0bff117 	ldw	r2,-60(fp)
 1005650:	1007883a 	mov	r3,r2
 1005654:	e0bff217 	ldw	r2,-56(fp)
 1005658:	1889883a 	add	r4,r3,r2
 100565c:	e0bff047 	ldb	r2,-63(fp)
 1005660:	1004913a 	slli	r2,r2,4
 1005664:	1007883a 	mov	r3,r2
 1005668:	e0bff003 	ldbu	r2,-64(fp)
 100566c:	1884b03a 	or	r2,r3,r2
 1005670:	1007883a 	mov	r3,r2
 1005674:	00bfffc4 	movi	r2,-1
 1005678:	1884703a 	and	r2,r3,r2
 100567c:	20800005 	stb	r2,0(r4)
	char a, b, a_, b_; // a: MS nibble, b: LS nibble of char
	int ai, aj, ak; // ai, aj: 2D coords, ak: 1D index
	int bi, bj, bk; // bi, bj: 2D coords, bk: 1D index
	int coldiff; // abs(bj-aj) difference of columns

	for (i = 0; i < textlen; i++) {
 1005680:	e0bff117 	ldw	r2,-60(fp)
 1005684:	10800044 	addi	r2,r2,1
 1005688:	e0bff115 	stw	r2,-60(fp)
 100568c:	e0fff117 	ldw	r3,-60(fp)
 1005690:	e0bff517 	ldw	r2,-44(fp)
 1005694:	18bf0a16 	blt	r3,r2,10052c0 <decrypt+0x30>
			a_ = key[ak + coldiff];
			b_ = key[bk - coldiff];
		}
		plaintext[i] = ((a_ << 4) | b_) & 0xff;
	}
	return plaintext;
 1005698:	e0bff217 	ldw	r2,-56(fp)
}
 100569c:	e037883a 	mov	sp,fp
 10056a0:	dfc00117 	ldw	ra,4(sp)
 10056a4:	df000017 	ldw	fp,0(sp)
 10056a8:	dec00204 	addi	sp,sp,8
 10056ac:	f800283a 	ret

010056b0 <pad>:

char* pad(char* text, int length, int blocksize, char padchar) {
 10056b0:	defff504 	addi	sp,sp,-44
 10056b4:	dfc00a15 	stw	ra,40(sp)
 10056b8:	df000915 	stw	fp,36(sp)
 10056bc:	df000904 	addi	fp,sp,36
 10056c0:	e13ffb15 	stw	r4,-20(fp)
 10056c4:	e17ffc15 	stw	r5,-16(fp)
 10056c8:	e1bffd15 	stw	r6,-12(fp)
 10056cc:	e1fffe05 	stb	r7,-8(fp)
	int i;

	if (length % blocksize == 0) {
 10056d0:	e13ffc17 	ldw	r4,-16(fp)
 10056d4:	e0bffd17 	ldw	r2,-12(fp)
 10056d8:	2087283a 	div	r3,r4,r2
 10056dc:	e0bffd17 	ldw	r2,-12(fp)
 10056e0:	1885383a 	mul	r2,r3,r2
 10056e4:	2085c83a 	sub	r2,r4,r2
 10056e8:	1004c03a 	cmpne	r2,r2,zero
 10056ec:	1000091e 	bne	r2,zero,1005714 <pad+0x64>
		char* padded = (char*) malloc(sizeof(char) * length);
 10056f0:	e13ffc17 	ldw	r4,-16(fp)
 10056f4:	1014b200 	call	1014b20 <malloc>
 10056f8:	e0bff715 	stw	r2,-36(fp)
		strcpy(padded, text);
 10056fc:	e13ff717 	ldw	r4,-36(fp)
 1005700:	e17ffb17 	ldw	r5,-20(fp)
 1005704:	1015c700 	call	1015c70 <strcpy>
		return padded;
 1005708:	e0bff717 	ldw	r2,-36(fp)
 100570c:	e0bfff15 	stw	r2,-4(fp)
 1005710:	00002506 	br	10057a8 <pad+0xf8>
	}
	int padding = blocksize - length % blocksize;
 1005714:	e13ffc17 	ldw	r4,-16(fp)
 1005718:	e0bffd17 	ldw	r2,-12(fp)
 100571c:	2087283a 	div	r3,r4,r2
 1005720:	e0bffd17 	ldw	r2,-12(fp)
 1005724:	1885383a 	mul	r2,r3,r2
 1005728:	2087c83a 	sub	r3,r4,r2
 100572c:	e0bffd17 	ldw	r2,-12(fp)
 1005730:	10c5c83a 	sub	r2,r2,r3
 1005734:	e0bff915 	stw	r2,-28(fp)
	char* padded = (char*) malloc(sizeof(char) * (length + padding));
 1005738:	e0fffc17 	ldw	r3,-16(fp)
 100573c:	e0bff917 	ldw	r2,-28(fp)
 1005740:	1885883a 	add	r2,r3,r2
 1005744:	1009883a 	mov	r4,r2
 1005748:	1014b200 	call	1014b20 <malloc>
 100574c:	e0bff815 	stw	r2,-32(fp)
	strcpy(padded, text);
 1005750:	e13ff817 	ldw	r4,-32(fp)
 1005754:	e17ffb17 	ldw	r5,-20(fp)
 1005758:	1015c700 	call	1015c70 <strcpy>

	for (i = length; i < length + padding; i++)
 100575c:	e0bffc17 	ldw	r2,-16(fp)
 1005760:	e0bffa15 	stw	r2,-24(fp)
 1005764:	00000906 	br	100578c <pad+0xdc>
		padded[i] = padchar;
 1005768:	e0bffa17 	ldw	r2,-24(fp)
 100576c:	1007883a 	mov	r3,r2
 1005770:	e0bff817 	ldw	r2,-32(fp)
 1005774:	1887883a 	add	r3,r3,r2
 1005778:	e0bffe03 	ldbu	r2,-8(fp)
 100577c:	18800005 	stb	r2,0(r3)
	}
	int padding = blocksize - length % blocksize;
	char* padded = (char*) malloc(sizeof(char) * (length + padding));
	strcpy(padded, text);

	for (i = length; i < length + padding; i++)
 1005780:	e0bffa17 	ldw	r2,-24(fp)
 1005784:	10800044 	addi	r2,r2,1
 1005788:	e0bffa15 	stw	r2,-24(fp)
 100578c:	e0fffc17 	ldw	r3,-16(fp)
 1005790:	e0bff917 	ldw	r2,-28(fp)
 1005794:	1887883a 	add	r3,r3,r2
 1005798:	e0bffa17 	ldw	r2,-24(fp)
 100579c:	10fff216 	blt	r2,r3,1005768 <pad+0xb8>
		padded[i] = padchar;
	return padded;
 10057a0:	e0bff817 	ldw	r2,-32(fp)
 10057a4:	e0bfff15 	stw	r2,-4(fp)
 10057a8:	e0bfff17 	ldw	r2,-4(fp)
}
 10057ac:	e037883a 	mov	sp,fp
 10057b0:	dfc00117 	ldw	ra,4(sp)
 10057b4:	df000017 	ldw	fp,0(sp)
 10057b8:	dec00204 	addi	sp,sp,8
 10057bc:	f800283a 	ret

010057c0 <blocky>:

char** blocky(char *text, int length, int blocksize, char padchar) {
 10057c0:	defff304 	addi	sp,sp,-52
 10057c4:	dfc00c15 	stw	ra,48(sp)
 10057c8:	df000b15 	stw	fp,44(sp)
 10057cc:	dc400a15 	stw	r17,40(sp)
 10057d0:	dc000915 	stw	r16,36(sp)
 10057d4:	df000904 	addi	fp,sp,36
 10057d8:	e13ffc15 	stw	r4,-16(fp)
 10057dc:	e17ffd15 	stw	r5,-12(fp)
 10057e0:	e1bffe15 	stw	r6,-8(fp)
 10057e4:	e1ffff05 	stb	r7,-4(fp)
	int i, j;
	int numblocks = ceil(((double) length) / ((double) blocksize));
 10057e8:	e13ffd17 	ldw	r4,-12(fp)
 10057ec:	10132d00 	call	10132d0 <__floatsidf>
 10057f0:	1021883a 	mov	r16,r2
 10057f4:	1823883a 	mov	r17,r3
 10057f8:	e13ffe17 	ldw	r4,-8(fp)
 10057fc:	10132d00 	call	10132d0 <__floatsidf>
 1005800:	100f883a 	mov	r7,r2
 1005804:	1811883a 	mov	r8,r3
 1005808:	8009883a 	mov	r4,r16
 100580c:	880b883a 	mov	r5,r17
 1005810:	380d883a 	mov	r6,r7
 1005814:	400f883a 	mov	r7,r8
 1005818:	1012e580 	call	1012e58 <__divdf3>
 100581c:	1009883a 	mov	r4,r2
 1005820:	180b883a 	mov	r5,r3
 1005824:	2005883a 	mov	r2,r4
 1005828:	2807883a 	mov	r3,r5
 100582c:	1009883a 	mov	r4,r2
 1005830:	180b883a 	mov	r5,r3
 1005834:	100ed640 	call	100ed64 <ceil>
 1005838:	100b883a 	mov	r5,r2
 100583c:	180d883a 	mov	r6,r3
 1005840:	2809883a 	mov	r4,r5
 1005844:	300b883a 	mov	r5,r6
 1005848:	10133c80 	call	10133c8 <__fixdfsi>
 100584c:	e0bff915 	stw	r2,-28(fp)
	char* padded = pad(text, length, blocksize, padchar);
 1005850:	e1ffff07 	ldb	r7,-4(fp)
 1005854:	e13ffc17 	ldw	r4,-16(fp)
 1005858:	e17ffd17 	ldw	r5,-12(fp)
 100585c:	e1bffe17 	ldw	r6,-8(fp)
 1005860:	10056b00 	call	10056b0 <pad>
 1005864:	e0bff815 	stw	r2,-32(fp)
	char** blocks = (char**) malloc(sizeof(char*) * numblocks);
 1005868:	e0bff917 	ldw	r2,-28(fp)
 100586c:	1085883a 	add	r2,r2,r2
 1005870:	1085883a 	add	r2,r2,r2
 1005874:	1009883a 	mov	r4,r2
 1005878:	1014b200 	call	1014b20 <malloc>
 100587c:	e0bff715 	stw	r2,-36(fp)
	for (i = 0; i < numblocks; i++) {
 1005880:	e03ffb15 	stw	zero,-20(fp)
 1005884:	00002906 	br	100592c <blocky+0x16c>
		blocks[i] = (char*) malloc(sizeof(char) * blocksize);
 1005888:	e0bffb17 	ldw	r2,-20(fp)
 100588c:	1085883a 	add	r2,r2,r2
 1005890:	1085883a 	add	r2,r2,r2
 1005894:	1007883a 	mov	r3,r2
 1005898:	e0bff717 	ldw	r2,-36(fp)
 100589c:	18a1883a 	add	r16,r3,r2
 10058a0:	e13ffe17 	ldw	r4,-8(fp)
 10058a4:	1014b200 	call	1014b20 <malloc>
 10058a8:	80800015 	stw	r2,0(r16)
		for (j = 0; j < blocksize; j++)
 10058ac:	e03ffa15 	stw	zero,-24(fp)
 10058b0:	00001806 	br	1005914 <blocky+0x154>
			blocks[i][j] = padded[i * blocksize + j] & 0xff;
 10058b4:	e0bffb17 	ldw	r2,-20(fp)
 10058b8:	1085883a 	add	r2,r2,r2
 10058bc:	1085883a 	add	r2,r2,r2
 10058c0:	1007883a 	mov	r3,r2
 10058c4:	e0bff717 	ldw	r2,-36(fp)
 10058c8:	1885883a 	add	r2,r3,r2
 10058cc:	10c00017 	ldw	r3,0(r2)
 10058d0:	e0bffa17 	ldw	r2,-24(fp)
 10058d4:	1889883a 	add	r4,r3,r2
 10058d8:	e0fffb17 	ldw	r3,-20(fp)
 10058dc:	e0bffe17 	ldw	r2,-8(fp)
 10058e0:	1887383a 	mul	r3,r3,r2
 10058e4:	e0bffa17 	ldw	r2,-24(fp)
 10058e8:	1885883a 	add	r2,r3,r2
 10058ec:	1007883a 	mov	r3,r2
 10058f0:	e0bff817 	ldw	r2,-32(fp)
 10058f4:	1885883a 	add	r2,r3,r2
 10058f8:	10c00003 	ldbu	r3,0(r2)
 10058fc:	00bfffc4 	movi	r2,-1
 1005900:	1884703a 	and	r2,r3,r2
 1005904:	20800005 	stb	r2,0(r4)
	int numblocks = ceil(((double) length) / ((double) blocksize));
	char* padded = pad(text, length, blocksize, padchar);
	char** blocks = (char**) malloc(sizeof(char*) * numblocks);
	for (i = 0; i < numblocks; i++) {
		blocks[i] = (char*) malloc(sizeof(char) * blocksize);
		for (j = 0; j < blocksize; j++)
 1005908:	e0bffa17 	ldw	r2,-24(fp)
 100590c:	10800044 	addi	r2,r2,1
 1005910:	e0bffa15 	stw	r2,-24(fp)
 1005914:	e0fffa17 	ldw	r3,-24(fp)
 1005918:	e0bffe17 	ldw	r2,-8(fp)
 100591c:	18bfe516 	blt	r3,r2,10058b4 <blocky+0xf4>
char** blocky(char *text, int length, int blocksize, char padchar) {
	int i, j;
	int numblocks = ceil(((double) length) / ((double) blocksize));
	char* padded = pad(text, length, blocksize, padchar);
	char** blocks = (char**) malloc(sizeof(char*) * numblocks);
	for (i = 0; i < numblocks; i++) {
 1005920:	e0bffb17 	ldw	r2,-20(fp)
 1005924:	10800044 	addi	r2,r2,1
 1005928:	e0bffb15 	stw	r2,-20(fp)
 100592c:	e0fffb17 	ldw	r3,-20(fp)
 1005930:	e0bff917 	ldw	r2,-28(fp)
 1005934:	18bfd416 	blt	r3,r2,1005888 <blocky+0xc8>
		blocks[i] = (char*) malloc(sizeof(char) * blocksize);
		for (j = 0; j < blocksize; j++)
			blocks[i][j] = padded[i * blocksize + j] & 0xff;
	}

	return blocks;
 1005938:	e0bff717 	ldw	r2,-36(fp)
}
 100593c:	e037883a 	mov	sp,fp
 1005940:	dfc00317 	ldw	ra,12(sp)
 1005944:	df000217 	ldw	fp,8(sp)
 1005948:	dc400117 	ldw	r17,4(sp)
 100594c:	dc000017 	ldw	r16,0(sp)
 1005950:	dec00404 	addi	sp,sp,16
 1005954:	f800283a 	ret

01005958 <func_4char2int>:

int func_4char2int(char* block, int blocksize) {
 1005958:	defffa04 	addi	sp,sp,-24
 100595c:	dfc00515 	stw	ra,20(sp)
 1005960:	df000415 	stw	fp,16(sp)
 1005964:	df000404 	addi	fp,sp,16
 1005968:	e13ffe15 	stw	r4,-8(fp)
 100596c:	e17fff15 	stw	r5,-4(fp)
	assert(blocksize%2==0);
 1005970:	e0bfff17 	ldw	r2,-4(fp)
 1005974:	1080004c 	andi	r2,r2,1
 1005978:	1005003a 	cmpeq	r2,r2,zero
 100597c:	1000081e 	bne	r2,zero,10059a0 <func_4char2int+0x48>
 1005980:	010040f4 	movhi	r4,259
 1005984:	21254004 	addi	r4,r4,-27392
 1005988:	01403e04 	movi	r5,248
 100598c:	018040f4 	movhi	r6,259
 1005990:	31a54a04 	addi	r6,r6,-27352
 1005994:	01c040f4 	movhi	r7,259
 1005998:	39e54e04 	addi	r7,r7,-27336
 100599c:	1013d180 	call	1013d18 <__assert_func>
	assert(blocksize<=4);
 10059a0:	e0bfff17 	ldw	r2,-4(fp)
 10059a4:	10800150 	cmplti	r2,r2,5
 10059a8:	1000081e 	bne	r2,zero,10059cc <func_4char2int+0x74>
 10059ac:	010040f4 	movhi	r4,259
 10059b0:	21254004 	addi	r4,r4,-27392
 10059b4:	01403e44 	movi	r5,249
 10059b8:	018040f4 	movhi	r6,259
 10059bc:	31a54a04 	addi	r6,r6,-27352
 10059c0:	01c040f4 	movhi	r7,259
 10059c4:	39e55204 	addi	r7,r7,-27320
 10059c8:	1013d180 	call	1013d18 <__assert_func>

	int i, val = 0;
 10059cc:	e03ffc15 	stw	zero,-16(fp)
	for (i = 0; i < sizeof(int); i++) {
 10059d0:	e03ffd15 	stw	zero,-12(fp)
 10059d4:	00001206 	br	1005a20 <func_4char2int+0xc8>
		val <<= 8;
 10059d8:	e0bffc17 	ldw	r2,-16(fp)
 10059dc:	1004923a 	slli	r2,r2,8
 10059e0:	e0bffc15 	stw	r2,-16(fp)
		val |= block[i] & 0xff;
 10059e4:	e0bffd17 	ldw	r2,-12(fp)
 10059e8:	1007883a 	mov	r3,r2
 10059ec:	e0bffe17 	ldw	r2,-8(fp)
 10059f0:	1885883a 	add	r2,r3,r2
 10059f4:	10800003 	ldbu	r2,0(r2)
 10059f8:	10803fcc 	andi	r2,r2,255
 10059fc:	1080201c 	xori	r2,r2,128
 1005a00:	10bfe004 	addi	r2,r2,-128
 1005a04:	10c03fcc 	andi	r3,r2,255
 1005a08:	e0bffc17 	ldw	r2,-16(fp)
 1005a0c:	10c4b03a 	or	r2,r2,r3
 1005a10:	e0bffc15 	stw	r2,-16(fp)
int func_4char2int(char* block, int blocksize) {
	assert(blocksize%2==0);
	assert(blocksize<=4);

	int i, val = 0;
	for (i = 0; i < sizeof(int); i++) {
 1005a14:	e0bffd17 	ldw	r2,-12(fp)
 1005a18:	10800044 	addi	r2,r2,1
 1005a1c:	e0bffd15 	stw	r2,-12(fp)
 1005a20:	e0bffd17 	ldw	r2,-12(fp)
 1005a24:	10800130 	cmpltui	r2,r2,4
 1005a28:	103feb1e 	bne	r2,zero,10059d8 <func_4char2int+0x80>
		val <<= 8;
		val |= block[i] & 0xff;
	}
	return val;
 1005a2c:	e0bffc17 	ldw	r2,-16(fp)
}
 1005a30:	e037883a 	mov	sp,fp
 1005a34:	dfc00117 	ldw	ra,4(sp)
 1005a38:	df000017 	ldw	fp,0(sp)
 1005a3c:	dec00204 	addi	sp,sp,8
 1005a40:	f800283a 	ret

01005a44 <func_int_2_4char>:

char* func_int_2_4char(int val) {
 1005a44:	defffb04 	addi	sp,sp,-20
 1005a48:	dfc00415 	stw	ra,16(sp)
 1005a4c:	df000315 	stw	fp,12(sp)
 1005a50:	df000304 	addi	fp,sp,12
 1005a54:	e13fff15 	stw	r4,-4(fp)
	int i;
	char* block = (char*) malloc(sizeof(char) * sizeof(int));
 1005a58:	01000104 	movi	r4,4
 1005a5c:	1014b200 	call	1014b20 <malloc>
 1005a60:	e0bffd15 	stw	r2,-12(fp)
	for (i = sizeof(int) - 1; i >= 0; i--) {
 1005a64:	008000c4 	movi	r2,3
 1005a68:	e0bffe15 	stw	r2,-8(fp)
 1005a6c:	00000f06 	br	1005aac <func_int_2_4char+0x68>
		block[i] = val & 0xff;
 1005a70:	e0bffe17 	ldw	r2,-8(fp)
 1005a74:	1007883a 	mov	r3,r2
 1005a78:	e0bffd17 	ldw	r2,-12(fp)
 1005a7c:	1889883a 	add	r4,r3,r2
 1005a80:	e0bfff17 	ldw	r2,-4(fp)
 1005a84:	1007883a 	mov	r3,r2
 1005a88:	00bfffc4 	movi	r2,-1
 1005a8c:	1884703a 	and	r2,r3,r2
 1005a90:	20800005 	stb	r2,0(r4)
		val >>= 8;
 1005a94:	e0bfff17 	ldw	r2,-4(fp)
 1005a98:	1005d23a 	srai	r2,r2,8
 1005a9c:	e0bfff15 	stw	r2,-4(fp)
}

char* func_int_2_4char(int val) {
	int i;
	char* block = (char*) malloc(sizeof(char) * sizeof(int));
	for (i = sizeof(int) - 1; i >= 0; i--) {
 1005aa0:	e0bffe17 	ldw	r2,-8(fp)
 1005aa4:	10bfffc4 	addi	r2,r2,-1
 1005aa8:	e0bffe15 	stw	r2,-8(fp)
 1005aac:	e0bffe17 	ldw	r2,-8(fp)
 1005ab0:	1004403a 	cmpge	r2,r2,zero
 1005ab4:	103fee1e 	bne	r2,zero,1005a70 <func_int_2_4char+0x2c>
		block[i] = val & 0xff;
		val >>= 8;
	}
	return block;
 1005ab8:	e0bffd17 	ldw	r2,-12(fp)
}
 1005abc:	e037883a 	mov	sp,fp
 1005ac0:	dfc00117 	ldw	ra,4(sp)
 1005ac4:	df000017 	ldw	fp,0(sp)
 1005ac8:	dec00204 	addi	sp,sp,8
 1005acc:	f800283a 	ret

01005ad0 <xor4char>:

char* xor4char(char* t1, char* t2) {
 1005ad0:	defffb04 	addi	sp,sp,-20
 1005ad4:	dfc00415 	stw	ra,16(sp)
 1005ad8:	df000315 	stw	fp,12(sp)
 1005adc:	dc000215 	stw	r16,8(sp)
 1005ae0:	df000204 	addi	fp,sp,8
 1005ae4:	e13ffe15 	stw	r4,-8(fp)
 1005ae8:	e17fff15 	stw	r5,-4(fp)
	return func_int_2_4char(func_4char2int(t1, 4) ^ func_4char2int(t2, 4));
 1005aec:	e13ffe17 	ldw	r4,-8(fp)
 1005af0:	01400104 	movi	r5,4
 1005af4:	10059580 	call	1005958 <func_4char2int>
 1005af8:	1021883a 	mov	r16,r2
 1005afc:	e13fff17 	ldw	r4,-4(fp)
 1005b00:	01400104 	movi	r5,4
 1005b04:	10059580 	call	1005958 <func_4char2int>
 1005b08:	8088f03a 	xor	r4,r16,r2
 1005b0c:	1005a440 	call	1005a44 <func_int_2_4char>
}
 1005b10:	e037883a 	mov	sp,fp
 1005b14:	dfc00217 	ldw	ra,8(sp)
 1005b18:	df000117 	ldw	fp,4(sp)
 1005b1c:	dc000017 	ldw	r16,0(sp)
 1005b20:	dec00304 	addi	sp,sp,12
 1005b24:	f800283a 	ret

01005b28 <encryptCBC>:

char* encryptCBC(char* key, char* plaintext, int length, int blocksize) {
 1005b28:	deffef04 	addi	sp,sp,-68
 1005b2c:	dfc01015 	stw	ra,64(sp)
 1005b30:	df000f15 	stw	fp,60(sp)
 1005b34:	dc400e15 	stw	r17,56(sp)
 1005b38:	dc000d15 	stw	r16,52(sp)
 1005b3c:	df000d04 	addi	fp,sp,52
 1005b40:	e13ffc15 	stw	r4,-16(fp)
 1005b44:	e17ffd15 	stw	r5,-12(fp)
 1005b48:	e1bffe15 	stw	r6,-8(fp)
 1005b4c:	e1ffff15 	stw	r7,-4(fp)
	int i;
	int numblocks = ceil(((double) length) / ((double) blocksize));
 1005b50:	e13ffe17 	ldw	r4,-8(fp)
 1005b54:	10132d00 	call	10132d0 <__floatsidf>
 1005b58:	1021883a 	mov	r16,r2
 1005b5c:	1823883a 	mov	r17,r3
 1005b60:	e13fff17 	ldw	r4,-4(fp)
 1005b64:	10132d00 	call	10132d0 <__floatsidf>
 1005b68:	100f883a 	mov	r7,r2
 1005b6c:	1811883a 	mov	r8,r3
 1005b70:	8009883a 	mov	r4,r16
 1005b74:	880b883a 	mov	r5,r17
 1005b78:	380d883a 	mov	r6,r7
 1005b7c:	400f883a 	mov	r7,r8
 1005b80:	1012e580 	call	1012e58 <__divdf3>
 1005b84:	1009883a 	mov	r4,r2
 1005b88:	180b883a 	mov	r5,r3
 1005b8c:	2005883a 	mov	r2,r4
 1005b90:	2807883a 	mov	r3,r5
 1005b94:	1009883a 	mov	r4,r2
 1005b98:	180b883a 	mov	r5,r3
 1005b9c:	100ed640 	call	100ed64 <ceil>
 1005ba0:	100b883a 	mov	r5,r2
 1005ba4:	180d883a 	mov	r6,r3
 1005ba8:	2809883a 	mov	r4,r5
 1005bac:	300b883a 	mov	r5,r6
 1005bb0:	10133c80 	call	10133c8 <__fixdfsi>
 1005bb4:	e0bffa15 	stw	r2,-24(fp)

	// Open a random byte
	FILE *fp = fopen("/dev/random", "r");
 1005bb8:	010040f4 	movhi	r4,259
 1005bbc:	21255604 	addi	r4,r4,-27304
 1005bc0:	014040f4 	movhi	r5,259
 1005bc4:	29655904 	addi	r5,r5,-27292
 1005bc8:	10143080 	call	1014308 <fopen>
 1005bcc:	e0bff915 	stw	r2,-28(fp)

	int IV = 0;
 1005bd0:	e03ff815 	stw	zero,-32(fp)
	for (i = 0; i < sizeof(int); i++) { // fill initialization vector with values from CSPRNG
 1005bd4:	e03ffb15 	stw	zero,-20(fp)
 1005bd8:	00000c06 	br	1005c0c <encryptCBC+0xe4>
		IV <<= 8;
 1005bdc:	e0bff817 	ldw	r2,-32(fp)
 1005be0:	1004923a 	slli	r2,r2,8
 1005be4:	e0bff815 	stw	r2,-32(fp)
		IV |= fgetc(fp);
 1005be8:	e13ff917 	ldw	r4,-28(fp)
 1005bec:	1013dc00 	call	1013dc0 <fgetc>
 1005bf0:	1007883a 	mov	r3,r2
 1005bf4:	e0bff817 	ldw	r2,-32(fp)
 1005bf8:	10c4b03a 	or	r2,r2,r3
 1005bfc:	e0bff815 	stw	r2,-32(fp)

	// Open a random byte
	FILE *fp = fopen("/dev/random", "r");

	int IV = 0;
	for (i = 0; i < sizeof(int); i++) { // fill initialization vector with values from CSPRNG
 1005c00:	e0bffb17 	ldw	r2,-20(fp)
 1005c04:	10800044 	addi	r2,r2,1
 1005c08:	e0bffb15 	stw	r2,-20(fp)
 1005c0c:	e0bffb17 	ldw	r2,-20(fp)
 1005c10:	10800130 	cmpltui	r2,r2,4
 1005c14:	103ff11e 	bne	r2,zero,1005bdc <encryptCBC+0xb4>
		IV <<= 8;
		IV |= fgetc(fp);
	}
	IV = 0x6aa29ebe; // fixed IV; for testing
 1005c18:	009aa8f4 	movhi	r2,27299
 1005c1c:	10a7af84 	addi	r2,r2,-24898
 1005c20:	e0bff815 	stw	r2,-32(fp)

	char** blocks = blocky(plaintext, length, blocksize, '~');
 1005c24:	e13ffd17 	ldw	r4,-12(fp)
 1005c28:	e17ffe17 	ldw	r5,-8(fp)
 1005c2c:	e1bfff17 	ldw	r6,-4(fp)
 1005c30:	01c01f84 	movi	r7,126
 1005c34:	10057c00 	call	10057c0 <blocky>
 1005c38:	e0bff715 	stw	r2,-36(fp)
	char *cipher = malloc(sizeof(char) * (numblocks + 1) * blocksize);
 1005c3c:	e0bffa17 	ldw	r2,-24(fp)
 1005c40:	10800044 	addi	r2,r2,1
 1005c44:	1007883a 	mov	r3,r2
 1005c48:	e0bfff17 	ldw	r2,-4(fp)
 1005c4c:	1889383a 	mul	r4,r3,r2
 1005c50:	1014b200 	call	1014b20 <malloc>
 1005c54:	e0bff615 	stw	r2,-40(fp)
	char *cprev = malloc(sizeof(char) * blocksize);
 1005c58:	e13fff17 	ldw	r4,-4(fp)
 1005c5c:	1014b200 	call	1014b20 <malloc>
 1005c60:	e0bff515 	stw	r2,-44(fp)
	char *p = malloc(sizeof(char) * blocksize);
 1005c64:	e13fff17 	ldw	r4,-4(fp)
 1005c68:	1014b200 	call	1014b20 <malloc>
 1005c6c:	e0bff415 	stw	r2,-48(fp)
	char *c = malloc(sizeof(char) * blocksize);
 1005c70:	e13fff17 	ldw	r4,-4(fp)
 1005c74:	1014b200 	call	1014b20 <malloc>
 1005c78:	e0bff315 	stw	r2,-52(fp)

	strncpy(cipher, func_int_2_4char(IV), 4); // initialize: C_0 = IV
 1005c7c:	e13ff817 	ldw	r4,-32(fp)
 1005c80:	1005a440 	call	1005a44 <func_int_2_4char>
 1005c84:	100b883a 	mov	r5,r2
 1005c88:	e13ff617 	ldw	r4,-40(fp)
 1005c8c:	01800104 	movi	r6,4
 1005c90:	1015e200 	call	1015e20 <strncpy>

	for (i = 1; i < numblocks + 1; i++) { // start at i = 1 with P_1, C_1
 1005c94:	00800044 	movi	r2,1
 1005c98:	e0bffb15 	stw	r2,-20(fp)
 1005c9c:	00002b06 	br	1005d4c <encryptCBC+0x224>
		strncpy(cprev, cipher + (i - 1) * blocksize, blocksize); // C_{i-1}
 1005ca0:	e0bffb17 	ldw	r2,-20(fp)
 1005ca4:	10ffffc4 	addi	r3,r2,-1
 1005ca8:	e0bfff17 	ldw	r2,-4(fp)
 1005cac:	1885383a 	mul	r2,r3,r2
 1005cb0:	1007883a 	mov	r3,r2
 1005cb4:	e0bff617 	ldw	r2,-40(fp)
 1005cb8:	188b883a 	add	r5,r3,r2
 1005cbc:	e1bfff17 	ldw	r6,-4(fp)
 1005cc0:	e13ff517 	ldw	r4,-44(fp)
 1005cc4:	1015e200 	call	1015e20 <strncpy>
		strcpy(p, blocks[i - 1]); // P_i
 1005cc8:	e0bffb17 	ldw	r2,-20(fp)
 1005ccc:	1085883a 	add	r2,r2,r2
 1005cd0:	1085883a 	add	r2,r2,r2
 1005cd4:	1007883a 	mov	r3,r2
 1005cd8:	e0bff717 	ldw	r2,-36(fp)
 1005cdc:	1885883a 	add	r2,r3,r2
 1005ce0:	10bfff04 	addi	r2,r2,-4
 1005ce4:	11400017 	ldw	r5,0(r2)
 1005ce8:	e13ff417 	ldw	r4,-48(fp)
 1005cec:	1015c700 	call	1015c70 <strcpy>
		c = encrypt(key, xor4char(p, cprev), blocksize); // C_i = P_i xor C_{i-1}
 1005cf0:	e13ff417 	ldw	r4,-48(fp)
 1005cf4:	e17ff517 	ldw	r5,-44(fp)
 1005cf8:	1005ad00 	call	1005ad0 <xor4char>
 1005cfc:	100b883a 	mov	r5,r2
 1005d00:	e13ffc17 	ldw	r4,-16(fp)
 1005d04:	e1bfff17 	ldw	r6,-4(fp)
 1005d08:	1004e200 	call	1004e20 <encrypt>
 1005d0c:	e0bff315 	stw	r2,-52(fp)
		strncpy(cipher + i * blocksize, c, blocksize); // append cipher block to ciphertext
 1005d10:	e0fffb17 	ldw	r3,-20(fp)
 1005d14:	e0bfff17 	ldw	r2,-4(fp)
 1005d18:	1885383a 	mul	r2,r3,r2
 1005d1c:	1007883a 	mov	r3,r2
 1005d20:	e0bff617 	ldw	r2,-40(fp)
 1005d24:	1889883a 	add	r4,r3,r2
 1005d28:	e1bfff17 	ldw	r6,-4(fp)
 1005d2c:	e17ff317 	ldw	r5,-52(fp)
 1005d30:	1015e200 	call	1015e20 <strncpy>
		strcpy(cprev, c); // update C_{i-1}
 1005d34:	e13ff517 	ldw	r4,-44(fp)
 1005d38:	e17ff317 	ldw	r5,-52(fp)
 1005d3c:	1015c700 	call	1015c70 <strcpy>
	char *p = malloc(sizeof(char) * blocksize);
	char *c = malloc(sizeof(char) * blocksize);

	strncpy(cipher, func_int_2_4char(IV), 4); // initialize: C_0 = IV

	for (i = 1; i < numblocks + 1; i++) { // start at i = 1 with P_1, C_1
 1005d40:	e0bffb17 	ldw	r2,-20(fp)
 1005d44:	10800044 	addi	r2,r2,1
 1005d48:	e0bffb15 	stw	r2,-20(fp)
 1005d4c:	e0bffa17 	ldw	r2,-24(fp)
 1005d50:	10c00044 	addi	r3,r2,1
 1005d54:	e0bffb17 	ldw	r2,-20(fp)
 1005d58:	10ffd116 	blt	r2,r3,1005ca0 <encryptCBC+0x178>
		c = encrypt(key, xor4char(p, cprev), blocksize); // C_i = P_i xor C_{i-1}
		strncpy(cipher + i * blocksize, c, blocksize); // append cipher block to ciphertext
		strcpy(cprev, c); // update C_{i-1}
	}

	return cipher;
 1005d5c:	e0bff617 	ldw	r2,-40(fp)
}
 1005d60:	e037883a 	mov	sp,fp
 1005d64:	dfc00317 	ldw	ra,12(sp)
 1005d68:	df000217 	ldw	fp,8(sp)
 1005d6c:	dc400117 	ldw	r17,4(sp)
 1005d70:	dc000017 	ldw	r16,0(sp)
 1005d74:	dec00404 	addi	sp,sp,16
 1005d78:	f800283a 	ret

01005d7c <decryptCBC>:

char* decryptCBC(char* key, char* ciphertext, int plaintxt_len, int blocksize) {
 1005d7c:	defff104 	addi	sp,sp,-60
 1005d80:	dfc00e15 	stw	ra,56(sp)
 1005d84:	df000d15 	stw	fp,52(sp)
 1005d88:	dc400c15 	stw	r17,48(sp)
 1005d8c:	dc000b15 	stw	r16,44(sp)
 1005d90:	df000b04 	addi	fp,sp,44
 1005d94:	e13ffc15 	stw	r4,-16(fp)
 1005d98:	e17ffd15 	stw	r5,-12(fp)
 1005d9c:	e1bffe15 	stw	r6,-8(fp)
 1005da0:	e1ffff15 	stw	r7,-4(fp)
	int i;
	int numblocks = ceil(((double) plaintxt_len) / ((double) blocksize));
 1005da4:	e13ffe17 	ldw	r4,-8(fp)
 1005da8:	10132d00 	call	10132d0 <__floatsidf>
 1005dac:	1021883a 	mov	r16,r2
 1005db0:	1823883a 	mov	r17,r3
 1005db4:	e13fff17 	ldw	r4,-4(fp)
 1005db8:	10132d00 	call	10132d0 <__floatsidf>
 1005dbc:	100f883a 	mov	r7,r2
 1005dc0:	1811883a 	mov	r8,r3
 1005dc4:	8009883a 	mov	r4,r16
 1005dc8:	880b883a 	mov	r5,r17
 1005dcc:	380d883a 	mov	r6,r7
 1005dd0:	400f883a 	mov	r7,r8
 1005dd4:	1012e580 	call	1012e58 <__divdf3>
 1005dd8:	1009883a 	mov	r4,r2
 1005ddc:	180b883a 	mov	r5,r3
 1005de0:	2005883a 	mov	r2,r4
 1005de4:	2807883a 	mov	r3,r5
 1005de8:	1009883a 	mov	r4,r2
 1005dec:	180b883a 	mov	r5,r3
 1005df0:	100ed640 	call	100ed64 <ceil>
 1005df4:	100b883a 	mov	r5,r2
 1005df8:	180d883a 	mov	r6,r3
 1005dfc:	2809883a 	mov	r4,r5
 1005e00:	300b883a 	mov	r5,r6
 1005e04:	10133c80 	call	10133c8 <__fixdfsi>
 1005e08:	e0bffa15 	stw	r2,-24(fp)

	char* plaintext = malloc(sizeof(char) * plaintxt_len);
 1005e0c:	e13ffe17 	ldw	r4,-8(fp)
 1005e10:	1014b200 	call	1014b20 <malloc>
 1005e14:	e0bff915 	stw	r2,-28(fp)
	char *cprev = malloc(sizeof(char) * blocksize);
 1005e18:	e13fff17 	ldw	r4,-4(fp)
 1005e1c:	1014b200 	call	1014b20 <malloc>
 1005e20:	e0bff815 	stw	r2,-32(fp)
	char *p = malloc(sizeof(char) * blocksize);
 1005e24:	e13fff17 	ldw	r4,-4(fp)
 1005e28:	1014b200 	call	1014b20 <malloc>
 1005e2c:	e0bff715 	stw	r2,-36(fp)
	char *d = malloc(sizeof(char) * blocksize);
 1005e30:	e13fff17 	ldw	r4,-4(fp)
 1005e34:	1014b200 	call	1014b20 <malloc>
 1005e38:	e0bff615 	stw	r2,-40(fp)

	int IV = 0x6aa29ebe; // fixed IV; for testing
 1005e3c:	009aa8f4 	movhi	r2,27299
 1005e40:	10a7af84 	addi	r2,r2,-24898
 1005e44:	e0bff515 	stw	r2,-44(fp)
	strncpy(ciphertext, func_int_2_4char(IV), 4); // initialize: C_0 = IV
 1005e48:	e13ff517 	ldw	r4,-44(fp)
 1005e4c:	1005a440 	call	1005a44 <func_int_2_4char>
 1005e50:	100b883a 	mov	r5,r2
 1005e54:	e13ffd17 	ldw	r4,-12(fp)
 1005e58:	01800104 	movi	r6,4
 1005e5c:	1015e200 	call	1015e20 <strncpy>

	for (i = 1; i < numblocks + 1; i++) { // start at i=1 with C_0 = IV, P_1, C_1
 1005e60:	00800044 	movi	r2,1
 1005e64:	e0bffb15 	stw	r2,-20(fp)
 1005e68:	00002e06 	br	1005f24 <decryptCBC+0x1a8>
		strncpy(cprev, ciphertext + (i - 1) * blocksize, blocksize); // C_{i-1}
 1005e6c:	e0bffb17 	ldw	r2,-20(fp)
 1005e70:	10ffffc4 	addi	r3,r2,-1
 1005e74:	e0bfff17 	ldw	r2,-4(fp)
 1005e78:	1885383a 	mul	r2,r3,r2
 1005e7c:	1007883a 	mov	r3,r2
 1005e80:	e0bffd17 	ldw	r2,-12(fp)
 1005e84:	188b883a 	add	r5,r3,r2
 1005e88:	e1bfff17 	ldw	r6,-4(fp)
 1005e8c:	e13ff817 	ldw	r4,-32(fp)
 1005e90:	1015e200 	call	1015e20 <strncpy>
		d = decrypt(key, ciphertext + i * blocksize, blocksize); // D_K(C_i)
 1005e94:	e0fffb17 	ldw	r3,-20(fp)
 1005e98:	e0bfff17 	ldw	r2,-4(fp)
 1005e9c:	1885383a 	mul	r2,r3,r2
 1005ea0:	1007883a 	mov	r3,r2
 1005ea4:	e0bffd17 	ldw	r2,-12(fp)
 1005ea8:	188b883a 	add	r5,r3,r2
 1005eac:	e13ffc17 	ldw	r4,-16(fp)
 1005eb0:	e1bfff17 	ldw	r6,-4(fp)
 1005eb4:	10052900 	call	1005290 <decrypt>
 1005eb8:	e0bff615 	stw	r2,-40(fp)
		p = xor4char(d, cprev); // P_i = C_{i-1} xor D_K(C_i)
 1005ebc:	e13ff617 	ldw	r4,-40(fp)
 1005ec0:	e17ff817 	ldw	r5,-32(fp)
 1005ec4:	1005ad00 	call	1005ad0 <xor4char>
 1005ec8:	e0bff715 	stw	r2,-36(fp)
		strncpy(cprev, ciphertext + i * blocksize, blocksize); // update C_{i-1}
 1005ecc:	e0fffb17 	ldw	r3,-20(fp)
 1005ed0:	e0bfff17 	ldw	r2,-4(fp)
 1005ed4:	1885383a 	mul	r2,r3,r2
 1005ed8:	1007883a 	mov	r3,r2
 1005edc:	e0bffd17 	ldw	r2,-12(fp)
 1005ee0:	188b883a 	add	r5,r3,r2
 1005ee4:	e1bfff17 	ldw	r6,-4(fp)
 1005ee8:	e13ff817 	ldw	r4,-32(fp)
 1005eec:	1015e200 	call	1015e20 <strncpy>
		strncpy(plaintext + (i - 1) * blocksize, p, blocksize); // append P_i
 1005ef0:	e0bffb17 	ldw	r2,-20(fp)
 1005ef4:	10ffffc4 	addi	r3,r2,-1
 1005ef8:	e0bfff17 	ldw	r2,-4(fp)
 1005efc:	1885383a 	mul	r2,r3,r2
 1005f00:	1007883a 	mov	r3,r2
 1005f04:	e0bff917 	ldw	r2,-28(fp)
 1005f08:	1889883a 	add	r4,r3,r2
 1005f0c:	e1bfff17 	ldw	r6,-4(fp)
 1005f10:	e17ff717 	ldw	r5,-36(fp)
 1005f14:	1015e200 	call	1015e20 <strncpy>
	char *d = malloc(sizeof(char) * blocksize);

	int IV = 0x6aa29ebe; // fixed IV; for testing
	strncpy(ciphertext, func_int_2_4char(IV), 4); // initialize: C_0 = IV

	for (i = 1; i < numblocks + 1; i++) { // start at i=1 with C_0 = IV, P_1, C_1
 1005f18:	e0bffb17 	ldw	r2,-20(fp)
 1005f1c:	10800044 	addi	r2,r2,1
 1005f20:	e0bffb15 	stw	r2,-20(fp)
 1005f24:	e0bffa17 	ldw	r2,-24(fp)
 1005f28:	10c00044 	addi	r3,r2,1
 1005f2c:	e0bffb17 	ldw	r2,-20(fp)
 1005f30:	10ffce16 	blt	r2,r3,1005e6c <decryptCBC+0xf0>
		d = decrypt(key, ciphertext + i * blocksize, blocksize); // D_K(C_i)
		p = xor4char(d, cprev); // P_i = C_{i-1} xor D_K(C_i)
		strncpy(cprev, ciphertext + i * blocksize, blocksize); // update C_{i-1}
		strncpy(plaintext + (i - 1) * blocksize, p, blocksize); // append P_i
	}
	return plaintext;
 1005f34:	e0bff917 	ldw	r2,-28(fp)
}
 1005f38:	e037883a 	mov	sp,fp
 1005f3c:	dfc00317 	ldw	ra,12(sp)
 1005f40:	df000217 	ldw	fp,8(sp)
 1005f44:	dc400117 	ldw	r17,4(sp)
 1005f48:	dc000017 	ldw	r16,0(sp)
 1005f4c:	dec00404 	addi	sp,sp,16
 1005f50:	f800283a 	ret

01005f54 <printCipher>:

void printCipher(char* cipher, int length) {
 1005f54:	defffb04 	addi	sp,sp,-20
 1005f58:	dfc00415 	stw	ra,16(sp)
 1005f5c:	df000315 	stw	fp,12(sp)
 1005f60:	df000304 	addi	fp,sp,12
 1005f64:	e13ffe15 	stw	r4,-8(fp)
 1005f68:	e17fff15 	stw	r5,-4(fp)
	int i;

	for (i = 0; i < length; i++) // add zeros to single digit chars
 1005f6c:	e03ffd15 	stw	zero,-12(fp)
 1005f70:	00002706 	br	1006010 <printCipher+0xbc>
		((int) (cipher[i] & 0xff) < 16) ?
 1005f74:	e0bffd17 	ldw	r2,-12(fp)
 1005f78:	1007883a 	mov	r3,r2
 1005f7c:	e0bffe17 	ldw	r2,-8(fp)
 1005f80:	1885883a 	add	r2,r3,r2
 1005f84:	10800003 	ldbu	r2,0(r2)
 1005f88:	10803fcc 	andi	r2,r2,255
 1005f8c:	1080201c 	xori	r2,r2,128
 1005f90:	10bfe004 	addi	r2,r2,-128
 1005f94:	10803fcc 	andi	r2,r2,255
 1005f98:	10800408 	cmpgei	r2,r2,16
 1005f9c:	10000d1e 	bne	r2,zero,1005fd4 <printCipher+0x80>
 1005fa0:	e0bffd17 	ldw	r2,-12(fp)
 1005fa4:	1007883a 	mov	r3,r2
 1005fa8:	e0bffe17 	ldw	r2,-8(fp)
 1005fac:	1885883a 	add	r2,r3,r2
 1005fb0:	10800003 	ldbu	r2,0(r2)
 1005fb4:	10803fcc 	andi	r2,r2,255
 1005fb8:	1080201c 	xori	r2,r2,128
 1005fbc:	10bfe004 	addi	r2,r2,-128
 1005fc0:	11403fcc 	andi	r5,r2,255
 1005fc4:	010040f4 	movhi	r4,259
 1005fc8:	21255a04 	addi	r4,r4,-27288
 1005fcc:	10155040 	call	1015504 <printf>
 1005fd0:	00000c06 	br	1006004 <printCipher+0xb0>
 1005fd4:	e0bffd17 	ldw	r2,-12(fp)
 1005fd8:	1007883a 	mov	r3,r2
 1005fdc:	e0bffe17 	ldw	r2,-8(fp)
 1005fe0:	1885883a 	add	r2,r3,r2
 1005fe4:	10800003 	ldbu	r2,0(r2)
 1005fe8:	10803fcc 	andi	r2,r2,255
 1005fec:	1080201c 	xori	r2,r2,128
 1005ff0:	10bfe004 	addi	r2,r2,-128
 1005ff4:	11403fcc 	andi	r5,r2,255
 1005ff8:	010040f4 	movhi	r4,259
 1005ffc:	21254904 	addi	r4,r4,-27356
 1006000:	10155040 	call	1015504 <printf>
}

void printCipher(char* cipher, int length) {
	int i;

	for (i = 0; i < length; i++) // add zeros to single digit chars
 1006004:	e0bffd17 	ldw	r2,-12(fp)
 1006008:	10800044 	addi	r2,r2,1
 100600c:	e0bffd15 	stw	r2,-12(fp)
 1006010:	e0fffd17 	ldw	r3,-12(fp)
 1006014:	e0bfff17 	ldw	r2,-4(fp)
 1006018:	18bfd616 	blt	r3,r2,1005f74 <printCipher+0x20>
		((int) (cipher[i] & 0xff) < 16) ?
				printf("0%x", cipher[i] & 0xff) :
				printf("%x", cipher[i] & 0xff);
}
 100601c:	e037883a 	mov	sp,fp
 1006020:	dfc00117 	ldw	ra,4(sp)
 1006024:	df000017 	ldw	fp,0(sp)
 1006028:	dec00204 	addi	sp,sp,8
 100602c:	f800283a 	ret

01006030 <writeCipher>:

char* writeCipher(char* cipher, int length) {
 1006030:	defff904 	addi	sp,sp,-28
 1006034:	dfc00615 	stw	ra,24(sp)
 1006038:	df000515 	stw	fp,20(sp)
 100603c:	dc000415 	stw	r16,16(sp)
 1006040:	df000404 	addi	fp,sp,16
 1006044:	e13ffe15 	stw	r4,-8(fp)
 1006048:	e17fff15 	stw	r5,-4(fp)
	int i;

	char* doublecipher = malloc(sizeof(char) * length * 2);
 100604c:	e0bfff17 	ldw	r2,-4(fp)
 1006050:	1085883a 	add	r2,r2,r2
 1006054:	1009883a 	mov	r4,r2
 1006058:	1014b200 	call	1014b20 <malloc>
 100605c:	e0bffc15 	stw	r2,-16(fp)
	for (i = 0; i < length * 2; i++) { // add zeros to single digit chars
 1006060:	e03ffd15 	stw	zero,-12(fp)
 1006064:	00003006 	br	1006128 <writeCipher+0xf8>
		printf("[%x]", cipher[i] & 0xff);
 1006068:	e0bffd17 	ldw	r2,-12(fp)
 100606c:	1007883a 	mov	r3,r2
 1006070:	e0bffe17 	ldw	r2,-8(fp)
 1006074:	1885883a 	add	r2,r3,r2
 1006078:	10800003 	ldbu	r2,0(r2)
 100607c:	10803fcc 	andi	r2,r2,255
 1006080:	1080201c 	xori	r2,r2,128
 1006084:	10bfe004 	addi	r2,r2,-128
 1006088:	11403fcc 	andi	r5,r2,255
 100608c:	010040f4 	movhi	r4,259
 1006090:	21255b04 	addi	r4,r4,-27284
 1006094:	10155040 	call	1015504 <printf>
		doublecipher[2 * i] = hex2char((cipher[i] >> 4) & 0xf);
 1006098:	e0bffd17 	ldw	r2,-12(fp)
 100609c:	1085883a 	add	r2,r2,r2
 10060a0:	1007883a 	mov	r3,r2
 10060a4:	e0bffc17 	ldw	r2,-16(fp)
 10060a8:	18a1883a 	add	r16,r3,r2
 10060ac:	e0bffd17 	ldw	r2,-12(fp)
 10060b0:	1007883a 	mov	r3,r2
 10060b4:	e0bffe17 	ldw	r2,-8(fp)
 10060b8:	1885883a 	add	r2,r3,r2
 10060bc:	10800003 	ldbu	r2,0(r2)
 10060c0:	10803fcc 	andi	r2,r2,255
 10060c4:	1080201c 	xori	r2,r2,128
 10060c8:	10bfe004 	addi	r2,r2,-128
 10060cc:	1005d13a 	srai	r2,r2,4
 10060d0:	10803fcc 	andi	r2,r2,255
 10060d4:	110003cc 	andi	r4,r2,15
 10060d8:	10048780 	call	1004878 <hex2char>
 10060dc:	80800005 	stb	r2,0(r16)
		doublecipher[2 * i + 1] = hex2char(cipher[i] & 0xf);
 10060e0:	e0bffd17 	ldw	r2,-12(fp)
 10060e4:	1085883a 	add	r2,r2,r2
 10060e8:	1007883a 	mov	r3,r2
 10060ec:	e0bffc17 	ldw	r2,-16(fp)
 10060f0:	1885883a 	add	r2,r3,r2
 10060f4:	14000044 	addi	r16,r2,1
 10060f8:	e0bffd17 	ldw	r2,-12(fp)
 10060fc:	1007883a 	mov	r3,r2
 1006100:	e0bffe17 	ldw	r2,-8(fp)
 1006104:	1885883a 	add	r2,r3,r2
 1006108:	10800003 	ldbu	r2,0(r2)
 100610c:	10803fcc 	andi	r2,r2,255
 1006110:	110003cc 	andi	r4,r2,15
 1006114:	10048780 	call	1004878 <hex2char>
 1006118:	80800005 	stb	r2,0(r16)

char* writeCipher(char* cipher, int length) {
	int i;

	char* doublecipher = malloc(sizeof(char) * length * 2);
	for (i = 0; i < length * 2; i++) { // add zeros to single digit chars
 100611c:	e0bffd17 	ldw	r2,-12(fp)
 1006120:	10800044 	addi	r2,r2,1
 1006124:	e0bffd15 	stw	r2,-12(fp)
 1006128:	e0bfff17 	ldw	r2,-4(fp)
 100612c:	1085883a 	add	r2,r2,r2
 1006130:	1007883a 	mov	r3,r2
 1006134:	e0bffd17 	ldw	r2,-12(fp)
 1006138:	10ffcb16 	blt	r2,r3,1006068 <writeCipher+0x38>
		printf("[%x]", cipher[i] & 0xff);
		doublecipher[2 * i] = hex2char((cipher[i] >> 4) & 0xf);
		doublecipher[2 * i + 1] = hex2char(cipher[i] & 0xf);
	}
	doublecipher[length * 2 + 1] = '\0';
 100613c:	e0bfff17 	ldw	r2,-4(fp)
 1006140:	1085883a 	add	r2,r2,r2
 1006144:	1007883a 	mov	r3,r2
 1006148:	e0bffc17 	ldw	r2,-16(fp)
 100614c:	1885883a 	add	r2,r3,r2
 1006150:	10800044 	addi	r2,r2,1
 1006154:	10000005 	stb	zero,0(r2)
	return doublecipher;
 1006158:	e0bffc17 	ldw	r2,-16(fp)
}
 100615c:	e037883a 	mov	sp,fp
 1006160:	dfc00217 	ldw	ra,8(sp)
 1006164:	df000117 	ldw	fp,4(sp)
 1006168:	dc000017 	ldw	r16,0(sp)
 100616c:	dec00304 	addi	sp,sp,12
 1006170:	f800283a 	ret

01006174 <parseCipher>:

char* parseCipher(char* input, int inputlength) {
 1006174:	defff804 	addi	sp,sp,-32
 1006178:	dfc00715 	stw	ra,28(sp)
 100617c:	df000615 	stw	fp,24(sp)
 1006180:	dc400515 	stw	r17,20(sp)
 1006184:	dc000415 	stw	r16,16(sp)
 1006188:	df000404 	addi	fp,sp,16
 100618c:	e13ffe15 	stw	r4,-8(fp)
 1006190:	e17fff15 	stw	r5,-4(fp)
	assert(inputlength%2==0);
 1006194:	e0bfff17 	ldw	r2,-4(fp)
 1006198:	1080004c 	andi	r2,r2,1
 100619c:	1005003a 	cmpeq	r2,r2,zero
 10061a0:	1000081e 	bne	r2,zero,10061c4 <parseCipher+0x50>
 10061a4:	010040f4 	movhi	r4,259
 10061a8:	21254004 	addi	r4,r4,-27392
 10061ac:	014057c4 	movi	r5,351
 10061b0:	018040f4 	movhi	r6,259
 10061b4:	31a55d04 	addi	r6,r6,-27276
 10061b8:	01c040f4 	movhi	r7,259
 10061bc:	39e56004 	addi	r7,r7,-27264
 10061c0:	1013d180 	call	1013d18 <__assert_func>
	int i;
	char *cipher = malloc(sizeof(char) * (inputlength / 2));
 10061c4:	e0ffff17 	ldw	r3,-4(fp)
 10061c8:	1804d7fa 	srli	r2,r3,31
 10061cc:	10c5883a 	add	r2,r2,r3
 10061d0:	1005d07a 	srai	r2,r2,1
 10061d4:	1009883a 	mov	r4,r2
 10061d8:	1014b200 	call	1014b20 <malloc>
 10061dc:	e0bffc15 	stw	r2,-16(fp)
	for (i = 0; i < inputlength; i += 2)
 10061e0:	e03ffd15 	stw	zero,-12(fp)
 10061e4:	00002006 	br	1006268 <parseCipher+0xf4>
		cipher[i / 2] = (char2hex(input[i]) << 4) | char2hex(input[i + 1]);
 10061e8:	e0fffd17 	ldw	r3,-12(fp)
 10061ec:	1804d7fa 	srli	r2,r3,31
 10061f0:	10c5883a 	add	r2,r2,r3
 10061f4:	1005d07a 	srai	r2,r2,1
 10061f8:	1007883a 	mov	r3,r2
 10061fc:	e0bffc17 	ldw	r2,-16(fp)
 1006200:	18a1883a 	add	r16,r3,r2
 1006204:	e0bffd17 	ldw	r2,-12(fp)
 1006208:	1007883a 	mov	r3,r2
 100620c:	e0bffe17 	ldw	r2,-8(fp)
 1006210:	1885883a 	add	r2,r3,r2
 1006214:	10800003 	ldbu	r2,0(r2)
 1006218:	11003fcc 	andi	r4,r2,255
 100621c:	2100201c 	xori	r4,r4,128
 1006220:	213fe004 	addi	r4,r4,-128
 1006224:	10046780 	call	1004678 <char2hex>
 1006228:	1004913a 	slli	r2,r2,4
 100622c:	1023883a 	mov	r17,r2
 1006230:	e0fffd17 	ldw	r3,-12(fp)
 1006234:	e0bffe17 	ldw	r2,-8(fp)
 1006238:	1885883a 	add	r2,r3,r2
 100623c:	10800044 	addi	r2,r2,1
 1006240:	10800003 	ldbu	r2,0(r2)
 1006244:	11003fcc 	andi	r4,r2,255
 1006248:	2100201c 	xori	r4,r4,128
 100624c:	213fe004 	addi	r4,r4,-128
 1006250:	10046780 	call	1004678 <char2hex>
 1006254:	8884b03a 	or	r2,r17,r2
 1006258:	80800005 	stb	r2,0(r16)

char* parseCipher(char* input, int inputlength) {
	assert(inputlength%2==0);
	int i;
	char *cipher = malloc(sizeof(char) * (inputlength / 2));
	for (i = 0; i < inputlength; i += 2)
 100625c:	e0bffd17 	ldw	r2,-12(fp)
 1006260:	10800084 	addi	r2,r2,2
 1006264:	e0bffd15 	stw	r2,-12(fp)
 1006268:	e0fffd17 	ldw	r3,-12(fp)
 100626c:	e0bfff17 	ldw	r2,-4(fp)
 1006270:	18bfdd16 	blt	r3,r2,10061e8 <parseCipher+0x74>
		cipher[i / 2] = (char2hex(input[i]) << 4) | char2hex(input[i + 1]);
	return cipher;
 1006274:	e0bffc17 	ldw	r2,-16(fp)
}
 1006278:	e037883a 	mov	sp,fp
 100627c:	dfc00317 	ldw	ra,12(sp)
 1006280:	df000217 	ldw	fp,8(sp)
 1006284:	dc400117 	ldw	r17,4(sp)
 1006288:	dc000017 	ldw	r16,0(sp)
 100628c:	dec00404 	addi	sp,sp,16
 1006290:	f800283a 	ret

01006294 <encryptData>:

char * encryptData(char * buffer) {
 1006294:	defff704 	addi	sp,sp,-36
 1006298:	dfc00815 	stw	ra,32(sp)
 100629c:	df000715 	stw	fp,28(sp)
 10062a0:	df000704 	addi	fp,sp,28
 10062a4:	e13fff15 	stw	r4,-4(fp)

	encryptedtextlen = strlen(buffer) + 1;
 10062a8:	e13fff17 	ldw	r4,-4(fp)
 10062ac:	1015cfc0 	call	1015cfc <strlen>
 10062b0:	10800044 	addi	r2,r2,1
 10062b4:	d0a70915 	stw	r2,-25564(gp)

	char keyInput[16];
	readFromSD(keyInput, KEYFILE, 16);
 10062b8:	e13ffb04 	addi	r4,fp,-20
 10062bc:	014040f4 	movhi	r5,259
 10062c0:	29654604 	addi	r5,r5,-27368
 10062c4:	01800404 	movi	r6,16
 10062c8:	100ae780 	call	100ae78 <readFromSD>

	char *encryptedData;
	encryptedData = encrypt(keyInput, buffer, encryptedtextlen);
 10062cc:	d1a70917 	ldw	r6,-25564(gp)
 10062d0:	e13ffb04 	addi	r4,fp,-20
 10062d4:	e17fff17 	ldw	r5,-4(fp)
 10062d8:	1004e200 	call	1004e20 <encrypt>
 10062dc:	e0bffa15 	stw	r2,-24(fp)
	char *encdata_w = writeCipher(encryptedData, encryptedtextlen);
 10062e0:	d1670917 	ldw	r5,-25564(gp)
 10062e4:	e13ffa17 	ldw	r4,-24(fp)
 10062e8:	10060300 	call	1006030 <writeCipher>
 10062ec:	e0bff915 	stw	r2,-28(fp)

	return encdata_w;
 10062f0:	e0bff917 	ldw	r2,-28(fp)
}
 10062f4:	e037883a 	mov	sp,fp
 10062f8:	dfc00117 	ldw	ra,4(sp)
 10062fc:	df000017 	ldw	fp,0(sp)
 1006300:	dec00204 	addi	sp,sp,8
 1006304:	f800283a 	ret

01006308 <decryptData>:

char * decryptData(char * buffer) {
 1006308:	defff704 	addi	sp,sp,-36
 100630c:	dfc00815 	stw	ra,32(sp)
 1006310:	df000715 	stw	fp,28(sp)
 1006314:	df000704 	addi	fp,sp,28
 1006318:	e13fff15 	stw	r4,-4(fp)

	char keyInput[16];
	readFromSD(keyInput, KEYFILE, 16);
 100631c:	e13ffb04 	addi	r4,fp,-20
 1006320:	014040f4 	movhi	r5,259
 1006324:	29654604 	addi	r5,r5,-27368
 1006328:	01800404 	movi	r6,16
 100632c:	100ae780 	call	100ae78 <readFromSD>

	char *parsedData_w = parseCipher(buffer, (encryptedtextlen) * 2);
 1006330:	d0a70917 	ldw	r2,-25564(gp)
 1006334:	1085883a 	add	r2,r2,r2
 1006338:	100b883a 	mov	r5,r2
 100633c:	e13fff17 	ldw	r4,-4(fp)
 1006340:	10061740 	call	1006174 <parseCipher>
 1006344:	e0bffa15 	stw	r2,-24(fp)
	char* plaintext = decrypt(keyInput, parsedData_w, encryptedtextlen);
 1006348:	d1a70917 	ldw	r6,-25564(gp)
 100634c:	e13ffb04 	addi	r4,fp,-20
 1006350:	e17ffa17 	ldw	r5,-24(fp)
 1006354:	10052900 	call	1005290 <decrypt>
 1006358:	e0bff915 	stw	r2,-28(fp)

	return plaintext;
 100635c:	e0bff917 	ldw	r2,-28(fp)
}
 1006360:	e037883a 	mov	sp,fp
 1006364:	dfc00117 	ldw	ra,4(sp)
 1006368:	df000017 	ldw	fp,0(sp)
 100636c:	dec00204 	addi	sp,sp,8
 1006370:	f800283a 	ret

01006374 <drawButton>:
#include "InputBox.h"
#include "SD_BOX.h"
#include "Draw.h"
#include "BuildPages.h"

void drawButton(Button *b) {
 1006374:	defffb04 	addi	sp,sp,-20
 1006378:	dfc00415 	stw	ra,16(sp)
 100637c:	df000315 	stw	fp,12(sp)
 1006380:	df000304 	addi	fp,sp,12
 1006384:	e13fff15 	stw	r4,-4(fp)
	DrawRectangleFill(b->x1, b->x2, b->y1, b->y2, b->outlineColour,
 1006388:	e0bfff17 	ldw	r2,-4(fp)
 100638c:	11000117 	ldw	r4,4(r2)
 1006390:	e0bfff17 	ldw	r2,-4(fp)
 1006394:	11400217 	ldw	r5,8(r2)
 1006398:	e0bfff17 	ldw	r2,-4(fp)
 100639c:	11800317 	ldw	r6,12(r2)
 10063a0:	e0bfff17 	ldw	r2,-4(fp)
 10063a4:	11c00417 	ldw	r7,16(r2)
 10063a8:	e0bfff17 	ldw	r2,-4(fp)
 10063ac:	10c00517 	ldw	r3,20(r2)
 10063b0:	e0bfff17 	ldw	r2,-4(fp)
 10063b4:	10800617 	ldw	r2,24(r2)
 10063b8:	d8c00015 	stw	r3,0(sp)
 10063bc:	d8800115 	stw	r2,4(sp)
 10063c0:	10008140 	call	1000814 <DrawRectangleFill>
			b->fillColour);
}
 10063c4:	e037883a 	mov	sp,fp
 10063c8:	dfc00117 	ldw	ra,4(sp)
 10063cc:	df000017 	ldw	fp,0(sp)
 10063d0:	dec00204 	addi	sp,sp,8
 10063d4:	f800283a 	ret

010063d8 <drawObject>:

void drawObject(Object *o) {
 10063d8:	defffb04 	addi	sp,sp,-20
 10063dc:	dfc00415 	stw	ra,16(sp)
 10063e0:	df000315 	stw	fp,12(sp)
 10063e4:	df000304 	addi	fp,sp,12
 10063e8:	e13fff15 	stw	r4,-4(fp)
	DrawRectangleFill(o->x1, o->x2, o->y1, o->y2, o->outlineColour,
 10063ec:	e0bfff17 	ldw	r2,-4(fp)
 10063f0:	11000117 	ldw	r4,4(r2)
 10063f4:	e0bfff17 	ldw	r2,-4(fp)
 10063f8:	11400217 	ldw	r5,8(r2)
 10063fc:	e0bfff17 	ldw	r2,-4(fp)
 1006400:	11800317 	ldw	r6,12(r2)
 1006404:	e0bfff17 	ldw	r2,-4(fp)
 1006408:	11c00417 	ldw	r7,16(r2)
 100640c:	e0bfff17 	ldw	r2,-4(fp)
 1006410:	10c00517 	ldw	r3,20(r2)
 1006414:	e0bfff17 	ldw	r2,-4(fp)
 1006418:	10800617 	ldw	r2,24(r2)
 100641c:	d8c00015 	stw	r3,0(sp)
 1006420:	d8800115 	stw	r2,4(sp)
 1006424:	10008140 	call	1000814 <DrawRectangleFill>
			o->fillColour);
}
 1006428:	e037883a 	mov	sp,fp
 100642c:	dfc00117 	ldw	ra,4(sp)
 1006430:	df000017 	ldw	fp,0(sp)
 1006434:	dec00204 	addi	sp,sp,8
 1006438:	f800283a 	ret

0100643c <drawKey>:

void drawKey(Key *k) {
 100643c:	defffb04 	addi	sp,sp,-20
 1006440:	dfc00415 	stw	ra,16(sp)
 1006444:	df000315 	stw	fp,12(sp)
 1006448:	df000304 	addi	fp,sp,12
 100644c:	e13fff15 	stw	r4,-4(fp)

	DrawRectangleFill(k->x1, k->x2, k->y1, k->y2, k->keyOutlineColour,
 1006450:	e0bfff17 	ldw	r2,-4(fp)
 1006454:	11000317 	ldw	r4,12(r2)
 1006458:	e0bfff17 	ldw	r2,-4(fp)
 100645c:	11400417 	ldw	r5,16(r2)
 1006460:	e0bfff17 	ldw	r2,-4(fp)
 1006464:	11800517 	ldw	r6,20(r2)
 1006468:	e0bfff17 	ldw	r2,-4(fp)
 100646c:	11c00617 	ldw	r7,24(r2)
 1006470:	e0bfff17 	ldw	r2,-4(fp)
 1006474:	10c00117 	ldw	r3,4(r2)
 1006478:	e0bfff17 	ldw	r2,-4(fp)
 100647c:	10800217 	ldw	r2,8(r2)
 1006480:	d8c00015 	stw	r3,0(sp)
 1006484:	d8800115 	stw	r2,4(sp)
 1006488:	10008140 	call	1000814 <DrawRectangleFill>
			k->keyFillColour);
	writeCaptionKey(k, k->fontColour, k->keyFillColour);
 100648c:	e0bfff17 	ldw	r2,-4(fp)
 1006490:	11400017 	ldw	r5,0(r2)
 1006494:	e0bfff17 	ldw	r2,-4(fp)
 1006498:	11800217 	ldw	r6,8(r2)
 100649c:	e13fff17 	ldw	r4,-4(fp)
 10064a0:	100c03c0 	call	100c03c <writeCaptionKey>

}
 10064a4:	e037883a 	mov	sp,fp
 10064a8:	dfc00117 	ldw	ra,4(sp)
 10064ac:	df000017 	ldw	fp,0(sp)
 10064b0:	dec00204 	addi	sp,sp,8
 10064b4:	f800283a 	ret

010064b8 <drawPage>:

void drawPage(Page * currentScreen) {
 10064b8:	defffb04 	addi	sp,sp,-20
 10064bc:	dfc00415 	stw	ra,16(sp)
 10064c0:	df000315 	stw	fp,12(sp)
 10064c4:	df000304 	addi	fp,sp,12
 10064c8:	e13fff15 	stw	r4,-4(fp)
	// Fill background
	int j;
	for (j = 0; j < 481; j++) {
 10064cc:	e03ffe15 	stw	zero,-8(fp)
 10064d0:	00000906 	br	10064f8 <drawPage+0x40>
		HLine(0, j, 801, currentScreen->backColour);
 10064d4:	e0bfff17 	ldw	r2,-4(fp)
 10064d8:	11c00017 	ldw	r7,0(r2)
 10064dc:	0009883a 	mov	r4,zero
 10064e0:	e17ffe17 	ldw	r5,-8(fp)
 10064e4:	0180c844 	movi	r6,801
 10064e8:	100061c0 	call	100061c <HLine>
}

void drawPage(Page * currentScreen) {
	// Fill background
	int j;
	for (j = 0; j < 481; j++) {
 10064ec:	e0bffe17 	ldw	r2,-8(fp)
 10064f0:	10800044 	addi	r2,r2,1
 10064f4:	e0bffe15 	stw	r2,-8(fp)
 10064f8:	e0bffe17 	ldw	r2,-8(fp)
 10064fc:	10807850 	cmplti	r2,r2,481
 1006500:	103ff41e 	bne	r2,zero,10064d4 <drawPage+0x1c>
		HLine(0, j, 801, currentScreen->backColour);
	}

	// Iterate through Boxes
	int i = 0;
 1006504:	e03ffd15 	stw	zero,-12(fp)

	for (i = 0; i < currentScreen->numInputBoxes; i++) {
 1006508:	e03ffd15 	stw	zero,-12(fp)
 100650c:	00000f06 	br	100654c <drawPage+0x94>
		drawInputBox(&(currentScreen->inputBoxes[i]));
 1006510:	e0bfff17 	ldw	r2,-4(fp)
 1006514:	10c05d17 	ldw	r3,372(r2)
 1006518:	e0bffd17 	ldw	r2,-12(fp)
 100651c:	10804724 	muli	r2,r2,284
 1006520:	1889883a 	add	r4,r3,r2
 1006524:	100a9b00 	call	100a9b0 <drawInputBox>
		updateInputBox(&(currentScreen->inputBoxes[i]));
 1006528:	e0bfff17 	ldw	r2,-4(fp)
 100652c:	10c05d17 	ldw	r3,372(r2)
 1006530:	e0bffd17 	ldw	r2,-12(fp)
 1006534:	10804724 	muli	r2,r2,284
 1006538:	1889883a 	add	r4,r3,r2
 100653c:	100aa180 	call	100aa18 <updateInputBox>
	}

	// Iterate through Boxes
	int i = 0;

	for (i = 0; i < currentScreen->numInputBoxes; i++) {
 1006540:	e0bffd17 	ldw	r2,-12(fp)
 1006544:	10800044 	addi	r2,r2,1
 1006548:	e0bffd15 	stw	r2,-12(fp)
 100654c:	e0bfff17 	ldw	r2,-4(fp)
 1006550:	10c00217 	ldw	r3,8(r2)
 1006554:	e0bffd17 	ldw	r2,-12(fp)
 1006558:	10ffed16 	blt	r2,r3,1006510 <drawPage+0x58>
		drawInputBox(&(currentScreen->inputBoxes[i]));
		updateInputBox(&(currentScreen->inputBoxes[i]));
	}
	// Iterate through buttons
	for (i = 0; i < currentScreen->numButtons; i++) {
 100655c:	e03ffd15 	stw	zero,-12(fp)
 1006560:	00001106 	br	10065a8 <drawPage+0xf0>
		drawButton(&(currentScreen->buttons[i]));
 1006564:	e0bfff17 	ldw	r2,-4(fp)
 1006568:	10c00817 	ldw	r3,32(r2)
 100656c:	e0bffd17 	ldw	r2,-12(fp)
 1006570:	10800a24 	muli	r2,r2,40
 1006574:	1889883a 	add	r4,r3,r2
 1006578:	10063740 	call	1006374 <drawButton>
		writeCaptionButton(&(currentScreen->buttons[i]), BLACK, LIGHT_SKY_BLUE);
 100657c:	e0bfff17 	ldw	r2,-4(fp)
 1006580:	10c00817 	ldw	r3,32(r2)
 1006584:	e0bffd17 	ldw	r2,-12(fp)
 1006588:	10800a24 	muli	r2,r2,40
 100658c:	1889883a 	add	r4,r3,r2
 1006590:	000b883a 	mov	r5,zero
 1006594:	01801304 	movi	r6,76
 1006598:	100bce40 	call	100bce4 <writeCaptionButton>
	for (i = 0; i < currentScreen->numInputBoxes; i++) {
		drawInputBox(&(currentScreen->inputBoxes[i]));
		updateInputBox(&(currentScreen->inputBoxes[i]));
	}
	// Iterate through buttons
	for (i = 0; i < currentScreen->numButtons; i++) {
 100659c:	e0bffd17 	ldw	r2,-12(fp)
 10065a0:	10800044 	addi	r2,r2,1
 10065a4:	e0bffd15 	stw	r2,-12(fp)
 10065a8:	e0bfff17 	ldw	r2,-4(fp)
 10065ac:	10c00317 	ldw	r3,12(r2)
 10065b0:	e0bffd17 	ldw	r2,-12(fp)
 10065b4:	10ffeb16 	blt	r2,r3,1006564 <drawPage+0xac>
		drawButton(&(currentScreen->buttons[i]));
		writeCaptionButton(&(currentScreen->buttons[i]), BLACK, LIGHT_SKY_BLUE);
	}
	// Iterate through numSDBoxes
	for (i = 0; i < currentScreen->numSDBoxes; i++) {
 10065b8:	e03ffd15 	stw	zero,-12(fp)
 10065bc:	00001106 	br	1006604 <drawPage+0x14c>
		drawSDBox(&(currentScreen->sdBoxes[i]));
 10065c0:	e0bfff17 	ldw	r2,-4(fp)
 10065c4:	10c05e17 	ldw	r3,376(r2)
 10065c8:	e0bffd17 	ldw	r2,-12(fp)
 10065cc:	10800924 	muli	r2,r2,36
 10065d0:	1889883a 	add	r4,r3,r2
 10065d4:	100abf40 	call	100abf4 <drawSDBox>
		writeCaptionSDBox(&(currentScreen->sdBoxes[i]), BLACK, LIGHT_SKY_BLUE);
 10065d8:	e0bfff17 	ldw	r2,-4(fp)
 10065dc:	10c05e17 	ldw	r3,376(r2)
 10065e0:	e0bffd17 	ldw	r2,-12(fp)
 10065e4:	10800924 	muli	r2,r2,36
 10065e8:	1889883a 	add	r4,r3,r2
 10065ec:	000b883a 	mov	r5,zero
 10065f0:	01801304 	movi	r6,76
 10065f4:	100ac580 	call	100ac58 <writeCaptionSDBox>
	for (i = 0; i < currentScreen->numButtons; i++) {
		drawButton(&(currentScreen->buttons[i]));
		writeCaptionButton(&(currentScreen->buttons[i]), BLACK, LIGHT_SKY_BLUE);
	}
	// Iterate through numSDBoxes
	for (i = 0; i < currentScreen->numSDBoxes; i++) {
 10065f8:	e0bffd17 	ldw	r2,-12(fp)
 10065fc:	10800044 	addi	r2,r2,1
 1006600:	e0bffd15 	stw	r2,-12(fp)
 1006604:	e0bfff17 	ldw	r2,-4(fp)
 1006608:	10c00517 	ldw	r3,20(r2)
 100660c:	e0bffd17 	ldw	r2,-12(fp)
 1006610:	10ffeb16 	blt	r2,r3,10065c0 <drawPage+0x108>
		drawSDBox(&(currentScreen->sdBoxes[i]));
		writeCaptionSDBox(&(currentScreen->sdBoxes[i]), BLACK, LIGHT_SKY_BLUE);
	}

	// Iterate through objects
	for (i = 0; i < currentScreen->numObjects; i++) {
 1006614:	e03ffd15 	stw	zero,-12(fp)
 1006618:	00001e06 	br	1006694 <drawPage+0x1dc>

		drawObject(&(currentScreen->objects[i]));
 100661c:	e0bfff17 	ldw	r2,-4(fp)
 1006620:	10c00917 	ldw	r3,36(r2)
 1006624:	e0bffd17 	ldw	r2,-12(fp)
 1006628:	10800924 	muli	r2,r2,36
 100662c:	1889883a 	add	r4,r3,r2
 1006630:	10063d80 	call	10063d8 <drawObject>
		if (currentScreen->hasKeyboard == 1) {
 1006634:	e0bfff17 	ldw	r2,-4(fp)
 1006638:	10800617 	ldw	r2,24(r2)
 100663c:	10800058 	cmpnei	r2,r2,1
 1006640:	1000091e 	bne	r2,zero,1006668 <drawPage+0x1b0>

			writeCaptionObjectLarge(&(currentScreen->objects[i]), BLACK, PINK);
 1006644:	e0bfff17 	ldw	r2,-4(fp)
 1006648:	10c00917 	ldw	r3,36(r2)
 100664c:	e0bffd17 	ldw	r2,-12(fp)
 1006650:	10800924 	muli	r2,r2,36
 1006654:	1889883a 	add	r4,r3,r2
 1006658:	000b883a 	mov	r5,zero
 100665c:	01801a04 	movi	r6,104
 1006660:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
 1006664:	00000806 	br	1006688 <drawPage+0x1d0>
		} else {
			writeCaptionObject(&(currentScreen->objects[i]), BLACK, PINK);
 1006668:	e0bfff17 	ldw	r2,-4(fp)
 100666c:	10c00917 	ldw	r3,36(r2)
 1006670:	e0bffd17 	ldw	r2,-12(fp)
 1006674:	10800924 	muli	r2,r2,36
 1006678:	1889883a 	add	r4,r3,r2
 100667c:	000b883a 	mov	r5,zero
 1006680:	01801a04 	movi	r6,104
 1006684:	100be040 	call	100be04 <writeCaptionObject>
		drawSDBox(&(currentScreen->sdBoxes[i]));
		writeCaptionSDBox(&(currentScreen->sdBoxes[i]), BLACK, LIGHT_SKY_BLUE);
	}

	// Iterate through objects
	for (i = 0; i < currentScreen->numObjects; i++) {
 1006688:	e0bffd17 	ldw	r2,-12(fp)
 100668c:	10800044 	addi	r2,r2,1
 1006690:	e0bffd15 	stw	r2,-12(fp)
 1006694:	e0bfff17 	ldw	r2,-4(fp)
 1006698:	10c00417 	ldw	r3,16(r2)
 100669c:	e0bffd17 	ldw	r2,-12(fp)
 10066a0:	10ffde16 	blt	r2,r3,100661c <drawPage+0x164>
		} else {
			writeCaptionObject(&(currentScreen->objects[i]), BLACK, PINK);
		}
	}

	if (currentScreen->hasKeyboard == 1) {
 10066a4:	e0bfff17 	ldw	r2,-4(fp)
 10066a8:	10800617 	ldw	r2,24(r2)
 10066ac:	10800058 	cmpnei	r2,r2,1
 10066b0:	1000021e 	bne	r2,zero,10066bc <drawPage+0x204>
		drawKeyboard(currentScreen);
 10066b4:	e13fff17 	ldw	r4,-4(fp)
 10066b8:	10067040 	call	1006704 <drawKeyboard>
	}

}
 10066bc:	e037883a 	mov	sp,fp
 10066c0:	dfc00117 	ldw	ra,4(sp)
 10066c4:	df000017 	ldw	fp,0(sp)
 10066c8:	dec00204 	addi	sp,sp,8
 10066cc:	f800283a 	ret

010066d0 <drawMenu>:

void drawMenu() {
 10066d0:	defffe04 	addi	sp,sp,-8
 10066d4:	dfc00115 	stw	ra,4(sp)
 10066d8:	df000015 	stw	fp,0(sp)
 10066dc:	d839883a 	mov	fp,sp

	globalCurrentPage = buildMenu();
 10066e0:	10039100 	call	1003910 <buildMenu>
 10066e4:	d0a71415 	stw	r2,-25520(gp)
	drawPage(globalCurrentPage);
 10066e8:	d1271417 	ldw	r4,-25520(gp)
 10066ec:	10064b80 	call	10064b8 <drawPage>

}
 10066f0:	e037883a 	mov	sp,fp
 10066f4:	dfc00117 	ldw	ra,4(sp)
 10066f8:	df000017 	ldw	fp,0(sp)
 10066fc:	dec00204 	addi	sp,sp,8
 1006700:	f800283a 	ret

01006704 <drawKeyboard>:

void drawKeyboard(Page * currentScreen) {
 1006704:	defffa04 	addi	sp,sp,-24
 1006708:	dfc00515 	stw	ra,20(sp)
 100670c:	df000415 	stw	fp,16(sp)
 1006710:	df000404 	addi	fp,sp,16
 1006714:	e13fff15 	stw	r4,-4(fp)
	int i;
	int n;
	Key * k = currentScreen->keyboard.currentKeyset;
 1006718:	e0bfff17 	ldw	r2,-4(fp)
 100671c:	10805b17 	ldw	r2,364(r2)
 1006720:	e0bffc15 	stw	r2,-16(fp)

	n = sizeof(k) / sizeof(k[0]);
 1006724:	e03ffd15 	stw	zero,-12(fp)

	if (currentScreen->keyboard.isNum == 1) {
 1006728:	e0bfff17 	ldw	r2,-4(fp)
 100672c:	10805017 	ldw	r2,320(r2)
 1006730:	10800058 	cmpnei	r2,r2,1
 1006734:	10000f1e 	bne	r2,zero,1006774 <drawKeyboard+0x70>

		for (i = 0; i < NUM_SIZE; i++) {
 1006738:	e03ffe15 	stw	zero,-8(fp)
 100673c:	00000906 	br	1006764 <drawKeyboard+0x60>
			drawKey(&(currentScreen->keyboard.currentKeyset[i]));
 1006740:	e0bfff17 	ldw	r2,-4(fp)
 1006744:	10c05b17 	ldw	r3,364(r2)
 1006748:	e0bffe17 	ldw	r2,-8(fp)
 100674c:	10800a24 	muli	r2,r2,40
 1006750:	1889883a 	add	r4,r3,r2
 1006754:	100643c0 	call	100643c <drawKey>

	n = sizeof(k) / sizeof(k[0]);

	if (currentScreen->keyboard.isNum == 1) {

		for (i = 0; i < NUM_SIZE; i++) {
 1006758:	e0bffe17 	ldw	r2,-8(fp)
 100675c:	10800044 	addi	r2,r2,1
 1006760:	e0bffe15 	stw	r2,-8(fp)
 1006764:	e0bffe17 	ldw	r2,-8(fp)
 1006768:	10800350 	cmplti	r2,r2,13
 100676c:	103ff41e 	bne	r2,zero,1006740 <drawKeyboard+0x3c>
 1006770:	00000e06 	br	10067ac <drawKeyboard+0xa8>
			drawKey(&(currentScreen->keyboard.currentKeyset[i]));
		}
	} else {
		for (i = 0; i < ALPHA_SIZE; i++) {
 1006774:	e03ffe15 	stw	zero,-8(fp)
 1006778:	00000906 	br	10067a0 <drawKeyboard+0x9c>
			drawKey(&(currentScreen->keyboard.currentKeyset[i]));
 100677c:	e0bfff17 	ldw	r2,-4(fp)
 1006780:	10c05b17 	ldw	r3,364(r2)
 1006784:	e0bffe17 	ldw	r2,-8(fp)
 1006788:	10800a24 	muli	r2,r2,40
 100678c:	1889883a 	add	r4,r3,r2
 1006790:	100643c0 	call	100643c <drawKey>

		for (i = 0; i < NUM_SIZE; i++) {
			drawKey(&(currentScreen->keyboard.currentKeyset[i]));
		}
	} else {
		for (i = 0; i < ALPHA_SIZE; i++) {
 1006794:	e0bffe17 	ldw	r2,-8(fp)
 1006798:	10800044 	addi	r2,r2,1
 100679c:	e0bffe15 	stw	r2,-8(fp)
 10067a0:	e0bffe17 	ldw	r2,-8(fp)
 10067a4:	108008d0 	cmplti	r2,r2,35
 10067a8:	103ff41e 	bne	r2,zero,100677c <drawKeyboard+0x78>
			drawKey(&(currentScreen->keyboard.currentKeyset[i]));
		}
	}
}
 10067ac:	e037883a 	mov	sp,fp
 10067b0:	dfc00117 	ldw	ra,4(sp)
 10067b4:	df000017 	ldw	fp,0(sp)
 10067b8:	dec00204 	addi	sp,sp,8
 10067bc:	f800283a 	ret

010067c0 <executePWSetupPress>:
#include "WriteCaption.h"
#include "TouchScreen.h"
#include "InputBox.h"

void executePWSetupPress(int choice, int *inputBoxPressed, int *buttonPressed,
		int * sdBoxPressed) {
 10067c0:	deffe504 	addi	sp,sp,-108
 10067c4:	dfc01a15 	stw	ra,104(sp)
 10067c8:	df001915 	stw	fp,100(sp)
 10067cc:	dc001815 	stw	r16,96(sp)
 10067d0:	df001804 	addi	fp,sp,96
 10067d4:	e13ffc15 	stw	r4,-16(fp)
 10067d8:	e17ffd15 	stw	r5,-12(fp)
 10067dc:	e1bffe15 	stw	r6,-8(fp)
 10067e0:	e1ffff15 	stw	r7,-4(fp)

	if (*sdBoxPressed == 1) {
 10067e4:	e0bfff17 	ldw	r2,-4(fp)
 10067e8:	10800017 	ldw	r2,0(r2)
 10067ec:	10800058 	cmpnei	r2,r2,1
 10067f0:	1000491e 	bne	r2,zero,1006918 <executePWSetupPress+0x158>

		if (choice == 0) {
 10067f4:	e0bffc17 	ldw	r2,-16(fp)
 10067f8:	1004c03a 	cmpne	r2,r2,zero
 10067fc:	10002a1e 	bne	r2,zero,10068a8 <executePWSetupPress+0xe8>
			char newPassword[80];
			strcpy(newPassword, globalCurrentPage->inputBoxes[0].inputBuf);
 1006800:	d0a71417 	ldw	r2,-25520(gp)
 1006804:	10805d17 	ldw	r2,372(r2)
 1006808:	11400704 	addi	r5,r2,28
 100680c:	e13fe804 	addi	r4,fp,-96
 1006810:	1015c700 	call	1015c70 <strcpy>
			// append '$' to signal end of password
			sprintf(newPassword, "%s%s", newPassword, "$");
 1006814:	e13fe804 	addi	r4,fp,-96
 1006818:	014040f4 	movhi	r5,259
 100681c:	29668f04 	addi	r5,r5,-26052
 1006820:	e1bfe804 	addi	r6,fp,-96
 1006824:	01c040f4 	movhi	r7,259
 1006828:	39e69104 	addi	r7,r7,-26044
 100682c:	10159040 	call	1015904 <sprintf>
			keygen(key, newPassword, strlen(newPassword));
 1006830:	e13fe804 	addi	r4,fp,-96
 1006834:	1015cfc0 	call	1015cfc <strlen>
 1006838:	100d883a 	mov	r6,r2
 100683c:	01004134 	movhi	r4,260
 1006840:	21235904 	addi	r4,r4,-29340
 1006844:	e17fe804 	addi	r5,fp,-96
 1006848:	1004ae80 	call	1004ae8 <keygen>
			if (writeToSD(key, KEYFILE) == 0) {
 100684c:	01004134 	movhi	r4,260
 1006850:	21235904 	addi	r4,r4,-29340
 1006854:	014040f4 	movhi	r5,259
 1006858:	29669204 	addi	r5,r5,-26040
 100685c:	100ad340 	call	100ad34 <writeToSD>
 1006860:	1004c03a 	cmpne	r2,r2,zero
 1006864:	1000051e 	bne	r2,zero,100687c <executePWSetupPress+0xbc>
				greenLEDS = 0xff;
 1006868:	00e00034 	movhi	r3,32768
 100686c:	18c40c04 	addi	r3,r3,4144
 1006870:	00bfffc4 	movi	r2,-1
 1006874:	18800005 	stb	r2,0(r3)
 1006878:	00000406 	br	100688c <executePWSetupPress+0xcc>
			} else {
				redLEDS = 0xff;
 100687c:	00e00034 	movhi	r3,32768
 1006880:	18c41004 	addi	r3,r3,4160
 1006884:	00bfffc4 	movi	r2,-1
 1006888:	18800005 	stb	r2,0(r3)
			}
			writeToSD(newPassword, "password.txt");
 100688c:	e13fe804 	addi	r4,fp,-96
 1006890:	014040f4 	movhi	r5,259
 1006894:	29669404 	addi	r5,r5,-26032
 1006898:	100ad340 	call	100ad34 <writeToSD>
			printkey(key);
 100689c:	01004134 	movhi	r4,260
 10068a0:	21235904 	addi	r4,r4,-29340
 10068a4:	1004d180 	call	1004d18 <printkey>
		}
		if (choice == 1) {
 10068a8:	e0bffc17 	ldw	r2,-16(fp)
 10068ac:	10800058 	cmpnei	r2,r2,1
 10068b0:	10000b1e 	bne	r2,zero,10068e0 <executePWSetupPress+0x120>
			if (writeToSD("E", "passMode.txt") == 0) {
 10068b4:	010040f4 	movhi	r4,259
 10068b8:	21269804 	addi	r4,r4,-26016
 10068bc:	014040f4 	movhi	r5,259
 10068c0:	29669904 	addi	r5,r5,-26012
 10068c4:	100ad340 	call	100ad34 <writeToSD>
 10068c8:	1004c03a 	cmpne	r2,r2,zero
 10068cc:	1000041e 	bne	r2,zero,10068e0 <executePWSetupPress+0x120>
				greenLEDS = 0xff;
 10068d0:	00e00034 	movhi	r3,32768
 10068d4:	18c40c04 	addi	r3,r3,4144
 10068d8:	00bfffc4 	movi	r2,-1
 10068dc:	18800005 	stb	r2,0(r3)
				;
			}
		}
		if (choice == 2) {
 10068e0:	e0bffc17 	ldw	r2,-16(fp)
 10068e4:	10800098 	cmpnei	r2,r2,2
 10068e8:	10000b1e 	bne	r2,zero,1006918 <executePWSetupPress+0x158>
			if (writeToSD("D", "passMode.txt") == 0) {
 10068ec:	010040f4 	movhi	r4,259
 10068f0:	21269d04 	addi	r4,r4,-25996
 10068f4:	014040f4 	movhi	r5,259
 10068f8:	29669904 	addi	r5,r5,-26012
 10068fc:	100ad340 	call	100ad34 <writeToSD>
 1006900:	1004c03a 	cmpne	r2,r2,zero
 1006904:	1000041e 	bne	r2,zero,1006918 <executePWSetupPress+0x158>
				redLEDS = 0xff;
 1006908:	00e00034 	movhi	r3,32768
 100690c:	18c41004 	addi	r3,r3,4160
 1006910:	00bfffc4 	movi	r2,-1
 1006914:	18800005 	stb	r2,0(r3)
			}
		}
	}

	if (*inputBoxPressed == 1) {
 1006918:	e0bffd17 	ldw	r2,-12(fp)
 100691c:	10800017 	ldw	r2,0(r2)
 1006920:	10800058 	cmpnei	r2,r2,1
 1006924:	1000321e 	bne	r2,zero,10069f0 <executePWSetupPress+0x230>

		printf("input box choice: %d \n", choice);
 1006928:	010040f4 	movhi	r4,259
 100692c:	21269e04 	addi	r4,r4,-25992
 1006930:	e17ffc17 	ldw	r5,-16(fp)
 1006934:	10155040 	call	1015504 <printf>
		keys->keyboard.curInputBoxIndex = choice;
 1006938:	d0e71317 	ldw	r3,-25524(gp)
 100693c:	e0bffc17 	ldw	r2,-16(fp)
 1006940:	18805115 	stw	r2,324(r3)
		keys->keyboard.caller = globalCurrentPage;
 1006944:	d0e71317 	ldw	r3,-25524(gp)
 1006948:	d0a71417 	ldw	r2,-25520(gp)
 100694c:	18805c15 	stw	r2,368(r3)

		strcpy(keys->keyboard.buffer,
 1006950:	d0a71317 	ldw	r2,-25524(gp)
 1006954:	11000b04 	addi	r4,r2,44
 1006958:	d0a71417 	ldw	r2,-25520(gp)
 100695c:	10c05d17 	ldw	r3,372(r2)
 1006960:	e0bffc17 	ldw	r2,-16(fp)
 1006964:	10804724 	muli	r2,r2,284
 1006968:	1885883a 	add	r2,r3,r2
 100696c:	11400704 	addi	r5,r2,28
 1006970:	1015c700 	call	1015c70 <strcpy>
				globalCurrentPage->inputBoxes[choice].inputBuf);
		keys->keyboard.bufCount = strlen(
 1006974:	d4271317 	ldw	r16,-25524(gp)
 1006978:	d0a71417 	ldw	r2,-25520(gp)
 100697c:	10c05d17 	ldw	r3,372(r2)
 1006980:	e0bffc17 	ldw	r2,-16(fp)
 1006984:	10804724 	muli	r2,r2,284
 1006988:	1885883a 	add	r2,r3,r2
 100698c:	11000704 	addi	r4,r2,28
 1006990:	1015cfc0 	call	1015cfc <strlen>
 1006994:	80804b15 	stw	r2,300(r16)
				globalCurrentPage->inputBoxes[choice].inputBuf);
		strcpy(keys->objects[0].objectText,
 1006998:	d0a71317 	ldw	r2,-25524(gp)
 100699c:	10800917 	ldw	r2,36(r2)
 10069a0:	11000017 	ldw	r4,0(r2)
 10069a4:	d0a71417 	ldw	r2,-25520(gp)
 10069a8:	10c05d17 	ldw	r3,372(r2)
 10069ac:	e0bffc17 	ldw	r2,-16(fp)
 10069b0:	10804724 	muli	r2,r2,284
 10069b4:	1885883a 	add	r2,r3,r2
 10069b8:	11400704 	addi	r5,r2,28
 10069bc:	1015c700 	call	1015c70 <strcpy>
				globalCurrentPage->inputBoxes[choice].inputBuf);
		keys->objects[0].captionLength = strlen(
 10069c0:	d0a71317 	ldw	r2,-25524(gp)
 10069c4:	14000917 	ldw	r16,36(r2)
 10069c8:	d0a71417 	ldw	r2,-25520(gp)
 10069cc:	10c05d17 	ldw	r3,372(r2)
 10069d0:	e0bffc17 	ldw	r2,-16(fp)
 10069d4:	10804724 	muli	r2,r2,284
 10069d8:	1885883a 	add	r2,r3,r2
 10069dc:	11000704 	addi	r4,r2,28
 10069e0:	1015cfc0 	call	1015cfc <strlen>
 10069e4:	80800815 	stw	r2,32(r16)
				globalCurrentPage->inputBoxes[choice].inputBuf);
		globalCurrentPage = keys;
 10069e8:	d0a71317 	ldw	r2,-25524(gp)
 10069ec:	d0a71415 	stw	r2,-25520(gp)

	}

	if (*buttonPressed == 1) {
 10069f0:	e0bffe17 	ldw	r2,-8(fp)
 10069f4:	10800017 	ldw	r2,0(r2)
 10069f8:	10800058 	cmpnei	r2,r2,1
 10069fc:	10001b1e 	bne	r2,zero,1006a6c <executePWSetupPress+0x2ac>

		Button theButton = globalCurrentPage->buttons[choice];
 1006a00:	d0a71417 	ldw	r2,-25520(gp)
 1006a04:	10c00817 	ldw	r3,32(r2)
 1006a08:	e0bffc17 	ldw	r2,-16(fp)
 1006a0c:	10800a24 	muli	r2,r2,40
 1006a10:	1887883a 	add	r3,r3,r2
 1006a14:	18800017 	ldw	r2,0(r3)
 1006a18:	e0bfe815 	stw	r2,-96(fp)
 1006a1c:	18800117 	ldw	r2,4(r3)
 1006a20:	e0bfe915 	stw	r2,-92(fp)
 1006a24:	18800217 	ldw	r2,8(r3)
 1006a28:	e0bfea15 	stw	r2,-88(fp)
 1006a2c:	18800317 	ldw	r2,12(r3)
 1006a30:	e0bfeb15 	stw	r2,-84(fp)
 1006a34:	18800417 	ldw	r2,16(r3)
 1006a38:	e0bfec15 	stw	r2,-80(fp)
 1006a3c:	18800517 	ldw	r2,20(r3)
 1006a40:	e0bfed15 	stw	r2,-76(fp)
 1006a44:	18800617 	ldw	r2,24(r3)
 1006a48:	e0bfee15 	stw	r2,-72(fp)
 1006a4c:	18800717 	ldw	r2,28(r3)
 1006a50:	e0bfef15 	stw	r2,-68(fp)
 1006a54:	18800817 	ldw	r2,32(r3)
 1006a58:	e0bff015 	stw	r2,-64(fp)
 1006a5c:	18800917 	ldw	r2,36(r3)
 1006a60:	e0bff115 	stw	r2,-60(fp)
		globalCurrentPage = theButton.targetPage;
 1006a64:	e0bff117 	ldw	r2,-60(fp)
 1006a68:	d0a71415 	stw	r2,-25520(gp)
	}

}
 1006a6c:	e037883a 	mov	sp,fp
 1006a70:	dfc00217 	ldw	ra,8(sp)
 1006a74:	df000117 	ldw	fp,4(sp)
 1006a78:	dc000017 	ldw	r16,0(sp)
 1006a7c:	dec00304 	addi	sp,sp,12
 1006a80:	f800283a 	ret

01006a84 <executePWLogin>:

void executePWLogin(int choice, int *inputBoxPressed, int *buttonPressed,
		int * sdBoxPressed) {
 1006a84:	deffe404 	addi	sp,sp,-112
 1006a88:	dfc01b15 	stw	ra,108(sp)
 1006a8c:	df001a15 	stw	fp,104(sp)
 1006a90:	dc001915 	stw	r16,100(sp)
 1006a94:	df001904 	addi	fp,sp,100
 1006a98:	e13ffc15 	stw	r4,-16(fp)
 1006a9c:	e17ffd15 	stw	r5,-12(fp)
 1006aa0:	e1bffe15 	stw	r6,-8(fp)
 1006aa4:	e1ffff15 	stw	r7,-4(fp)

	if (*inputBoxPressed == 1) {
 1006aa8:	e0bffd17 	ldw	r2,-12(fp)
 1006aac:	10800017 	ldw	r2,0(r2)
 1006ab0:	10800058 	cmpnei	r2,r2,1
 1006ab4:	10002e1e 	bne	r2,zero,1006b70 <executePWLogin+0xec>
		keys->keyboard.curInputBoxIndex = choice;
 1006ab8:	d0e71317 	ldw	r3,-25524(gp)
 1006abc:	e0bffc17 	ldw	r2,-16(fp)
 1006ac0:	18805115 	stw	r2,324(r3)
		keys->keyboard.caller = globalCurrentPage;
 1006ac4:	d0e71317 	ldw	r3,-25524(gp)
 1006ac8:	d0a71417 	ldw	r2,-25520(gp)
 1006acc:	18805c15 	stw	r2,368(r3)

		strcpy(keys->keyboard.buffer,
 1006ad0:	d0a71317 	ldw	r2,-25524(gp)
 1006ad4:	11000b04 	addi	r4,r2,44
 1006ad8:	d0a71417 	ldw	r2,-25520(gp)
 1006adc:	10c05d17 	ldw	r3,372(r2)
 1006ae0:	e0bffc17 	ldw	r2,-16(fp)
 1006ae4:	10804724 	muli	r2,r2,284
 1006ae8:	1885883a 	add	r2,r3,r2
 1006aec:	11400704 	addi	r5,r2,28
 1006af0:	1015c700 	call	1015c70 <strcpy>
				globalCurrentPage->inputBoxes[choice].inputBuf);
		keys->keyboard.bufCount = strlen(
 1006af4:	d4271317 	ldw	r16,-25524(gp)
 1006af8:	d0a71417 	ldw	r2,-25520(gp)
 1006afc:	10c05d17 	ldw	r3,372(r2)
 1006b00:	e0bffc17 	ldw	r2,-16(fp)
 1006b04:	10804724 	muli	r2,r2,284
 1006b08:	1885883a 	add	r2,r3,r2
 1006b0c:	11000704 	addi	r4,r2,28
 1006b10:	1015cfc0 	call	1015cfc <strlen>
 1006b14:	80804b15 	stw	r2,300(r16)
				globalCurrentPage->inputBoxes[choice].inputBuf);
		strcpy(keys->objects[0].objectText,
 1006b18:	d0a71317 	ldw	r2,-25524(gp)
 1006b1c:	10800917 	ldw	r2,36(r2)
 1006b20:	11000017 	ldw	r4,0(r2)
 1006b24:	d0a71417 	ldw	r2,-25520(gp)
 1006b28:	10c05d17 	ldw	r3,372(r2)
 1006b2c:	e0bffc17 	ldw	r2,-16(fp)
 1006b30:	10804724 	muli	r2,r2,284
 1006b34:	1885883a 	add	r2,r3,r2
 1006b38:	11400704 	addi	r5,r2,28
 1006b3c:	1015c700 	call	1015c70 <strcpy>
				globalCurrentPage->inputBoxes[choice].inputBuf);
		keys->objects[0].captionLength = strlen(
 1006b40:	d0a71317 	ldw	r2,-25524(gp)
 1006b44:	14000917 	ldw	r16,36(r2)
 1006b48:	d0a71417 	ldw	r2,-25520(gp)
 1006b4c:	10c05d17 	ldw	r3,372(r2)
 1006b50:	e0bffc17 	ldw	r2,-16(fp)
 1006b54:	10804724 	muli	r2,r2,284
 1006b58:	1885883a 	add	r2,r3,r2
 1006b5c:	11000704 	addi	r4,r2,28
 1006b60:	1015cfc0 	call	1015cfc <strlen>
 1006b64:	80800815 	stw	r2,32(r16)
				globalCurrentPage->inputBoxes[choice].inputBuf);
		globalCurrentPage = keys;
 1006b68:	d0a71317 	ldw	r2,-25524(gp)
 1006b6c:	d0a71415 	stw	r2,-25520(gp)

	}

	if (*buttonPressed == 1) {
 1006b70:	e0bffe17 	ldw	r2,-8(fp)
 1006b74:	10800017 	ldw	r2,0(r2)
 1006b78:	10800058 	cmpnei	r2,r2,1
 1006b7c:	10003d1e 	bne	r2,zero,1006c74 <executePWLogin+0x1f0>
		char password[80] = "";
 1006b80:	008040f4 	movhi	r2,259
 1006b84:	10a6ae04 	addi	r2,r2,-25928
 1006b88:	10800003 	ldbu	r2,0(r2)
 1006b8c:	e0bfe805 	stb	r2,-96(fp)
 1006b90:	e13fe844 	addi	r4,fp,-95
 1006b94:	018013c4 	movi	r6,79
 1006b98:	000b883a 	mov	r5,zero
 1006b9c:	10153f40 	call	10153f4 <memset>
		int i;

		readFromSD(password, "password.txt", 80);
 1006ba0:	e13fe804 	addi	r4,fp,-96
 1006ba4:	014040f4 	movhi	r5,259
 1006ba8:	29669404 	addi	r5,r5,-26032
 1006bac:	01801404 	movi	r6,80
 1006bb0:	100ae780 	call	100ae78 <readFromSD>

		// end string at '$' which signals end of password
		for (i = 0; i < strlen(password); i++) {
 1006bb4:	e03fe715 	stw	zero,-100(fp)
 1006bb8:	00001006 	br	1006bfc <executePWLogin+0x178>
			if (password[i] == '$') {
 1006bbc:	e0ffe717 	ldw	r3,-100(fp)
 1006bc0:	e0bfe804 	addi	r2,fp,-96
 1006bc4:	10c5883a 	add	r2,r2,r3
 1006bc8:	10800003 	ldbu	r2,0(r2)
 1006bcc:	10803fcc 	andi	r2,r2,255
 1006bd0:	1080201c 	xori	r2,r2,128
 1006bd4:	10bfe004 	addi	r2,r2,-128
 1006bd8:	10800918 	cmpnei	r2,r2,36
 1006bdc:	1000041e 	bne	r2,zero,1006bf0 <executePWLogin+0x16c>
				password[i] = '\0';
 1006be0:	e0bfe717 	ldw	r2,-100(fp)
 1006be4:	e0ffe804 	addi	r3,fp,-96
 1006be8:	1885883a 	add	r2,r3,r2
 1006bec:	10000005 	stb	zero,0(r2)
		int i;

		readFromSD(password, "password.txt", 80);

		// end string at '$' which signals end of password
		for (i = 0; i < strlen(password); i++) {
 1006bf0:	e0bfe717 	ldw	r2,-100(fp)
 1006bf4:	10800044 	addi	r2,r2,1
 1006bf8:	e0bfe715 	stw	r2,-100(fp)
 1006bfc:	e43fe717 	ldw	r16,-100(fp)
 1006c00:	e13fe804 	addi	r4,fp,-96
 1006c04:	1015cfc0 	call	1015cfc <strlen>
 1006c08:	80bfec36 	bltu	r16,r2,1006bbc <executePWLogin+0x138>
			if (password[i] == '$') {
				password[i] = '\0';
			}
		}

		if (strcmp(globalCurrentPage->inputBoxes[choice].inputBuf, password)
 1006c0c:	d0a71417 	ldw	r2,-25520(gp)
 1006c10:	10c05d17 	ldw	r3,372(r2)
 1006c14:	e0bffc17 	ldw	r2,-16(fp)
 1006c18:	10804724 	muli	r2,r2,284
 1006c1c:	1885883a 	add	r2,r3,r2
 1006c20:	11000704 	addi	r4,r2,28
 1006c24:	e17fe804 	addi	r5,fp,-96
 1006c28:	1015bb40 	call	1015bb4 <strcmp>
 1006c2c:	1004c03a 	cmpne	r2,r2,zero
 1006c30:	1000031e 	bne	r2,zero,1006c40 <executePWLogin+0x1bc>
				== 0) {
			globalCurrentPage = home;
 1006c34:	d0a71117 	ldw	r2,-25532(gp)
 1006c38:	d0a71415 	stw	r2,-25520(gp)
 1006c3c:	00000d06 	br	1006c74 <executePWLogin+0x1f0>
		} else {
			globalCurrentPage->objects[0].fillColour = RED;
 1006c40:	d0a71417 	ldw	r2,-25520(gp)
 1006c44:	10c00917 	ldw	r3,36(r2)
 1006c48:	00800084 	movi	r2,2
 1006c4c:	18800615 	stw	r2,24(r3)
			globalCurrentPage->objects[0].objectText =
 1006c50:	d0a71417 	ldw	r2,-25520(gp)
 1006c54:	10c00917 	ldw	r3,36(r2)
 1006c58:	008040f4 	movhi	r2,259
 1006c5c:	10a6a404 	addi	r2,r2,-25968
 1006c60:	18800015 	stw	r2,0(r3)
					"Incorrect Password, Please Try Again";
			globalCurrentPage->objects[0].captionLength = strlen(
 1006c64:	d0a71417 	ldw	r2,-25520(gp)
 1006c68:	10c00917 	ldw	r3,36(r2)
 1006c6c:	00800904 	movi	r2,36
 1006c70:	18800815 	stw	r2,32(r3)
					"Incorrect Password, Please Try Again");
		}
	}
}
 1006c74:	e037883a 	mov	sp,fp
 1006c78:	dfc00217 	ldw	ra,8(sp)
 1006c7c:	df000117 	ldw	fp,4(sp)
 1006c80:	dc000017 	ldw	r16,0(sp)
 1006c84:	dec00304 	addi	sp,sp,12
 1006c88:	f800283a 	ret

01006c8c <executeLoggingSettings>:

void executeLoggingSettings(int choice, int *inputBoxPressed,
		int *buttonPressed, int * sdBoxPressed) {
 1006c8c:	deffde04 	addi	sp,sp,-136
 1006c90:	dfc02115 	stw	ra,132(sp)
 1006c94:	df002015 	stw	fp,128(sp)
 1006c98:	dc001f15 	stw	r16,124(sp)
 1006c9c:	df001f04 	addi	fp,sp,124
 1006ca0:	e13ffc15 	stw	r4,-16(fp)
 1006ca4:	e17ffd15 	stw	r5,-12(fp)
 1006ca8:	e1bffe15 	stw	r6,-8(fp)
 1006cac:	e1ffff15 	stw	r7,-4(fp)

	if (*sdBoxPressed == 1) {
 1006cb0:	e0bfff17 	ldw	r2,-4(fp)
 1006cb4:	10800017 	ldw	r2,0(r2)
 1006cb8:	10800058 	cmpnei	r2,r2,1
 1006cbc:	10002f1e 	bne	r2,zero,1006d7c <executeLoggingSettings+0xf0>
		//enables logging
		if (choice == 0) {
 1006cc0:	e0bffc17 	ldw	r2,-16(fp)
 1006cc4:	1004c03a 	cmpne	r2,r2,zero
 1006cc8:	10000b1e 	bne	r2,zero,1006cf8 <executeLoggingSettings+0x6c>
			char *flag = "y";
 1006ccc:	008040f4 	movhi	r2,259
 1006cd0:	10a6c204 	addi	r2,r2,-25848
 1006cd4:	e0bfe215 	stw	r2,-120(fp)
			writeToSD(flag, "logfl.txt");
 1006cd8:	e13fe217 	ldw	r4,-120(fp)
 1006cdc:	014040f4 	movhi	r5,259
 1006ce0:	2966c304 	addi	r5,r5,-25844
 1006ce4:	100ad340 	call	100ad34 <writeToSD>
			printf("Writing %s flag", flag);
 1006ce8:	010040f4 	movhi	r4,259
 1006cec:	2126c604 	addi	r4,r4,-25832
 1006cf0:	e17fe217 	ldw	r5,-120(fp)
 1006cf4:	10155040 	call	1015504 <printf>
		}
		//disables logging
		if (choice == 1) {
 1006cf8:	e0bffc17 	ldw	r2,-16(fp)
 1006cfc:	10800058 	cmpnei	r2,r2,1
 1006d00:	10000b1e 	bne	r2,zero,1006d30 <executeLoggingSettings+0xa4>
			char *flag = "n";
 1006d04:	008040f4 	movhi	r2,259
 1006d08:	10a6ca04 	addi	r2,r2,-25816
 1006d0c:	e0bfe115 	stw	r2,-124(fp)
			writeToSD(flag, "logfl.txt");
 1006d10:	e13fe117 	ldw	r4,-124(fp)
 1006d14:	014040f4 	movhi	r5,259
 1006d18:	2966c304 	addi	r5,r5,-25844
 1006d1c:	100ad340 	call	100ad34 <writeToSD>
			printf("Writing %s flag", flag);
 1006d20:	010040f4 	movhi	r4,259
 1006d24:	2126c604 	addi	r4,r4,-25832
 1006d28:	e17fe117 	ldw	r5,-124(fp)
 1006d2c:	10155040 	call	1015504 <printf>
		}
		//write metres value to log
		if (choice == 2) {
 1006d30:	e0bffc17 	ldw	r2,-16(fp)
 1006d34:	10800098 	cmpnei	r2,r2,2
 1006d38:	1000101e 	bne	r2,zero,1006d7c <executeLoggingSettings+0xf0>
			char flag[100];
			strcpy(flag, globalCurrentPage->inputBoxes[0].inputBuf);
 1006d3c:	d0a71417 	ldw	r2,-25520(gp)
 1006d40:	10805d17 	ldw	r2,372(r2)
 1006d44:	11400704 	addi	r5,r2,28
 1006d48:	e13fe304 	addi	r4,fp,-116
 1006d4c:	1015c700 	call	1015c70 <strcpy>
			sprintf(flag, "%s%s", flag, "$");
 1006d50:	e13fe304 	addi	r4,fp,-116
 1006d54:	e1bfe304 	addi	r6,fp,-116
 1006d58:	014040f4 	movhi	r5,259
 1006d5c:	29668f04 	addi	r5,r5,-26052
 1006d60:	01c040f4 	movhi	r7,259
 1006d64:	39e69104 	addi	r7,r7,-26044
 1006d68:	10159040 	call	1015904 <sprintf>
			writeToSD(flag, "log.txt");
 1006d6c:	e13fe304 	addi	r4,fp,-116
 1006d70:	014040f4 	movhi	r5,259
 1006d74:	2966cb04 	addi	r5,r5,-25812
 1006d78:	100ad340 	call	100ad34 <writeToSD>

		}
	}

	if (*inputBoxPressed == 1) {
 1006d7c:	e0bffd17 	ldw	r2,-12(fp)
 1006d80:	10800017 	ldw	r2,0(r2)
 1006d84:	10800058 	cmpnei	r2,r2,1
 1006d88:	1000321e 	bne	r2,zero,1006e54 <executeLoggingSettings+0x1c8>

		printf("input box choice: %d \n", choice);
 1006d8c:	010040f4 	movhi	r4,259
 1006d90:	21269e04 	addi	r4,r4,-25992
 1006d94:	e17ffc17 	ldw	r5,-16(fp)
 1006d98:	10155040 	call	1015504 <printf>
		keys->keyboard.curInputBoxIndex = choice;
 1006d9c:	d0e71317 	ldw	r3,-25524(gp)
 1006da0:	e0bffc17 	ldw	r2,-16(fp)
 1006da4:	18805115 	stw	r2,324(r3)
		keys->keyboard.caller = globalCurrentPage;
 1006da8:	d0e71317 	ldw	r3,-25524(gp)
 1006dac:	d0a71417 	ldw	r2,-25520(gp)
 1006db0:	18805c15 	stw	r2,368(r3)

		strcpy(keys->keyboard.buffer,
 1006db4:	d0a71317 	ldw	r2,-25524(gp)
 1006db8:	11000b04 	addi	r4,r2,44
 1006dbc:	d0a71417 	ldw	r2,-25520(gp)
 1006dc0:	10c05d17 	ldw	r3,372(r2)
 1006dc4:	e0bffc17 	ldw	r2,-16(fp)
 1006dc8:	10804724 	muli	r2,r2,284
 1006dcc:	1885883a 	add	r2,r3,r2
 1006dd0:	11400704 	addi	r5,r2,28
 1006dd4:	1015c700 	call	1015c70 <strcpy>
				globalCurrentPage->inputBoxes[choice].inputBuf);
		keys->keyboard.bufCount = strlen(
 1006dd8:	d4271317 	ldw	r16,-25524(gp)
 1006ddc:	d0a71417 	ldw	r2,-25520(gp)
 1006de0:	10c05d17 	ldw	r3,372(r2)
 1006de4:	e0bffc17 	ldw	r2,-16(fp)
 1006de8:	10804724 	muli	r2,r2,284
 1006dec:	1885883a 	add	r2,r3,r2
 1006df0:	11000704 	addi	r4,r2,28
 1006df4:	1015cfc0 	call	1015cfc <strlen>
 1006df8:	80804b15 	stw	r2,300(r16)
				globalCurrentPage->inputBoxes[choice].inputBuf);
		strcpy(keys->objects[0].objectText,
 1006dfc:	d0a71317 	ldw	r2,-25524(gp)
 1006e00:	10800917 	ldw	r2,36(r2)
 1006e04:	11000017 	ldw	r4,0(r2)
 1006e08:	d0a71417 	ldw	r2,-25520(gp)
 1006e0c:	10c05d17 	ldw	r3,372(r2)
 1006e10:	e0bffc17 	ldw	r2,-16(fp)
 1006e14:	10804724 	muli	r2,r2,284
 1006e18:	1885883a 	add	r2,r3,r2
 1006e1c:	11400704 	addi	r5,r2,28
 1006e20:	1015c700 	call	1015c70 <strcpy>
				globalCurrentPage->inputBoxes[choice].inputBuf);
		keys->objects[0].captionLength = strlen(
 1006e24:	d0a71317 	ldw	r2,-25524(gp)
 1006e28:	14000917 	ldw	r16,36(r2)
 1006e2c:	d0a71417 	ldw	r2,-25520(gp)
 1006e30:	10c05d17 	ldw	r3,372(r2)
 1006e34:	e0bffc17 	ldw	r2,-16(fp)
 1006e38:	10804724 	muli	r2,r2,284
 1006e3c:	1885883a 	add	r2,r3,r2
 1006e40:	11000704 	addi	r4,r2,28
 1006e44:	1015cfc0 	call	1015cfc <strlen>
 1006e48:	80800815 	stw	r2,32(r16)
				globalCurrentPage->inputBoxes[choice].inputBuf);
		globalCurrentPage = keys;
 1006e4c:	d0a71317 	ldw	r2,-25524(gp)
 1006e50:	d0a71415 	stw	r2,-25520(gp)

	}

	if (*buttonPressed == 1) {
 1006e54:	e0bffe17 	ldw	r2,-8(fp)
 1006e58:	10800017 	ldw	r2,0(r2)
 1006e5c:	10800058 	cmpnei	r2,r2,1
 1006e60:	10001b1e 	bne	r2,zero,1006ed0 <executeLoggingSettings+0x244>

		Button theButton = globalCurrentPage->buttons[choice];
 1006e64:	d0a71417 	ldw	r2,-25520(gp)
 1006e68:	10c00817 	ldw	r3,32(r2)
 1006e6c:	e0bffc17 	ldw	r2,-16(fp)
 1006e70:	10800a24 	muli	r2,r2,40
 1006e74:	1887883a 	add	r3,r3,r2
 1006e78:	18800017 	ldw	r2,0(r3)
 1006e7c:	e0bfe315 	stw	r2,-116(fp)
 1006e80:	18800117 	ldw	r2,4(r3)
 1006e84:	e0bfe415 	stw	r2,-112(fp)
 1006e88:	18800217 	ldw	r2,8(r3)
 1006e8c:	e0bfe515 	stw	r2,-108(fp)
 1006e90:	18800317 	ldw	r2,12(r3)
 1006e94:	e0bfe615 	stw	r2,-104(fp)
 1006e98:	18800417 	ldw	r2,16(r3)
 1006e9c:	e0bfe715 	stw	r2,-100(fp)
 1006ea0:	18800517 	ldw	r2,20(r3)
 1006ea4:	e0bfe815 	stw	r2,-96(fp)
 1006ea8:	18800617 	ldw	r2,24(r3)
 1006eac:	e0bfe915 	stw	r2,-92(fp)
 1006eb0:	18800717 	ldw	r2,28(r3)
 1006eb4:	e0bfea15 	stw	r2,-88(fp)
 1006eb8:	18800817 	ldw	r2,32(r3)
 1006ebc:	e0bfeb15 	stw	r2,-84(fp)
 1006ec0:	18800917 	ldw	r2,36(r3)
 1006ec4:	e0bfec15 	stw	r2,-80(fp)
		globalCurrentPage = theButton.targetPage;
 1006ec8:	e0bfec17 	ldw	r2,-80(fp)
 1006ecc:	d0a71415 	stw	r2,-25520(gp)
	}
}
 1006ed0:	e037883a 	mov	sp,fp
 1006ed4:	dfc00217 	ldw	ra,8(sp)
 1006ed8:	df000117 	ldw	fp,4(sp)
 1006edc:	dc000017 	ldw	r16,0(sp)
 1006ee0:	dec00304 	addi	sp,sp,12
 1006ee4:	f800283a 	ret

01006ee8 <executeMapPress>:

void executeMapPress(Button theButton, int choice) {
 1006ee8:	deffcd04 	addi	sp,sp,-204
 1006eec:	dfc02e15 	stw	ra,184(sp)
 1006ef0:	df002d15 	stw	fp,180(sp)
 1006ef4:	df002d04 	addi	fp,sp,180
 1006ef8:	e1000215 	stw	r4,8(fp)
 1006efc:	e1400315 	stw	r5,12(fp)
 1006f00:	e1800415 	stw	r6,16(fp)
 1006f04:	e1c00515 	stw	r7,20(fp)

	if (choice == 1 || choice == 2 || choice == 3) {
 1006f08:	e0800c17 	ldw	r2,48(fp)
 1006f0c:	10800060 	cmpeqi	r2,r2,1
 1006f10:	1000061e 	bne	r2,zero,1006f2c <executeMapPress+0x44>
 1006f14:	e0800c17 	ldw	r2,48(fp)
 1006f18:	108000a0 	cmpeqi	r2,r2,2
 1006f1c:	1000031e 	bne	r2,zero,1006f2c <executeMapPress+0x44>
 1006f20:	e0800c17 	ldw	r2,48(fp)
 1006f24:	108000d8 	cmpnei	r2,r2,3
 1006f28:	1000c41e 	bne	r2,zero,100723c <executeMapPress+0x354>
		Object *o3;
		Object *o4;
		Object *o5;
		Object *o6;
		Object *o7;
		o = malloc(sizeof(Object));
 1006f2c:	01000904 	movi	r4,36
 1006f30:	1014b200 	call	1014b20 <malloc>
 1006f34:	e0bfff15 	stw	r2,-4(fp)
		o2 = malloc(sizeof(Object));
 1006f38:	01000904 	movi	r4,36
 1006f3c:	1014b200 	call	1014b20 <malloc>
 1006f40:	e0bffe15 	stw	r2,-8(fp)
		o3 = malloc(sizeof(Object));
 1006f44:	01000904 	movi	r4,36
 1006f48:	1014b200 	call	1014b20 <malloc>
 1006f4c:	e0bffd15 	stw	r2,-12(fp)
		o4 = malloc(sizeof(Object));
 1006f50:	01000904 	movi	r4,36
 1006f54:	1014b200 	call	1014b20 <malloc>
 1006f58:	e0bffc15 	stw	r2,-16(fp)
		o5 = malloc(sizeof(Object));
 1006f5c:	01000904 	movi	r4,36
 1006f60:	1014b200 	call	1014b20 <malloc>
 1006f64:	e0bffb15 	stw	r2,-20(fp)
		o6 = malloc(sizeof(Object));
 1006f68:	01000904 	movi	r4,36
 1006f6c:	1014b200 	call	1014b20 <malloc>
 1006f70:	e0bffa15 	stw	r2,-24(fp)
		o7 = malloc(sizeof(Object));
 1006f74:	01000904 	movi	r4,36
 1006f78:	1014b200 	call	1014b20 <malloc>
 1006f7c:	e0bff915 	stw	r2,-28(fp)

		buildObject(560, 70, 301, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1006f80:	00800044 	movi	r2,1
 1006f84:	d8800015 	stw	r2,0(sp)
 1006f88:	00800044 	movi	r2,1
 1006f8c:	d8800115 	stw	r2,4(sp)
 1006f90:	d8000215 	stw	zero,8(sp)
 1006f94:	008040f4 	movhi	r2,259
 1006f98:	10a6cd04 	addi	r2,r2,-25804
 1006f9c:	d8800315 	stw	r2,12(sp)
 1006fa0:	e0bfff17 	ldw	r2,-4(fp)
 1006fa4:	d8800415 	stw	r2,16(sp)
 1006fa8:	00800544 	movi	r2,21
 1006fac:	d8800515 	stw	r2,20(sp)
 1006fb0:	01008c04 	movi	r4,560
 1006fb4:	01401184 	movi	r5,70
 1006fb8:	01804b44 	movi	r6,301
 1006fbc:	01c00f04 	movi	r7,60
 1006fc0:	10023f80 	call	10023f8 <buildObject>
				"Name: Kaiser Building", o, strlen("Name: Kaiser Building"));
		drawObject(o);
 1006fc4:	e13fff17 	ldw	r4,-4(fp)
 1006fc8:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o, BLACK, WHITE);
 1006fcc:	e13fff17 	ldw	r4,-4(fp)
 1006fd0:	000b883a 	mov	r5,zero
 1006fd4:	01800044 	movi	r6,1
 1006fd8:	100bf280 	call	100bf28 <writeCaptionObjectLarge>

		buildObject(560, 115, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1006fdc:	00800044 	movi	r2,1
 1006fe0:	d8800015 	stw	r2,0(sp)
 1006fe4:	00800044 	movi	r2,1
 1006fe8:	d8800115 	stw	r2,4(sp)
 1006fec:	d8000215 	stw	zero,8(sp)
 1006ff0:	008040f4 	movhi	r2,259
 1006ff4:	10a6d304 	addi	r2,r2,-25780
 1006ff8:	d8800315 	stw	r2,12(sp)
 1006ffc:	e0bffe17 	ldw	r2,-8(fp)
 1007000:	d8800415 	stw	r2,16(sp)
 1007004:	00800544 	movi	r2,21
 1007008:	d8800515 	stw	r2,20(sp)
 100700c:	01008c04 	movi	r4,560
 1007010:	01401cc4 	movi	r5,115
 1007014:	01804b04 	movi	r6,300
 1007018:	01c00f04 	movi	r7,60
 100701c:	10023f80 	call	10023f8 <buildObject>
				"Latitude = 49.2622103", o2, strlen("Latitude = 49.2622103"));
		drawObject(o2);
 1007020:	e13ffe17 	ldw	r4,-8(fp)
 1007024:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o2, BLACK, WHITE);
 1007028:	e13ffe17 	ldw	r4,-8(fp)
 100702c:	000b883a 	mov	r5,zero
 1007030:	01800044 	movi	r6,1
 1007034:	100bf280 	call	100bf28 <writeCaptionObjectLarge>

		buildObject(560, 155, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007038:	00800044 	movi	r2,1
 100703c:	d8800015 	stw	r2,0(sp)
 1007040:	00800044 	movi	r2,1
 1007044:	d8800115 	stw	r2,4(sp)
 1007048:	d8000215 	stw	zero,8(sp)
 100704c:	008040f4 	movhi	r2,259
 1007050:	10a6d904 	addi	r2,r2,-25756
 1007054:	d8800315 	stw	r2,12(sp)
 1007058:	e0bffd17 	ldw	r2,-12(fp)
 100705c:	d8800415 	stw	r2,16(sp)
 1007060:	00800604 	movi	r2,24
 1007064:	d8800515 	stw	r2,20(sp)
 1007068:	01008c04 	movi	r4,560
 100706c:	014026c4 	movi	r5,155
 1007070:	01804b04 	movi	r6,300
 1007074:	01c00f04 	movi	r7,60
 1007078:	10023f80 	call	10023f8 <buildObject>
				"Longitude = -123.2501992", o3,
				strlen("Longitude = -123.2501992"));
		drawObject(o3);
 100707c:	e13ffd17 	ldw	r4,-12(fp)
 1007080:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o3, BLACK, WHITE);
 1007084:	e13ffd17 	ldw	r4,-12(fp)
 1007088:	000b883a 	mov	r5,zero
 100708c:	01800044 	movi	r6,1
 1007090:	100bf280 	call	100bf28 <writeCaptionObjectLarge>

		buildObject(560, 200, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007094:	00800044 	movi	r2,1
 1007098:	d8800015 	stw	r2,0(sp)
 100709c:	00800044 	movi	r2,1
 10070a0:	d8800115 	stw	r2,4(sp)
 10070a4:	d8000215 	stw	zero,8(sp)
 10070a8:	008040f4 	movhi	r2,259
 10070ac:	10a6e004 	addi	r2,r2,-25728
 10070b0:	d8800315 	stw	r2,12(sp)
 10070b4:	e0bffc17 	ldw	r2,-16(fp)
 10070b8:	d8800415 	stw	r2,16(sp)
 10070bc:	00800584 	movi	r2,22
 10070c0:	d8800515 	stw	r2,20(sp)
 10070c4:	01008c04 	movi	r4,560
 10070c8:	01403204 	movi	r5,200
 10070cc:	01804b04 	movi	r6,300
 10070d0:	01c00f04 	movi	r7,60
 10070d4:	10023f80 	call	10023f8 <buildObject>
				"2332 Main Mall V6T 1Z4", o4, strlen("2332 Main Mall V6T 1Z4"));
		drawObject(o4);
 10070d8:	e13ffc17 	ldw	r4,-16(fp)
 10070dc:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o4, BLACK, WHITE);
 10070e0:	e13ffc17 	ldw	r4,-16(fp)
 10070e4:	000b883a 	mov	r5,zero
 10070e8:	01800044 	movi	r6,1
 10070ec:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 246, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 10070f0:	00800044 	movi	r2,1
 10070f4:	d8800015 	stw	r2,0(sp)
 10070f8:	00800044 	movi	r2,1
 10070fc:	d8800115 	stw	r2,4(sp)
 1007100:	d8000215 	stw	zero,8(sp)
 1007104:	008040f4 	movhi	r2,259
 1007108:	10a6e604 	addi	r2,r2,-25704
 100710c:	d8800315 	stw	r2,12(sp)
 1007110:	e0bffb17 	ldw	r2,-20(fp)
 1007114:	d8800415 	stw	r2,16(sp)
 1007118:	00800544 	movi	r2,21
 100711c:	d8800515 	stw	r2,20(sp)
 1007120:	01008c04 	movi	r4,560
 1007124:	01403d84 	movi	r5,246
 1007128:	01804b04 	movi	r6,300
 100712c:	01c00f04 	movi	r7,60
 1007130:	10023f80 	call	10023f8 <buildObject>
				"Faculty of Electrical", o5, strlen("Faculty of Electrical"));
		drawObject(o5);
 1007134:	e13ffb17 	ldw	r4,-20(fp)
 1007138:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o5, BLACK, WHITE);
 100713c:	e13ffb17 	ldw	r4,-20(fp)
 1007140:	000b883a 	mov	r5,zero
 1007144:	01800044 	movi	r6,1
 1007148:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 295, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 100714c:	00800044 	movi	r2,1
 1007150:	d8800015 	stw	r2,0(sp)
 1007154:	00800044 	movi	r2,1
 1007158:	d8800115 	stw	r2,4(sp)
 100715c:	d8000215 	stw	zero,8(sp)
 1007160:	008040f4 	movhi	r2,259
 1007164:	10a6ec04 	addi	r2,r2,-25680
 1007168:	d8800315 	stw	r2,12(sp)
 100716c:	e0bffa17 	ldw	r2,-24(fp)
 1007170:	d8800415 	stw	r2,16(sp)
 1007174:	00800604 	movi	r2,24
 1007178:	d8800515 	stw	r2,20(sp)
 100717c:	01008c04 	movi	r4,560
 1007180:	014049c4 	movi	r5,295
 1007184:	01804b04 	movi	r6,300
 1007188:	01c00f04 	movi	r7,60
 100718c:	10023f80 	call	10023f8 <buildObject>
				"And Computer Engineering", o6,
				strlen("And Computer Engineering"));
		drawObject(o6);
 1007190:	e13ffa17 	ldw	r4,-24(fp)
 1007194:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o6, BLACK, WHITE);
 1007198:	e13ffa17 	ldw	r4,-24(fp)
 100719c:	000b883a 	mov	r5,zero
 10071a0:	01800044 	movi	r6,1
 10071a4:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 348, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 10071a8:	00800044 	movi	r2,1
 10071ac:	d8800015 	stw	r2,0(sp)
 10071b0:	00800044 	movi	r2,1
 10071b4:	d8800115 	stw	r2,4(sp)
 10071b8:	d8000215 	stw	zero,8(sp)
 10071bc:	008040f4 	movhi	r2,259
 10071c0:	10a6f304 	addi	r2,r2,-25652
 10071c4:	d8800315 	stw	r2,12(sp)
 10071c8:	e0bff917 	ldw	r2,-28(fp)
 10071cc:	d8800415 	stw	r2,16(sp)
 10071d0:	008004c4 	movi	r2,19
 10071d4:	d8800515 	stw	r2,20(sp)
 10071d8:	01008c04 	movi	r4,560
 10071dc:	01405704 	movi	r5,348
 10071e0:	01804b04 	movi	r6,300
 10071e4:	01c00f04 	movi	r7,60
 10071e8:	10023f80 	call	10023f8 <buildObject>
				"Offices of the Dean", o7, strlen("Offices of the Dean"));
		drawObject(o7);
 10071ec:	e13ff917 	ldw	r4,-28(fp)
 10071f0:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o7, BLACK, WHITE);
 10071f4:	e13ff917 	ldw	r4,-28(fp)
 10071f8:	000b883a 	mov	r5,zero
 10071fc:	01800044 	movi	r6,1
 1007200:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		WaitForTouch();
 1007204:	100b6440 	call	100b644 <WaitForTouch>
		free(o);
 1007208:	e13fff17 	ldw	r4,-4(fp)
 100720c:	1014b0c0 	call	1014b0c <free>
		free(o2);
 1007210:	e13ffe17 	ldw	r4,-8(fp)
 1007214:	1014b0c0 	call	1014b0c <free>
		free(o3);
 1007218:	e13ffd17 	ldw	r4,-12(fp)
 100721c:	1014b0c0 	call	1014b0c <free>
		free(o4);
 1007220:	e13ffc17 	ldw	r4,-16(fp)
 1007224:	1014b0c0 	call	1014b0c <free>
		free(o5);
 1007228:	e13ffb17 	ldw	r4,-20(fp)
 100722c:	1014b0c0 	call	1014b0c <free>
		free(o6);
 1007230:	e13ffa17 	ldw	r4,-24(fp)
 1007234:	1014b0c0 	call	1014b0c <free>
	}
}

void executeMapPress(Button theButton, int choice) {

	if (choice == 1 || choice == 2 || choice == 3) {
 1007238:	00038506 	br	1008050 <executeMapPress+0x1168>
		free(o3);
		free(o4);
		free(o5);
		free(o6);

	} else if (choice == 4 || choice == 5 || choice == 6) {
 100723c:	e0800c17 	ldw	r2,48(fp)
 1007240:	10800120 	cmpeqi	r2,r2,4
 1007244:	1000061e 	bne	r2,zero,1007260 <executeMapPress+0x378>
 1007248:	e0800c17 	ldw	r2,48(fp)
 100724c:	10800160 	cmpeqi	r2,r2,5
 1007250:	1000031e 	bne	r2,zero,1007260 <executeMapPress+0x378>
 1007254:	e0800c17 	ldw	r2,48(fp)
 1007258:	10800198 	cmpnei	r2,r2,6
 100725c:	1000a21e 	bne	r2,zero,10074e8 <executeMapPress+0x600>
		Object *o2;
		Object *o3;
		Object *o4;
		Object *o5;
		Object *o6;
		o = malloc(sizeof(Object));
 1007260:	01000904 	movi	r4,36
 1007264:	1014b200 	call	1014b20 <malloc>
 1007268:	e0bff815 	stw	r2,-32(fp)
		o2 = malloc(sizeof(Object));
 100726c:	01000904 	movi	r4,36
 1007270:	1014b200 	call	1014b20 <malloc>
 1007274:	e0bff715 	stw	r2,-36(fp)
		o3 = malloc(sizeof(Object));
 1007278:	01000904 	movi	r4,36
 100727c:	1014b200 	call	1014b20 <malloc>
 1007280:	e0bff615 	stw	r2,-40(fp)
		o4 = malloc(sizeof(Object));
 1007284:	01000904 	movi	r4,36
 1007288:	1014b200 	call	1014b20 <malloc>
 100728c:	e0bff515 	stw	r2,-44(fp)
		o5 = malloc(sizeof(Object));
 1007290:	01000904 	movi	r4,36
 1007294:	1014b200 	call	1014b20 <malloc>
 1007298:	e0bff415 	stw	r2,-48(fp)
		o6 = malloc(sizeof(Object));
 100729c:	01000904 	movi	r4,36
 10072a0:	1014b200 	call	1014b20 <malloc>
 10072a4:	e0bff315 	stw	r2,-52(fp)

		buildObject(560, 70, 301, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 10072a8:	00800044 	movi	r2,1
 10072ac:	d8800015 	stw	r2,0(sp)
 10072b0:	00800044 	movi	r2,1
 10072b4:	d8800115 	stw	r2,4(sp)
 10072b8:	d8000215 	stw	zero,8(sp)
 10072bc:	008040f4 	movhi	r2,259
 10072c0:	10a6f804 	addi	r2,r2,-25632
 10072c4:	d8800315 	stw	r2,12(sp)
 10072c8:	e0bff817 	ldw	r2,-32(fp)
 10072cc:	d8800415 	stw	r2,16(sp)
 10072d0:	00800584 	movi	r2,22
 10072d4:	d8800515 	stw	r2,20(sp)
 10072d8:	01008c04 	movi	r4,560
 10072dc:	01401184 	movi	r5,70
 10072e0:	01804b44 	movi	r6,301
 10072e4:	01c00f04 	movi	r7,60
 10072e8:	10023f80 	call	10023f8 <buildObject>
				"Name: MacLeod Building", o, strlen("Name: MacLeod Building"));
		drawObject(o);
 10072ec:	e13ff817 	ldw	r4,-32(fp)
 10072f0:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o, BLACK, WHITE);
 10072f4:	e13ff817 	ldw	r4,-32(fp)
 10072f8:	000b883a 	mov	r5,zero
 10072fc:	01800044 	movi	r6,1
 1007300:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 115, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007304:	00800044 	movi	r2,1
 1007308:	d8800015 	stw	r2,0(sp)
 100730c:	00800044 	movi	r2,1
 1007310:	d8800115 	stw	r2,4(sp)
 1007314:	d8000215 	stw	zero,8(sp)
 1007318:	008040f4 	movhi	r2,259
 100731c:	10a6fe04 	addi	r2,r2,-25608
 1007320:	d8800315 	stw	r2,12(sp)
 1007324:	e0bff717 	ldw	r2,-36(fp)
 1007328:	d8800415 	stw	r2,16(sp)
 100732c:	00800544 	movi	r2,21
 1007330:	d8800515 	stw	r2,20(sp)
 1007334:	01008c04 	movi	r4,560
 1007338:	01401cc4 	movi	r5,115
 100733c:	01804b04 	movi	r6,300
 1007340:	01c00f04 	movi	r7,60
 1007344:	10023f80 	call	10023f8 <buildObject>
				"Latitude = 49.2617596", o2, strlen("Latitude = 49.2617596"));
		drawObject(o2);
 1007348:	e13ff717 	ldw	r4,-36(fp)
 100734c:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o2, BLACK, WHITE);
 1007350:	e13ff717 	ldw	r4,-36(fp)
 1007354:	000b883a 	mov	r5,zero
 1007358:	01800044 	movi	r6,1
 100735c:	100bf280 	call	100bf28 <writeCaptionObjectLarge>

		buildObject(560, 158, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007360:	00800044 	movi	r2,1
 1007364:	d8800015 	stw	r2,0(sp)
 1007368:	00800044 	movi	r2,1
 100736c:	d8800115 	stw	r2,4(sp)
 1007370:	d8000215 	stw	zero,8(sp)
 1007374:	008040f4 	movhi	r2,259
 1007378:	10a70404 	addi	r2,r2,-25584
 100737c:	d8800315 	stw	r2,12(sp)
 1007380:	e0bff617 	ldw	r2,-40(fp)
 1007384:	d8800415 	stw	r2,16(sp)
 1007388:	00800604 	movi	r2,24
 100738c:	d8800515 	stw	r2,20(sp)
 1007390:	01008c04 	movi	r4,560
 1007394:	01402784 	movi	r5,158
 1007398:	01804b04 	movi	r6,300
 100739c:	01c00f04 	movi	r7,60
 10073a0:	10023f80 	call	10023f8 <buildObject>
				"Longitude = -123.2493528", o3,
				strlen("Longitude = -123.2493528"));
		drawObject(o3);
 10073a4:	e13ff617 	ldw	r4,-40(fp)
 10073a8:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o3, BLACK, WHITE);
 10073ac:	e13ff617 	ldw	r4,-40(fp)
 10073b0:	000b883a 	mov	r5,zero
 10073b4:	01800044 	movi	r6,1
 10073b8:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 200, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 10073bc:	00800044 	movi	r2,1
 10073c0:	d8800015 	stw	r2,0(sp)
 10073c4:	00800044 	movi	r2,1
 10073c8:	d8800115 	stw	r2,4(sp)
 10073cc:	d8000215 	stw	zero,8(sp)
 10073d0:	008040f4 	movhi	r2,259
 10073d4:	10a70b04 	addi	r2,r2,-25556
 10073d8:	d8800315 	stw	r2,12(sp)
 10073dc:	e0bff517 	ldw	r2,-44(fp)
 10073e0:	d8800415 	stw	r2,16(sp)
 10073e4:	00800584 	movi	r2,22
 10073e8:	d8800515 	stw	r2,20(sp)
 10073ec:	01008c04 	movi	r4,560
 10073f0:	01403204 	movi	r5,200
 10073f4:	01804b04 	movi	r6,300
 10073f8:	01c00f04 	movi	r7,60
 10073fc:	10023f80 	call	10023f8 <buildObject>
				"2356 Main Mall V6T 1Z4", o4, strlen("2356 Main Mall V6T 1Z4"));
		drawObject(o4);
 1007400:	e13ff517 	ldw	r4,-44(fp)
 1007404:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o4, BLACK, WHITE);
 1007408:	e13ff517 	ldw	r4,-44(fp)
 100740c:	000b883a 	mov	r5,zero
 1007410:	01800044 	movi	r6,1
 1007414:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 246, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007418:	00800044 	movi	r2,1
 100741c:	d8800015 	stw	r2,0(sp)
 1007420:	00800044 	movi	r2,1
 1007424:	d8800115 	stw	r2,4(sp)
 1007428:	d8000215 	stw	zero,8(sp)
 100742c:	008040f4 	movhi	r2,259
 1007430:	10a71104 	addi	r2,r2,-25532
 1007434:	d8800315 	stw	r2,12(sp)
 1007438:	e0bff417 	ldw	r2,-48(fp)
 100743c:	d8800415 	stw	r2,16(sp)
 1007440:	008005c4 	movi	r2,23
 1007444:	d8800515 	stw	r2,20(sp)
 1007448:	01008c04 	movi	r4,560
 100744c:	01403d84 	movi	r5,246
 1007450:	01804b04 	movi	r6,300
 1007454:	01c00f04 	movi	r7,60
 1007458:	10023f80 	call	10023f8 <buildObject>
				"Electrical and Computer", o5,
				strlen("Electrical and Computer"));
		drawObject(o5);
 100745c:	e13ff417 	ldw	r4,-48(fp)
 1007460:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o5, BLACK, WHITE);
 1007464:	e13ff417 	ldw	r4,-48(fp)
 1007468:	000b883a 	mov	r5,zero
 100746c:	01800044 	movi	r6,1
 1007470:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 295, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007474:	00800044 	movi	r2,1
 1007478:	d8800015 	stw	r2,0(sp)
 100747c:	00800044 	movi	r2,1
 1007480:	d8800115 	stw	r2,4(sp)
 1007484:	d8000215 	stw	zero,8(sp)
 1007488:	008040f4 	movhi	r2,259
 100748c:	10a71704 	addi	r2,r2,-25508
 1007490:	d8800315 	stw	r2,12(sp)
 1007494:	e0bff317 	ldw	r2,-52(fp)
 1007498:	d8800415 	stw	r2,16(sp)
 100749c:	00800504 	movi	r2,20
 10074a0:	d8800515 	stw	r2,20(sp)
 10074a4:	01008c04 	movi	r4,560
 10074a8:	014049c4 	movi	r5,295
 10074ac:	01804b04 	movi	r6,300
 10074b0:	01c00f04 	movi	r7,60
 10074b4:	10023f80 	call	10023f8 <buildObject>
				"Engineering Building", o6, strlen("Engineering Building"));
		drawObject(o6);
 10074b8:	e13ff317 	ldw	r4,-52(fp)
 10074bc:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o6, BLACK, WHITE);
 10074c0:	e13ff317 	ldw	r4,-52(fp)
 10074c4:	000b883a 	mov	r5,zero
 10074c8:	01800044 	movi	r6,1
 10074cc:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		WaitForTouch();
 10074d0:	100b6440 	call	100b644 <WaitForTouch>
		free(o);
 10074d4:	e13ff817 	ldw	r4,-32(fp)
 10074d8:	1014b0c0 	call	1014b0c <free>
		free(o2);
 10074dc:	e13ff717 	ldw	r4,-36(fp)
 10074e0:	1014b0c0 	call	1014b0c <free>
		free(o3);
		free(o4);
		free(o5);
		free(o6);

	} else if (choice == 4 || choice == 5 || choice == 6) {
 10074e4:	0002da06 	br	1008050 <executeMapPress+0x1168>
		drawObject(o6);
		writeCaptionObjectLarge(o6, BLACK, WHITE);
		WaitForTouch();
		free(o);
		free(o2);
	} else if (choice == 10) {
 10074e8:	e0800c17 	ldw	r2,48(fp)
 10074ec:	10800298 	cmpnei	r2,r2,10
 10074f0:	1000a21e 	bne	r2,zero,100777c <executeMapPress+0x894>
		Object *o2;
		Object *o3;
		Object *o4;
		Object *o5;
		Object *o6;
		o = malloc(sizeof(Object));
 10074f4:	01000904 	movi	r4,36
 10074f8:	1014b200 	call	1014b20 <malloc>
 10074fc:	e0bff215 	stw	r2,-56(fp)
		o2 = malloc(sizeof(Object));
 1007500:	01000904 	movi	r4,36
 1007504:	1014b200 	call	1014b20 <malloc>
 1007508:	e0bff115 	stw	r2,-60(fp)
		o3 = malloc(sizeof(Object));
 100750c:	01000904 	movi	r4,36
 1007510:	1014b200 	call	1014b20 <malloc>
 1007514:	e0bff015 	stw	r2,-64(fp)
		o4 = malloc(sizeof(Object));
 1007518:	01000904 	movi	r4,36
 100751c:	1014b200 	call	1014b20 <malloc>
 1007520:	e0bfef15 	stw	r2,-68(fp)
		o5 = malloc(sizeof(Object));
 1007524:	01000904 	movi	r4,36
 1007528:	1014b200 	call	1014b20 <malloc>
 100752c:	e0bfee15 	stw	r2,-72(fp)
		o6 = malloc(sizeof(Object));
 1007530:	01000904 	movi	r4,36
 1007534:	1014b200 	call	1014b20 <malloc>
 1007538:	e0bfed15 	stw	r2,-76(fp)

		buildObject(560, 70, 325, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 100753c:	00800044 	movi	r2,1
 1007540:	d8800015 	stw	r2,0(sp)
 1007544:	00800044 	movi	r2,1
 1007548:	d8800115 	stw	r2,4(sp)
 100754c:	d8000215 	stw	zero,8(sp)
 1007550:	008040f4 	movhi	r2,259
 1007554:	10a71d04 	addi	r2,r2,-25484
 1007558:	d8800315 	stw	r2,12(sp)
 100755c:	e0bff217 	ldw	r2,-56(fp)
 1007560:	d8800415 	stw	r2,16(sp)
 1007564:	00800604 	movi	r2,24
 1007568:	d8800515 	stw	r2,20(sp)
 100756c:	01008c04 	movi	r4,560
 1007570:	01401184 	movi	r5,70
 1007574:	01805144 	movi	r6,325
 1007578:	01c00f04 	movi	r7,60
 100757c:	10023f80 	call	10023f8 <buildObject>
				"Name: The Cheeze Factory", o,
				strlen("Name: The Cheeze Factory"));
		drawObject(o);
 1007580:	e13ff217 	ldw	r4,-56(fp)
 1007584:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o, BLACK, WHITE);
 1007588:	e13ff217 	ldw	r4,-56(fp)
 100758c:	000b883a 	mov	r5,zero
 1007590:	01800044 	movi	r6,1
 1007594:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 115, 325, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007598:	00800044 	movi	r2,1
 100759c:	d8800015 	stw	r2,0(sp)
 10075a0:	00800044 	movi	r2,1
 10075a4:	d8800115 	stw	r2,4(sp)
 10075a8:	d8000215 	stw	zero,8(sp)
 10075ac:	008040f4 	movhi	r2,259
 10075b0:	10a72404 	addi	r2,r2,-25456
 10075b4:	d8800315 	stw	r2,12(sp)
 10075b8:	e0bff117 	ldw	r2,-60(fp)
 10075bc:	d8800415 	stw	r2,16(sp)
 10075c0:	00800544 	movi	r2,21
 10075c4:	d8800515 	stw	r2,20(sp)
 10075c8:	01008c04 	movi	r4,560
 10075cc:	01401cc4 	movi	r5,115
 10075d0:	01805144 	movi	r6,325
 10075d4:	01c00f04 	movi	r7,60
 10075d8:	10023f80 	call	10023f8 <buildObject>
				"Latitude =49.26216059", o2, strlen("Latitude =49.26216059"));
		drawObject(o2);
 10075dc:	e13ff117 	ldw	r4,-60(fp)
 10075e0:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o2, BLACK, WHITE);
 10075e4:	e13ff117 	ldw	r4,-60(fp)
 10075e8:	000b883a 	mov	r5,zero
 10075ec:	01800044 	movi	r6,1
 10075f0:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 158, 325, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 10075f4:	00800044 	movi	r2,1
 10075f8:	d8800015 	stw	r2,0(sp)
 10075fc:	00800044 	movi	r2,1
 1007600:	d8800115 	stw	r2,4(sp)
 1007604:	d8000215 	stw	zero,8(sp)
 1007608:	008040f4 	movhi	r2,259
 100760c:	10a72a04 	addi	r2,r2,-25432
 1007610:	d8800315 	stw	r2,12(sp)
 1007614:	e0bff017 	ldw	r2,-64(fp)
 1007618:	d8800415 	stw	r2,16(sp)
 100761c:	00800684 	movi	r2,26
 1007620:	d8800515 	stw	r2,20(sp)
 1007624:	01008c04 	movi	r4,560
 1007628:	01402784 	movi	r5,158
 100762c:	01805144 	movi	r6,325
 1007630:	01c00f04 	movi	r7,60
 1007634:	10023f80 	call	10023f8 <buildObject>
				"Longitude = -123.249256100", o3,
				strlen("Longitude = -123.249256100"));
		drawObject(o3);
 1007638:	e13ff017 	ldw	r4,-64(fp)
 100763c:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o3, BLACK, WHITE);
 1007640:	e13ff017 	ldw	r4,-64(fp)
 1007644:	000b883a 	mov	r5,zero
 1007648:	01800044 	movi	r6,1
 100764c:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 200, 325, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007650:	00800044 	movi	r2,1
 1007654:	d8800015 	stw	r2,0(sp)
 1007658:	00800044 	movi	r2,1
 100765c:	d8800115 	stw	r2,4(sp)
 1007660:	d8000215 	stw	zero,8(sp)
 1007664:	008040f4 	movhi	r2,259
 1007668:	10a73104 	addi	r2,r2,-25404
 100766c:	d8800315 	stw	r2,12(sp)
 1007670:	e0bfef17 	ldw	r2,-68(fp)
 1007674:	d8800415 	stw	r2,16(sp)
 1007678:	00800744 	movi	r2,29
 100767c:	d8800515 	stw	r2,20(sp)
 1007680:	01008c04 	movi	r4,560
 1007684:	01403204 	movi	r5,200
 1007688:	01805144 	movi	r6,325
 100768c:	01c00f04 	movi	r7,60
 1007690:	10023f80 	call	10023f8 <buildObject>
				"2335 Engineering Road V6T 1Z4", o4,
				strlen("2335 Engineering Road V6T 1Z4"));
		drawObject(o4);
 1007694:	e13fef17 	ldw	r4,-68(fp)
 1007698:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o4, BLACK, WHITE);
 100769c:	e13fef17 	ldw	r4,-68(fp)
 10076a0:	000b883a 	mov	r5,zero
 10076a4:	01800044 	movi	r6,1
 10076a8:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 246, 325, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 10076ac:	00800044 	movi	r2,1
 10076b0:	d8800015 	stw	r2,0(sp)
 10076b4:	00800044 	movi	r2,1
 10076b8:	d8800115 	stw	r2,4(sp)
 10076bc:	d8000215 	stw	zero,8(sp)
 10076c0:	008040f4 	movhi	r2,259
 10076c4:	10a73904 	addi	r2,r2,-25372
 10076c8:	d8800315 	stw	r2,12(sp)
 10076cc:	e0bfee17 	ldw	r2,-72(fp)
 10076d0:	d8800415 	stw	r2,16(sp)
 10076d4:	00800384 	movi	r2,14
 10076d8:	d8800515 	stw	r2,20(sp)
 10076dc:	01008c04 	movi	r4,560
 10076e0:	01403d84 	movi	r5,246
 10076e4:	01805144 	movi	r6,325
 10076e8:	01c00f04 	movi	r7,60
 10076ec:	10023f80 	call	10023f8 <buildObject>
				"Dairy Products", o5, strlen("Dairy Products"));
		drawObject(o5);
 10076f0:	e13fee17 	ldw	r4,-72(fp)
 10076f4:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o5, BLACK, WHITE);
 10076f8:	e13fee17 	ldw	r4,-72(fp)
 10076fc:	000b883a 	mov	r5,zero
 1007700:	01800044 	movi	r6,1
 1007704:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 295, 325, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007708:	00800044 	movi	r2,1
 100770c:	d8800015 	stw	r2,0(sp)
 1007710:	00800044 	movi	r2,1
 1007714:	d8800115 	stw	r2,4(sp)
 1007718:	d8000215 	stw	zero,8(sp)
 100771c:	008040f4 	movhi	r2,259
 1007720:	10a73d04 	addi	r2,r2,-25356
 1007724:	d8800315 	stw	r2,12(sp)
 1007728:	e0bfed17 	ldw	r2,-76(fp)
 100772c:	d8800415 	stw	r2,16(sp)
 1007730:	00800604 	movi	r2,24
 1007734:	d8800515 	stw	r2,20(sp)
 1007738:	01008c04 	movi	r4,560
 100773c:	014049c4 	movi	r5,295
 1007740:	01805144 	movi	r6,325
 1007744:	01c00f04 	movi	r7,60
 1007748:	10023f80 	call	10023f8 <buildObject>
				"Manufacturing laboratory", o6,
				strlen("Manufacturing laboratory"));
		drawObject(o6);
 100774c:	e13fed17 	ldw	r4,-76(fp)
 1007750:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o6, BLACK, WHITE);
 1007754:	e13fed17 	ldw	r4,-76(fp)
 1007758:	000b883a 	mov	r5,zero
 100775c:	01800044 	movi	r6,1
 1007760:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		WaitForTouch();
 1007764:	100b6440 	call	100b644 <WaitForTouch>
		free(o);
 1007768:	e13ff217 	ldw	r4,-56(fp)
 100776c:	1014b0c0 	call	1014b0c <free>
		free(o2);
 1007770:	e13ff117 	ldw	r4,-60(fp)
 1007774:	1014b0c0 	call	1014b0c <free>
 1007778:	00023506 	br	1008050 <executeMapPress+0x1168>
	} else if (choice == 11 || choice == 12) {
 100777c:	e0800c17 	ldw	r2,48(fp)
 1007780:	108002e0 	cmpeqi	r2,r2,11
 1007784:	1000031e 	bne	r2,zero,1007794 <executeMapPress+0x8ac>
 1007788:	e0800c17 	ldw	r2,48(fp)
 100778c:	10800318 	cmpnei	r2,r2,12
 1007790:	1000bc1e 	bne	r2,zero,1007a84 <executeMapPress+0xb9c>
		Object *o3;
		Object *o4;
		Object *o5;
		Object *o6;
		Object *o7;
		o = malloc(sizeof(Object));
 1007794:	01000904 	movi	r4,36
 1007798:	1014b200 	call	1014b20 <malloc>
 100779c:	e0bfec15 	stw	r2,-80(fp)
		o2 = malloc(sizeof(Object));
 10077a0:	01000904 	movi	r4,36
 10077a4:	1014b200 	call	1014b20 <malloc>
 10077a8:	e0bfeb15 	stw	r2,-84(fp)
		o3 = malloc(sizeof(Object));
 10077ac:	01000904 	movi	r4,36
 10077b0:	1014b200 	call	1014b20 <malloc>
 10077b4:	e0bfea15 	stw	r2,-88(fp)
		o4 = malloc(sizeof(Object));
 10077b8:	01000904 	movi	r4,36
 10077bc:	1014b200 	call	1014b20 <malloc>
 10077c0:	e0bfe915 	stw	r2,-92(fp)
		o5 = malloc(sizeof(Object));
 10077c4:	01000904 	movi	r4,36
 10077c8:	1014b200 	call	1014b20 <malloc>
 10077cc:	e0bfe815 	stw	r2,-96(fp)
		o6 = malloc(sizeof(Object));
 10077d0:	01000904 	movi	r4,36
 10077d4:	1014b200 	call	1014b20 <malloc>
 10077d8:	e0bfe715 	stw	r2,-100(fp)
		o7 = malloc(sizeof(Object));
 10077dc:	01000904 	movi	r4,36
 10077e0:	1014b200 	call	1014b20 <malloc>
 10077e4:	e0bfe615 	stw	r2,-104(fp)
		buildObject(560, 70, 301, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 10077e8:	00800044 	movi	r2,1
 10077ec:	d8800015 	stw	r2,0(sp)
 10077f0:	00800044 	movi	r2,1
 10077f4:	d8800115 	stw	r2,4(sp)
 10077f8:	d8000215 	stw	zero,8(sp)
 10077fc:	008040f4 	movhi	r2,259
 1007800:	10a74404 	addi	r2,r2,-25328
 1007804:	d8800315 	stw	r2,12(sp)
 1007808:	e0bfec17 	ldw	r2,-80(fp)
 100780c:	d8800415 	stw	r2,16(sp)
 1007810:	00800404 	movi	r2,16
 1007814:	d8800515 	stw	r2,20(sp)
 1007818:	01008c04 	movi	r4,560
 100781c:	01401184 	movi	r5,70
 1007820:	01804b44 	movi	r6,301
 1007824:	01c00f04 	movi	r7,60
 1007828:	10023f80 	call	10023f8 <buildObject>
				"Name: Brimacombe", o, strlen("Name: Brimacombe"));
		drawObject(o);
 100782c:	e13fec17 	ldw	r4,-80(fp)
 1007830:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o, BLACK, WHITE);
 1007834:	e13fec17 	ldw	r4,-80(fp)
 1007838:	000b883a 	mov	r5,zero
 100783c:	01800044 	movi	r6,1
 1007840:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 115, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007844:	00800044 	movi	r2,1
 1007848:	d8800015 	stw	r2,0(sp)
 100784c:	00800044 	movi	r2,1
 1007850:	d8800115 	stw	r2,4(sp)
 1007854:	d8000215 	stw	zero,8(sp)
 1007858:	008040f4 	movhi	r2,259
 100785c:	10a74904 	addi	r2,r2,-25308
 1007860:	d8800315 	stw	r2,12(sp)
 1007864:	e0bfeb17 	ldw	r2,-84(fp)
 1007868:	d8800415 	stw	r2,16(sp)
 100786c:	00800604 	movi	r2,24
 1007870:	d8800515 	stw	r2,20(sp)
 1007874:	01008c04 	movi	r4,560
 1007878:	01401cc4 	movi	r5,115
 100787c:	01804b04 	movi	r6,300
 1007880:	01c00f04 	movi	r7,60
 1007884:	10023f80 	call	10023f8 <buildObject>
				"Latidude = 49.261883399", o2,
				strlen("Latidude = 49.261883399 "));
		drawObject(o2);
 1007888:	e13feb17 	ldw	r4,-84(fp)
 100788c:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o2, BLACK, WHITE);
 1007890:	e13feb17 	ldw	r4,-84(fp)
 1007894:	000b883a 	mov	r5,zero
 1007898:	01800044 	movi	r6,1
 100789c:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 158, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 10078a0:	00800044 	movi	r2,1
 10078a4:	d8800015 	stw	r2,0(sp)
 10078a8:	00800044 	movi	r2,1
 10078ac:	d8800115 	stw	r2,4(sp)
 10078b0:	d8000215 	stw	zero,8(sp)
 10078b4:	008040f4 	movhi	r2,259
 10078b8:	10a74f04 	addi	r2,r2,-25284
 10078bc:	d8800315 	stw	r2,12(sp)
 10078c0:	e0bfea17 	ldw	r2,-88(fp)
 10078c4:	d8800415 	stw	r2,16(sp)
 10078c8:	00800604 	movi	r2,24
 10078cc:	d8800515 	stw	r2,20(sp)
 10078d0:	01008c04 	movi	r4,560
 10078d4:	01402784 	movi	r5,158
 10078d8:	01804b04 	movi	r6,300
 10078dc:	01c00f04 	movi	r7,60
 10078e0:	10023f80 	call	10023f8 <buildObject>
				"Longitude =-123.24831760", o3,
				strlen("Longitude =-123.24831760"));
		drawObject(o3);
 10078e4:	e13fea17 	ldw	r4,-88(fp)
 10078e8:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o3, BLACK, WHITE);
 10078ec:	e13fea17 	ldw	r4,-88(fp)
 10078f0:	000b883a 	mov	r5,zero
 10078f4:	01800044 	movi	r6,1
 10078f8:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 200, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 10078fc:	00800044 	movi	r2,1
 1007900:	d8800015 	stw	r2,0(sp)
 1007904:	00800044 	movi	r2,1
 1007908:	d8800115 	stw	r2,4(sp)
 100790c:	d8000215 	stw	zero,8(sp)
 1007910:	008040f4 	movhi	r2,259
 1007914:	10a75604 	addi	r2,r2,-25256
 1007918:	d8800315 	stw	r2,12(sp)
 100791c:	e0bfe917 	ldw	r2,-92(fp)
 1007920:	d8800415 	stw	r2,16(sp)
 1007924:	00800584 	movi	r2,22
 1007928:	d8800515 	stw	r2,20(sp)
 100792c:	01008c04 	movi	r4,560
 1007930:	01403204 	movi	r5,200
 1007934:	01804b04 	movi	r6,300
 1007938:	01c00f04 	movi	r7,60
 100793c:	10023f80 	call	10023f8 <buildObject>
				"2355 East Mall V6T 1Z4", o4, strlen("2355 East Mall V6T 1Z4"));
		drawObject(o4);
 1007940:	e13fe917 	ldw	r4,-92(fp)
 1007944:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o4, BLACK, WHITE);
 1007948:	e13fe917 	ldw	r4,-92(fp)
 100794c:	000b883a 	mov	r5,zero
 1007950:	01800044 	movi	r6,1
 1007954:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 246, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007958:	00800044 	movi	r2,1
 100795c:	d8800015 	stw	r2,0(sp)
 1007960:	00800044 	movi	r2,1
 1007964:	d8800115 	stw	r2,4(sp)
 1007968:	d8000215 	stw	zero,8(sp)
 100796c:	008040f4 	movhi	r2,259
 1007970:	10a75c04 	addi	r2,r2,-25232
 1007974:	d8800315 	stw	r2,12(sp)
 1007978:	e0bfe817 	ldw	r2,-96(fp)
 100797c:	d8800415 	stw	r2,16(sp)
 1007980:	008004c4 	movi	r2,19
 1007984:	d8800515 	stw	r2,20(sp)
 1007988:	01008c04 	movi	r4,560
 100798c:	01403d84 	movi	r5,246
 1007990:	01804b04 	movi	r6,300
 1007994:	01c00f04 	movi	r7,60
 1007998:	10023f80 	call	10023f8 <buildObject>
				"Advanced Materials ", o5, strlen("Advanced Materials "));
		drawObject(o5);
 100799c:	e13fe817 	ldw	r4,-96(fp)
 10079a0:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o5, BLACK, WHITE);
 10079a4:	e13fe817 	ldw	r4,-96(fp)
 10079a8:	000b883a 	mov	r5,zero
 10079ac:	01800044 	movi	r6,1
 10079b0:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 295, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 10079b4:	00800044 	movi	r2,1
 10079b8:	d8800015 	stw	r2,0(sp)
 10079bc:	00800044 	movi	r2,1
 10079c0:	d8800115 	stw	r2,4(sp)
 10079c4:	d8000215 	stw	zero,8(sp)
 10079c8:	008040f4 	movhi	r2,259
 10079cc:	10a76104 	addi	r2,r2,-25212
 10079d0:	d8800315 	stw	r2,12(sp)
 10079d4:	e0bfe717 	ldw	r2,-100(fp)
 10079d8:	d8800415 	stw	r2,16(sp)
 10079dc:	008005c4 	movi	r2,23
 10079e0:	d8800515 	stw	r2,20(sp)
 10079e4:	01008c04 	movi	r4,560
 10079e8:	014049c4 	movi	r5,295
 10079ec:	01804b04 	movi	r6,300
 10079f0:	01c00f04 	movi	r7,60
 10079f4:	10023f80 	call	10023f8 <buildObject>
				"And Process Engineering", o6,
				strlen("And Process Engineering"));
		drawObject(o6);
 10079f8:	e13fe717 	ldw	r4,-100(fp)
 10079fc:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o6, BLACK, WHITE);
 1007a00:	e13fe717 	ldw	r4,-100(fp)
 1007a04:	000b883a 	mov	r5,zero
 1007a08:	01800044 	movi	r6,1
 1007a0c:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 348, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007a10:	00800044 	movi	r2,1
 1007a14:	d8800015 	stw	r2,0(sp)
 1007a18:	00800044 	movi	r2,1
 1007a1c:	d8800115 	stw	r2,4(sp)
 1007a20:	d8000215 	stw	zero,8(sp)
 1007a24:	008040f4 	movhi	r2,259
 1007a28:	10a76704 	addi	r2,r2,-25188
 1007a2c:	d8800315 	stw	r2,12(sp)
 1007a30:	e0bfe617 	ldw	r2,-104(fp)
 1007a34:	d8800415 	stw	r2,16(sp)
 1007a38:	00800284 	movi	r2,10
 1007a3c:	d8800515 	stw	r2,20(sp)
 1007a40:	01008c04 	movi	r4,560
 1007a44:	01405704 	movi	r5,348
 1007a48:	01804b04 	movi	r6,300
 1007a4c:	01c00f04 	movi	r7,60
 1007a50:	10023f80 	call	10023f8 <buildObject>
				"Laboratory", o7, strlen("Laboratory"));
		drawObject(o7);
 1007a54:	e13fe617 	ldw	r4,-104(fp)
 1007a58:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o7, BLACK, WHITE);
 1007a5c:	e13fe617 	ldw	r4,-104(fp)
 1007a60:	000b883a 	mov	r5,zero
 1007a64:	01800044 	movi	r6,1
 1007a68:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		WaitForTouch();
 1007a6c:	100b6440 	call	100b644 <WaitForTouch>
		free(o);
 1007a70:	e13fec17 	ldw	r4,-80(fp)
 1007a74:	1014b0c0 	call	1014b0c <free>
		free(o2);
 1007a78:	e13feb17 	ldw	r4,-84(fp)
 1007a7c:	1014b0c0 	call	1014b0c <free>
		drawObject(o6);
		writeCaptionObjectLarge(o6, BLACK, WHITE);
		WaitForTouch();
		free(o);
		free(o2);
	} else if (choice == 11 || choice == 12) {
 1007a80:	00017306 	br	1008050 <executeMapPress+0x1168>
		drawObject(o7);
		writeCaptionObjectLarge(o7, BLACK, WHITE);
		WaitForTouch();
		free(o);
		free(o2);
	} else if (choice == 7 || choice == 8 || choice == 9) {
 1007a84:	e0800c17 	ldw	r2,48(fp)
 1007a88:	108001e0 	cmpeqi	r2,r2,7
 1007a8c:	1000061e 	bne	r2,zero,1007aa8 <executeMapPress+0xbc0>
 1007a90:	e0800c17 	ldw	r2,48(fp)
 1007a94:	10800220 	cmpeqi	r2,r2,8
 1007a98:	1000031e 	bne	r2,zero,1007aa8 <executeMapPress+0xbc0>
 1007a9c:	e0800c17 	ldw	r2,48(fp)
 1007aa0:	10800258 	cmpnei	r2,r2,9
 1007aa4:	1000a41e 	bne	r2,zero,1007d38 <executeMapPress+0xe50>
		Object *o2;
		Object *o3;
		Object *o4;
		Object *o5;
		Object *o6;
		o = malloc(sizeof(Object));
 1007aa8:	01000904 	movi	r4,36
 1007aac:	1014b200 	call	1014b20 <malloc>
 1007ab0:	e0bfe515 	stw	r2,-108(fp)
		o2 = malloc(sizeof(Object));
 1007ab4:	01000904 	movi	r4,36
 1007ab8:	1014b200 	call	1014b20 <malloc>
 1007abc:	e0bfe415 	stw	r2,-112(fp)
		o3 = malloc(sizeof(Object));
 1007ac0:	01000904 	movi	r4,36
 1007ac4:	1014b200 	call	1014b20 <malloc>
 1007ac8:	e0bfe315 	stw	r2,-116(fp)
		o4 = malloc(sizeof(Object));
 1007acc:	01000904 	movi	r4,36
 1007ad0:	1014b200 	call	1014b20 <malloc>
 1007ad4:	e0bfe215 	stw	r2,-120(fp)
		o5 = malloc(sizeof(Object));
 1007ad8:	01000904 	movi	r4,36
 1007adc:	1014b200 	call	1014b20 <malloc>
 1007ae0:	e0bfe115 	stw	r2,-124(fp)
		o6 = malloc(sizeof(Object));
 1007ae4:	01000904 	movi	r4,36
 1007ae8:	1014b200 	call	1014b20 <malloc>
 1007aec:	e0bfe015 	stw	r2,-128(fp)

		buildObject(560, 70, 365, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007af0:	00800044 	movi	r2,1
 1007af4:	d8800015 	stw	r2,0(sp)
 1007af8:	00800044 	movi	r2,1
 1007afc:	d8800115 	stw	r2,4(sp)
 1007b00:	d8000215 	stw	zero,8(sp)
 1007b04:	008040f4 	movhi	r2,259
 1007b08:	10a76a04 	addi	r2,r2,-25176
 1007b0c:	d8800315 	stw	r2,12(sp)
 1007b10:	e0bfe517 	ldw	r2,-108(fp)
 1007b14:	d8800415 	stw	r2,16(sp)
 1007b18:	00800284 	movi	r2,10
 1007b1c:	d8800515 	stw	r2,20(sp)
 1007b20:	01008c04 	movi	r4,560
 1007b24:	01401184 	movi	r5,70
 1007b28:	01805b44 	movi	r6,365
 1007b2c:	01c00f04 	movi	r7,60
 1007b30:	10023f80 	call	10023f8 <buildObject>
				"Name: CEME", o, strlen("Name: CEME"));
		drawObject(o);
 1007b34:	e13fe517 	ldw	r4,-108(fp)
 1007b38:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o, BLACK, WHITE);
 1007b3c:	e13fe517 	ldw	r4,-108(fp)
 1007b40:	000b883a 	mov	r5,zero
 1007b44:	01800044 	movi	r6,1
 1007b48:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 115, 365, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007b4c:	00800044 	movi	r2,1
 1007b50:	d8800015 	stw	r2,0(sp)
 1007b54:	00800044 	movi	r2,1
 1007b58:	d8800115 	stw	r2,4(sp)
 1007b5c:	d8000215 	stw	zero,8(sp)
 1007b60:	008040f4 	movhi	r2,259
 1007b64:	10a76d04 	addi	r2,r2,-25164
 1007b68:	d8800315 	stw	r2,12(sp)
 1007b6c:	e0bfe417 	ldw	r2,-112(fp)
 1007b70:	d8800415 	stw	r2,16(sp)
 1007b74:	00800544 	movi	r2,21
 1007b78:	d8800515 	stw	r2,20(sp)
 1007b7c:	01008c04 	movi	r4,560
 1007b80:	01401cc4 	movi	r5,115
 1007b84:	01805b44 	movi	r6,365
 1007b88:	01c00f04 	movi	r7,60
 1007b8c:	10023f80 	call	10023f8 <buildObject>
				"Latitude = 49.2626097", o2, strlen("Latitude = 49.2626097"));
		drawObject(o2);
 1007b90:	e13fe417 	ldw	r4,-112(fp)
 1007b94:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o2, BLACK, WHITE);
 1007b98:	e13fe417 	ldw	r4,-112(fp)
 1007b9c:	000b883a 	mov	r5,zero
 1007ba0:	01800044 	movi	r6,1
 1007ba4:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 158, 365, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007ba8:	00800044 	movi	r2,1
 1007bac:	d8800015 	stw	r2,0(sp)
 1007bb0:	00800044 	movi	r2,1
 1007bb4:	d8800115 	stw	r2,4(sp)
 1007bb8:	d8000215 	stw	zero,8(sp)
 1007bbc:	008040f4 	movhi	r2,259
 1007bc0:	10a77304 	addi	r2,r2,-25140
 1007bc4:	d8800315 	stw	r2,12(sp)
 1007bc8:	e0bfe317 	ldw	r2,-116(fp)
 1007bcc:	d8800415 	stw	r2,16(sp)
 1007bd0:	00800684 	movi	r2,26
 1007bd4:	d8800515 	stw	r2,20(sp)
 1007bd8:	01008c04 	movi	r4,560
 1007bdc:	01402784 	movi	r5,158
 1007be0:	01805b44 	movi	r6,365
 1007be4:	01c00f04 	movi	r7,60
 1007be8:	10023f80 	call	10023f8 <buildObject>
				"Longitude = -123.249115899", o3,
				strlen("Longitude = -123.249256100"));
		drawObject(o3);
 1007bec:	e13fe317 	ldw	r4,-116(fp)
 1007bf0:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o3, BLACK, WHITE);
 1007bf4:	e13fe317 	ldw	r4,-116(fp)
 1007bf8:	000b883a 	mov	r5,zero
 1007bfc:	01800044 	movi	r6,1
 1007c00:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 200, 365, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007c04:	00800044 	movi	r2,1
 1007c08:	d8800015 	stw	r2,0(sp)
 1007c0c:	00800044 	movi	r2,1
 1007c10:	d8800115 	stw	r2,4(sp)
 1007c14:	d8000215 	stw	zero,8(sp)
 1007c18:	008040f4 	movhi	r2,259
 1007c1c:	10a77a04 	addi	r2,r2,-25112
 1007c20:	d8800315 	stw	r2,12(sp)
 1007c24:	e0bfe217 	ldw	r2,-120(fp)
 1007c28:	d8800415 	stw	r2,16(sp)
 1007c2c:	00800844 	movi	r2,33
 1007c30:	d8800515 	stw	r2,20(sp)
 1007c34:	01008c04 	movi	r4,560
 1007c38:	01403204 	movi	r5,200
 1007c3c:	01805b44 	movi	r6,365
 1007c40:	01c00f04 	movi	r7,60
 1007c44:	10023f80 	call	10023f8 <buildObject>
				"6250 Applied Science Lane V6T 1Z4", o4,
				strlen("6250 Applied Science Lane V6T 1Z4"));
		drawObject(o4);
 1007c48:	e13fe217 	ldw	r4,-120(fp)
 1007c4c:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o4, BLACK, WHITE);
 1007c50:	e13fe217 	ldw	r4,-120(fp)
 1007c54:	000b883a 	mov	r5,zero
 1007c58:	01800044 	movi	r6,1
 1007c5c:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 246, 365, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007c60:	00800044 	movi	r2,1
 1007c64:	d8800015 	stw	r2,0(sp)
 1007c68:	00800044 	movi	r2,1
 1007c6c:	d8800115 	stw	r2,4(sp)
 1007c70:	d8000215 	stw	zero,8(sp)
 1007c74:	008040f4 	movhi	r2,259
 1007c78:	10a78304 	addi	r2,r2,-25076
 1007c7c:	d8800315 	stw	r2,12(sp)
 1007c80:	e0bfe117 	ldw	r2,-124(fp)
 1007c84:	d8800415 	stw	r2,16(sp)
 1007c88:	00800504 	movi	r2,20
 1007c8c:	d8800515 	stw	r2,20(sp)
 1007c90:	01008c04 	movi	r4,560
 1007c94:	01403d84 	movi	r5,246
 1007c98:	01805b44 	movi	r6,365
 1007c9c:	01c00f04 	movi	r7,60
 1007ca0:	10023f80 	call	10023f8 <buildObject>
				"Civil And Mechanical", o5, strlen("Civil And Mechanical"));
		drawObject(o5);
 1007ca4:	e13fe117 	ldw	r4,-124(fp)
 1007ca8:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o5, BLACK, WHITE);
 1007cac:	e13fe117 	ldw	r4,-124(fp)
 1007cb0:	000b883a 	mov	r5,zero
 1007cb4:	01800044 	movi	r6,1
 1007cb8:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 295, 365, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007cbc:	00800044 	movi	r2,1
 1007cc0:	d8800015 	stw	r2,0(sp)
 1007cc4:	00800044 	movi	r2,1
 1007cc8:	d8800115 	stw	r2,4(sp)
 1007ccc:	d8000215 	stw	zero,8(sp)
 1007cd0:	008040f4 	movhi	r2,259
 1007cd4:	10a71704 	addi	r2,r2,-25508
 1007cd8:	d8800315 	stw	r2,12(sp)
 1007cdc:	e0bfe017 	ldw	r2,-128(fp)
 1007ce0:	d8800415 	stw	r2,16(sp)
 1007ce4:	00800504 	movi	r2,20
 1007ce8:	d8800515 	stw	r2,20(sp)
 1007cec:	01008c04 	movi	r4,560
 1007cf0:	014049c4 	movi	r5,295
 1007cf4:	01805b44 	movi	r6,365
 1007cf8:	01c00f04 	movi	r7,60
 1007cfc:	10023f80 	call	10023f8 <buildObject>
				"Engineering Building", o6, strlen("Engineering Building"));
		drawObject(o6);
 1007d00:	e13fe017 	ldw	r4,-128(fp)
 1007d04:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o6, BLACK, WHITE);
 1007d08:	e13fe017 	ldw	r4,-128(fp)
 1007d0c:	000b883a 	mov	r5,zero
 1007d10:	01800044 	movi	r6,1
 1007d14:	100bf280 	call	100bf28 <writeCaptionObjectLarge>

		WaitForTouch();
 1007d18:	100b6440 	call	100b644 <WaitForTouch>
		free(o);
 1007d1c:	e13fe517 	ldw	r4,-108(fp)
 1007d20:	1014b0c0 	call	1014b0c <free>
		free(o2);
 1007d24:	e13fe417 	ldw	r4,-112(fp)
 1007d28:	1014b0c0 	call	1014b0c <free>
		free(o3);
 1007d2c:	e13fe317 	ldw	r4,-116(fp)
 1007d30:	1014b0c0 	call	1014b0c <free>
		drawObject(o7);
		writeCaptionObjectLarge(o7, BLACK, WHITE);
		WaitForTouch();
		free(o);
		free(o2);
	} else if (choice == 7 || choice == 8 || choice == 9) {
 1007d34:	0000c606 	br	1008050 <executeMapPress+0x1168>

		WaitForTouch();
		free(o);
		free(o2);
		free(o3);
	} else if (choice == 13 || choice == 14) {
 1007d38:	e0800c17 	ldw	r2,48(fp)
 1007d3c:	10800360 	cmpeqi	r2,r2,13
 1007d40:	1000031e 	bne	r2,zero,1007d50 <executeMapPress+0xe68>
 1007d44:	e0800c17 	ldw	r2,48(fp)
 1007d48:	10800398 	cmpnei	r2,r2,14
 1007d4c:	1000be1e 	bne	r2,zero,1008048 <executeMapPress+0x1160>
		Object *o3;
		Object *o4;
		Object *o5;
		Object *o6;
		Object *o7;
		o = malloc(sizeof(Object));
 1007d50:	01000904 	movi	r4,36
 1007d54:	1014b200 	call	1014b20 <malloc>
 1007d58:	e0bfdf15 	stw	r2,-132(fp)
		o2 = malloc(sizeof(Object));
 1007d5c:	01000904 	movi	r4,36
 1007d60:	1014b200 	call	1014b20 <malloc>
 1007d64:	e0bfde15 	stw	r2,-136(fp)
		o3 = malloc(sizeof(Object));
 1007d68:	01000904 	movi	r4,36
 1007d6c:	1014b200 	call	1014b20 <malloc>
 1007d70:	e0bfdd15 	stw	r2,-140(fp)
		o4 = malloc(sizeof(Object));
 1007d74:	01000904 	movi	r4,36
 1007d78:	1014b200 	call	1014b20 <malloc>
 1007d7c:	e0bfdc15 	stw	r2,-144(fp)
		o5 = malloc(sizeof(Object));
 1007d80:	01000904 	movi	r4,36
 1007d84:	1014b200 	call	1014b20 <malloc>
 1007d88:	e0bfdb15 	stw	r2,-148(fp)
		o6 = malloc(sizeof(Object));
 1007d8c:	01000904 	movi	r4,36
 1007d90:	1014b200 	call	1014b20 <malloc>
 1007d94:	e0bfda15 	stw	r2,-152(fp)
		o7 = malloc(sizeof(Object));
 1007d98:	01000904 	movi	r4,36
 1007d9c:	1014b200 	call	1014b20 <malloc>
 1007da0:	e0bfd915 	stw	r2,-156(fp)

		buildObject(560, 70, 301, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007da4:	00800044 	movi	r2,1
 1007da8:	d8800015 	stw	r2,0(sp)
 1007dac:	00800044 	movi	r2,1
 1007db0:	d8800115 	stw	r2,4(sp)
 1007db4:	d8000215 	stw	zero,8(sp)
 1007db8:	008040f4 	movhi	r2,259
 1007dbc:	10a78904 	addi	r2,r2,-25052
 1007dc0:	d8800315 	stw	r2,12(sp)
 1007dc4:	e0bfdf17 	ldw	r2,-132(fp)
 1007dc8:	d8800415 	stw	r2,16(sp)
 1007dcc:	008002c4 	movi	r2,11
 1007dd0:	d8800515 	stw	r2,20(sp)
 1007dd4:	01008c04 	movi	r4,560
 1007dd8:	01401184 	movi	r5,70
 1007ddc:	01804b44 	movi	r6,301
 1007de0:	01c00f04 	movi	r7,60
 1007de4:	10023f80 	call	10023f8 <buildObject>
				"Name: ICICS", o, strlen("Name: ICICS"));
		drawObject(o);
 1007de8:	e13fdf17 	ldw	r4,-132(fp)
 1007dec:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o, BLACK, WHITE);
 1007df0:	e13fdf17 	ldw	r4,-132(fp)
 1007df4:	000b883a 	mov	r5,zero
 1007df8:	01800044 	movi	r6,1
 1007dfc:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 115, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007e00:	00800044 	movi	r2,1
 1007e04:	d8800015 	stw	r2,0(sp)
 1007e08:	00800044 	movi	r2,1
 1007e0c:	d8800115 	stw	r2,4(sp)
 1007e10:	d8000215 	stw	zero,8(sp)
 1007e14:	008040f4 	movhi	r2,259
 1007e18:	10a78c04 	addi	r2,r2,-25040
 1007e1c:	d8800315 	stw	r2,12(sp)
 1007e20:	e0bfde17 	ldw	r2,-136(fp)
 1007e24:	d8800415 	stw	r2,16(sp)
 1007e28:	00800544 	movi	r2,21
 1007e2c:	d8800515 	stw	r2,20(sp)
 1007e30:	01008c04 	movi	r4,560
 1007e34:	01401cc4 	movi	r5,115
 1007e38:	01804b04 	movi	r6,300
 1007e3c:	01c00f04 	movi	r7,60
 1007e40:	10023f80 	call	10023f8 <buildObject>
				"Latitude = 49.2611776", o2, strlen("Latitude = 49.2611776"));
		drawObject(o2);
 1007e44:	e13fde17 	ldw	r4,-136(fp)
 1007e48:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o2, BLACK, WHITE);
 1007e4c:	e13fde17 	ldw	r4,-136(fp)
 1007e50:	000b883a 	mov	r5,zero
 1007e54:	01800044 	movi	r6,1
 1007e58:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 158, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007e5c:	00800044 	movi	r2,1
 1007e60:	d8800015 	stw	r2,0(sp)
 1007e64:	00800044 	movi	r2,1
 1007e68:	d8800115 	stw	r2,4(sp)
 1007e6c:	d8000215 	stw	zero,8(sp)
 1007e70:	008040f4 	movhi	r2,259
 1007e74:	10a79204 	addi	r2,r2,-25016
 1007e78:	d8800315 	stw	r2,12(sp)
 1007e7c:	e0bfdd17 	ldw	r2,-140(fp)
 1007e80:	d8800415 	stw	r2,16(sp)
 1007e84:	00800604 	movi	r2,24
 1007e88:	d8800515 	stw	r2,20(sp)
 1007e8c:	01008c04 	movi	r4,560
 1007e90:	01402784 	movi	r5,158
 1007e94:	01804b04 	movi	r6,300
 1007e98:	01c00f04 	movi	r7,60
 1007e9c:	10023f80 	call	10023f8 <buildObject>
				"Longitude =-123.24880439", o3,
				strlen("Longitude =-123.24880439"));
		drawObject(o3);
 1007ea0:	e13fdd17 	ldw	r4,-140(fp)
 1007ea4:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o3, BLACK, WHITE);
 1007ea8:	e13fdd17 	ldw	r4,-140(fp)
 1007eac:	000b883a 	mov	r5,zero
 1007eb0:	01800044 	movi	r6,1
 1007eb4:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 200, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007eb8:	00800044 	movi	r2,1
 1007ebc:	d8800015 	stw	r2,0(sp)
 1007ec0:	00800044 	movi	r2,1
 1007ec4:	d8800115 	stw	r2,4(sp)
 1007ec8:	d8000215 	stw	zero,8(sp)
 1007ecc:	008040f4 	movhi	r2,259
 1007ed0:	10a79904 	addi	r2,r2,-24988
 1007ed4:	d8800315 	stw	r2,12(sp)
 1007ed8:	e0bfdc17 	ldw	r2,-144(fp)
 1007edc:	d8800415 	stw	r2,16(sp)
 1007ee0:	00800584 	movi	r2,22
 1007ee4:	d8800515 	stw	r2,20(sp)
 1007ee8:	01008c04 	movi	r4,560
 1007eec:	01403204 	movi	r5,200
 1007ef0:	01804b04 	movi	r6,300
 1007ef4:	01c00f04 	movi	r7,60
 1007ef8:	10023f80 	call	10023f8 <buildObject>
				"2366 Main Mall V6T 1Z4", o4, strlen("2366 Main Mall V6T 1Z4"));
		drawObject(o4);
 1007efc:	e13fdc17 	ldw	r4,-144(fp)
 1007f00:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o4, BLACK, WHITE);
 1007f04:	e13fdc17 	ldw	r4,-144(fp)
 1007f08:	000b883a 	mov	r5,zero
 1007f0c:	01800044 	movi	r6,1
 1007f10:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 246, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007f14:	00800044 	movi	r2,1
 1007f18:	d8800015 	stw	r2,0(sp)
 1007f1c:	00800044 	movi	r2,1
 1007f20:	d8800115 	stw	r2,4(sp)
 1007f24:	d8000215 	stw	zero,8(sp)
 1007f28:	008040f4 	movhi	r2,259
 1007f2c:	10a79f04 	addi	r2,r2,-24964
 1007f30:	d8800315 	stw	r2,12(sp)
 1007f34:	e0bfdb17 	ldw	r2,-148(fp)
 1007f38:	d8800415 	stw	r2,16(sp)
 1007f3c:	00800444 	movi	r2,17
 1007f40:	d8800515 	stw	r2,20(sp)
 1007f44:	01008c04 	movi	r4,560
 1007f48:	01403d84 	movi	r5,246
 1007f4c:	01804b04 	movi	r6,300
 1007f50:	01c00f04 	movi	r7,60
 1007f54:	10023f80 	call	10023f8 <buildObject>
				"Cognative Systems", o5, strlen("Cognative Systems"));
		drawObject(o5);
 1007f58:	e13fdb17 	ldw	r4,-148(fp)
 1007f5c:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o5, BLACK, WHITE);
 1007f60:	e13fdb17 	ldw	r4,-148(fp)
 1007f64:	000b883a 	mov	r5,zero
 1007f68:	01800044 	movi	r6,1
 1007f6c:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 295, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007f70:	00800044 	movi	r2,1
 1007f74:	d8800015 	stw	r2,0(sp)
 1007f78:	00800044 	movi	r2,1
 1007f7c:	d8800115 	stw	r2,4(sp)
 1007f80:	d8000215 	stw	zero,8(sp)
 1007f84:	008040f4 	movhi	r2,259
 1007f88:	10a7a404 	addi	r2,r2,-24944
 1007f8c:	d8800315 	stw	r2,12(sp)
 1007f90:	e0bfda17 	ldw	r2,-152(fp)
 1007f94:	d8800415 	stw	r2,16(sp)
 1007f98:	00800604 	movi	r2,24
 1007f9c:	d8800515 	stw	r2,20(sp)
 1007fa0:	01008c04 	movi	r4,560
 1007fa4:	014049c4 	movi	r5,295
 1007fa8:	01804b04 	movi	r6,300
 1007fac:	01c00f04 	movi	r7,60
 1007fb0:	10023f80 	call	10023f8 <buildObject>
				"And Computer Science", o6, strlen("And Computer Engineering"));
		drawObject(o6);
 1007fb4:	e13fda17 	ldw	r4,-152(fp)
 1007fb8:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o6, BLACK, WHITE);
 1007fbc:	e13fda17 	ldw	r4,-152(fp)
 1007fc0:	000b883a 	mov	r5,zero
 1007fc4:	01800044 	movi	r6,1
 1007fc8:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		buildObject(560, 348, 300, OBJECT_HEIGHT, WHITE, WHITE, BLACK,
 1007fcc:	00800044 	movi	r2,1
 1007fd0:	d8800015 	stw	r2,0(sp)
 1007fd4:	00800044 	movi	r2,1
 1007fd8:	d8800115 	stw	r2,4(sp)
 1007fdc:	d8000215 	stw	zero,8(sp)
 1007fe0:	008040f4 	movhi	r2,259
 1007fe4:	10a7aa04 	addi	r2,r2,-24920
 1007fe8:	d8800315 	stw	r2,12(sp)
 1007fec:	e0bfd917 	ldw	r2,-156(fp)
 1007ff0:	d8800415 	stw	r2,16(sp)
 1007ff4:	00800204 	movi	r2,8
 1007ff8:	d8800515 	stw	r2,20(sp)
 1007ffc:	01008c04 	movi	r4,560
 1008000:	01405704 	movi	r5,348
 1008004:	01804b04 	movi	r6,300
 1008008:	01c00f04 	movi	r7,60
 100800c:	10023f80 	call	10023f8 <buildObject>
				"Building", o7, strlen("Building"));
		drawObject(o7);
 1008010:	e13fd917 	ldw	r4,-156(fp)
 1008014:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(o7, BLACK, WHITE);
 1008018:	e13fd917 	ldw	r4,-156(fp)
 100801c:	000b883a 	mov	r5,zero
 1008020:	01800044 	movi	r6,1
 1008024:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
		WaitForTouch();
 1008028:	100b6440 	call	100b644 <WaitForTouch>
		free(o);
 100802c:	e13fdf17 	ldw	r4,-132(fp)
 1008030:	1014b0c0 	call	1014b0c <free>
		free(o2);
 1008034:	e13fde17 	ldw	r4,-136(fp)
 1008038:	1014b0c0 	call	1014b0c <free>
		free(o3);
 100803c:	e13fdd17 	ldw	r4,-140(fp)
 1008040:	1014b0c0 	call	1014b0c <free>

		WaitForTouch();
		free(o);
		free(o2);
		free(o3);
	} else if (choice == 13 || choice == 14) {
 1008044:	00000206 	br	1008050 <executeMapPress+0x1168>
		free(o3);
	}

	else {

		globalCurrentPage = theButton.targetPage;
 1008048:	e0800b17 	ldw	r2,44(fp)
 100804c:	d0a71415 	stw	r2,-25520(gp)
	}

}
 1008050:	e037883a 	mov	sp,fp
 1008054:	dfc00117 	ldw	ra,4(sp)
 1008058:	df000017 	ldw	fp,0(sp)
 100805c:	dec00604 	addi	sp,sp,24
 1008060:	f800283a 	ret

01008064 <executeKeyPress>:

void executeKeyPress(int choice) {
 1008064:	deffea04 	addi	sp,sp,-88
 1008068:	dfc01515 	stw	ra,84(sp)
 100806c:	df001415 	stw	fp,80(sp)
 1008070:	df001404 	addi	fp,sp,80
 1008074:	e13fff15 	stw	r4,-4(fp)

	if (globalCurrentPage->keyboard.isNum == 0) {
 1008078:	d0a71417 	ldw	r2,-25520(gp)
 100807c:	10805017 	ldw	r2,320(r2)
 1008080:	1004c03a 	cmpne	r2,r2,zero
 1008084:	10006f1e 	bne	r2,zero,1008244 <executeKeyPress+0x1e0>

		//Alpha keys
		if (choice <= 30) {
 1008088:	e0bfff17 	ldw	r2,-4(fp)
 100808c:	108007c8 	cmpgei	r2,r2,31
 1008090:	10002c1e 	bne	r2,zero,1008144 <executeKeyPress+0xe0>

			Key k = globalCurrentPage->keyboard.currentKeyset[choice];
 1008094:	d0a71417 	ldw	r2,-25520(gp)
 1008098:	10c05b17 	ldw	r3,364(r2)
 100809c:	e0bfff17 	ldw	r2,-4(fp)
 10080a0:	10800a24 	muli	r2,r2,40
 10080a4:	1887883a 	add	r3,r3,r2
 10080a8:	18800017 	ldw	r2,0(r3)
 10080ac:	e0bff515 	stw	r2,-44(fp)
 10080b0:	18800117 	ldw	r2,4(r3)
 10080b4:	e0bff615 	stw	r2,-40(fp)
 10080b8:	18800217 	ldw	r2,8(r3)
 10080bc:	e0bff715 	stw	r2,-36(fp)
 10080c0:	18800317 	ldw	r2,12(r3)
 10080c4:	e0bff815 	stw	r2,-32(fp)
 10080c8:	18800417 	ldw	r2,16(r3)
 10080cc:	e0bff915 	stw	r2,-28(fp)
 10080d0:	18800517 	ldw	r2,20(r3)
 10080d4:	e0bffa15 	stw	r2,-24(fp)
 10080d8:	18800617 	ldw	r2,24(r3)
 10080dc:	e0bffb15 	stw	r2,-20(fp)
 10080e0:	18800717 	ldw	r2,28(r3)
 10080e4:	e0bffc15 	stw	r2,-16(fp)
 10080e8:	18800817 	ldw	r2,32(r3)
 10080ec:	e0bffd15 	stw	r2,-12(fp)
 10080f0:	18800917 	ldw	r2,36(r3)
 10080f4:	e0bffe15 	stw	r2,-8(fp)
			updateBuffer(k, globalCurrentPage);
 10080f8:	d0a71417 	ldw	r2,-25520(gp)
 10080fc:	d8800615 	stw	r2,24(sp)
 1008100:	e0bff917 	ldw	r2,-28(fp)
 1008104:	d8800015 	stw	r2,0(sp)
 1008108:	e0bffa17 	ldw	r2,-24(fp)
 100810c:	d8800115 	stw	r2,4(sp)
 1008110:	e0bffb17 	ldw	r2,-20(fp)
 1008114:	d8800215 	stw	r2,8(sp)
 1008118:	e0bffc17 	ldw	r2,-16(fp)
 100811c:	d8800315 	stw	r2,12(sp)
 1008120:	e0bffd17 	ldw	r2,-12(fp)
 1008124:	d8800415 	stw	r2,16(sp)
 1008128:	e0bffe17 	ldw	r2,-8(fp)
 100812c:	d8800515 	stw	r2,20(sp)
 1008130:	e13ff517 	ldw	r4,-44(fp)
 1008134:	e17ff617 	ldw	r5,-40(fp)
 1008138:	e1bff717 	ldw	r6,-36(fp)
 100813c:	e1fff817 	ldw	r7,-32(fp)
 1008140:	1008cf00 	call	1008cf0 <updateBuffer>

		}

		//Delete Key
		if (choice == 31) {
 1008144:	e0bfff17 	ldw	r2,-4(fp)
 1008148:	108007d8 	cmpnei	r2,r2,31
 100814c:	1000021e 	bne	r2,zero,1008158 <executeKeyPress+0xf4>

			decrementBuffer(globalCurrentPage);
 1008150:	d1271417 	ldw	r4,-25520(gp)
 1008154:	1008c400 	call	1008c40 <decrementBuffer>
		}

		//Uppercase/Lowercase Key
		if (choice == 32) {
 1008158:	e0bfff17 	ldw	r2,-4(fp)
 100815c:	10800818 	cmpnei	r2,r2,32
 1008160:	1000121e 	bne	r2,zero,10081ac <executeKeyPress+0x148>

			if (globalCurrentPage->keyboard.isUpper == 1) {
 1008164:	d0a71417 	ldw	r2,-25520(gp)
 1008168:	10804f17 	ldw	r2,316(r2)
 100816c:	10800058 	cmpnei	r2,r2,1
 1008170:	1000071e 	bne	r2,zero,1008190 <executeKeyPress+0x12c>
				globalCurrentPage->keyboard.isUpper = 0;
 1008174:	d0a71417 	ldw	r2,-25520(gp)
 1008178:	10004f15 	stw	zero,316(r2)
				globalCurrentPage->keyboard.currentKeyset =
 100817c:	d0e71417 	ldw	r3,-25520(gp)
 1008180:	d0a71417 	ldw	r2,-25520(gp)
 1008184:	10805317 	ldw	r2,332(r2)
 1008188:	18805b15 	stw	r2,364(r3)
 100818c:	00000706 	br	10081ac <executeKeyPress+0x148>
						globalCurrentPage->keyboard.keyset_lowercase;
			} else {
				globalCurrentPage->keyboard.isUpper = 1;
 1008190:	d0e71417 	ldw	r3,-25520(gp)
 1008194:	00800044 	movi	r2,1
 1008198:	18804f15 	stw	r2,316(r3)
				globalCurrentPage->keyboard.currentKeyset =
 100819c:	d0e71417 	ldw	r3,-25520(gp)
 10081a0:	d0a71417 	ldw	r2,-25520(gp)
 10081a4:	10805417 	ldw	r2,336(r2)
 10081a8:	18805b15 	stw	r2,364(r3)

			}
		}

		//Numbers Key
		if (choice == 33) {
 10081ac:	e0bfff17 	ldw	r2,-4(fp)
 10081b0:	10800858 	cmpnei	r2,r2,33
 10081b4:	1000071e 	bne	r2,zero,10081d4 <executeKeyPress+0x170>

			globalCurrentPage->keyboard.isNum = 1;
 10081b8:	d0e71417 	ldw	r3,-25520(gp)
 10081bc:	00800044 	movi	r2,1
 10081c0:	18805015 	stw	r2,320(r3)
			globalCurrentPage->keyboard.currentKeyset =
 10081c4:	d0e71417 	ldw	r3,-25520(gp)
 10081c8:	d0a71417 	ldw	r2,-25520(gp)
 10081cc:	10805517 	ldw	r2,340(r2)
 10081d0:	18805b15 	stw	r2,364(r3)
					globalCurrentPage->keyboard.numberset1;
		}

		//Done Key
		if (choice == 34) {
 10081d4:	e0bfff17 	ldw	r2,-4(fp)
 10081d8:	10800898 	cmpnei	r2,r2,34
 10081dc:	1000711e 	bne	r2,zero,10083a4 <executeKeyPress+0x340>

			int k;
			k = globalCurrentPage->keyboard.curInputBoxIndex;
 10081e0:	d0a71417 	ldw	r2,-25520(gp)
 10081e4:	10805117 	ldw	r2,324(r2)
 10081e8:	e0bff415 	stw	r2,-48(fp)

			strcpy(globalCurrentPage->keyboard.caller->inputBoxes[k].inputBuf,
 10081ec:	d0a71417 	ldw	r2,-25520(gp)
 10081f0:	10805c17 	ldw	r2,368(r2)
 10081f4:	10c05d17 	ldw	r3,372(r2)
 10081f8:	e0bff417 	ldw	r2,-48(fp)
 10081fc:	10804724 	muli	r2,r2,284
 1008200:	1885883a 	add	r2,r3,r2
 1008204:	11000704 	addi	r4,r2,28
 1008208:	d0a71417 	ldw	r2,-25520(gp)
 100820c:	11400b04 	addi	r5,r2,44
 1008210:	1015c700 	call	1015c70 <strcpy>
					globalCurrentPage->keyboard.buffer);
			clearBuffer(globalCurrentPage);
 1008214:	d1271417 	ldw	r4,-25520(gp)
 1008218:	1008cb00 	call	1008cb0 <clearBuffer>

			globalCurrentPage = globalCurrentPage->keyboard.caller;
 100821c:	d0a71417 	ldw	r2,-25520(gp)
 1008220:	10805c17 	ldw	r2,368(r2)
 1008224:	d0a71415 	stw	r2,-25520(gp)
			updateInputBox(&(globalCurrentPage->inputBoxes[k]));
 1008228:	d0a71417 	ldw	r2,-25520(gp)
 100822c:	10c05d17 	ldw	r3,372(r2)
 1008230:	e0bff417 	ldw	r2,-48(fp)
 1008234:	10804724 	muli	r2,r2,284
 1008238:	1889883a 	add	r4,r3,r2
 100823c:	100aa180 	call	100aa18 <updateInputBox>
 1008240:	00005806 	br	10083a4 <executeKeyPress+0x340>
		}

	} else {

		//Number Keys
		if (choice < 10) {
 1008244:	e0bfff17 	ldw	r2,-4(fp)
 1008248:	10800288 	cmpgei	r2,r2,10
 100824c:	10002c1e 	bne	r2,zero,1008300 <executeKeyPress+0x29c>

			Key k = globalCurrentPage->keyboard.currentKeyset[choice];
 1008250:	d0a71417 	ldw	r2,-25520(gp)
 1008254:	10c05b17 	ldw	r3,364(r2)
 1008258:	e0bfff17 	ldw	r2,-4(fp)
 100825c:	10800a24 	muli	r2,r2,40
 1008260:	1887883a 	add	r3,r3,r2
 1008264:	18800017 	ldw	r2,0(r3)
 1008268:	e0bff515 	stw	r2,-44(fp)
 100826c:	18800117 	ldw	r2,4(r3)
 1008270:	e0bff615 	stw	r2,-40(fp)
 1008274:	18800217 	ldw	r2,8(r3)
 1008278:	e0bff715 	stw	r2,-36(fp)
 100827c:	18800317 	ldw	r2,12(r3)
 1008280:	e0bff815 	stw	r2,-32(fp)
 1008284:	18800417 	ldw	r2,16(r3)
 1008288:	e0bff915 	stw	r2,-28(fp)
 100828c:	18800517 	ldw	r2,20(r3)
 1008290:	e0bffa15 	stw	r2,-24(fp)
 1008294:	18800617 	ldw	r2,24(r3)
 1008298:	e0bffb15 	stw	r2,-20(fp)
 100829c:	18800717 	ldw	r2,28(r3)
 10082a0:	e0bffc15 	stw	r2,-16(fp)
 10082a4:	18800817 	ldw	r2,32(r3)
 10082a8:	e0bffd15 	stw	r2,-12(fp)
 10082ac:	18800917 	ldw	r2,36(r3)
 10082b0:	e0bffe15 	stw	r2,-8(fp)
			updateBuffer(k, globalCurrentPage);
 10082b4:	d0a71417 	ldw	r2,-25520(gp)
 10082b8:	d8800615 	stw	r2,24(sp)
 10082bc:	e0bff917 	ldw	r2,-28(fp)
 10082c0:	d8800015 	stw	r2,0(sp)
 10082c4:	e0bffa17 	ldw	r2,-24(fp)
 10082c8:	d8800115 	stw	r2,4(sp)
 10082cc:	e0bffb17 	ldw	r2,-20(fp)
 10082d0:	d8800215 	stw	r2,8(sp)
 10082d4:	e0bffc17 	ldw	r2,-16(fp)
 10082d8:	d8800315 	stw	r2,12(sp)
 10082dc:	e0bffd17 	ldw	r2,-12(fp)
 10082e0:	d8800415 	stw	r2,16(sp)
 10082e4:	e0bffe17 	ldw	r2,-8(fp)
 10082e8:	d8800515 	stw	r2,20(sp)
 10082ec:	e13ff517 	ldw	r4,-44(fp)
 10082f0:	e17ff617 	ldw	r5,-40(fp)
 10082f4:	e1bff717 	ldw	r6,-36(fp)
 10082f8:	e1fff817 	ldw	r7,-32(fp)
 10082fc:	1008cf00 	call	1008cf0 <updateBuffer>

		}
		//Delete Key
		if (choice == 10) {
 1008300:	e0bfff17 	ldw	r2,-4(fp)
 1008304:	10800298 	cmpnei	r2,r2,10
 1008308:	1000021e 	bne	r2,zero,1008314 <executeKeyPress+0x2b0>

			decrementBuffer(globalCurrentPage);
 100830c:	d1271417 	ldw	r4,-25520(gp)
 1008310:	1008c400 	call	1008c40 <decrementBuffer>

		}
		//Return to letters key
		if (choice == 11) {
 1008314:	e0bfff17 	ldw	r2,-4(fp)
 1008318:	108002d8 	cmpnei	r2,r2,11
 100831c:	1000061e 	bne	r2,zero,1008338 <executeKeyPress+0x2d4>

			globalCurrentPage->keyboard.isNum = 0;
 1008320:	d0a71417 	ldw	r2,-25520(gp)
 1008324:	10005015 	stw	zero,320(r2)
			globalCurrentPage->keyboard.currentKeyset =
 1008328:	d0e71417 	ldw	r3,-25520(gp)
 100832c:	d0a71417 	ldw	r2,-25520(gp)
 1008330:	10805317 	ldw	r2,332(r2)
 1008334:	18805b15 	stw	r2,364(r3)
					globalCurrentPage->keyboard.keyset_lowercase;
		}

		//Done Key
		if (choice == 12) {
 1008338:	e0bfff17 	ldw	r2,-4(fp)
 100833c:	10800318 	cmpnei	r2,r2,12
 1008340:	1000181e 	bne	r2,zero,10083a4 <executeKeyPress+0x340>

			int k;
			k = globalCurrentPage->keyboard.curInputBoxIndex;
 1008344:	d0a71417 	ldw	r2,-25520(gp)
 1008348:	10805117 	ldw	r2,324(r2)
 100834c:	e0bff315 	stw	r2,-52(fp)

			strcpy(globalCurrentPage->keyboard.caller->inputBoxes[k].inputBuf,
 1008350:	d0a71417 	ldw	r2,-25520(gp)
 1008354:	10805c17 	ldw	r2,368(r2)
 1008358:	10c05d17 	ldw	r3,372(r2)
 100835c:	e0bff317 	ldw	r2,-52(fp)
 1008360:	10804724 	muli	r2,r2,284
 1008364:	1885883a 	add	r2,r3,r2
 1008368:	11000704 	addi	r4,r2,28
 100836c:	d0a71417 	ldw	r2,-25520(gp)
 1008370:	11400b04 	addi	r5,r2,44
 1008374:	1015c700 	call	1015c70 <strcpy>
					globalCurrentPage->keyboard.buffer);
			clearBuffer(globalCurrentPage);
 1008378:	d1271417 	ldw	r4,-25520(gp)
 100837c:	1008cb00 	call	1008cb0 <clearBuffer>

			globalCurrentPage = globalCurrentPage->keyboard.caller;
 1008380:	d0a71417 	ldw	r2,-25520(gp)
 1008384:	10805c17 	ldw	r2,368(r2)
 1008388:	d0a71415 	stw	r2,-25520(gp)
			updateInputBox(&(globalCurrentPage->inputBoxes[k]));
 100838c:	d0a71417 	ldw	r2,-25520(gp)
 1008390:	10c05d17 	ldw	r3,372(r2)
 1008394:	e0bff317 	ldw	r2,-52(fp)
 1008398:	10804724 	muli	r2,r2,284
 100839c:	1889883a 	add	r4,r3,r2
 10083a0:	100aa180 	call	100aa18 <updateInputBox>

		}

	}

}
 10083a4:	e037883a 	mov	sp,fp
 10083a8:	dfc00117 	ldw	ra,4(sp)
 10083ac:	df000017 	ldw	fp,0(sp)
 10083b0:	dec00204 	addi	sp,sp,8
 10083b4:	f800283a 	ret

010083b8 <MainMenu>:

void MainMenu() {
 10083b8:	deff6b04 	addi	sp,sp,-596
 10083bc:	dfc09415 	stw	ra,592(sp)
 10083c0:	df009315 	stw	fp,588(sp)
 10083c4:	dc009215 	stw	r16,584(sp)
 10083c8:	df009204 	addi	fp,sp,584
	int choice;
	int *keyPressed = malloc(sizeof(int));
 10083cc:	01000104 	movi	r4,4
 10083d0:	1014b200 	call	1014b20 <malloc>
 10083d4:	e0bf7e15 	stw	r2,-520(fp)
	int *inputBoxPressed = malloc(sizeof(int));
 10083d8:	01000104 	movi	r4,4
 10083dc:	1014b200 	call	1014b20 <malloc>
 10083e0:	e0bf7d15 	stw	r2,-524(fp)
	int *buttonPressed = malloc(sizeof(int));
 10083e4:	01000104 	movi	r4,4
 10083e8:	1014b200 	call	1014b20 <malloc>
 10083ec:	e0bf7c15 	stw	r2,-528(fp)
	int *sdBoxPressed = malloc(sizeof(int));
 10083f0:	01000104 	movi	r4,4
 10083f4:	1014b200 	call	1014b20 <malloc>
 10083f8:	e0bf7b15 	stw	r2,-532(fp)
 10083fc:	00000006 	br	1008400 <MainMenu+0x48>
	while (1) {

		choice = displayMenu(keyPressed, inputBoxPressed, buttonPressed,
 1008400:	e13f7e17 	ldw	r4,-520(fp)
 1008404:	e17f7d17 	ldw	r5,-524(fp)
 1008408:	e1bf7c17 	ldw	r6,-528(fp)
 100840c:	e1ff7b17 	ldw	r7,-532(fp)
 1008410:	10089c00 	call	10089c0 <displayMenu>
 1008414:	e0bf7f15 	stw	r2,-516(fp)
				sdBoxPressed);
		if (choice >= 0) {
 1008418:	e0bf7f17 	ldw	r2,-516(fp)
 100841c:	1004803a 	cmplt	r2,r2,zero
 1008420:	103ff71e 	bne	r2,zero,1008400 <MainMenu+0x48>
			if (*keyPressed == 1) {
 1008424:	e0bf7e17 	ldw	r2,-520(fp)
 1008428:	10800017 	ldw	r2,0(r2)
 100842c:	10800058 	cmpnei	r2,r2,1
 1008430:	1000031e 	bne	r2,zero,1008440 <MainMenu+0x88>
				executeKeyPress(choice);
 1008434:	e13f7f17 	ldw	r4,-516(fp)
 1008438:	10080640 	call	1008064 <executeKeyPress>
 100843c:	003ff006 	br	1008400 <MainMenu+0x48>
			} else {
				if (globalCurrentPage == map) {
 1008440:	d0e71417 	ldw	r3,-25520(gp)
 1008444:	d0a70617 	ldw	r2,-25576(gp)
 1008448:	1880191e 	bne	r3,r2,10084b0 <MainMenu+0xf8>
					executeMapPress(globalCurrentPage->buttons[choice], choice);
 100844c:	d0a71417 	ldw	r2,-25520(gp)
 1008450:	10c00817 	ldw	r3,32(r2)
 1008454:	e0bf7f17 	ldw	r2,-516(fp)
 1008458:	10800a24 	muli	r2,r2,40
 100845c:	1887883a 	add	r3,r3,r2
 1008460:	e0bf7f17 	ldw	r2,-516(fp)
 1008464:	d8800615 	stw	r2,24(sp)
 1008468:	18800417 	ldw	r2,16(r3)
 100846c:	d8800015 	stw	r2,0(sp)
 1008470:	18800517 	ldw	r2,20(r3)
 1008474:	d8800115 	stw	r2,4(sp)
 1008478:	18800617 	ldw	r2,24(r3)
 100847c:	d8800215 	stw	r2,8(sp)
 1008480:	18800717 	ldw	r2,28(r3)
 1008484:	d8800315 	stw	r2,12(sp)
 1008488:	18800817 	ldw	r2,32(r3)
 100848c:	d8800415 	stw	r2,16(sp)
 1008490:	18800917 	ldw	r2,36(r3)
 1008494:	d8800515 	stw	r2,20(sp)
 1008498:	19000017 	ldw	r4,0(r3)
 100849c:	19400117 	ldw	r5,4(r3)
 10084a0:	19800217 	ldw	r6,8(r3)
 10084a4:	19c00317 	ldw	r7,12(r3)
 10084a8:	1006ee80 	call	1006ee8 <executeMapPress>
 10084ac:	003fd406 	br	1008400 <MainMenu+0x48>
				} else if (globalCurrentPage == passwordSetup) {
 10084b0:	d0e71417 	ldw	r3,-25520(gp)
 10084b4:	d0a70817 	ldw	r2,-25568(gp)
 10084b8:	1880061e 	bne	r3,r2,10084d4 <MainMenu+0x11c>
					executePWSetupPress(choice, inputBoxPressed, buttonPressed,
 10084bc:	e13f7f17 	ldw	r4,-516(fp)
 10084c0:	e17f7d17 	ldw	r5,-524(fp)
 10084c4:	e1bf7c17 	ldw	r6,-528(fp)
 10084c8:	e1ff7b17 	ldw	r7,-532(fp)
 10084cc:	10067c00 	call	10067c0 <executePWSetupPress>
 10084d0:	003fcb06 	br	1008400 <MainMenu+0x48>
							sdBoxPressed);
				} else if (globalCurrentPage == password) {
 10084d4:	d0e71417 	ldw	r3,-25520(gp)
 10084d8:	d0a70417 	ldw	r2,-25584(gp)
 10084dc:	1880061e 	bne	r3,r2,10084f8 <MainMenu+0x140>
					executePWLogin(choice, inputBoxPressed, buttonPressed,
 10084e0:	e13f7f17 	ldw	r4,-516(fp)
 10084e4:	e17f7d17 	ldw	r5,-524(fp)
 10084e8:	e1bf7c17 	ldw	r6,-528(fp)
 10084ec:	e1ff7b17 	ldw	r7,-532(fp)
 10084f0:	1006a840 	call	1006a84 <executePWLogin>
 10084f4:	003fc206 	br	1008400 <MainMenu+0x48>
							sdBoxPressed);
				} else if (globalCurrentPage == loggingSettings) {
 10084f8:	d0e71417 	ldw	r3,-25520(gp)
 10084fc:	d0a70d17 	ldw	r2,-25548(gp)
 1008500:	1880061e 	bne	r3,r2,100851c <MainMenu+0x164>
					executeLoggingSettings(choice, inputBoxPressed,
 1008504:	e13f7f17 	ldw	r4,-516(fp)
 1008508:	e17f7d17 	ldw	r5,-524(fp)
 100850c:	e1bf7c17 	ldw	r6,-528(fp)
 1008510:	e1ff7b17 	ldw	r7,-532(fp)
 1008514:	1006c8c0 	call	1006c8c <executeLoggingSettings>
 1008518:	003fb906 	br	1008400 <MainMenu+0x48>
							buttonPressed, sdBoxPressed);
					// GENERAL PAGE HANDLING (SELF AND DEST PAGES)
				} else {
					if (*sdBoxPressed == 1) {
 100851c:	e0bf7b17 	ldw	r2,-532(fp)
 1008520:	10800017 	ldw	r2,0(r2)
 1008524:	10800058 	cmpnei	r2,r2,1
 1008528:	1000c51e 	bne	r2,zero,1008840 <MainMenu+0x488>
						/*
						 * We need to modify the file names depending on the page we are on in the general handler
						 * This is a quicker solution than writing two seperate handlers
						 * */

						if (globalCurrentPage == self) {
 100852c:	d0e71417 	ldw	r3,-25520(gp)
 1008530:	d0a70517 	ldw	r2,-25580(gp)
 1008534:	1880061e 	bne	r3,r2,1008550 <MainMenu+0x198>

							secureFilename = ESELF;
 1008538:	008040f4 	movhi	r2,259
 100853c:	10a7ad04 	addi	r2,r2,-24908
 1008540:	e0bf7a15 	stw	r2,-536(fp)
							plaintextFilename = NSELF;
 1008544:	008040f4 	movhi	r2,259
 1008548:	10a7b004 	addi	r2,r2,-24896
 100854c:	e0bf7915 	stw	r2,-540(fp)

						}
						if (globalCurrentPage == destination) {
 1008550:	d0e71417 	ldw	r3,-25520(gp)
 1008554:	d0a70717 	ldw	r2,-25572(gp)
 1008558:	1880061e 	bne	r3,r2,1008574 <MainMenu+0x1bc>

							secureFilename = EDEST;
 100855c:	008040f4 	movhi	r2,259
 1008560:	10a7b304 	addi	r2,r2,-24884
 1008564:	e0bf7a15 	stw	r2,-536(fp)
							plaintextFilename = NDEST;
 1008568:	008040f4 	movhi	r2,259
 100856c:	10a7b604 	addi	r2,r2,-24872
 1008570:	e0bf7915 	stw	r2,-540(fp)
						}

						//if choice = 0 save plaintext
						if (choice == 0) {
 1008574:	e0bf7f17 	ldw	r2,-516(fp)
 1008578:	1004c03a 	cmpne	r2,r2,zero
 100857c:	1000221e 	bne	r2,zero,1008608 <MainMenu+0x250>
							InputBox *tempSD = globalCurrentPage->inputBoxes;
 1008580:	d0a71417 	ldw	r2,-25520(gp)
 1008584:	10805d17 	ldw	r2,372(r2)
 1008588:	e0bf7815 	stw	r2,-544(fp)
							// write to SD and update SD Box status
							if (formatAndSaveSD(tempSD[0].inputBuf,
 100858c:	e0bf7817 	ldw	r2,-544(fp)
 1008590:	11000704 	addi	r4,r2,28
 1008594:	e0bf7817 	ldw	r2,-544(fp)
 1008598:	10804704 	addi	r2,r2,284
 100859c:	11400704 	addi	r5,r2,28
 10085a0:	e0bf7817 	ldw	r2,-544(fp)
 10085a4:	10808e04 	addi	r2,r2,568
 10085a8:	11800704 	addi	r6,r2,28
 10085ac:	e0bf7817 	ldw	r2,-544(fp)
 10085b0:	1080d504 	addi	r2,r2,852
 10085b4:	11c00704 	addi	r7,r2,28
 10085b8:	e0bf7917 	ldw	r2,-540(fp)
 10085bc:	d8800015 	stw	r2,0(sp)
 10085c0:	100af9c0 	call	100af9c <formatAndSaveSD>
 10085c4:	1004c03a 	cmpne	r2,r2,zero
 10085c8:	1000081e 	bne	r2,zero,10085ec <MainMenu+0x234>
									tempSD[1].inputBuf, tempSD[2].inputBuf,
									tempSD[3].inputBuf, plaintextFilename)
									== 0) {
								greenLEDS = 0xff;
 10085cc:	00a00034 	movhi	r2,32768
 10085d0:	10840c04 	addi	r2,r2,4144
 10085d4:	00ffffc4 	movi	r3,-1
 10085d8:	10c00005 	stb	r3,0(r2)
								redLEDS = 0x00;
 10085dc:	00a00034 	movhi	r2,32768
 10085e0:	10841004 	addi	r2,r2,4160
 10085e4:	10000005 	stb	zero,0(r2)
 10085e8:	00000706 	br	1008608 <MainMenu+0x250>
							} else {
								greenLEDS = 0x00;
 10085ec:	00a00034 	movhi	r2,32768
 10085f0:	10840c04 	addi	r2,r2,4144
 10085f4:	10000005 	stb	zero,0(r2)
								redLEDS = 0xff;
 10085f8:	00e00034 	movhi	r3,32768
 10085fc:	18c41004 	addi	r3,r3,4160
 1008600:	00bfffc4 	movi	r2,-1
 1008604:	18800005 	stb	r2,0(r3)
							}
						}
						//choice = 1 save encrypted
						if (choice == 1) {
 1008608:	e0bf7f17 	ldw	r2,-516(fp)
 100860c:	10800058 	cmpnei	r2,r2,1
 1008610:	1000251e 	bne	r2,zero,10086a8 <MainMenu+0x2f0>

							printf("Saving encrypted \n");
 1008614:	010040f4 	movhi	r4,259
 1008618:	2127b904 	addi	r4,r4,-24860
 100861c:	10156400 	call	1015640 <puts>
							InputBox *tempSD = globalCurrentPage->inputBoxes;
 1008620:	d0a71417 	ldw	r2,-25520(gp)
 1008624:	10805d17 	ldw	r2,372(r2)
 1008628:	e0bf7715 	stw	r2,-548(fp)
							// write to SD and update SD Box status
							if (formatAndSaveSDEncrypted(tempSD[0].inputBuf,
 100862c:	e0bf7717 	ldw	r2,-548(fp)
 1008630:	11000704 	addi	r4,r2,28
 1008634:	e0bf7717 	ldw	r2,-548(fp)
 1008638:	10804704 	addi	r2,r2,284
 100863c:	11400704 	addi	r5,r2,28
 1008640:	e0bf7717 	ldw	r2,-548(fp)
 1008644:	10808e04 	addi	r2,r2,568
 1008648:	11800704 	addi	r6,r2,28
 100864c:	e0bf7717 	ldw	r2,-548(fp)
 1008650:	1080d504 	addi	r2,r2,852
 1008654:	11c00704 	addi	r7,r2,28
 1008658:	e0bf7a17 	ldw	r2,-536(fp)
 100865c:	d8800015 	stw	r2,0(sp)
 1008660:	100b4a40 	call	100b4a4 <formatAndSaveSDEncrypted>
 1008664:	1004c03a 	cmpne	r2,r2,zero
 1008668:	1000081e 	bne	r2,zero,100868c <MainMenu+0x2d4>
									tempSD[1].inputBuf, tempSD[2].inputBuf,
									tempSD[3].inputBuf, secureFilename) == 0) {
								greenLEDS = 0xff;
 100866c:	00a00034 	movhi	r2,32768
 1008670:	10840c04 	addi	r2,r2,4144
 1008674:	00ffffc4 	movi	r3,-1
 1008678:	10c00005 	stb	r3,0(r2)
								redLEDS = 0x00;
 100867c:	00a00034 	movhi	r2,32768
 1008680:	10841004 	addi	r2,r2,4160
 1008684:	10000005 	stb	zero,0(r2)
 1008688:	00000706 	br	10086a8 <MainMenu+0x2f0>
							} else {
								greenLEDS = 0x00;
 100868c:	00a00034 	movhi	r2,32768
 1008690:	10840c04 	addi	r2,r2,4144
 1008694:	10000005 	stb	zero,0(r2)
								redLEDS = 0xff;
 1008698:	00e00034 	movhi	r3,32768
 100869c:	18c41004 	addi	r3,r3,4160
 10086a0:	00bfffc4 	movi	r2,-1
 10086a4:	18800005 	stb	r2,0(r3)
							}

						}
						//choice = 2 load plaintext
						if (choice == 2) {
 10086a8:	e0bf7f17 	ldw	r2,-516(fp)
 10086ac:	10800098 	cmpnei	r2,r2,2
 10086b0:	10002e1e 	bne	r2,zero,100876c <MainMenu+0x3b4>

							char read[512] = "";
 10086b4:	008040f4 	movhi	r2,259
 10086b8:	10a6ae04 	addi	r2,r2,-25928
 10086bc:	10800003 	ldbu	r2,0(r2)
 10086c0:	e0bf8005 	stb	r2,-512(fp)
 10086c4:	e13f8044 	addi	r4,fp,-511
 10086c8:	01807fc4 	movi	r6,511
 10086cc:	000b883a 	mov	r5,zero
 10086d0:	10153f40 	call	10153f4 <memset>
							InputBox *tempSD = globalCurrentPage->inputBoxes;
 10086d4:	d0a71417 	ldw	r2,-25520(gp)
 10086d8:	10805d17 	ldw	r2,372(r2)
 10086dc:	e0bf7615 	stw	r2,-552(fp)
							if (readFromSD(read, plaintextFilename, 512) == 0) {
 10086e0:	e13f8004 	addi	r4,fp,-512
 10086e4:	e17f7917 	ldw	r5,-540(fp)
 10086e8:	01808004 	movi	r6,512
 10086ec:	100ae780 	call	100ae78 <readFromSD>
 10086f0:	1004c03a 	cmpne	r2,r2,zero
 10086f4:	1000081e 	bne	r2,zero,1008718 <MainMenu+0x360>
								greenLEDS = 0xff;
 10086f8:	00a00034 	movhi	r2,32768
 10086fc:	10840c04 	addi	r2,r2,4144
 1008700:	00ffffc4 	movi	r3,-1
 1008704:	10c00005 	stb	r3,0(r2)
								redLEDS = 0x00;
 1008708:	00a00034 	movhi	r2,32768
 100870c:	10841004 	addi	r2,r2,4160
 1008710:	10000005 	stb	zero,0(r2)
 1008714:	00000706 	br	1008734 <MainMenu+0x37c>
							} else {
								greenLEDS = 0x00;
 1008718:	00a00034 	movhi	r2,32768
 100871c:	10840c04 	addi	r2,r2,4144
 1008720:	10000005 	stb	zero,0(r2)
								redLEDS = 0xff;
 1008724:	00e00034 	movhi	r3,32768
 1008728:	18c41004 	addi	r3,r3,4160
 100872c:	00bfffc4 	movi	r2,-1
 1008730:	18800005 	stb	r2,0(r3)
							}
							loadInfo(tempSD[0].inputBuf, tempSD[1].inputBuf,
 1008734:	e0bf7617 	ldw	r2,-552(fp)
 1008738:	11000704 	addi	r4,r2,28
 100873c:	e0bf7617 	ldw	r2,-552(fp)
 1008740:	10804704 	addi	r2,r2,284
 1008744:	11400704 	addi	r5,r2,28
 1008748:	e0bf7617 	ldw	r2,-552(fp)
 100874c:	10808e04 	addi	r2,r2,568
 1008750:	11800704 	addi	r6,r2,28
 1008754:	e0bf7617 	ldw	r2,-552(fp)
 1008758:	1080d504 	addi	r2,r2,852
 100875c:	11c00704 	addi	r7,r2,28
 1008760:	e0bf8004 	addi	r2,fp,-512
 1008764:	d8800015 	stw	r2,0(sp)
 1008768:	100b0a00 	call	100b0a0 <loadInfo>
									tempSD[2].inputBuf, tempSD[3].inputBuf,
									read);

						}
						//choice 3 = load encrypted
						if (choice == 3) {
 100876c:	e0bf7f17 	ldw	r2,-516(fp)
 1008770:	108000d8 	cmpnei	r2,r2,3
 1008774:	1000321e 	bne	r2,zero,1008840 <MainMenu+0x488>

							//readFromSD(key, KEYFILE, 16);
							char read[512] = "";
 1008778:	008040f4 	movhi	r2,259
 100877c:	10a6ae04 	addi	r2,r2,-25928
 1008780:	10800003 	ldbu	r2,0(r2)
 1008784:	e0bf8005 	stb	r2,-512(fp)
 1008788:	e13f8044 	addi	r4,fp,-511
 100878c:	01807fc4 	movi	r6,511
 1008790:	000b883a 	mov	r5,zero
 1008794:	10153f40 	call	10153f4 <memset>
							InputBox *tempSD = globalCurrentPage->inputBoxes;
 1008798:	d0a71417 	ldw	r2,-25520(gp)
 100879c:	10805d17 	ldw	r2,372(r2)
 10087a0:	e0bf7515 	stw	r2,-556(fp)
							if (readFromSDEncrypted(read, secureFilename, 512)
 10087a4:	e13f8004 	addi	r4,fp,-512
 10087a8:	e17f7a17 	ldw	r5,-536(fp)
 10087ac:	01808004 	movi	r6,512
 10087b0:	100b3640 	call	100b364 <readFromSDEncrypted>
 10087b4:	1004c03a 	cmpne	r2,r2,zero
 10087b8:	1000081e 	bne	r2,zero,10087dc <MainMenu+0x424>
									== 0) {
								greenLEDS = 0xff;
 10087bc:	00a00034 	movhi	r2,32768
 10087c0:	10840c04 	addi	r2,r2,4144
 10087c4:	00ffffc4 	movi	r3,-1
 10087c8:	10c00005 	stb	r3,0(r2)
								redLEDS = 0x00;
 10087cc:	00a00034 	movhi	r2,32768
 10087d0:	10841004 	addi	r2,r2,4160
 10087d4:	10000005 	stb	zero,0(r2)
 10087d8:	00000706 	br	10087f8 <MainMenu+0x440>
							} else {
								greenLEDS = 0x00;
 10087dc:	00a00034 	movhi	r2,32768
 10087e0:	10840c04 	addi	r2,r2,4144
 10087e4:	10000005 	stb	zero,0(r2)
								redLEDS = 0xff;
 10087e8:	00e00034 	movhi	r3,32768
 10087ec:	18c41004 	addi	r3,r3,4160
 10087f0:	00bfffc4 	movi	r2,-1
 10087f4:	18800005 	stb	r2,0(r3)
							}
							printf("read: %s, \n", read);
 10087f8:	e17f8004 	addi	r5,fp,-512
 10087fc:	010040f4 	movhi	r4,259
 1008800:	2127be04 	addi	r4,r4,-24840
 1008804:	10155040 	call	1015504 <printf>

							loadInfo(tempSD[0].inputBuf, tempSD[1].inputBuf,
 1008808:	e0bf7517 	ldw	r2,-556(fp)
 100880c:	11000704 	addi	r4,r2,28
 1008810:	e0bf7517 	ldw	r2,-556(fp)
 1008814:	10804704 	addi	r2,r2,284
 1008818:	11400704 	addi	r5,r2,28
 100881c:	e0bf7517 	ldw	r2,-556(fp)
 1008820:	10808e04 	addi	r2,r2,568
 1008824:	11800704 	addi	r6,r2,28
 1008828:	e0bf7517 	ldw	r2,-556(fp)
 100882c:	1080d504 	addi	r2,r2,852
 1008830:	11c00704 	addi	r7,r2,28
 1008834:	e0bf8004 	addi	r2,fp,-512
 1008838:	d8800015 	stw	r2,0(sp)
 100883c:	100b0a00 	call	100b0a0 <loadInfo>
									read);
						}

					}

					if (*inputBoxPressed == 1) {
 1008840:	e0bf7d17 	ldw	r2,-524(fp)
 1008844:	10800017 	ldw	r2,0(r2)
 1008848:	10800058 	cmpnei	r2,r2,1
 100884c:	1000321e 	bne	r2,zero,1008918 <MainMenu+0x560>

						printf("input box choice: %d \n", choice);
 1008850:	010040f4 	movhi	r4,259
 1008854:	21269e04 	addi	r4,r4,-25992
 1008858:	e17f7f17 	ldw	r5,-516(fp)
 100885c:	10155040 	call	1015504 <printf>
						keys->keyboard.curInputBoxIndex = choice;
 1008860:	d0e71317 	ldw	r3,-25524(gp)
 1008864:	e0bf7f17 	ldw	r2,-516(fp)
 1008868:	18805115 	stw	r2,324(r3)
						keys->keyboard.caller = globalCurrentPage;
 100886c:	d0e71317 	ldw	r3,-25524(gp)
 1008870:	d0a71417 	ldw	r2,-25520(gp)
 1008874:	18805c15 	stw	r2,368(r3)

						strcpy(keys->keyboard.buffer,
 1008878:	d0a71317 	ldw	r2,-25524(gp)
 100887c:	11000b04 	addi	r4,r2,44
 1008880:	d0a71417 	ldw	r2,-25520(gp)
 1008884:	10c05d17 	ldw	r3,372(r2)
 1008888:	e0bf7f17 	ldw	r2,-516(fp)
 100888c:	10804724 	muli	r2,r2,284
 1008890:	1885883a 	add	r2,r3,r2
 1008894:	11400704 	addi	r5,r2,28
 1008898:	1015c700 	call	1015c70 <strcpy>
								globalCurrentPage->inputBoxes[choice].inputBuf);
						keys->keyboard.bufCount = strlen(
 100889c:	d4271317 	ldw	r16,-25524(gp)
 10088a0:	d0a71417 	ldw	r2,-25520(gp)
 10088a4:	10c05d17 	ldw	r3,372(r2)
 10088a8:	e0bf7f17 	ldw	r2,-516(fp)
 10088ac:	10804724 	muli	r2,r2,284
 10088b0:	1885883a 	add	r2,r3,r2
 10088b4:	11000704 	addi	r4,r2,28
 10088b8:	1015cfc0 	call	1015cfc <strlen>
 10088bc:	80804b15 	stw	r2,300(r16)
								globalCurrentPage->inputBoxes[choice].inputBuf);
						strcpy(keys->objects[0].objectText,
 10088c0:	d0a71317 	ldw	r2,-25524(gp)
 10088c4:	10800917 	ldw	r2,36(r2)
 10088c8:	11000017 	ldw	r4,0(r2)
 10088cc:	d0a71417 	ldw	r2,-25520(gp)
 10088d0:	10c05d17 	ldw	r3,372(r2)
 10088d4:	e0bf7f17 	ldw	r2,-516(fp)
 10088d8:	10804724 	muli	r2,r2,284
 10088dc:	1885883a 	add	r2,r3,r2
 10088e0:	11400704 	addi	r5,r2,28
 10088e4:	1015c700 	call	1015c70 <strcpy>
								globalCurrentPage->inputBoxes[choice].inputBuf);
						keys->objects[0].captionLength = strlen(
 10088e8:	d0a71317 	ldw	r2,-25524(gp)
 10088ec:	14000917 	ldw	r16,36(r2)
 10088f0:	d0a71417 	ldw	r2,-25520(gp)
 10088f4:	10c05d17 	ldw	r3,372(r2)
 10088f8:	e0bf7f17 	ldw	r2,-516(fp)
 10088fc:	10804724 	muli	r2,r2,284
 1008900:	1885883a 	add	r2,r3,r2
 1008904:	11000704 	addi	r4,r2,28
 1008908:	1015cfc0 	call	1015cfc <strlen>
 100890c:	80800815 	stw	r2,32(r16)
								globalCurrentPage->inputBoxes[choice].inputBuf);
						globalCurrentPage = keys;
 1008910:	d0a71317 	ldw	r2,-25524(gp)
 1008914:	d0a71415 	stw	r2,-25520(gp)

					}

					if (*buttonPressed == 1) {
 1008918:	e0bf7c17 	ldw	r2,-528(fp)
 100891c:	10800017 	ldw	r2,0(r2)
 1008920:	10800058 	cmpnei	r2,r2,1
 1008924:	103eb61e 	bne	r2,zero,1008400 <MainMenu+0x48>

						Button theButton = globalCurrentPage->buttons[choice];
 1008928:	d0a71417 	ldw	r2,-25520(gp)
 100892c:	10c00817 	ldw	r3,32(r2)
 1008930:	e0bf7f17 	ldw	r2,-516(fp)
 1008934:	10800a24 	muli	r2,r2,40
 1008938:	1887883a 	add	r3,r3,r2
 100893c:	18800017 	ldw	r2,0(r3)
 1008940:	e0bf8015 	stw	r2,-512(fp)
 1008944:	18800117 	ldw	r2,4(r3)
 1008948:	e0bf8115 	stw	r2,-508(fp)
 100894c:	18800217 	ldw	r2,8(r3)
 1008950:	e0bf8215 	stw	r2,-504(fp)
 1008954:	18800317 	ldw	r2,12(r3)
 1008958:	e0bf8315 	stw	r2,-500(fp)
 100895c:	18800417 	ldw	r2,16(r3)
 1008960:	e0bf8415 	stw	r2,-496(fp)
 1008964:	18800517 	ldw	r2,20(r3)
 1008968:	e0bf8515 	stw	r2,-492(fp)
 100896c:	18800617 	ldw	r2,24(r3)
 1008970:	e0bf8615 	stw	r2,-488(fp)
 1008974:	18800717 	ldw	r2,28(r3)
 1008978:	e0bf8715 	stw	r2,-484(fp)
 100897c:	18800817 	ldw	r2,32(r3)
 1008980:	e0bf8815 	stw	r2,-480(fp)
 1008984:	18800917 	ldw	r2,36(r3)
 1008988:	e0bf8915 	stw	r2,-476(fp)
						printf("button choice: %d \n", choice);
 100898c:	010040f4 	movhi	r4,259
 1008990:	2127c104 	addi	r4,r4,-24828
 1008994:	e17f7f17 	ldw	r5,-516(fp)
 1008998:	10155040 	call	1015504 <printf>

						//if going to the keyboard, then set the caller on the keyboard.
						if (theButton.targetPage == keys) {
 100899c:	e0ff8917 	ldw	r3,-476(fp)
 10089a0:	d0a71317 	ldw	r2,-25524(gp)
 10089a4:	1880031e 	bne	r3,r2,10089b4 <MainMenu+0x5fc>
							globalCurrentPage->keyboard.caller = home;
 10089a8:	d0e71417 	ldw	r3,-25520(gp)
 10089ac:	d0a71117 	ldw	r2,-25532(gp)
 10089b0:	18805c15 	stw	r2,368(r3)

						}

						globalCurrentPage = theButton.targetPage;
 10089b4:	e0bf8917 	ldw	r2,-476(fp)
 10089b8:	d0a71415 	stw	r2,-25520(gp)

				}
			}
		}

	}
 10089bc:	003e9006 	br	1008400 <MainMenu+0x48>

010089c0 <displayMenu>:
	free(sdBoxPressed);

}

int displayMenu(int *keyPressed, int *inputBoxPressed, int *buttonPressed,
		int * sdBoxPressed) {
 10089c0:	deff9304 	addi	sp,sp,-436
 10089c4:	dfc06c15 	stw	ra,432(sp)
 10089c8:	df006b15 	stw	fp,428(sp)
 10089cc:	dc006a15 	stw	r16,424(sp)
 10089d0:	df006a04 	addi	fp,sp,424
 10089d4:	e13ffc15 	stw	r4,-16(fp)
 10089d8:	e17ffd15 	stw	r5,-12(fp)
 10089dc:	e1bffe15 	stw	r6,-8(fp)
 10089e0:	e1ffff15 	stw	r7,-4(fp)
	int validPress = 0;
 10089e4:	e03ff915 	stw	zero,-28(fp)
	Point p;
	int choice = -1;
 10089e8:	00bfffc4 	movi	r2,-1
 10089ec:	e0bff815 	stw	r2,-32(fp)
	int checkButtonPressed = -1;
 10089f0:	00bfffc4 	movi	r2,-1
 10089f4:	e0bff715 	stw	r2,-36(fp)
	int checkKeyPressed = -1;
 10089f8:	00bfffc4 	movi	r2,-1
 10089fc:	e0bff615 	stw	r2,-40(fp)
	int checkInputBoxPressed = -1;
 1008a00:	00bfffc4 	movi	r2,-1
 1008a04:	e0bff515 	stw	r2,-44(fp)
	int checkSDBoxPressed = -1;
 1008a08:	00bfffc4 	movi	r2,-1
 1008a0c:	e0bff415 	stw	r2,-48(fp)

	// if we are outside the area, we will draw the panic page over home page
	if (panicFlag == 1) {
 1008a10:	d0a71217 	ldw	r2,-25528(gp)
 1008a14:	10800058 	cmpnei	r2,r2,1
 1008a18:	1000051e 	bne	r2,zero,1008a30 <displayMenu+0x70>
		if (globalCurrentPage == home) {
 1008a1c:	d0e71417 	ldw	r3,-25520(gp)
 1008a20:	d0a71117 	ldw	r2,-25532(gp)
 1008a24:	1880021e 	bne	r3,r2,1008a30 <displayMenu+0x70>
			globalCurrentPage = panic;
 1008a28:	d0a70e17 	ldw	r2,-25544(gp)
 1008a2c:	d0a71415 	stw	r2,-25520(gp)
		}
	}
	drawPage(globalCurrentPage);
 1008a30:	d1271417 	ldw	r4,-25520(gp)
 1008a34:	10064b80 	call	10064b8 <drawPage>
	while (validPress == 0) {
 1008a38:	00007706 	br	1008c18 <displayMenu+0x258>
		//pen down
		GetPress(&p);
 1008a3c:	e13ffa04 	addi	r4,fp,-24
 1008a40:	100b69c0 	call	100b69c <GetPress>
		checkButtonPressed = validpress(p, *globalCurrentPage, buttonPressed);
 1008a44:	d4271417 	ldw	r16,-25520(gp)
 1008a48:	e0bffe17 	ldw	r2,-8(fp)
 1008a4c:	d8805d15 	stw	r2,372(sp)
 1008a50:	d809883a 	mov	r4,sp
 1008a54:	81400204 	addi	r5,r16,8
 1008a58:	01805d04 	movi	r6,372
 1008a5c:	10152740 	call	1015274 <memcpy>
 1008a60:	81800017 	ldw	r6,0(r16)
 1008a64:	81c00117 	ldw	r7,4(r16)
 1008a68:	e13ffa17 	ldw	r4,-24(fp)
 1008a6c:	e17ffb17 	ldw	r5,-20(fp)
 1008a70:	1008e000 	call	1008e00 <validpress>
 1008a74:	e0bff715 	stw	r2,-36(fp)
		checkKeyPressed = validkeypress(p, *globalCurrentPage, keyPressed);
 1008a78:	d4271417 	ldw	r16,-25520(gp)
 1008a7c:	e0bffc17 	ldw	r2,-16(fp)
 1008a80:	d8805d15 	stw	r2,372(sp)
 1008a84:	d809883a 	mov	r4,sp
 1008a88:	81400204 	addi	r5,r16,8
 1008a8c:	01805d04 	movi	r6,372
 1008a90:	10152740 	call	1015274 <memcpy>
 1008a94:	81800017 	ldw	r6,0(r16)
 1008a98:	81c00117 	ldw	r7,4(r16)
 1008a9c:	e13ffa17 	ldw	r4,-24(fp)
 1008aa0:	e17ffb17 	ldw	r5,-20(fp)
 1008aa4:	1008f280 	call	1008f28 <validkeypress>
 1008aa8:	e0bff615 	stw	r2,-40(fp)
		checkInputBoxPressed = validinputboxpress(p, *globalCurrentPage,
 1008aac:	d4271417 	ldw	r16,-25520(gp)
 1008ab0:	e0bffd17 	ldw	r2,-12(fp)
 1008ab4:	d8805d15 	stw	r2,372(sp)
 1008ab8:	d809883a 	mov	r4,sp
 1008abc:	81400204 	addi	r5,r16,8
 1008ac0:	01805d04 	movi	r6,372
 1008ac4:	10152740 	call	1015274 <memcpy>
 1008ac8:	81800017 	ldw	r6,0(r16)
 1008acc:	81c00117 	ldw	r7,4(r16)
 1008ad0:	e13ffa17 	ldw	r4,-24(fp)
 1008ad4:	e17ffb17 	ldw	r5,-20(fp)
 1008ad8:	10090200 	call	1009020 <validinputboxpress>
 1008adc:	e0bff515 	stw	r2,-44(fp)
				inputBoxPressed);
		checkSDBoxPressed = validsdboxpress(p, *globalCurrentPage,
 1008ae0:	d4271417 	ldw	r16,-25520(gp)
 1008ae4:	e0bfff17 	ldw	r2,-4(fp)
 1008ae8:	d8805d15 	stw	r2,372(sp)
 1008aec:	d809883a 	mov	r4,sp
 1008af0:	81400204 	addi	r5,r16,8
 1008af4:	01805d04 	movi	r6,372
 1008af8:	10152740 	call	1015274 <memcpy>
 1008afc:	81800017 	ldw	r6,0(r16)
 1008b00:	81c00117 	ldw	r7,4(r16)
 1008b04:	e13ffa17 	ldw	r4,-24(fp)
 1008b08:	e17ffb17 	ldw	r5,-20(fp)
 1008b0c:	10090fc0 	call	10090fc <validsdboxpress>
 1008b10:	e0bff415 	stw	r2,-48(fp)
				sdBoxPressed);

		if (checkButtonPressed != -1 || checkKeyPressed != -1
 1008b14:	e0bff717 	ldw	r2,-36(fp)
 1008b18:	10bfffd8 	cmpnei	r2,r2,-1
 1008b1c:	1000091e 	bne	r2,zero,1008b44 <displayMenu+0x184>
 1008b20:	e0bff617 	ldw	r2,-40(fp)
 1008b24:	10bfffd8 	cmpnei	r2,r2,-1
 1008b28:	1000061e 	bne	r2,zero,1008b44 <displayMenu+0x184>
 1008b2c:	e0bff517 	ldw	r2,-44(fp)
 1008b30:	10bfffd8 	cmpnei	r2,r2,-1
 1008b34:	1000031e 	bne	r2,zero,1008b44 <displayMenu+0x184>
 1008b38:	e0bff417 	ldw	r2,-48(fp)
 1008b3c:	10bfffe0 	cmpeqi	r2,r2,-1
 1008b40:	1000021e 	bne	r2,zero,1008b4c <displayMenu+0x18c>
				|| checkInputBoxPressed != -1 || checkSDBoxPressed != -1) {
			validPress = 1;
 1008b44:	00800044 	movi	r2,1
 1008b48:	e0bff915 	stw	r2,-28(fp)
		}
		*keyPressed = -1;
 1008b4c:	e0fffc17 	ldw	r3,-16(fp)
 1008b50:	00bfffc4 	movi	r2,-1
 1008b54:	18800015 	stw	r2,0(r3)
		*inputBoxPressed = -1;
 1008b58:	e0fffd17 	ldw	r3,-12(fp)
 1008b5c:	00bfffc4 	movi	r2,-1
 1008b60:	18800015 	stw	r2,0(r3)
		*buttonPressed = -1;
 1008b64:	e0fffe17 	ldw	r3,-8(fp)
 1008b68:	00bfffc4 	movi	r2,-1
 1008b6c:	18800015 	stw	r2,0(r3)
		*sdBoxPressed = -1;
 1008b70:	e0ffff17 	ldw	r3,-4(fp)
 1008b74:	00bfffc4 	movi	r2,-1
 1008b78:	18800015 	stw	r2,0(r3)
		if (validPress == 1) {
 1008b7c:	e0bff917 	ldw	r2,-28(fp)
 1008b80:	10800058 	cmpnei	r2,r2,1
 1008b84:	1000241e 	bne	r2,zero,1008c18 <displayMenu+0x258>
			validPress = 0;
 1008b88:	e03ff915 	stw	zero,-28(fp)
			//pen up
			GetRelease(&p);
 1008b8c:	e13ffa04 	addi	r4,fp,-24
 1008b90:	100b7940 	call	100b794 <GetRelease>

			choice = checkChoice(p, globalCurrentPage, keyPressed,
 1008b94:	d1a71417 	ldw	r6,-25520(gp)
 1008b98:	e0bffd17 	ldw	r2,-12(fp)
 1008b9c:	d8800015 	stw	r2,0(sp)
 1008ba0:	e0bffe17 	ldw	r2,-8(fp)
 1008ba4:	d8800115 	stw	r2,4(sp)
 1008ba8:	e0bfff17 	ldw	r2,-4(fp)
 1008bac:	d8800215 	stw	r2,8(sp)
 1008bb0:	e13ffa17 	ldw	r4,-24(fp)
 1008bb4:	e17ffb17 	ldw	r5,-20(fp)
 1008bb8:	e1fffc17 	ldw	r7,-16(fp)
 1008bbc:	10092080 	call	1009208 <checkChoice>
 1008bc0:	e0bff815 	stw	r2,-32(fp)
					inputBoxPressed, buttonPressed, sdBoxPressed);

			if (choice != -1 || *keyPressed != -1 || *buttonPressed != -1
 1008bc4:	e0bff817 	ldw	r2,-32(fp)
 1008bc8:	10bfffd8 	cmpnei	r2,r2,-1
 1008bcc:	1000101e 	bne	r2,zero,1008c10 <displayMenu+0x250>
 1008bd0:	e0bffc17 	ldw	r2,-16(fp)
 1008bd4:	10800017 	ldw	r2,0(r2)
 1008bd8:	10bfffd8 	cmpnei	r2,r2,-1
 1008bdc:	10000c1e 	bne	r2,zero,1008c10 <displayMenu+0x250>
 1008be0:	e0bffe17 	ldw	r2,-8(fp)
 1008be4:	10800017 	ldw	r2,0(r2)
 1008be8:	10bfffd8 	cmpnei	r2,r2,-1
 1008bec:	1000081e 	bne	r2,zero,1008c10 <displayMenu+0x250>
 1008bf0:	e0bffd17 	ldw	r2,-12(fp)
 1008bf4:	10800017 	ldw	r2,0(r2)
 1008bf8:	10bfffd8 	cmpnei	r2,r2,-1
 1008bfc:	1000041e 	bne	r2,zero,1008c10 <displayMenu+0x250>
 1008c00:	e0bfff17 	ldw	r2,-4(fp)
 1008c04:	10800017 	ldw	r2,0(r2)
 1008c08:	10bfffe0 	cmpeqi	r2,r2,-1
 1008c0c:	1000021e 	bne	r2,zero,1008c18 <displayMenu+0x258>
					|| *inputBoxPressed != -1 || *sdBoxPressed != -1) {
				validPress = 1;
 1008c10:	00800044 	movi	r2,1
 1008c14:	e0bff915 	stw	r2,-28(fp)
		if (globalCurrentPage == home) {
			globalCurrentPage = panic;
		}
	}
	drawPage(globalCurrentPage);
	while (validPress == 0) {
 1008c18:	e0bff917 	ldw	r2,-28(fp)
 1008c1c:	1005003a 	cmpeq	r2,r2,zero
 1008c20:	103f861e 	bne	r2,zero,1008a3c <displayMenu+0x7c>
					|| *inputBoxPressed != -1 || *sdBoxPressed != -1) {
				validPress = 1;
			}
		}
	}
	return choice;
 1008c24:	e0bff817 	ldw	r2,-32(fp)
}
 1008c28:	e037883a 	mov	sp,fp
 1008c2c:	dfc00217 	ldw	ra,8(sp)
 1008c30:	df000117 	ldw	fp,4(sp)
 1008c34:	dc000017 	ldw	r16,0(sp)
 1008c38:	dec00304 	addi	sp,sp,12
 1008c3c:	f800283a 	ret

01008c40 <decrementBuffer>:

void decrementBuffer(Page *currentScreen) {
 1008c40:	defffc04 	addi	sp,sp,-16
 1008c44:	dfc00315 	stw	ra,12(sp)
 1008c48:	df000215 	stw	fp,8(sp)
 1008c4c:	df000204 	addi	fp,sp,8
 1008c50:	e13fff15 	stw	r4,-4(fp)
	int len = strlen(currentScreen->keyboard.buffer);
 1008c54:	e0bfff17 	ldw	r2,-4(fp)
 1008c58:	11000b04 	addi	r4,r2,44
 1008c5c:	1015cfc0 	call	1015cfc <strlen>
 1008c60:	e0bffe15 	stw	r2,-8(fp)

	if (len > 0) {
 1008c64:	e0bffe17 	ldw	r2,-8(fp)
 1008c68:	10800050 	cmplti	r2,r2,1
 1008c6c:	10000b1e 	bne	r2,zero,1008c9c <decrementBuffer+0x5c>
		currentScreen->keyboard.buffer[len - 1] = '\0';
 1008c70:	e0bffe17 	ldw	r2,-8(fp)
 1008c74:	10ffffc4 	addi	r3,r2,-1
 1008c78:	e0bfff17 	ldw	r2,-4(fp)
 1008c7c:	1885883a 	add	r2,r3,r2
 1008c80:	10800b04 	addi	r2,r2,44
 1008c84:	10000005 	stb	zero,0(r2)
		currentScreen->keyboard.bufCount--;
 1008c88:	e0bfff17 	ldw	r2,-4(fp)
 1008c8c:	10804b17 	ldw	r2,300(r2)
 1008c90:	10ffffc4 	addi	r3,r2,-1
 1008c94:	e0bfff17 	ldw	r2,-4(fp)
 1008c98:	10c04b15 	stw	r3,300(r2)
	}
}
 1008c9c:	e037883a 	mov	sp,fp
 1008ca0:	dfc00117 	ldw	ra,4(sp)
 1008ca4:	df000017 	ldw	fp,0(sp)
 1008ca8:	dec00204 	addi	sp,sp,8
 1008cac:	f800283a 	ret

01008cb0 <clearBuffer>:

void clearBuffer(Page *currentScreen) {
 1008cb0:	defffd04 	addi	sp,sp,-12
 1008cb4:	dfc00215 	stw	ra,8(sp)
 1008cb8:	df000115 	stw	fp,4(sp)
 1008cbc:	df000104 	addi	fp,sp,4
 1008cc0:	e13fff15 	stw	r4,-4(fp)
	memset(currentScreen->keyboard.buffer, 0,
 1008cc4:	e0bfff17 	ldw	r2,-4(fp)
 1008cc8:	10800b04 	addi	r2,r2,44
 1008ccc:	1009883a 	mov	r4,r2
 1008cd0:	01804004 	movi	r6,256
 1008cd4:	000b883a 	mov	r5,zero
 1008cd8:	10153f40 	call	10153f4 <memset>
			sizeof(currentScreen->keyboard.buffer));
}
 1008cdc:	e037883a 	mov	sp,fp
 1008ce0:	dfc00117 	ldw	ra,4(sp)
 1008ce4:	df000017 	ldw	fp,0(sp)
 1008ce8:	dec00204 	addi	sp,sp,8
 1008cec:	f800283a 	ret

01008cf0 <updateBuffer>:

void updateBuffer(Key k, Page *currentScreen) {
 1008cf0:	defff104 	addi	sp,sp,-60
 1008cf4:	dfc00a15 	stw	ra,40(sp)
 1008cf8:	df000915 	stw	fp,36(sp)
 1008cfc:	df000904 	addi	fp,sp,36
 1008d00:	e1000215 	stw	r4,8(fp)
 1008d04:	e1400315 	stw	r5,12(fp)
 1008d08:	e1800415 	stw	r6,16(fp)
 1008d0c:	e1c00515 	stw	r7,20(fp)

	char input = k.writeChar;
 1008d10:	e0800b03 	ldbu	r2,44(fp)
 1008d14:	e0bfff05 	stb	r2,-4(fp)
	char *buffer = currentScreen->keyboard.buffer;
 1008d18:	e0800c17 	ldw	r2,48(fp)
 1008d1c:	10800b04 	addi	r2,r2,44
 1008d20:	e0bffe15 	stw	r2,-8(fp)

	Object *inputBox = &(currentScreen->objects[0]);
 1008d24:	e0800c17 	ldw	r2,48(fp)
 1008d28:	10800917 	ldw	r2,36(r2)
 1008d2c:	e0bffd15 	stw	r2,-12(fp)
	currentScreen->keyboard.bufCount++;
 1008d30:	e0800c17 	ldw	r2,48(fp)
 1008d34:	10804b17 	ldw	r2,300(r2)
 1008d38:	10c00044 	addi	r3,r2,1
 1008d3c:	e0800c17 	ldw	r2,48(fp)
 1008d40:	10c04b15 	stw	r3,300(r2)
	//Check if the buffer is empty
	if (currentScreen->keyboard.bufCount == 1) {
 1008d44:	e0800c17 	ldw	r2,48(fp)
 1008d48:	10804b17 	ldw	r2,300(r2)
 1008d4c:	10800058 	cmpnei	r2,r2,1
 1008d50:	1000071e 	bne	r2,zero,1008d70 <updateBuffer+0x80>
		strcpy(buffer, "\0");
 1008d54:	e0bffe17 	ldw	r2,-8(fp)
 1008d58:	10000005 	stb	zero,0(r2)
		strncat(buffer, &input, 1);
 1008d5c:	e17fff04 	addi	r5,fp,-4
 1008d60:	e13ffe17 	ldw	r4,-8(fp)
 1008d64:	01800044 	movi	r6,1
 1008d68:	1015d700 	call	1015d70 <strncat>
 1008d6c:	00000406 	br	1008d80 <updateBuffer+0x90>
	} else {
		strncat(buffer, &input, 1);
 1008d70:	e17fff04 	addi	r5,fp,-4
 1008d74:	e13ffe17 	ldw	r4,-8(fp)
 1008d78:	01800044 	movi	r6,1
 1008d7c:	1015d700 	call	1015d70 <strncat>
	}
	//Check the buffer and draws the buffer to the box
	//Maximum input characters is 55
	if (currentScreen->keyboard.bufCount < 55) {
 1008d80:	e0800c17 	ldw	r2,48(fp)
 1008d84:	10804b17 	ldw	r2,300(r2)
 1008d88:	10800dc8 	cmpgei	r2,r2,55
 1008d8c:	1000171e 	bne	r2,zero,1008dec <updateBuffer+0xfc>
		buildObject(400, 200, BUTTON_WIDTH * 4, BUTTON_HEIGHT * 2, BLACK, WHITE,
 1008d90:	e13ffe17 	ldw	r4,-8(fp)
 1008d94:	1015cfc0 	call	1015cfc <strlen>
 1008d98:	1007883a 	mov	r3,r2
 1008d9c:	d8000015 	stw	zero,0(sp)
 1008da0:	00800044 	movi	r2,1
 1008da4:	d8800115 	stw	r2,4(sp)
 1008da8:	d8000215 	stw	zero,8(sp)
 1008dac:	e0bffe17 	ldw	r2,-8(fp)
 1008db0:	d8800315 	stw	r2,12(sp)
 1008db4:	e0bffd17 	ldw	r2,-12(fp)
 1008db8:	d8800415 	stw	r2,16(sp)
 1008dbc:	d8c00515 	stw	r3,20(sp)
 1008dc0:	01006404 	movi	r4,400
 1008dc4:	01403204 	movi	r5,200
 1008dc8:	01809604 	movi	r6,600
 1008dcc:	01c01904 	movi	r7,100
 1008dd0:	10023f80 	call	10023f8 <buildObject>
				BLACK, buffer, inputBox, strlen(buffer));
		drawObject(inputBox);
 1008dd4:	e13ffd17 	ldw	r4,-12(fp)
 1008dd8:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObjectLarge(inputBox, BLACK, WHITE);
 1008ddc:	e13ffd17 	ldw	r4,-12(fp)
 1008de0:	000b883a 	mov	r5,zero
 1008de4:	01800044 	movi	r6,1
 1008de8:	100bf280 	call	100bf28 <writeCaptionObjectLarge>
	}
}
 1008dec:	e037883a 	mov	sp,fp
 1008df0:	dfc00117 	ldw	ra,4(sp)
 1008df4:	df000017 	ldw	fp,0(sp)
 1008df8:	dec00604 	addi	sp,sp,24
 1008dfc:	f800283a 	ret

01008e00 <validpress>:

int validpress(Point release, Page currentPage, int * buttonPressed) {
 1008e00:	deffee04 	addi	sp,sp,-72
 1008e04:	dfc00f15 	stw	ra,60(sp)
 1008e08:	df000e15 	stw	fp,56(sp)
 1008e0c:	df000e04 	addi	fp,sp,56
 1008e10:	e13ffd15 	stw	r4,-12(fp)
 1008e14:	e17ffe15 	stw	r5,-8(fp)
 1008e18:	e1800215 	stw	r6,8(fp)
 1008e1c:	e1c00315 	stw	r7,12(fp)

	int j;

	printf("Press: %d %d \n ", release.x, release.y);
 1008e20:	e17ffd17 	ldw	r5,-12(fp)
 1008e24:	e1bffe17 	ldw	r6,-8(fp)
 1008e28:	010040f4 	movhi	r4,259
 1008e2c:	2127c604 	addi	r4,r4,-24808
 1008e30:	10155040 	call	1015504 <printf>
	//iterate through the buttons of the page
	for (j = 0; j < currentPage.numButtons; j++) {
 1008e34:	e03ff215 	stw	zero,-56(fp)
 1008e38:	00002d06 	br	1008ef0 <validpress+0xf0>
		Button bttn = currentPage.buttons[j];
 1008e3c:	e0c00a17 	ldw	r3,40(fp)
 1008e40:	e0bff217 	ldw	r2,-56(fp)
 1008e44:	10800a24 	muli	r2,r2,40
 1008e48:	1887883a 	add	r3,r3,r2
 1008e4c:	18800017 	ldw	r2,0(r3)
 1008e50:	e0bff315 	stw	r2,-52(fp)
 1008e54:	18800117 	ldw	r2,4(r3)
 1008e58:	e0bff415 	stw	r2,-48(fp)
 1008e5c:	18800217 	ldw	r2,8(r3)
 1008e60:	e0bff515 	stw	r2,-44(fp)
 1008e64:	18800317 	ldw	r2,12(r3)
 1008e68:	e0bff615 	stw	r2,-40(fp)
 1008e6c:	18800417 	ldw	r2,16(r3)
 1008e70:	e0bff715 	stw	r2,-36(fp)
 1008e74:	18800517 	ldw	r2,20(r3)
 1008e78:	e0bff815 	stw	r2,-32(fp)
 1008e7c:	18800617 	ldw	r2,24(r3)
 1008e80:	e0bff915 	stw	r2,-28(fp)
 1008e84:	18800717 	ldw	r2,28(r3)
 1008e88:	e0bffa15 	stw	r2,-24(fp)
 1008e8c:	18800817 	ldw	r2,32(r3)
 1008e90:	e0bffb15 	stw	r2,-20(fp)
 1008e94:	18800917 	ldw	r2,36(r3)
 1008e98:	e0bffc15 	stw	r2,-16(fp)
		if ((release.x >= bttn.x1) && (release.x <= bttn.x2)) {
 1008e9c:	e0fffd17 	ldw	r3,-12(fp)
 1008ea0:	e0bff417 	ldw	r2,-48(fp)
 1008ea4:	18800f16 	blt	r3,r2,1008ee4 <validpress+0xe4>
 1008ea8:	e0fffd17 	ldw	r3,-12(fp)
 1008eac:	e0bff517 	ldw	r2,-44(fp)
 1008eb0:	10c00c16 	blt	r2,r3,1008ee4 <validpress+0xe4>
			if ((release.y >= bttn.y1) && (release.y <= bttn.y2)) {
 1008eb4:	e0fffe17 	ldw	r3,-8(fp)
 1008eb8:	e0bff617 	ldw	r2,-40(fp)
 1008ebc:	18800916 	blt	r3,r2,1008ee4 <validpress+0xe4>
 1008ec0:	e0fffe17 	ldw	r3,-8(fp)
 1008ec4:	e0bff717 	ldw	r2,-36(fp)
 1008ec8:	10c00616 	blt	r2,r3,1008ee4 <validpress+0xe4>
				*buttonPressed = 1;
 1008ecc:	e0c06117 	ldw	r3,388(fp)
 1008ed0:	00800044 	movi	r2,1
 1008ed4:	18800015 	stw	r2,0(r3)
				return j;
 1008ed8:	e0bff217 	ldw	r2,-56(fp)
 1008edc:	e0bfff15 	stw	r2,-4(fp)
 1008ee0:	00000b06 	br	1008f10 <validpress+0x110>

	int j;

	printf("Press: %d %d \n ", release.x, release.y);
	//iterate through the buttons of the page
	for (j = 0; j < currentPage.numButtons; j++) {
 1008ee4:	e0bff217 	ldw	r2,-56(fp)
 1008ee8:	10800044 	addi	r2,r2,1
 1008eec:	e0bff215 	stw	r2,-56(fp)
 1008ef0:	e0c00517 	ldw	r3,20(fp)
 1008ef4:	e0bff217 	ldw	r2,-56(fp)
 1008ef8:	10ffd016 	blt	r2,r3,1008e3c <validpress+0x3c>
				*buttonPressed = 1;
				return j;
			}
		}
	}
	*buttonPressed = -1;
 1008efc:	e0c06117 	ldw	r3,388(fp)
 1008f00:	00bfffc4 	movi	r2,-1
 1008f04:	18800015 	stw	r2,0(r3)
	return -1;
 1008f08:	00bfffc4 	movi	r2,-1
 1008f0c:	e0bfff15 	stw	r2,-4(fp)
 1008f10:	e0bfff17 	ldw	r2,-4(fp)
}
 1008f14:	e037883a 	mov	sp,fp
 1008f18:	dfc00117 	ldw	ra,4(sp)
 1008f1c:	df000017 	ldw	fp,0(sp)
 1008f20:	dec00404 	addi	sp,sp,16
 1008f24:	f800283a 	ret

01008f28 <validkeypress>:

int validkeypress(Point release, Page currentPage, int * keyPressed) {
 1008f28:	defff704 	addi	sp,sp,-36
 1008f2c:	df000615 	stw	fp,24(sp)
 1008f30:	df000604 	addi	fp,sp,24
 1008f34:	e13ffd15 	stw	r4,-12(fp)
 1008f38:	e17ffe15 	stw	r5,-8(fp)
 1008f3c:	e1800115 	stw	r6,4(fp)
 1008f40:	e1c00215 	stw	r7,8(fp)
	int j;
	//make sure the page has keyboard
	if (currentPage.hasKeyboard == 1) {
 1008f44:	e0800717 	ldw	r2,28(fp)
 1008f48:	10800058 	cmpnei	r2,r2,1
 1008f4c:	10002a1e 	bne	r2,zero,1008ff8 <validkeypress+0xd0>
		int k = NUM_SIZE;
 1008f50:	00800344 	movi	r2,13
 1008f54:	e0bffb15 	stw	r2,-20(fp)

		if (currentPage.keyboard.isNum == 0) {
 1008f58:	e0805117 	ldw	r2,324(fp)
 1008f5c:	1004c03a 	cmpne	r2,r2,zero
 1008f60:	1000021e 	bne	r2,zero,1008f6c <validkeypress+0x44>
			k = ALPHA_SIZE;
 1008f64:	008008c4 	movi	r2,35
 1008f68:	e0bffb15 	stw	r2,-20(fp)
		}
		//iterate through the keys
		for (j = 0; j < k; j++) {
 1008f6c:	e03ffc15 	stw	zero,-16(fp)
 1008f70:	00001e06 	br	1008fec <validkeypress+0xc4>

			Key *k = &(currentPage.keyboard.currentKeyset[j]);
 1008f74:	e0c05c17 	ldw	r3,368(fp)
 1008f78:	e0bffc17 	ldw	r2,-16(fp)
 1008f7c:	10800a24 	muli	r2,r2,40
 1008f80:	1885883a 	add	r2,r3,r2
 1008f84:	e0bffa15 	stw	r2,-24(fp)
			if ((release.x >= k->x1) && (release.x <= k->x2)) {
 1008f88:	e0fffd17 	ldw	r3,-12(fp)
 1008f8c:	e0bffa17 	ldw	r2,-24(fp)
 1008f90:	10800317 	ldw	r2,12(r2)
 1008f94:	18801216 	blt	r3,r2,1008fe0 <validkeypress+0xb8>
 1008f98:	e0bffd17 	ldw	r2,-12(fp)
 1008f9c:	e0fffa17 	ldw	r3,-24(fp)
 1008fa0:	18c00417 	ldw	r3,16(r3)
 1008fa4:	18800e16 	blt	r3,r2,1008fe0 <validkeypress+0xb8>
				if ((release.y >= k->y1) && (release.y <= k->y2)) {
 1008fa8:	e0bffe17 	ldw	r2,-8(fp)
 1008fac:	e0fffa17 	ldw	r3,-24(fp)
 1008fb0:	18c00517 	ldw	r3,20(r3)
 1008fb4:	10c00a16 	blt	r2,r3,1008fe0 <validkeypress+0xb8>
 1008fb8:	e0bffe17 	ldw	r2,-8(fp)
 1008fbc:	e0fffa17 	ldw	r3,-24(fp)
 1008fc0:	18c00617 	ldw	r3,24(r3)
 1008fc4:	18800616 	blt	r3,r2,1008fe0 <validkeypress+0xb8>
					*keyPressed = 1;
 1008fc8:	e0c06017 	ldw	r3,384(fp)
 1008fcc:	00800044 	movi	r2,1
 1008fd0:	18800015 	stw	r2,0(r3)
					return j;
 1008fd4:	e0bffc17 	ldw	r2,-16(fp)
 1008fd8:	e0bfff15 	stw	r2,-4(fp)
 1008fdc:	00000b06 	br	100900c <validkeypress+0xe4>

		if (currentPage.keyboard.isNum == 0) {
			k = ALPHA_SIZE;
		}
		//iterate through the keys
		for (j = 0; j < k; j++) {
 1008fe0:	e0bffc17 	ldw	r2,-16(fp)
 1008fe4:	10800044 	addi	r2,r2,1
 1008fe8:	e0bffc15 	stw	r2,-16(fp)
 1008fec:	e0fffc17 	ldw	r3,-16(fp)
 1008ff0:	e0bffb17 	ldw	r2,-20(fp)
 1008ff4:	18bfdf16 	blt	r3,r2,1008f74 <validkeypress+0x4c>
				}
			}
		}
	}

	*keyPressed = -1;
 1008ff8:	e0c06017 	ldw	r3,384(fp)
 1008ffc:	00bfffc4 	movi	r2,-1
 1009000:	18800015 	stw	r2,0(r3)
	return -1;
 1009004:	00bfffc4 	movi	r2,-1
 1009008:	e0bfff15 	stw	r2,-4(fp)
 100900c:	e0bfff17 	ldw	r2,-4(fp)
}
 1009010:	e037883a 	mov	sp,fp
 1009014:	df000017 	ldw	fp,0(sp)
 1009018:	dec00304 	addi	sp,sp,12
 100901c:	f800283a 	ret

01009020 <validinputboxpress>:

int validinputboxpress(Point release, Page currentPage, int * inputBoxPressed) {
 1009020:	deffb004 	addi	sp,sp,-320
 1009024:	dfc04d15 	stw	ra,308(sp)
 1009028:	df004c15 	stw	fp,304(sp)
 100902c:	df004c04 	addi	fp,sp,304
 1009030:	e13ffd15 	stw	r4,-12(fp)
 1009034:	e17ffe15 	stw	r5,-8(fp)
 1009038:	e1800215 	stw	r6,8(fp)
 100903c:	e1c00315 	stw	r7,12(fp)
	int j;
	int k = currentPage.numInputBoxes;
 1009040:	e0800417 	ldw	r2,16(fp)
 1009044:	e0bfb415 	stw	r2,-304(fp)
	//iterate through the inputboxes
	for (j = 0; j < k; j++) {
 1009048:	e03fb515 	stw	zero,-300(fp)
 100904c:	00001d06 	br	10090c4 <validinputboxpress+0xa4>
		InputBox ib = currentPage.inputBoxes[j];
 1009050:	e0c05f17 	ldw	r3,380(fp)
 1009054:	e0bfb517 	ldw	r2,-300(fp)
 1009058:	10804724 	muli	r2,r2,284
 100905c:	1885883a 	add	r2,r3,r2
 1009060:	e13fb604 	addi	r4,fp,-296
 1009064:	100b883a 	mov	r5,r2
 1009068:	01804704 	movi	r6,284
 100906c:	10152740 	call	1015274 <memcpy>
		if ((release.x >= ib.x1) && (release.x <= ib.x2)) {
 1009070:	e0fffd17 	ldw	r3,-12(fp)
 1009074:	e0bfb617 	ldw	r2,-296(fp)
 1009078:	18800f16 	blt	r3,r2,10090b8 <validinputboxpress+0x98>
 100907c:	e0fffd17 	ldw	r3,-12(fp)
 1009080:	e0bfb717 	ldw	r2,-292(fp)
 1009084:	10c00c16 	blt	r2,r3,10090b8 <validinputboxpress+0x98>
			if ((release.y >= ib.y1) && (release.y <= ib.y2)) {
 1009088:	e0fffe17 	ldw	r3,-8(fp)
 100908c:	e0bfb817 	ldw	r2,-288(fp)
 1009090:	18800916 	blt	r3,r2,10090b8 <validinputboxpress+0x98>
 1009094:	e0fffe17 	ldw	r3,-8(fp)
 1009098:	e0bfb917 	ldw	r2,-284(fp)
 100909c:	10c00616 	blt	r2,r3,10090b8 <validinputboxpress+0x98>
				*inputBoxPressed = 1;
 10090a0:	e0c06117 	ldw	r3,388(fp)
 10090a4:	00800044 	movi	r2,1
 10090a8:	18800015 	stw	r2,0(r3)
				return j;
 10090ac:	e0bfb517 	ldw	r2,-300(fp)
 10090b0:	e0bfff15 	stw	r2,-4(fp)
 10090b4:	00000b06 	br	10090e4 <validinputboxpress+0xc4>

int validinputboxpress(Point release, Page currentPage, int * inputBoxPressed) {
	int j;
	int k = currentPage.numInputBoxes;
	//iterate through the inputboxes
	for (j = 0; j < k; j++) {
 10090b8:	e0bfb517 	ldw	r2,-300(fp)
 10090bc:	10800044 	addi	r2,r2,1
 10090c0:	e0bfb515 	stw	r2,-300(fp)
 10090c4:	e0ffb517 	ldw	r3,-300(fp)
 10090c8:	e0bfb417 	ldw	r2,-304(fp)
 10090cc:	18bfe016 	blt	r3,r2,1009050 <validinputboxpress+0x30>
				*inputBoxPressed = 1;
				return j;
			}
		}
	}
	*inputBoxPressed = -1;
 10090d0:	e0c06117 	ldw	r3,388(fp)
 10090d4:	00bfffc4 	movi	r2,-1
 10090d8:	18800015 	stw	r2,0(r3)
	return -1;
 10090dc:	00bfffc4 	movi	r2,-1
 10090e0:	e0bfff15 	stw	r2,-4(fp)
 10090e4:	e0bfff17 	ldw	r2,-4(fp)
}
 10090e8:	e037883a 	mov	sp,fp
 10090ec:	dfc00117 	ldw	ra,4(sp)
 10090f0:	df000017 	ldw	fp,0(sp)
 10090f4:	dec00404 	addi	sp,sp,16
 10090f8:	f800283a 	ret

010090fc <validsdboxpress>:

int validsdboxpress(Point release, Page currentPage, int * sdBoxPressed) {
 10090fc:	deffef04 	addi	sp,sp,-68
 1009100:	df000e15 	stw	fp,56(sp)
 1009104:	df000e04 	addi	fp,sp,56
 1009108:	e13ffd15 	stw	r4,-12(fp)
 100910c:	e17ffe15 	stw	r5,-8(fp)
 1009110:	e1800115 	stw	r6,4(fp)
 1009114:	e1c00215 	stw	r7,8(fp)
	int j;
	int k = currentPage.numSDBoxes;
 1009118:	e0800617 	ldw	r2,24(fp)
 100911c:	e0bff215 	stw	r2,-56(fp)
	//iterates through the SDBoxes
	for (j = 0; j < k; j++) {
 1009120:	e03ff315 	stw	zero,-52(fp)
 1009124:	00002b06 	br	10091d4 <validsdboxpress+0xd8>
		SDBox sdb = currentPage.sdBoxes[j];
 1009128:	e0c05f17 	ldw	r3,380(fp)
 100912c:	e0bff317 	ldw	r2,-52(fp)
 1009130:	10800924 	muli	r2,r2,36
 1009134:	1887883a 	add	r3,r3,r2
 1009138:	18800017 	ldw	r2,0(r3)
 100913c:	e0bff415 	stw	r2,-48(fp)
 1009140:	18800117 	ldw	r2,4(r3)
 1009144:	e0bff515 	stw	r2,-44(fp)
 1009148:	18800217 	ldw	r2,8(r3)
 100914c:	e0bff615 	stw	r2,-40(fp)
 1009150:	18800317 	ldw	r2,12(r3)
 1009154:	e0bff715 	stw	r2,-36(fp)
 1009158:	18800417 	ldw	r2,16(r3)
 100915c:	e0bff815 	stw	r2,-32(fp)
 1009160:	18800517 	ldw	r2,20(r3)
 1009164:	e0bff915 	stw	r2,-28(fp)
 1009168:	18800617 	ldw	r2,24(r3)
 100916c:	e0bffa15 	stw	r2,-24(fp)
 1009170:	18800717 	ldw	r2,28(r3)
 1009174:	e0bffb15 	stw	r2,-20(fp)
 1009178:	18800817 	ldw	r2,32(r3)
 100917c:	e0bffc15 	stw	r2,-16(fp)
		if ((release.x >= sdb.x1) && (release.x <= sdb.x2)) {
 1009180:	e0fffd17 	ldw	r3,-12(fp)
 1009184:	e0bff517 	ldw	r2,-44(fp)
 1009188:	18800f16 	blt	r3,r2,10091c8 <validsdboxpress+0xcc>
 100918c:	e0fffd17 	ldw	r3,-12(fp)
 1009190:	e0bff617 	ldw	r2,-40(fp)
 1009194:	10c00c16 	blt	r2,r3,10091c8 <validsdboxpress+0xcc>
			if ((release.y >= sdb.y1) && (release.y <= sdb.y2)) {
 1009198:	e0fffe17 	ldw	r3,-8(fp)
 100919c:	e0bff717 	ldw	r2,-36(fp)
 10091a0:	18800916 	blt	r3,r2,10091c8 <validsdboxpress+0xcc>
 10091a4:	e0fffe17 	ldw	r3,-8(fp)
 10091a8:	e0bff817 	ldw	r2,-32(fp)
 10091ac:	10c00616 	blt	r2,r3,10091c8 <validsdboxpress+0xcc>
				*sdBoxPressed = 1;
 10091b0:	e0c06017 	ldw	r3,384(fp)
 10091b4:	00800044 	movi	r2,1
 10091b8:	18800015 	stw	r2,0(r3)
				return j;
 10091bc:	e0bff317 	ldw	r2,-52(fp)
 10091c0:	e0bfff15 	stw	r2,-4(fp)
 10091c4:	00000b06 	br	10091f4 <validsdboxpress+0xf8>

int validsdboxpress(Point release, Page currentPage, int * sdBoxPressed) {
	int j;
	int k = currentPage.numSDBoxes;
	//iterates through the SDBoxes
	for (j = 0; j < k; j++) {
 10091c8:	e0bff317 	ldw	r2,-52(fp)
 10091cc:	10800044 	addi	r2,r2,1
 10091d0:	e0bff315 	stw	r2,-52(fp)
 10091d4:	e0fff317 	ldw	r3,-52(fp)
 10091d8:	e0bff217 	ldw	r2,-56(fp)
 10091dc:	18bfd216 	blt	r3,r2,1009128 <validsdboxpress+0x2c>
				*sdBoxPressed = 1;
				return j;
			}
		}
	}
	*sdBoxPressed = -1;
 10091e0:	e0c06017 	ldw	r3,384(fp)
 10091e4:	00bfffc4 	movi	r2,-1
 10091e8:	18800015 	stw	r2,0(r3)
	return -1;
 10091ec:	00bfffc4 	movi	r2,-1
 10091f0:	e0bfff15 	stw	r2,-4(fp)
 10091f4:	e0bfff17 	ldw	r2,-4(fp)
}
 10091f8:	e037883a 	mov	sp,fp
 10091fc:	df000017 	ldw	fp,0(sp)
 1009200:	dec00304 	addi	sp,sp,12
 1009204:	f800283a 	ret

01009208 <checkChoice>:

int checkChoice(Point p, Page * globalCurrentPage, int *keyPressed,
		int *inputBoxPressed, int *buttonPressed, int * sdBoxPressed) {
 1009208:	deff9504 	addi	sp,sp,-428
 100920c:	dfc06a15 	stw	ra,424(sp)
 1009210:	df006915 	stw	fp,420(sp)
 1009214:	dc006815 	stw	r16,416(sp)
 1009218:	df006804 	addi	fp,sp,416
 100921c:	e13ffc15 	stw	r4,-16(fp)
 1009220:	e17ffd15 	stw	r5,-12(fp)
 1009224:	e1bffe15 	stw	r6,-8(fp)
 1009228:	e1ffff15 	stw	r7,-4(fp)
	int choice = -1;
 100922c:	00bfffc4 	movi	r2,-1
 1009230:	e0bffb15 	stw	r2,-20(fp)
	int check1;
	int check2;

	int checkButtonPressed = -1;
 1009234:	00bfffc4 	movi	r2,-1
 1009238:	e0bff815 	stw	r2,-32(fp)
	int checkInputBoxPressed = -1;
 100923c:	00bfffc4 	movi	r2,-1
 1009240:	e0bff715 	stw	r2,-36(fp)
	int checkSDBoxPressed = -1;
 1009244:	00bfffc4 	movi	r2,-1
 1009248:	e0bff615 	stw	r2,-40(fp)

	if (globalCurrentPage->hasKeyboard) {
 100924c:	e0bffe17 	ldw	r2,-8(fp)
 1009250:	10800617 	ldw	r2,24(r2)
 1009254:	1005003a 	cmpeq	r2,r2,zero
 1009258:	1000271e 	bne	r2,zero,10092f8 <checkChoice+0xf0>

		check1 = validkeypress(p, *globalCurrentPage, keyPressed);
 100925c:	e43ffe17 	ldw	r16,-8(fp)
 1009260:	e0bfff17 	ldw	r2,-4(fp)
 1009264:	d8805d15 	stw	r2,372(sp)
 1009268:	d809883a 	mov	r4,sp
 100926c:	81400204 	addi	r5,r16,8
 1009270:	01805d04 	movi	r6,372
 1009274:	10152740 	call	1015274 <memcpy>
 1009278:	81800017 	ldw	r6,0(r16)
 100927c:	81c00117 	ldw	r7,4(r16)
 1009280:	e13ffc17 	ldw	r4,-16(fp)
 1009284:	e17ffd17 	ldw	r5,-12(fp)
 1009288:	1008f280 	call	1008f28 <validkeypress>
 100928c:	e0bffa15 	stw	r2,-24(fp)
		check2 = validpress(p, *globalCurrentPage, buttonPressed);
 1009290:	e43ffe17 	ldw	r16,-8(fp)
 1009294:	e0800417 	ldw	r2,16(fp)
 1009298:	d8805d15 	stw	r2,372(sp)
 100929c:	d809883a 	mov	r4,sp
 10092a0:	81400204 	addi	r5,r16,8
 10092a4:	01805d04 	movi	r6,372
 10092a8:	10152740 	call	1015274 <memcpy>
 10092ac:	81800017 	ldw	r6,0(r16)
 10092b0:	81c00117 	ldw	r7,4(r16)
 10092b4:	e13ffc17 	ldw	r4,-16(fp)
 10092b8:	e17ffd17 	ldw	r5,-12(fp)
 10092bc:	1008e000 	call	1008e00 <validpress>
 10092c0:	e0bff915 	stw	r2,-28(fp)

		if (*keyPressed == 1) {
 10092c4:	e0bfff17 	ldw	r2,-4(fp)
 10092c8:	10800017 	ldw	r2,0(r2)
 10092cc:	10800058 	cmpnei	r2,r2,1
 10092d0:	1000021e 	bne	r2,zero,10092dc <checkChoice+0xd4>
			choice = check1;
 10092d4:	e0bffa17 	ldw	r2,-24(fp)
 10092d8:	e0bffb15 	stw	r2,-20(fp)
		}
		if (*buttonPressed == 1) {
 10092dc:	e0800417 	ldw	r2,16(fp)
 10092e0:	10800017 	ldw	r2,0(r2)
 10092e4:	10800058 	cmpnei	r2,r2,1
 10092e8:	10003c1e 	bne	r2,zero,10093dc <checkChoice+0x1d4>
			choice = check2;
 10092ec:	e0bff917 	ldw	r2,-28(fp)
 10092f0:	e0bffb15 	stw	r2,-20(fp)
 10092f4:	00003906 	br	10093dc <checkChoice+0x1d4>
		}
	} else {

		checkButtonPressed = validpress(p, *globalCurrentPage, buttonPressed);
 10092f8:	e43ffe17 	ldw	r16,-8(fp)
 10092fc:	e0800417 	ldw	r2,16(fp)
 1009300:	d8805d15 	stw	r2,372(sp)
 1009304:	d809883a 	mov	r4,sp
 1009308:	81400204 	addi	r5,r16,8
 100930c:	01805d04 	movi	r6,372
 1009310:	10152740 	call	1015274 <memcpy>
 1009314:	81800017 	ldw	r6,0(r16)
 1009318:	81c00117 	ldw	r7,4(r16)
 100931c:	e13ffc17 	ldw	r4,-16(fp)
 1009320:	e17ffd17 	ldw	r5,-12(fp)
 1009324:	1008e000 	call	1008e00 <validpress>
 1009328:	e0bff815 	stw	r2,-32(fp)
		checkInputBoxPressed = validinputboxpress(p, *globalCurrentPage,
 100932c:	e43ffe17 	ldw	r16,-8(fp)
 1009330:	e0800317 	ldw	r2,12(fp)
 1009334:	d8805d15 	stw	r2,372(sp)
 1009338:	d809883a 	mov	r4,sp
 100933c:	81400204 	addi	r5,r16,8
 1009340:	01805d04 	movi	r6,372
 1009344:	10152740 	call	1015274 <memcpy>
 1009348:	81800017 	ldw	r6,0(r16)
 100934c:	81c00117 	ldw	r7,4(r16)
 1009350:	e13ffc17 	ldw	r4,-16(fp)
 1009354:	e17ffd17 	ldw	r5,-12(fp)
 1009358:	10090200 	call	1009020 <validinputboxpress>
 100935c:	e0bff715 	stw	r2,-36(fp)
				inputBoxPressed);
		checkSDBoxPressed = validsdboxpress(p, *globalCurrentPage,
 1009360:	e43ffe17 	ldw	r16,-8(fp)
 1009364:	e0800517 	ldw	r2,20(fp)
 1009368:	d8805d15 	stw	r2,372(sp)
 100936c:	d809883a 	mov	r4,sp
 1009370:	81400204 	addi	r5,r16,8
 1009374:	01805d04 	movi	r6,372
 1009378:	10152740 	call	1015274 <memcpy>
 100937c:	81800017 	ldw	r6,0(r16)
 1009380:	81c00117 	ldw	r7,4(r16)
 1009384:	e13ffc17 	ldw	r4,-16(fp)
 1009388:	e17ffd17 	ldw	r5,-12(fp)
 100938c:	10090fc0 	call	10090fc <validsdboxpress>
 1009390:	e0bff615 	stw	r2,-40(fp)
				sdBoxPressed);

		if (*sdBoxPressed == 1) {
 1009394:	e0800517 	ldw	r2,20(fp)
 1009398:	10800017 	ldw	r2,0(r2)
 100939c:	10800058 	cmpnei	r2,r2,1
 10093a0:	1000021e 	bne	r2,zero,10093ac <checkChoice+0x1a4>
			choice = checkSDBoxPressed;
 10093a4:	e0bff617 	ldw	r2,-40(fp)
 10093a8:	e0bffb15 	stw	r2,-20(fp)
		}
		if (*buttonPressed == 1) {
 10093ac:	e0800417 	ldw	r2,16(fp)
 10093b0:	10800017 	ldw	r2,0(r2)
 10093b4:	10800058 	cmpnei	r2,r2,1
 10093b8:	1000021e 	bne	r2,zero,10093c4 <checkChoice+0x1bc>
			choice = checkButtonPressed;
 10093bc:	e0bff817 	ldw	r2,-32(fp)
 10093c0:	e0bffb15 	stw	r2,-20(fp)
		}
		if (*inputBoxPressed == 1) {
 10093c4:	e0800317 	ldw	r2,12(fp)
 10093c8:	10800017 	ldw	r2,0(r2)
 10093cc:	10800058 	cmpnei	r2,r2,1
 10093d0:	1000021e 	bne	r2,zero,10093dc <checkChoice+0x1d4>
			choice = checkInputBoxPressed;
 10093d4:	e0bff717 	ldw	r2,-36(fp)
 10093d8:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	return choice;
 10093dc:	e0bffb17 	ldw	r2,-20(fp)

}
 10093e0:	e037883a 	mov	sp,fp
 10093e4:	dfc00217 	ldw	ra,8(sp)
 10093e8:	df000117 	ldw	fp,4(sp)
 10093ec:	dc000017 	ldw	r16,0(sp)
 10093f0:	dec00304 	addi	sp,sp,12
 10093f4:	f800283a 	ret

010093f8 <OutGraphicsCharFont1>:
#define YRES 480
#define FONT2_XPIXELS	10				// width of Font2 characters in pixels (no spacing)
#define FONT2_YPIXELS	14				// height of Font2 characters in pixels (no spacing)

void OutGraphicsCharFont1(int x, int y, int fontcolour, int backgroundcolour,
		int c, int Erase) {
 10093f8:	defff204 	addi	sp,sp,-56
 10093fc:	dfc00d15 	stw	ra,52(sp)
 1009400:	df000c15 	stw	fp,48(sp)
 1009404:	df000c04 	addi	fp,sp,48
 1009408:	e13ff415 	stw	r4,-48(fp)
 100940c:	e17ff515 	stw	r5,-44(fp)
 1009410:	e1bff615 	stw	r6,-40(fp)
 1009414:	e1fff715 	stw	r7,-36(fp)
	// using register variables (as opposed to stack based ones) may make execution faster
	// depends on compiler and CPU
	register int row, column, theX = x, theY = y;
 1009418:	e0bff417 	ldw	r2,-48(fp)
 100941c:	e0bffd15 	stw	r2,-12(fp)
 1009420:	e0fff517 	ldw	r3,-44(fp)
 1009424:	e0fffc15 	stw	r3,-16(fp)
	register int pixels;
	register char theColour = fontcolour;
 1009428:	e0bff617 	ldw	r2,-40(fp)
 100942c:	e0bffa05 	stb	r2,-24(fp)
	register int BitMask, theC = c;
 1009430:	e1000217 	ldw	r4,8(fp)
 1009434:	e13ff815 	stw	r4,-32(fp)
	// if x,y coord off edge of screen don't bother
	// XRES and YRES are #defined to be 800 and 480 respectively
	if (((short) (x) > (short) (XRES - 1))
 1009438:	e0bff417 	ldw	r2,-48(fp)
 100943c:	10bfffcc 	andi	r2,r2,65535
 1009440:	10a0001c 	xori	r2,r2,32768
 1009444:	10a00004 	addi	r2,r2,-32768
 1009448:	1080c808 	cmpgei	r2,r2,800
 100944c:	10005b1e 	bne	r2,zero,10095bc <OutGraphicsCharFont1+0x1c4>
 1009450:	e0bff517 	ldw	r2,-44(fp)
 1009454:	10bfffcc 	andi	r2,r2,65535
 1009458:	10a0001c 	xori	r2,r2,32768
 100945c:	10a00004 	addi	r2,r2,-32768
 1009460:	10807810 	cmplti	r2,r2,480
 1009464:	1000011e 	bne	r2,zero,100946c <OutGraphicsCharFont1+0x74>
			|| ((short) (y) > (short) (YRES - 1)))
		return;
 1009468:	00005406 	br	10095bc <OutGraphicsCharFont1+0x1c4>
	// if printable character subtract hex 20
	if (((short) (theC) >= (short) (' '))
 100946c:	e0fff817 	ldw	r3,-32(fp)
 1009470:	1805883a 	mov	r2,r3
 1009474:	10bfffcc 	andi	r2,r2,65535
 1009478:	10a0001c 	xori	r2,r2,32768
 100947c:	10a00004 	addi	r2,r2,-32768
 1009480:	10800810 	cmplti	r2,r2,32
 1009484:	10004d1e 	bne	r2,zero,10095bc <OutGraphicsCharFont1+0x1c4>
 1009488:	e13ff817 	ldw	r4,-32(fp)
 100948c:	2005883a 	mov	r2,r4
 1009490:	10bfffcc 	andi	r2,r2,65535
 1009494:	10a0001c 	xori	r2,r2,32768
 1009498:	10a00004 	addi	r2,r2,-32768
 100949c:	10801fc8 	cmpgei	r2,r2,127
 10094a0:	1000461e 	bne	r2,zero,10095bc <OutGraphicsCharFont1+0x1c4>
			&& ((short) (theC) <= (short) ('~'))) {
		theC = theC - 0x20;
 10094a4:	e0bff817 	ldw	r2,-32(fp)
 10094a8:	10bff804 	addi	r2,r2,-32
 10094ac:	e0bff815 	stw	r2,-32(fp)
		for (row = 0; (char) (row) < (char) (7); row++) {
 10094b0:	e03fff15 	stw	zero,-4(fp)
 10094b4:	00003a06 	br	10095a0 <OutGraphicsCharFont1+0x1a8>
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row];
 10094b8:	e0bff817 	ldw	r2,-32(fp)
 10094bc:	e13fff17 	ldw	r4,-4(fp)
 10094c0:	00c040f4 	movhi	r3,259
 10094c4:	18e7ca04 	addi	r3,r3,-24792
 10094c8:	108001e4 	muli	r2,r2,7
 10094cc:	10c5883a 	add	r2,r2,r3
 10094d0:	1105883a 	add	r2,r2,r4
 10094d4:	10800003 	ldbu	r2,0(r2)
 10094d8:	10803fcc 	andi	r2,r2,255
 10094dc:	e0bffb15 	stw	r2,-20(fp)
			BitMask = 16;
 10094e0:	00c00404 	movi	r3,16
 10094e4:	e0fff915 	stw	r3,-28(fp)
			for (column = 0; (char) (column) < (char) (5); column++) {
 10094e8:	e03ffe15 	stw	zero,-8(fp)
 10094ec:	00002206 	br	1009578 <OutGraphicsCharFont1+0x180>
				// if a pixel in the character display it
				if ((pixels & BitMask)) {
 10094f0:	e13ffb17 	ldw	r4,-20(fp)
 10094f4:	e0fff917 	ldw	r3,-28(fp)
 10094f8:	20c4703a 	and	r2,r4,r3
 10094fc:	1005003a 	cmpeq	r2,r2,zero
 1009500:	10000c1e 	bne	r2,zero,1009534 <OutGraphicsCharFont1+0x13c>
					WriteAPixel(theX + column, theY + row, theColour);
 1009504:	e0bffd17 	ldw	r2,-12(fp)
 1009508:	e0fffe17 	ldw	r3,-8(fp)
 100950c:	10c9883a 	add	r4,r2,r3
 1009510:	e0bffc17 	ldw	r2,-16(fp)
 1009514:	e0ffff17 	ldw	r3,-4(fp)
 1009518:	10cb883a 	add	r5,r2,r3
 100951c:	e0bffa03 	ldbu	r2,-24(fp)
 1009520:	11803fcc 	andi	r6,r2,255
 1009524:	3180201c 	xori	r6,r6,128
 1009528:	31bfe004 	addi	r6,r6,-128
 100952c:	10004940 	call	1000494 <WriteAPixel>
 1009530:	00000b06 	br	1009560 <OutGraphicsCharFont1+0x168>
				} else {
					if (Erase == TRUE) {
 1009534:	e0800317 	ldw	r2,12(fp)
 1009538:	10800058 	cmpnei	r2,r2,1
 100953c:	1000081e 	bne	r2,zero,1009560 <OutGraphicsCharFont1+0x168>
						// if pixel is part of background (not part of character)
						// erase the background to value of variable BackGroundColour
						WriteAPixel(theX + column, theY + row,
 1009540:	e0fffd17 	ldw	r3,-12(fp)
 1009544:	e0bffe17 	ldw	r2,-8(fp)
 1009548:	1889883a 	add	r4,r3,r2
 100954c:	e0fffc17 	ldw	r3,-16(fp)
 1009550:	e0bfff17 	ldw	r2,-4(fp)
 1009554:	188b883a 	add	r5,r3,r2
 1009558:	e1bff717 	ldw	r6,-36(fp)
 100955c:	10004940 	call	1000494 <WriteAPixel>
								backgroundcolour);
					}
				}
				BitMask = BitMask >> 1;
 1009560:	e0fff917 	ldw	r3,-28(fp)
 1009564:	1807d07a 	srai	r3,r3,1
 1009568:	e0fff915 	stw	r3,-28(fp)
		theC = theC - 0x20;
		for (row = 0; (char) (row) < (char) (7); row++) {
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row];
			BitMask = 16;
			for (column = 0; (char) (column) < (char) (5); column++) {
 100956c:	e13ffe17 	ldw	r4,-8(fp)
 1009570:	21000044 	addi	r4,r4,1
 1009574:	e13ffe15 	stw	r4,-8(fp)
 1009578:	e0fffe17 	ldw	r3,-8(fp)
 100957c:	1805883a 	mov	r2,r3
 1009580:	10803fcc 	andi	r2,r2,255
 1009584:	1080201c 	xori	r2,r2,128
 1009588:	10bfe004 	addi	r2,r2,-128
 100958c:	10800150 	cmplti	r2,r2,5
 1009590:	103fd71e 	bne	r2,zero,10094f0 <OutGraphicsCharFont1+0xf8>
		return;
	// if printable character subtract hex 20
	if (((short) (theC) >= (short) (' '))
			&& ((short) (theC) <= (short) ('~'))) {
		theC = theC - 0x20;
		for (row = 0; (char) (row) < (char) (7); row++) {
 1009594:	e13fff17 	ldw	r4,-4(fp)
 1009598:	21000044 	addi	r4,r4,1
 100959c:	e13fff15 	stw	r4,-4(fp)
 10095a0:	e0ffff17 	ldw	r3,-4(fp)
 10095a4:	1805883a 	mov	r2,r3
 10095a8:	10803fcc 	andi	r2,r2,255
 10095ac:	1080201c 	xori	r2,r2,128
 10095b0:	10bfe004 	addi	r2,r2,-128
 10095b4:	108001d0 	cmplti	r2,r2,7
 10095b8:	103fbf1e 	bne	r2,zero,10094b8 <OutGraphicsCharFont1+0xc0>
				}
				BitMask = BitMask >> 1;
			}
		}
	}
}
 10095bc:	e037883a 	mov	sp,fp
 10095c0:	dfc00117 	ldw	ra,4(sp)
 10095c4:	df000017 	ldw	fp,0(sp)
 10095c8:	dec00204 	addi	sp,sp,8
 10095cc:	f800283a 	ret

010095d0 <OutGraphicsCharFont2a>:

void OutGraphicsCharFont2a(int x, int y, int colour, int backgroundcolour,
		int c, int Erase) {
 10095d0:	defff004 	addi	sp,sp,-64
 10095d4:	dfc00f15 	stw	ra,60(sp)
 10095d8:	df000e15 	stw	fp,56(sp)
 10095dc:	df000e04 	addi	fp,sp,56
 10095e0:	e13ff215 	stw	r4,-56(fp)
 10095e4:	e17ff315 	stw	r5,-52(fp)
 10095e8:	e1bff415 	stw	r6,-48(fp)
 10095ec:	e1fff515 	stw	r7,-44(fp)
	register int row, column, theX = x, theY = y;
 10095f0:	e0bff217 	ldw	r2,-56(fp)
 10095f4:	e0bffd15 	stw	r2,-12(fp)
 10095f8:	e0fff317 	ldw	r3,-52(fp)
 10095fc:	e0fffc15 	stw	r3,-16(fp)
	register int pixels;
	register char theColour = colour;
 1009600:	e0bff417 	ldw	r2,-48(fp)
 1009604:	e0bffa05 	stb	r2,-24(fp)
	register int BitMask, theCharacter = c, theRow, theColumn;
 1009608:	e1000217 	ldw	r4,8(fp)
 100960c:	e13ff815 	stw	r4,-32(fp)

	if (((short) (x) > (short) (XRES - 1))
 1009610:	e0bff217 	ldw	r2,-56(fp)
 1009614:	10bfffcc 	andi	r2,r2,65535
 1009618:	10a0001c 	xori	r2,r2,32768
 100961c:	10a00004 	addi	r2,r2,-32768
 1009620:	1080c808 	cmpgei	r2,r2,800
 1009624:	1000581e 	bne	r2,zero,1009788 <OutGraphicsCharFont2a+0x1b8>
 1009628:	e0bff317 	ldw	r2,-52(fp)
 100962c:	10bfffcc 	andi	r2,r2,65535
 1009630:	10a0001c 	xori	r2,r2,32768
 1009634:	10a00004 	addi	r2,r2,-32768
 1009638:	10807810 	cmplti	r2,r2,480
 100963c:	1000011e 	bne	r2,zero,1009644 <OutGraphicsCharFont2a+0x74>
			|| ((short) (y) > (short) (YRES - 1))) // if start off edge of screen don't bother
		return;
 1009640:	00005106 	br	1009788 <OutGraphicsCharFont2a+0x1b8>

	if (((short) (theCharacter) >= (short) (' '))
 1009644:	e0fff817 	ldw	r3,-32(fp)
 1009648:	1805883a 	mov	r2,r3
 100964c:	10bfffcc 	andi	r2,r2,65535
 1009650:	10a0001c 	xori	r2,r2,32768
 1009654:	10a00004 	addi	r2,r2,-32768
 1009658:	10800810 	cmplti	r2,r2,32
 100965c:	10004a1e 	bne	r2,zero,1009788 <OutGraphicsCharFont2a+0x1b8>
 1009660:	e13ff817 	ldw	r4,-32(fp)
 1009664:	2005883a 	mov	r2,r4
 1009668:	10bfffcc 	andi	r2,r2,65535
 100966c:	10a0001c 	xori	r2,r2,32768
 1009670:	10a00004 	addi	r2,r2,-32768
 1009674:	10801fc8 	cmpgei	r2,r2,127
 1009678:	1000431e 	bne	r2,zero,1009788 <OutGraphicsCharFont2a+0x1b8>
			&& ((short) (theCharacter) <= (short) ('~'))) { // if printable character
		theCharacter -= 0x20; // subtract hex 20 to get index of first printable character (the space character)
 100967c:	e0bff817 	ldw	r2,-32(fp)
 1009680:	10bff804 	addi	r2,r2,-32
 1009684:	e0bff815 	stw	r2,-32(fp)
		theRow = FONT2_YPIXELS;
 1009688:	00c00384 	movi	r3,14
 100968c:	e0fff715 	stw	r3,-36(fp)
		theColumn = FONT2_XPIXELS;
 1009690:	01000284 	movi	r4,10
 1009694:	e13ff615 	stw	r4,-40(fp)

		for (row = 0; row < theRow; row++) {
 1009698:	e03fff15 	stw	zero,-4(fp)
 100969c:	00003706 	br	100977c <OutGraphicsCharFont2a+0x1ac>
			pixels = Font10x14[theCharacter][row]; // get the pixels for row 0 of the character to be displayed
 10096a0:	e0bff817 	ldw	r2,-32(fp)
 10096a4:	e0ffff17 	ldw	r3,-4(fp)
 10096a8:	010040f4 	movhi	r4,259
 10096ac:	21287084 	addi	r4,r4,-24126
 10096b0:	108003a4 	muli	r2,r2,14
 10096b4:	10c5883a 	add	r2,r2,r3
 10096b8:	1085883a 	add	r2,r2,r2
 10096bc:	1105883a 	add	r2,r2,r4
 10096c0:	1080000b 	ldhu	r2,0(r2)
 10096c4:	10bfffcc 	andi	r2,r2,65535
 10096c8:	e0bffb15 	stw	r2,-20(fp)
			BitMask = 512; // set of hex 200 i.e. bit 7-0 = 0010 0000 0000
 10096cc:	00808004 	movi	r2,512
 10096d0:	e0bff915 	stw	r2,-28(fp)
			for (column = 0; column < theColumn;) {
 10096d4:	e03ffe15 	stw	zero,-8(fp)
 10096d8:	00002206 	br	1009764 <OutGraphicsCharFont2a+0x194>
				if ((pixels & BitMask)) // if valid pixel, then write it
 10096dc:	e0fffb17 	ldw	r3,-20(fp)
 10096e0:	e13ff917 	ldw	r4,-28(fp)
 10096e4:	1904703a 	and	r2,r3,r4
 10096e8:	1005003a 	cmpeq	r2,r2,zero
 10096ec:	10000c1e 	bne	r2,zero,1009720 <OutGraphicsCharFont2a+0x150>
					WriteAPixel(theX + column, theY + row, theColour);
 10096f0:	e0bffd17 	ldw	r2,-12(fp)
 10096f4:	e0fffe17 	ldw	r3,-8(fp)
 10096f8:	10c9883a 	add	r4,r2,r3
 10096fc:	e0bffc17 	ldw	r2,-16(fp)
 1009700:	e0ffff17 	ldw	r3,-4(fp)
 1009704:	10cb883a 	add	r5,r2,r3
 1009708:	e0bffa03 	ldbu	r2,-24(fp)
 100970c:	11803fcc 	andi	r6,r2,255
 1009710:	3180201c 	xori	r6,r6,128
 1009714:	31bfe004 	addi	r6,r6,-128
 1009718:	10004940 	call	1000494 <WriteAPixel>
 100971c:	00000b06 	br	100974c <OutGraphicsCharFont2a+0x17c>
				else { // if not a valid pixel, do we erase or leave it along (no erase)
					if (Erase == TRUE)
 1009720:	e0800317 	ldw	r2,12(fp)
 1009724:	10800058 	cmpnei	r2,r2,1
 1009728:	1000081e 	bne	r2,zero,100974c <OutGraphicsCharFont2a+0x17c>
						WriteAPixel(theX + column, theY + row,
 100972c:	e0fffd17 	ldw	r3,-12(fp)
 1009730:	e0bffe17 	ldw	r2,-8(fp)
 1009734:	1889883a 	add	r4,r3,r2
 1009738:	e0fffc17 	ldw	r3,-16(fp)
 100973c:	e0bfff17 	ldw	r2,-4(fp)
 1009740:	188b883a 	add	r5,r3,r2
 1009744:	e1bff517 	ldw	r6,-44(fp)
 1009748:	10004940 	call	1000494 <WriteAPixel>
								backgroundcolour);
					// else leave it alone
				}
				column++;
 100974c:	e0fffe17 	ldw	r3,-8(fp)
 1009750:	18c00044 	addi	r3,r3,1
 1009754:	e0fffe15 	stw	r3,-8(fp)
				BitMask = BitMask >> 1;
 1009758:	e13ff917 	ldw	r4,-28(fp)
 100975c:	2009d07a 	srai	r4,r4,1
 1009760:	e13ff915 	stw	r4,-28(fp)
		theColumn = FONT2_XPIXELS;

		for (row = 0; row < theRow; row++) {
			pixels = Font10x14[theCharacter][row]; // get the pixels for row 0 of the character to be displayed
			BitMask = 512; // set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for (column = 0; column < theColumn;) {
 1009764:	e0bffe17 	ldw	r2,-8(fp)
 1009768:	e0fff617 	ldw	r3,-40(fp)
 100976c:	10ffdb16 	blt	r2,r3,10096dc <OutGraphicsCharFont2a+0x10c>
			&& ((short) (theCharacter) <= (short) ('~'))) { // if printable character
		theCharacter -= 0x20; // subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT2_YPIXELS;
		theColumn = FONT2_XPIXELS;

		for (row = 0; row < theRow; row++) {
 1009770:	e13fff17 	ldw	r4,-4(fp)
 1009774:	21000044 	addi	r4,r4,1
 1009778:	e13fff15 	stw	r4,-4(fp)
 100977c:	e0bfff17 	ldw	r2,-4(fp)
 1009780:	e0fff717 	ldw	r3,-36(fp)
 1009784:	10ffc616 	blt	r2,r3,10096a0 <OutGraphicsCharFont2a+0xd0>
				column++;
				BitMask = BitMask >> 1;
			}
		}
	}
}
 1009788:	e037883a 	mov	sp,fp
 100978c:	dfc00117 	ldw	ra,4(sp)
 1009790:	df000017 	ldw	fp,0(sp)
 1009794:	dec00204 	addi	sp,sp,8
 1009798:	f800283a 	ret

0100979c <Init_GPS>:
//DE2 Display variables
char seven_seg_decode_table[] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D,
		0x07, 0x7F, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
char hex_segments[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

void Init_GPS(void) {
 100979c:	deffff04 	addi	sp,sp,-4
 10097a0:	df000015 	stw	fp,0(sp)
 10097a4:	d839883a 	mov	fp,sp

	GPS_Baud = 0x05;
 10097a8:	00e10034 	movhi	r3,33792
 10097ac:	18c08504 	addi	r3,r3,532
 10097b0:	00800144 	movi	r2,5
 10097b4:	18800005 	stb	r2,0(r3)
	GPS_Control = 0x15;
 10097b8:	00e10034 	movhi	r3,33792
 10097bc:	18c08404 	addi	r3,r3,528
 10097c0:	00800544 	movi	r2,21
 10097c4:	18800005 	stb	r2,0(r3)

}
 10097c8:	e037883a 	mov	sp,fp
 10097cc:	df000017 	ldw	fp,0(sp)
 10097d0:	dec00104 	addi	sp,sp,4
 10097d4:	f800283a 	ret

010097d8 <GetData>:

char GetData(void) {
 10097d8:	deffff04 	addi	sp,sp,-4
 10097dc:	df000015 	stw	fp,0(sp)
 10097e0:	d839883a 	mov	fp,sp

	while ((GPS_Status & 0x01) != 0x01)
 10097e4:	00a10034 	movhi	r2,33792
 10097e8:	10808404 	addi	r2,r2,528
 10097ec:	10800003 	ldbu	r2,0(r2)
 10097f0:	10803fcc 	andi	r2,r2,255
 10097f4:	1080004c 	andi	r2,r2,1
 10097f8:	1005003a 	cmpeq	r2,r2,zero
 10097fc:	103ff91e 	bne	r2,zero,10097e4 <GetData+0xc>
		;
	return GPS_RxData;
 1009800:	00a10034 	movhi	r2,33792
 1009804:	10808484 	addi	r2,r2,530
 1009808:	10800003 	ldbu	r2,0(r2)
 100980c:	10803fcc 	andi	r2,r2,255
 1009810:	1080201c 	xori	r2,r2,128
 1009814:	10bfe004 	addi	r2,r2,-128

}
 1009818:	e037883a 	mov	sp,fp
 100981c:	df000017 	ldw	fp,0(sp)
 1009820:	dec00104 	addi	sp,sp,4
 1009824:	f800283a 	ret

01009828 <putcharGPS>:

void putcharGPS(int c) {
 1009828:	defffe04 	addi	sp,sp,-8
 100982c:	df000115 	stw	fp,4(sp)
 1009830:	df000104 	addi	fp,sp,4
 1009834:	e13fff15 	stw	r4,-4(fp)

	while ((GPS_Status & 0x02) != 0x02)
 1009838:	00a10034 	movhi	r2,33792
 100983c:	10808404 	addi	r2,r2,528
 1009840:	10800003 	ldbu	r2,0(r2)
 1009844:	10803fcc 	andi	r2,r2,255
 1009848:	1080008c 	andi	r2,r2,2
 100984c:	1005003a 	cmpeq	r2,r2,zero
 1009850:	103ff91e 	bne	r2,zero,1009838 <putcharGPS+0x10>
		;
	GPS_TxData = c;
 1009854:	00a10034 	movhi	r2,33792
 1009858:	10808484 	addi	r2,r2,530
 100985c:	e0ffff17 	ldw	r3,-4(fp)
 1009860:	10c00005 	stb	r3,0(r2)

}
 1009864:	e037883a 	mov	sp,fp
 1009868:	df000017 	ldw	fp,0(sp)
 100986c:	dec00104 	addi	sp,sp,4
 1009870:	f800283a 	ret

01009874 <putString>:

void putString(char *s) {
 1009874:	defffc04 	addi	sp,sp,-16
 1009878:	dfc00315 	stw	ra,12(sp)
 100987c:	df000215 	stw	fp,8(sp)
 1009880:	df000204 	addi	fp,sp,8
 1009884:	e13fff15 	stw	r4,-4(fp)
	char i;
	while ((i = *s) != 0) {
 1009888:	00000506 	br	10098a0 <putString+0x2c>

		putcharGPS(i);
 100988c:	e13ffe07 	ldb	r4,-8(fp)
 1009890:	10098280 	call	1009828 <putcharGPS>
		s++;
 1009894:	e0bfff17 	ldw	r2,-4(fp)
 1009898:	10800044 	addi	r2,r2,1
 100989c:	e0bfff15 	stw	r2,-4(fp)

}

void putString(char *s) {
	char i;
	while ((i = *s) != 0) {
 10098a0:	e0bfff17 	ldw	r2,-4(fp)
 10098a4:	10800003 	ldbu	r2,0(r2)
 10098a8:	e0bffe05 	stb	r2,-8(fp)
 10098ac:	e0bffe07 	ldb	r2,-8(fp)
 10098b0:	1004c03a 	cmpne	r2,r2,zero
 10098b4:	103ff51e 	bne	r2,zero,100988c <putString+0x18>

		putcharGPS(i);
		s++;

	}
}
 10098b8:	e037883a 	mov	sp,fp
 10098bc:	dfc00117 	ldw	ra,4(sp)
 10098c0:	df000017 	ldw	fp,0(sp)
 10098c4:	dec00204 	addi	sp,sp,8
 10098c8:	f800283a 	ret

010098cc <StopLogging>:

void StopLogging(void) {
 10098cc:	defffd04 	addi	sp,sp,-12
 10098d0:	dfc00215 	stw	ra,8(sp)
 10098d4:	df000115 	stw	fp,4(sp)
 10098d8:	df000104 	addi	fp,sp,4
	char *buff = "$PMTK185,1";
 10098dc:	008040f4 	movhi	r2,259
 10098e0:	10912804 	addi	r2,r2,17568
 10098e4:	e0bfff15 	stw	r2,-4(fp)
	putString(buff);
 10098e8:	e13fff17 	ldw	r4,-4(fp)
 10098ec:	10098740 	call	1009874 <putString>

}
 10098f0:	e037883a 	mov	sp,fp
 10098f4:	dfc00117 	ldw	ra,4(sp)
 10098f8:	df000017 	ldw	fp,0(sp)
 10098fc:	dec00204 	addi	sp,sp,8
 1009900:	f800283a 	ret

01009904 <ClearLogging>:

void ClearLogging(void) {
 1009904:	defffd04 	addi	sp,sp,-12
 1009908:	dfc00215 	stw	ra,8(sp)
 100990c:	df000115 	stw	fp,4(sp)
 1009910:	df000104 	addi	fp,sp,4
	char *buff = "$PMTK184,1";
 1009914:	008040f4 	movhi	r2,259
 1009918:	10912b04 	addi	r2,r2,17580
 100991c:	e0bfff15 	stw	r2,-4(fp)
	putString(buff);
 1009920:	e13fff17 	ldw	r4,-4(fp)
 1009924:	10098740 	call	1009874 <putString>
}
 1009928:	e037883a 	mov	sp,fp
 100992c:	dfc00117 	ldw	ra,4(sp)
 1009930:	df000017 	ldw	fp,0(sp)
 1009934:	dec00204 	addi	sp,sp,8
 1009938:	f800283a 	ret

0100993c <StartLogger>:

void StartLogger(void) {
 100993c:	defffd04 	addi	sp,sp,-12
 1009940:	dfc00215 	stw	ra,8(sp)
 1009944:	df000115 	stw	fp,4(sp)
 1009948:	df000104 	addi	fp,sp,4
	char *buff = "$PMTK186,1";
 100994c:	008040f4 	movhi	r2,259
 1009950:	10912e04 	addi	r2,r2,17592
 1009954:	e0bfff15 	stw	r2,-4(fp)
	putString(buff);
 1009958:	e13fff17 	ldw	r4,-4(fp)
 100995c:	10098740 	call	1009874 <putString>

}
 1009960:	e037883a 	mov	sp,fp
 1009964:	dfc00117 	ldw	ra,4(sp)
 1009968:	df000017 	ldw	fp,0(sp)
 100996c:	dec00204 	addi	sp,sp,8
 1009970:	f800283a 	ret

01009974 <FloatToLatitudeConversion>:

char *FloatToLatitudeConversion(int x)
{
 1009974:	defffb04 	addi	sp,sp,-20
 1009978:	dfc00415 	stw	ra,16(sp)
 100997c:	df000315 	stw	fp,12(sp)
 1009980:	df000304 	addi	fp,sp,12
 1009984:	e13fff15 	stw	r4,-4(fp)
	static char buff[100];
	float *ptr = (float *) (&x); // cast int to float
 1009988:	e0bfff04 	addi	r2,fp,-4
 100998c:	e0bffe15 	stw	r2,-8(fp)
	float f = *ptr; // get the float
 1009990:	e0bffe17 	ldw	r2,-8(fp)
 1009994:	10800017 	ldw	r2,0(r2)
 1009998:	e0bffd15 	stw	r2,-12(fp)
	sprintf(buff, "%2.4f", f); // write in string to an array
 100999c:	e13ffd17 	ldw	r4,-12(fp)
 10099a0:	101253c0 	call	101253c <__extendsfdf2>
 10099a4:	100f883a 	mov	r7,r2
 10099a8:	1811883a 	mov	r8,r3
 10099ac:	01004134 	movhi	r4,260
 10099b0:	21231d04 	addi	r4,r4,-29580
 10099b4:	014040f4 	movhi	r5,259
 10099b8:	29513104 	addi	r5,r5,17604
 10099bc:	380d883a 	mov	r6,r7
 10099c0:	400f883a 	mov	r7,r8
 10099c4:	10159040 	call	1015904 <sprintf>
	return buff;
 10099c8:	00804134 	movhi	r2,260
 10099cc:	10a31d04 	addi	r2,r2,-29580
}
 10099d0:	e037883a 	mov	sp,fp
 10099d4:	dfc00117 	ldw	ra,4(sp)
 10099d8:	df000017 	ldw	fp,0(sp)
 10099dc:	dec00204 	addi	sp,sp,8
 10099e0:	f800283a 	ret

010099e4 <FloatToLongitudeConversion>:
char *FloatToLongitudeConversion(int x)
{
 10099e4:	defffb04 	addi	sp,sp,-20
 10099e8:	dfc00415 	stw	ra,16(sp)
 10099ec:	df000315 	stw	fp,12(sp)
 10099f0:	df000304 	addi	fp,sp,12
 10099f4:	e13fff15 	stw	r4,-4(fp)
	static char buff[100];
	float *ptr = (float *) (&x);
 10099f8:	e0bfff04 	addi	r2,fp,-4
 10099fc:	e0bffe15 	stw	r2,-8(fp)
	float f = *ptr;
 1009a00:	e0bffe17 	ldw	r2,-8(fp)
 1009a04:	10800017 	ldw	r2,0(r2)
 1009a08:	e0bffd15 	stw	r2,-12(fp)
	sprintf(buff, "%3.4f", f);
 1009a0c:	e13ffd17 	ldw	r4,-12(fp)
 1009a10:	101253c0 	call	101253c <__extendsfdf2>
 1009a14:	100f883a 	mov	r7,r2
 1009a18:	1811883a 	mov	r8,r3
 1009a1c:	01004134 	movhi	r4,260
 1009a20:	21233604 	addi	r4,r4,-29480
 1009a24:	014040f4 	movhi	r5,259
 1009a28:	29513304 	addi	r5,r5,17612
 1009a2c:	380d883a 	mov	r6,r7
 1009a30:	400f883a 	mov	r7,r8
 1009a34:	10159040 	call	1015904 <sprintf>
	return buff;
 1009a38:	00804134 	movhi	r2,260
 1009a3c:	10a33604 	addi	r2,r2,-29480
}
 1009a40:	e037883a 	mov	sp,fp
 1009a44:	dfc00117 	ldw	ra,4(sp)
 1009a48:	df000017 	ldw	fp,0(sp)
 1009a4c:	dec00204 	addi	sp,sp,8
 1009a50:	f800283a 	ret

01009a54 <swapEndian>:

int swapEndian(char *s) {
 1009a54:	defffc04 	addi	sp,sp,-16
 1009a58:	dfc00315 	stw	ra,12(sp)
 1009a5c:	df000215 	stw	fp,8(sp)
 1009a60:	df000204 	addi	fp,sp,8
 1009a64:	e13ffe15 	stw	r4,-8(fp)
	register int val;
	val = strtoul(s, NULL, 16); // convert to 4 byte int form in base 16
 1009a68:	e13ffe17 	ldw	r4,-8(fp)
 1009a6c:	000b883a 	mov	r5,zero
 1009a70:	01800404 	movi	r6,16
 1009a74:	1017aa40 	call	1017aa4 <strtoul>
 1009a78:	e0bfff15 	stw	r2,-4(fp)
	val = ((val << 8) & 0xFF00FF00) | ((val >> 8) & 0xFF00FF);
 1009a7c:	e0ffff17 	ldw	r3,-4(fp)
 1009a80:	1804923a 	slli	r2,r3,8
 1009a84:	1007883a 	mov	r3,r2
 1009a88:	00bfc074 	movhi	r2,65281
 1009a8c:	10bfc004 	addi	r2,r2,-256
 1009a90:	1888703a 	and	r4,r3,r2
 1009a94:	e0ffff17 	ldw	r3,-4(fp)
 1009a98:	1805d23a 	srai	r2,r3,8
 1009a9c:	1007883a 	mov	r3,r2
 1009aa0:	00803ff4 	movhi	r2,255
 1009aa4:	10803fc4 	addi	r2,r2,255
 1009aa8:	1884703a 	and	r2,r3,r2
 1009aac:	2084b03a 	or	r2,r4,r2
 1009ab0:	e0bfff15 	stw	r2,-4(fp)
	val = (val << 16) | ((val >> 16) & 0xFFFF);
 1009ab4:	e13fff17 	ldw	r4,-4(fp)
 1009ab8:	2006943a 	slli	r3,r4,16
 1009abc:	e13fff17 	ldw	r4,-4(fp)
 1009ac0:	2005d43a 	srai	r2,r4,16
 1009ac4:	10bfffcc 	andi	r2,r2,65535
 1009ac8:	1886b03a 	or	r3,r3,r2
 1009acc:	e0ffff15 	stw	r3,-4(fp)
	return val;
 1009ad0:	e0bfff17 	ldw	r2,-4(fp)
}
 1009ad4:	e037883a 	mov	sp,fp
 1009ad8:	dfc00117 	ldw	ra,4(sp)
 1009adc:	df000017 	ldw	fp,0(sp)
 1009ae0:	dec00204 	addi	sp,sp,8
 1009ae4:	f800283a 	ret

01009ae8 <checkBuff>:

int checkBuff(char *buff) {
 1009ae8:	defff804 	addi	sp,sp,-32
 1009aec:	dfc00715 	stw	ra,28(sp)
 1009af0:	df000615 	stw	fp,24(sp)
 1009af4:	df000604 	addi	fp,sp,24
 1009af8:	e13ffe15 	stw	r4,-8(fp)

	char *check1 = "GPGGA";
 1009afc:	008040f4 	movhi	r2,259
 1009b00:	10913504 	addi	r2,r2,17620
 1009b04:	e0bffc15 	stw	r2,-16(fp)
	char *tempBuff;
	char inputCheck[4];
	tempBuff = inputCheck;
 1009b08:	e0bffd04 	addi	r2,fp,-12
 1009b0c:	e0bffb15 	stw	r2,-20(fp)
	int i;
	for (i = 0; i < 5; i++) {
 1009b10:	e03ffa15 	stw	zero,-24(fp)
 1009b14:	00000d06 	br	1009b4c <checkBuff+0x64>
		*tempBuff++ = buff[i];
 1009b18:	e0bffa17 	ldw	r2,-24(fp)
 1009b1c:	1007883a 	mov	r3,r2
 1009b20:	e0bffe17 	ldw	r2,-8(fp)
 1009b24:	1885883a 	add	r2,r3,r2
 1009b28:	10c00003 	ldbu	r3,0(r2)
 1009b2c:	e0bffb17 	ldw	r2,-20(fp)
 1009b30:	10c00005 	stb	r3,0(r2)
 1009b34:	e0bffb17 	ldw	r2,-20(fp)
 1009b38:	10800044 	addi	r2,r2,1
 1009b3c:	e0bffb15 	stw	r2,-20(fp)
	char *check1 = "GPGGA";
	char *tempBuff;
	char inputCheck[4];
	tempBuff = inputCheck;
	int i;
	for (i = 0; i < 5; i++) {
 1009b40:	e0bffa17 	ldw	r2,-24(fp)
 1009b44:	10800044 	addi	r2,r2,1
 1009b48:	e0bffa15 	stw	r2,-24(fp)
 1009b4c:	e0bffa17 	ldw	r2,-24(fp)
 1009b50:	10800150 	cmplti	r2,r2,5
 1009b54:	103ff01e 	bne	r2,zero,1009b18 <checkBuff+0x30>
		*tempBuff++ = buff[i];
	}
	*tempBuff = '\0';
 1009b58:	e0bffb17 	ldw	r2,-20(fp)
 1009b5c:	10000005 	stb	zero,0(r2)
	if (strcmp(inputCheck, check1) == 0) {
 1009b60:	e13ffd04 	addi	r4,fp,-12
 1009b64:	e17ffc17 	ldw	r5,-16(fp)
 1009b68:	1015bb40 	call	1015bb4 <strcmp>
 1009b6c:	1004c03a 	cmpne	r2,r2,zero
 1009b70:	1000031e 	bne	r2,zero,1009b80 <checkBuff+0x98>
		return 1;
 1009b74:	00800044 	movi	r2,1
 1009b78:	e0bfff15 	stw	r2,-4(fp)
 1009b7c:	00000106 	br	1009b84 <checkBuff+0x9c>
	}
	return 0;
 1009b80:	e03fff15 	stw	zero,-4(fp)
 1009b84:	e0bfff17 	ldw	r2,-4(fp)
}
 1009b88:	e037883a 	mov	sp,fp
 1009b8c:	dfc00117 	ldw	ra,4(sp)
 1009b90:	df000017 	ldw	fp,0(sp)
 1009b94:	dec00204 	addi	sp,sp,8
 1009b98:	f800283a 	ret

01009b9c <printTime>:

void printTime(int hour, int minute, int seconds, char buff[256],
		char* secondBuff, char* minuteBuff, char* timeBuff) {
 1009b9c:	deffeb04 	addi	sp,sp,-84
 1009ba0:	dfc01415 	stw	ra,80(sp)
 1009ba4:	df001315 	stw	fp,76(sp)
 1009ba8:	df001304 	addi	fp,sp,76
 1009bac:	e13ffc15 	stw	r4,-16(fp)
 1009bb0:	e17ffd15 	stw	r5,-12(fp)
 1009bb4:	e1bffe15 	stw	r6,-8(fp)
 1009bb8:	e1ffff15 	stw	r7,-4(fp)
	//Defining the pointer for the HEX displays
	volatile int * HEX01_ptr = (int *) HEX01;
 1009bbc:	00844404 	movi	r2,4368
 1009bc0:	e0bffb15 	stw	r2,-20(fp)
	volatile int * HEX23_ptr = (int *) HEX23;
 1009bc4:	00844004 	movi	r2,4352
 1009bc8:	e0bffa15 	stw	r2,-24(fp)
	volatile int * HEX45_ptr = (int *) HEX45;
 1009bcc:	00842c04 	movi	r2,4272
 1009bd0:	e0bff915 	stw	r2,-28(fp)
	volatile int * HEX67_ptr = (int *) HEX67;
 1009bd4:	00842804 	movi	r2,4256
 1009bd8:	e0bff815 	stw	r2,-32(fp)
	alt_up_character_lcd_dev * char_lcd_dev;
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev("/dev/character_lcd_0");
 1009bdc:	010040f4 	movhi	r4,259
 1009be0:	21113704 	addi	r4,r4,17628
 1009be4:	102786c0 	call	102786c <alt_up_character_lcd_open_dev>
 1009be8:	e0bff715 	stw	r2,-36(fp)
	if (char_lcd_dev == NULL)
 1009bec:	e0bff717 	ldw	r2,-36(fp)
 1009bf0:	1004c03a 	cmpne	r2,r2,zero
 1009bf4:	1000041e 	bne	r2,zero,1009c08 <printTime+0x6c>
		alt_printf("Error: could not open character LCD device\n");
 1009bf8:	010040f4 	movhi	r4,259
 1009bfc:	21113d04 	addi	r4,r4,17652
 1009c00:	1021c840 	call	1021c84 <alt_printf>
 1009c04:	00000306 	br	1009c14 <printTime+0x78>
	else
		alt_printf("Opened character LCD device\n");
 1009c08:	010040f4 	movhi	r4,259
 1009c0c:	21114804 	addi	r4,r4,17696
 1009c10:	1021c840 	call	1021c84 <alt_printf>
	/* Initialize the character display */
	alt_up_character_lcd_init(char_lcd_dev);
 1009c14:	e13ff717 	ldw	r4,-36(fp)
 1009c18:	10278380 	call	1027838 <alt_up_character_lcd_init>
	char *ptrtime;
	char *ptrMinute;
	char *ptrSeconds;

	ptrtime = timeBuff;
 1009c1c:	e0800417 	ldw	r2,16(fp)
 1009c20:	e0bff615 	stw	r2,-40(fp)
	ptrMinute = minuteBuff;
 1009c24:	e0800317 	ldw	r2,12(fp)
 1009c28:	e0bff515 	stw	r2,-44(fp)
	ptrSeconds = secondBuff;
 1009c2c:	e0800217 	ldw	r2,8(fp)
 1009c30:	e0bff415 	stw	r2,-48(fp)
	//parse hour from the data
	int i;
	for (i = 0; i < 2; i++) {
 1009c34:	e03ff315 	stw	zero,-52(fp)
 1009c38:	00000f06 	br	1009c78 <printTime+0xdc>
		*ptrtime++ = buff[hour + i];
 1009c3c:	e0fffc17 	ldw	r3,-16(fp)
 1009c40:	e0bff317 	ldw	r2,-52(fp)
 1009c44:	1885883a 	add	r2,r3,r2
 1009c48:	1007883a 	mov	r3,r2
 1009c4c:	e0bfff17 	ldw	r2,-4(fp)
 1009c50:	1885883a 	add	r2,r3,r2
 1009c54:	10c00003 	ldbu	r3,0(r2)
 1009c58:	e0bff617 	ldw	r2,-40(fp)
 1009c5c:	10c00005 	stb	r3,0(r2)
 1009c60:	e0bff617 	ldw	r2,-40(fp)
 1009c64:	10800044 	addi	r2,r2,1
 1009c68:	e0bff615 	stw	r2,-40(fp)
	ptrtime = timeBuff;
	ptrMinute = minuteBuff;
	ptrSeconds = secondBuff;
	//parse hour from the data
	int i;
	for (i = 0; i < 2; i++) {
 1009c6c:	e0bff317 	ldw	r2,-52(fp)
 1009c70:	10800044 	addi	r2,r2,1
 1009c74:	e0bff315 	stw	r2,-52(fp)
 1009c78:	e0bff317 	ldw	r2,-52(fp)
 1009c7c:	10800090 	cmplti	r2,r2,2
 1009c80:	103fee1e 	bne	r2,zero,1009c3c <printTime+0xa0>
		*ptrtime++ = buff[hour + i];

	}
	*ptrtime = '\0';
 1009c84:	e0bff617 	ldw	r2,-40(fp)
 1009c88:	10000005 	stb	zero,0(r2)
	int maskingHour = timeBuff[0] & 0x0f;
 1009c8c:	e0800417 	ldw	r2,16(fp)
 1009c90:	10800003 	ldbu	r2,0(r2)
 1009c94:	10803fcc 	andi	r2,r2,255
 1009c98:	108003cc 	andi	r2,r2,15
 1009c9c:	e0bff215 	stw	r2,-56(fp)
	int maskingHour2 = timeBuff[1] & 0x0f;
 1009ca0:	e0800417 	ldw	r2,16(fp)
 1009ca4:	10800044 	addi	r2,r2,1
 1009ca8:	10800003 	ldbu	r2,0(r2)
 1009cac:	10803fcc 	andi	r2,r2,255
 1009cb0:	108003cc 	andi	r2,r2,15
 1009cb4:	e0bff115 	stw	r2,-60(fp)
	maskingHour = (maskingHour << 4) + maskingHour2;
 1009cb8:	e0bff217 	ldw	r2,-56(fp)
 1009cbc:	1006913a 	slli	r3,r2,4
 1009cc0:	e0bff117 	ldw	r2,-60(fp)
 1009cc4:	1885883a 	add	r2,r3,r2
 1009cc8:	e0bff215 	stw	r2,-56(fp)
	//writes it to the hex
	*(HEX67_ptr) = maskingHour;
 1009ccc:	e0fff817 	ldw	r3,-32(fp)
 1009cd0:	e0bff217 	ldw	r2,-56(fp)
 1009cd4:	18800015 	stw	r2,0(r3)
	*ptrtime++ = ':';
 1009cd8:	e0fff617 	ldw	r3,-40(fp)
 1009cdc:	00800e84 	movi	r2,58
 1009ce0:	18800005 	stb	r2,0(r3)
 1009ce4:	e0bff617 	ldw	r2,-40(fp)
 1009ce8:	10800044 	addi	r2,r2,1
 1009cec:	e0bff615 	stw	r2,-40(fp)
	*ptrtime = '\0';
 1009cf0:	e0bff617 	ldw	r2,-40(fp)
 1009cf4:	10000005 	stb	zero,0(r2)
	//parse the minute
	for (i = 0; i < 2; i++) {
 1009cf8:	e03ff315 	stw	zero,-52(fp)
 1009cfc:	00000f06 	br	1009d3c <printTime+0x1a0>

		*ptrMinute++ = buff[minute + i];
 1009d00:	e0fffd17 	ldw	r3,-12(fp)
 1009d04:	e0bff317 	ldw	r2,-52(fp)
 1009d08:	1885883a 	add	r2,r3,r2
 1009d0c:	1007883a 	mov	r3,r2
 1009d10:	e0bfff17 	ldw	r2,-4(fp)
 1009d14:	1885883a 	add	r2,r3,r2
 1009d18:	10c00003 	ldbu	r3,0(r2)
 1009d1c:	e0bff517 	ldw	r2,-44(fp)
 1009d20:	10c00005 	stb	r3,0(r2)
 1009d24:	e0bff517 	ldw	r2,-44(fp)
 1009d28:	10800044 	addi	r2,r2,1
 1009d2c:	e0bff515 	stw	r2,-44(fp)
	//writes it to the hex
	*(HEX67_ptr) = maskingHour;
	*ptrtime++ = ':';
	*ptrtime = '\0';
	//parse the minute
	for (i = 0; i < 2; i++) {
 1009d30:	e0bff317 	ldw	r2,-52(fp)
 1009d34:	10800044 	addi	r2,r2,1
 1009d38:	e0bff315 	stw	r2,-52(fp)
 1009d3c:	e0bff317 	ldw	r2,-52(fp)
 1009d40:	10800090 	cmplti	r2,r2,2
 1009d44:	103fee1e 	bne	r2,zero,1009d00 <printTime+0x164>

		*ptrMinute++ = buff[minute + i];
	}
	*ptrMinute = '\0';
 1009d48:	e0bff517 	ldw	r2,-44(fp)
 1009d4c:	10000005 	stb	zero,0(r2)
	int maskingMinute = minuteBuff[0] & 0x0f;
 1009d50:	e0800317 	ldw	r2,12(fp)
 1009d54:	10800003 	ldbu	r2,0(r2)
 1009d58:	10803fcc 	andi	r2,r2,255
 1009d5c:	108003cc 	andi	r2,r2,15
 1009d60:	e0bff015 	stw	r2,-64(fp)
	int maskingMinute2 = minuteBuff[1] & 0x0f;
 1009d64:	e0800317 	ldw	r2,12(fp)
 1009d68:	10800044 	addi	r2,r2,1
 1009d6c:	10800003 	ldbu	r2,0(r2)
 1009d70:	10803fcc 	andi	r2,r2,255
 1009d74:	108003cc 	andi	r2,r2,15
 1009d78:	e0bfef15 	stw	r2,-68(fp)
	maskingMinute = (maskingMinute << 4) + maskingMinute2;
 1009d7c:	e0bff017 	ldw	r2,-64(fp)
 1009d80:	1006913a 	slli	r3,r2,4
 1009d84:	e0bfef17 	ldw	r2,-68(fp)
 1009d88:	1885883a 	add	r2,r3,r2
 1009d8c:	e0bff015 	stw	r2,-64(fp)
	//writes it to the hex
	*(HEX45_ptr) = maskingMinute;
 1009d90:	e0fff917 	ldw	r3,-28(fp)
 1009d94:	e0bff017 	ldw	r2,-64(fp)
 1009d98:	18800015 	stw	r2,0(r3)
	*ptrMinute++ = ':';
 1009d9c:	e0fff517 	ldw	r3,-44(fp)
 1009da0:	00800e84 	movi	r2,58
 1009da4:	18800005 	stb	r2,0(r3)
 1009da8:	e0bff517 	ldw	r2,-44(fp)
 1009dac:	10800044 	addi	r2,r2,1
 1009db0:	e0bff515 	stw	r2,-44(fp)
	*ptrMinute = '\0';
 1009db4:	e0bff517 	ldw	r2,-44(fp)
 1009db8:	10000005 	stb	zero,0(r2)
	//parse the second from the GPS data
	for (i = 0; i < 2; i++) {
 1009dbc:	e03ff315 	stw	zero,-52(fp)
 1009dc0:	00000f06 	br	1009e00 <printTime+0x264>
		*ptrSeconds++ = buff[seconds + i];
 1009dc4:	e0fffe17 	ldw	r3,-8(fp)
 1009dc8:	e0bff317 	ldw	r2,-52(fp)
 1009dcc:	1885883a 	add	r2,r3,r2
 1009dd0:	1007883a 	mov	r3,r2
 1009dd4:	e0bfff17 	ldw	r2,-4(fp)
 1009dd8:	1885883a 	add	r2,r3,r2
 1009ddc:	10c00003 	ldbu	r3,0(r2)
 1009de0:	e0bff417 	ldw	r2,-48(fp)
 1009de4:	10c00005 	stb	r3,0(r2)
 1009de8:	e0bff417 	ldw	r2,-48(fp)
 1009dec:	10800044 	addi	r2,r2,1
 1009df0:	e0bff415 	stw	r2,-48(fp)
	//writes it to the hex
	*(HEX45_ptr) = maskingMinute;
	*ptrMinute++ = ':';
	*ptrMinute = '\0';
	//parse the second from the GPS data
	for (i = 0; i < 2; i++) {
 1009df4:	e0bff317 	ldw	r2,-52(fp)
 1009df8:	10800044 	addi	r2,r2,1
 1009dfc:	e0bff315 	stw	r2,-52(fp)
 1009e00:	e0bff317 	ldw	r2,-52(fp)
 1009e04:	10800090 	cmplti	r2,r2,2
 1009e08:	103fee1e 	bne	r2,zero,1009dc4 <printTime+0x228>
		*ptrSeconds++ = buff[seconds + i];
	}

	*ptrSeconds = '\0';
 1009e0c:	e0bff417 	ldw	r2,-48(fp)
 1009e10:	10000005 	stb	zero,0(r2)
	int masking = secondBuff[0] & 0x0f;
 1009e14:	e0800217 	ldw	r2,8(fp)
 1009e18:	10800003 	ldbu	r2,0(r2)
 1009e1c:	10803fcc 	andi	r2,r2,255
 1009e20:	108003cc 	andi	r2,r2,15
 1009e24:	e0bfee15 	stw	r2,-72(fp)
	int masking2 = secondBuff[1] & 0x0f;
 1009e28:	e0800217 	ldw	r2,8(fp)
 1009e2c:	10800044 	addi	r2,r2,1
 1009e30:	10800003 	ldbu	r2,0(r2)
 1009e34:	10803fcc 	andi	r2,r2,255
 1009e38:	108003cc 	andi	r2,r2,15
 1009e3c:	e0bfed15 	stw	r2,-76(fp)
	masking = (masking << 4) + masking2;
 1009e40:	e0bfee17 	ldw	r2,-72(fp)
 1009e44:	1006913a 	slli	r3,r2,4
 1009e48:	e0bfed17 	ldw	r2,-76(fp)
 1009e4c:	1885883a 	add	r2,r3,r2
 1009e50:	e0bfee15 	stw	r2,-72(fp)
	//writes it to the hex
	*(HEX01_ptr) = masking;
 1009e54:	e0fffb17 	ldw	r3,-20(fp)
 1009e58:	e0bfee17 	ldw	r2,-72(fp)
 1009e5c:	18800015 	stw	r2,0(r3)
	//writes it to altera LCD
	alt_up_character_lcd_string(char_lcd_dev, timeBuff);
 1009e60:	e13ff717 	ldw	r4,-36(fp)
 1009e64:	e1400417 	ldw	r5,16(fp)
 1009e68:	10279240 	call	1027924 <alt_up_character_lcd_string>
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 3, 0);
 1009e6c:	e13ff717 	ldw	r4,-36(fp)
 1009e70:	014000c4 	movi	r5,3
 1009e74:	000d883a 	mov	r6,zero
 1009e78:	10279e80 	call	10279e8 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, minuteBuff);
 1009e7c:	e13ff717 	ldw	r4,-36(fp)
 1009e80:	e1400317 	ldw	r5,12(fp)
 1009e84:	10279240 	call	1027924 <alt_up_character_lcd_string>
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 6, 0);
 1009e88:	e13ff717 	ldw	r4,-36(fp)
 1009e8c:	01400184 	movi	r5,6
 1009e90:	000d883a 	mov	r6,zero
 1009e94:	10279e80 	call	10279e8 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, secondBuff);
 1009e98:	e13ff717 	ldw	r4,-36(fp)
 1009e9c:	e1400217 	ldw	r5,8(fp)
 1009ea0:	10279240 	call	1027924 <alt_up_character_lcd_string>
}
 1009ea4:	e037883a 	mov	sp,fp
 1009ea8:	dfc00117 	ldw	ra,4(sp)
 1009eac:	df000017 	ldw	fp,0(sp)
 1009eb0:	dec00204 	addi	sp,sp,8
 1009eb4:	f800283a 	ret

01009eb8 <printCoordinates>:

void printCoordinates(int latStart, int longStart, char buff[256],
		char* latitude, char* longitude) {
 1009eb8:	deffe604 	addi	sp,sp,-104
 1009ebc:	dfc01915 	stw	ra,100(sp)
 1009ec0:	df001815 	stw	fp,96(sp)
 1009ec4:	df001804 	addi	fp,sp,96
 1009ec8:	e13ffc15 	stw	r4,-16(fp)
 1009ecc:	e17ffd15 	stw	r5,-12(fp)
 1009ed0:	e1bffe15 	stw	r6,-8(fp)
 1009ed4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_character_lcd_dev * char_lcd_dev;
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev("/dev/character_lcd_0");
 1009ed8:	010040f4 	movhi	r4,259
 1009edc:	21113704 	addi	r4,r4,17628
 1009ee0:	102786c0 	call	102786c <alt_up_character_lcd_open_dev>
 1009ee4:	e0bff415 	stw	r2,-48(fp)
	if (char_lcd_dev == NULL)
 1009ee8:	e0bff417 	ldw	r2,-48(fp)
 1009eec:	1004c03a 	cmpne	r2,r2,zero
 1009ef0:	1000041e 	bne	r2,zero,1009f04 <printCoordinates+0x4c>
		alt_printf("Error: could not open character LCD device\n");
 1009ef4:	010040f4 	movhi	r4,259
 1009ef8:	21113d04 	addi	r4,r4,17652
 1009efc:	1021c840 	call	1021c84 <alt_printf>
 1009f00:	00000306 	br	1009f10 <printCoordinates+0x58>
	else
		alt_printf("Opened character LCD device\n");
 1009f04:	010040f4 	movhi	r4,259
 1009f08:	21114804 	addi	r4,r4,17696
 1009f0c:	1021c840 	call	1021c84 <alt_printf>
	/* Initialize the character display */
	alt_up_character_lcd_init(char_lcd_dev);
 1009f10:	e13ff417 	ldw	r4,-48(fp)
 1009f14:	10278380 	call	1027838 <alt_up_character_lcd_init>
	char latLo[8];
	char lonLo[8];
	char latdir[2];
	char londir[2];

	latdir[0] = buff[27];
 1009f18:	e0bffe17 	ldw	r2,-8(fp)
 1009f1c:	108006c4 	addi	r2,r2,27
 1009f20:	10800003 	ldbu	r2,0(r2)
 1009f24:	e0bffac5 	stb	r2,-21(fp)
	latdir[1] = '\0';
 1009f28:	e03ffb05 	stb	zero,-20(fp)
	londir[0] = buff[40];
 1009f2c:	e0bffe17 	ldw	r2,-8(fp)
 1009f30:	10800a04 	addi	r2,r2,40
 1009f34:	10800003 	ldbu	r2,0(r2)
 1009f38:	e0bffb45 	stb	r2,-19(fp)
	londir[1] = '\0';
 1009f3c:	e03ffb85 	stb	zero,-18(fp)

	// extract hi and low bits
	memcpy(latHi, &buff[17], 2);
 1009f40:	e0bffe17 	ldw	r2,-8(fp)
 1009f44:	10c00444 	addi	r3,r2,17
 1009f48:	e13ff504 	addi	r4,fp,-44
 1009f4c:	18800003 	ldbu	r2,0(r3)
 1009f50:	20800005 	stb	r2,0(r4)
 1009f54:	18800043 	ldbu	r2,1(r3)
 1009f58:	20800045 	stb	r2,1(r4)
	latHi[2] = '\0';
 1009f5c:	e03ff585 	stb	zero,-42(fp)
	memcpy(latLo, &buff[19], 7);
 1009f60:	e0bffe17 	ldw	r2,-8(fp)
 1009f64:	10c004c4 	addi	r3,r2,19
 1009f68:	e13ff6c4 	addi	r4,fp,-37
 1009f6c:	18800003 	ldbu	r2,0(r3)
 1009f70:	20800005 	stb	r2,0(r4)
 1009f74:	18800043 	ldbu	r2,1(r3)
 1009f78:	20800045 	stb	r2,1(r4)
 1009f7c:	18800083 	ldbu	r2,2(r3)
 1009f80:	20800085 	stb	r2,2(r4)
 1009f84:	188000c3 	ldbu	r2,3(r3)
 1009f88:	208000c5 	stb	r2,3(r4)
 1009f8c:	18800103 	ldbu	r2,4(r3)
 1009f90:	20800105 	stb	r2,4(r4)
 1009f94:	18800143 	ldbu	r2,5(r3)
 1009f98:	20800145 	stb	r2,5(r4)
 1009f9c:	18800183 	ldbu	r2,6(r3)
 1009fa0:	20800185 	stb	r2,6(r4)
	latLo[7] = '\0';
 1009fa4:	e03ff885 	stb	zero,-30(fp)
	memcpy(lonHi, &buff[29], 3);
 1009fa8:	e0bffe17 	ldw	r2,-8(fp)
 1009fac:	10c00744 	addi	r3,r2,29
 1009fb0:	e13ff5c4 	addi	r4,fp,-41
 1009fb4:	18800003 	ldbu	r2,0(r3)
 1009fb8:	20800005 	stb	r2,0(r4)
 1009fbc:	18800043 	ldbu	r2,1(r3)
 1009fc0:	20800045 	stb	r2,1(r4)
 1009fc4:	18800083 	ldbu	r2,2(r3)
 1009fc8:	20800085 	stb	r2,2(r4)
	lonHi[3] = '\0';
 1009fcc:	e03ff685 	stb	zero,-38(fp)
	memcpy(lonLo, &buff[32], 7);
 1009fd0:	e0bffe17 	ldw	r2,-8(fp)
 1009fd4:	10c00804 	addi	r3,r2,32
 1009fd8:	e13ff8c4 	addi	r4,fp,-29
 1009fdc:	18800003 	ldbu	r2,0(r3)
 1009fe0:	20800005 	stb	r2,0(r4)
 1009fe4:	18800043 	ldbu	r2,1(r3)
 1009fe8:	20800045 	stb	r2,1(r4)
 1009fec:	18800083 	ldbu	r2,2(r3)
 1009ff0:	20800085 	stb	r2,2(r4)
 1009ff4:	188000c3 	ldbu	r2,3(r3)
 1009ff8:	208000c5 	stb	r2,3(r4)
 1009ffc:	18800103 	ldbu	r2,4(r3)
 100a000:	20800105 	stb	r2,4(r4)
 100a004:	18800143 	ldbu	r2,5(r3)
 100a008:	20800145 	stb	r2,5(r4)
 100a00c:	18800183 	ldbu	r2,6(r3)
 100a010:	20800185 	stb	r2,6(r4)
	lonLo[7] = '\0';
 100a014:	e03ffa85 	stb	zero,-22(fp)
	// convert lattitude to decimal
	double latHiDouble;
	double latLoDouble;
	double latDecimal;

	latHiDouble = atof(latHi);
 100a018:	e13ff504 	addi	r4,fp,-44
 100a01c:	1013d900 	call	1013d90 <atof>
 100a020:	1009883a 	mov	r4,r2
 100a024:	180b883a 	mov	r5,r3
 100a028:	e13ff215 	stw	r4,-56(fp)
 100a02c:	e17ff315 	stw	r5,-52(fp)
	latLoDouble = atof(latLo);
 100a030:	e13ff6c4 	addi	r4,fp,-37
 100a034:	1013d900 	call	1013d90 <atof>
 100a038:	1009883a 	mov	r4,r2
 100a03c:	180b883a 	mov	r5,r3
 100a040:	e13ff015 	stw	r4,-64(fp)
 100a044:	e17ff115 	stw	r5,-60(fp)

	latDecimal = (latHiDouble + (latLoDouble / 60.0));
 100a048:	e13ff017 	ldw	r4,-64(fp)
 100a04c:	e17ff117 	ldw	r5,-60(fp)
 100a050:	000d883a 	mov	r6,zero
 100a054:	01d013b4 	movhi	r7,16462
 100a058:	1012e580 	call	1012e58 <__divdf3>
 100a05c:	1009883a 	mov	r4,r2
 100a060:	180b883a 	mov	r5,r3
 100a064:	2005883a 	mov	r2,r4
 100a068:	2807883a 	mov	r3,r5
 100a06c:	1009883a 	mov	r4,r2
 100a070:	180b883a 	mov	r5,r3
 100a074:	e1bff217 	ldw	r6,-56(fp)
 100a078:	e1fff317 	ldw	r7,-52(fp)
 100a07c:	1012a200 	call	1012a20 <__adddf3>
 100a080:	1009883a 	mov	r4,r2
 100a084:	180b883a 	mov	r5,r3
 100a088:	e13fee15 	stw	r4,-72(fp)
 100a08c:	e17fef15 	stw	r5,-68(fp)
	double lonHiDouble;
	double lonLoDouble;
	double lonDecimal;

	// char to double
	lonHiDouble = atof((const char*) lonHi);
 100a090:	e13ff5c4 	addi	r4,fp,-41
 100a094:	1013d900 	call	1013d90 <atof>
 100a098:	1009883a 	mov	r4,r2
 100a09c:	180b883a 	mov	r5,r3
 100a0a0:	e13fec15 	stw	r4,-80(fp)
 100a0a4:	e17fed15 	stw	r5,-76(fp)
	lonLoDouble = atof((const char*) lonLo);
 100a0a8:	e13ff8c4 	addi	r4,fp,-29
 100a0ac:	1013d900 	call	1013d90 <atof>
 100a0b0:	1009883a 	mov	r4,r2
 100a0b4:	180b883a 	mov	r5,r3
 100a0b8:	e13fea15 	stw	r4,-88(fp)
 100a0bc:	e17feb15 	stw	r5,-84(fp)

	lonDecimal = (lonHiDouble + (lonLoDouble / 60.0));
 100a0c0:	e13fea17 	ldw	r4,-88(fp)
 100a0c4:	e17feb17 	ldw	r5,-84(fp)
 100a0c8:	000d883a 	mov	r6,zero
 100a0cc:	01d013b4 	movhi	r7,16462
 100a0d0:	1012e580 	call	1012e58 <__divdf3>
 100a0d4:	1009883a 	mov	r4,r2
 100a0d8:	180b883a 	mov	r5,r3
 100a0dc:	2005883a 	mov	r2,r4
 100a0e0:	2807883a 	mov	r3,r5
 100a0e4:	1009883a 	mov	r4,r2
 100a0e8:	180b883a 	mov	r5,r3
 100a0ec:	e1bfec17 	ldw	r6,-80(fp)
 100a0f0:	e1ffed17 	ldw	r7,-76(fp)
 100a0f4:	1012a200 	call	1012a20 <__adddf3>
 100a0f8:	1009883a 	mov	r4,r2
 100a0fc:	180b883a 	mov	r5,r3
 100a100:	e13fe815 	stw	r4,-96(fp)
 100a104:	e17fe915 	stw	r5,-92(fp)
	//printf("THE LONGITUDE IN DOUBLE IS: %f\n", lonDecimal);

	sprintf(latitude, "%f,", latDecimal);
 100a108:	e13fff17 	ldw	r4,-4(fp)
 100a10c:	014040f4 	movhi	r5,259
 100a110:	29515004 	addi	r5,r5,17728
 100a114:	e1bfee17 	ldw	r6,-72(fp)
 100a118:	e1ffef17 	ldw	r7,-68(fp)
 100a11c:	10159040 	call	1015904 <sprintf>
	sprintf(longitude, "%f,", lonDecimal);
 100a120:	e1000217 	ldw	r4,8(fp)
 100a124:	014040f4 	movhi	r5,259
 100a128:	29515004 	addi	r5,r5,17728
 100a12c:	e1bfe817 	ldw	r6,-96(fp)
 100a130:	e1ffe917 	ldw	r7,-92(fp)
 100a134:	10159040 	call	1015904 <sprintf>
	// copy the decimal latitude and longitude and add direct flags

	strcat(latitude, latdir);
 100a138:	e17ffac4 	addi	r5,fp,-21
 100a13c:	e13fff17 	ldw	r4,-4(fp)
 100a140:	1015b240 	call	1015b24 <strcat>
	strcat(longitude, londir);
 100a144:	e17ffb44 	addi	r5,fp,-19
 100a148:	e1000217 	ldw	r4,8(fp)
 100a14c:	1015b240 	call	1015b24 <strcat>

	// return the decimal values
	curLat = latDecimal;
 100a150:	e0bfee17 	ldw	r2,-72(fp)
 100a154:	d0a70a15 	stw	r2,-25560(gp)
 100a158:	00c04134 	movhi	r3,260
 100a15c:	18e2f504 	addi	r3,r3,-29740
 100a160:	e0bfef17 	ldw	r2,-68(fp)
 100a164:	18800015 	stw	r2,0(r3)
	curLong = lonDecimal;
 100a168:	e0bfe817 	ldw	r2,-96(fp)
 100a16c:	d0a70f15 	stw	r2,-25540(gp)
 100a170:	00c04134 	movhi	r3,260
 100a174:	18e2fa04 	addi	r3,r3,-29720
 100a178:	e0bfe917 	ldw	r2,-92(fp)
 100a17c:	18800015 	stw	r2,0(r3)

	alt_up_character_lcd_string(char_lcd_dev, latitude);
 100a180:	e13ff417 	ldw	r4,-48(fp)
 100a184:	e17fff17 	ldw	r5,-4(fp)
 100a188:	10279240 	call	1027924 <alt_up_character_lcd_string>
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
 100a18c:	e13ff417 	ldw	r4,-48(fp)
 100a190:	000b883a 	mov	r5,zero
 100a194:	01800044 	movi	r6,1
 100a198:	10279e80 	call	10279e8 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, longitude);
 100a19c:	e13ff417 	ldw	r4,-48(fp)
 100a1a0:	e1400217 	ldw	r5,8(fp)
 100a1a4:	10279240 	call	1027924 <alt_up_character_lcd_string>

}
 100a1a8:	e037883a 	mov	sp,fp
 100a1ac:	dfc00117 	ldw	ra,4(sp)
 100a1b0:	df000017 	ldw	fp,0(sp)
 100a1b4:	dec00204 	addi	sp,sp,8
 100a1b8:	f800283a 	ret

0100a1bc <deg2rad>:

//This code was adapted from https://www.geodatasource.com/developers/c
//It takes in two sets of latitude and longitude coordinates, and returns the distance between the two
//in the specified unit, M for metres, K for kilometres

double deg2rad(double deg) {
 100a1bc:	defffc04 	addi	sp,sp,-16
 100a1c0:	dfc00315 	stw	ra,12(sp)
 100a1c4:	df000215 	stw	fp,8(sp)
 100a1c8:	df000204 	addi	fp,sp,8
 100a1cc:	e13ffe15 	stw	r4,-8(fp)
 100a1d0:	e17fff15 	stw	r5,-4(fp)
	return (deg * pi / 180);
 100a1d4:	e13ffe17 	ldw	r4,-8(fp)
 100a1d8:	e17fff17 	ldw	r5,-4(fp)
 100a1dc:	01951134 	movhi	r6,21572
 100a1e0:	318b4604 	addi	r6,r6,11544
 100a1e4:	01d00274 	movhi	r7,16393
 100a1e8:	39c87ec4 	addi	r7,r7,8699
 100a1ec:	1012a940 	call	1012a94 <__muldf3>
 100a1f0:	1009883a 	mov	r4,r2
 100a1f4:	180b883a 	mov	r5,r3
 100a1f8:	2005883a 	mov	r2,r4
 100a1fc:	2807883a 	mov	r3,r5
 100a200:	1009883a 	mov	r4,r2
 100a204:	180b883a 	mov	r5,r3
 100a208:	000d883a 	mov	r6,zero
 100a20c:	01d019f4 	movhi	r7,16487
 100a210:	39e00004 	addi	r7,r7,-32768
 100a214:	1012e580 	call	1012e58 <__divdf3>
 100a218:	1009883a 	mov	r4,r2
 100a21c:	180b883a 	mov	r5,r3
 100a220:	200d883a 	mov	r6,r4
 100a224:	280f883a 	mov	r7,r5
 100a228:	3007883a 	mov	r3,r6
 100a22c:	3809883a 	mov	r4,r7
}
 100a230:	1805883a 	mov	r2,r3
 100a234:	2007883a 	mov	r3,r4
 100a238:	e037883a 	mov	sp,fp
 100a23c:	dfc00117 	ldw	ra,4(sp)
 100a240:	df000017 	ldw	fp,0(sp)
 100a244:	dec00204 	addi	sp,sp,8
 100a248:	f800283a 	ret

0100a24c <rad2deg>:

double rad2deg(double rad) {
 100a24c:	defffc04 	addi	sp,sp,-16
 100a250:	dfc00315 	stw	ra,12(sp)
 100a254:	df000215 	stw	fp,8(sp)
 100a258:	df000204 	addi	fp,sp,8
 100a25c:	e13ffe15 	stw	r4,-8(fp)
 100a260:	e17fff15 	stw	r5,-4(fp)
	return (rad * 180 / pi);
 100a264:	e13ffe17 	ldw	r4,-8(fp)
 100a268:	e17fff17 	ldw	r5,-4(fp)
 100a26c:	000d883a 	mov	r6,zero
 100a270:	01d019f4 	movhi	r7,16487
 100a274:	39e00004 	addi	r7,r7,-32768
 100a278:	1012a940 	call	1012a94 <__muldf3>
 100a27c:	1009883a 	mov	r4,r2
 100a280:	180b883a 	mov	r5,r3
 100a284:	2005883a 	mov	r2,r4
 100a288:	2807883a 	mov	r3,r5
 100a28c:	1009883a 	mov	r4,r2
 100a290:	180b883a 	mov	r5,r3
 100a294:	01951134 	movhi	r6,21572
 100a298:	318b4604 	addi	r6,r6,11544
 100a29c:	01d00274 	movhi	r7,16393
 100a2a0:	39c87ec4 	addi	r7,r7,8699
 100a2a4:	1012e580 	call	1012e58 <__divdf3>
 100a2a8:	1009883a 	mov	r4,r2
 100a2ac:	180b883a 	mov	r5,r3
 100a2b0:	200d883a 	mov	r6,r4
 100a2b4:	280f883a 	mov	r7,r5
 100a2b8:	3007883a 	mov	r3,r6
 100a2bc:	3809883a 	mov	r4,r7
}
 100a2c0:	1805883a 	mov	r2,r3
 100a2c4:	2007883a 	mov	r3,r4
 100a2c8:	e037883a 	mov	sp,fp
 100a2cc:	dfc00117 	ldw	ra,4(sp)
 100a2d0:	df000017 	ldw	fp,0(sp)
 100a2d4:	dec00204 	addi	sp,sp,8
 100a2d8:	f800283a 	ret

0100a2dc <distance>:

double distance(double lat1, double lon1, double lat2, double lon2, char unit) {
 100a2dc:	deffeb04 	addi	sp,sp,-84
 100a2e0:	dfc01415 	stw	ra,80(sp)
 100a2e4:	df001315 	stw	fp,76(sp)
 100a2e8:	dcc01215 	stw	r19,72(sp)
 100a2ec:	dc801115 	stw	r18,68(sp)
 100a2f0:	dc401015 	stw	r17,64(sp)
 100a2f4:	dc000f15 	stw	r16,60(sp)
 100a2f8:	df000f04 	addi	fp,sp,60
 100a2fc:	e13ffa15 	stw	r4,-24(fp)
 100a300:	e17ffb15 	stw	r5,-20(fp)
 100a304:	e1bffc15 	stw	r6,-16(fp)
 100a308:	e1fffd15 	stw	r7,-12(fp)
 100a30c:	e0800a17 	ldw	r2,40(fp)
 100a310:	e0bffe05 	stb	r2,-8(fp)
	double theta, dist;
	printf("Lat 1: %.6f, Lon 1 %.6f, Lat 2 %.6f, Lon 2 %.6f \n", lat1, lon1,
 100a314:	e0800617 	ldw	r2,24(fp)
 100a318:	d8800115 	stw	r2,4(sp)
 100a31c:	e0800717 	ldw	r2,28(fp)
 100a320:	d8800215 	stw	r2,8(sp)
 100a324:	e0800817 	ldw	r2,32(fp)
 100a328:	d8800315 	stw	r2,12(sp)
 100a32c:	e0800917 	ldw	r2,36(fp)
 100a330:	d8800415 	stw	r2,16(sp)
 100a334:	e0bffd17 	ldw	r2,-12(fp)
 100a338:	d8800015 	stw	r2,0(sp)
 100a33c:	e1fffc17 	ldw	r7,-16(fp)
 100a340:	010040f4 	movhi	r4,259
 100a344:	21115104 	addi	r4,r4,17732
 100a348:	e17ffa17 	ldw	r5,-24(fp)
 100a34c:	e1bffb17 	ldw	r6,-20(fp)
 100a350:	10155040 	call	1015504 <printf>
			lat2, lon2);

	theta = lon1 - lon2;
 100a354:	e13ffc17 	ldw	r4,-16(fp)
 100a358:	e17ffd17 	ldw	r5,-12(fp)
 100a35c:	e1800817 	ldw	r6,32(fp)
 100a360:	e1c00917 	ldw	r7,36(fp)
 100a364:	10129a00 	call	10129a0 <__subdf3>
 100a368:	1009883a 	mov	r4,r2
 100a36c:	180b883a 	mov	r5,r3
 100a370:	e13ff815 	stw	r4,-32(fp)
 100a374:	e17ff915 	stw	r5,-28(fp)
	dist = sin(deg2rad(lat1)) * sin(deg2rad(lat2))
 100a378:	e13ffa17 	ldw	r4,-24(fp)
 100a37c:	e17ffb17 	ldw	r5,-20(fp)
 100a380:	100a1bc0 	call	100a1bc <deg2rad>
 100a384:	100b883a 	mov	r5,r2
 100a388:	180d883a 	mov	r6,r3
 100a38c:	2809883a 	mov	r4,r5
 100a390:	300b883a 	mov	r5,r6
 100a394:	100f0e00 	call	100f0e0 <sin>
 100a398:	1021883a 	mov	r16,r2
 100a39c:	1823883a 	mov	r17,r3
 100a3a0:	e1000617 	ldw	r4,24(fp)
 100a3a4:	e1400717 	ldw	r5,28(fp)
 100a3a8:	100a1bc0 	call	100a1bc <deg2rad>
 100a3ac:	100b883a 	mov	r5,r2
 100a3b0:	180d883a 	mov	r6,r3
 100a3b4:	2809883a 	mov	r4,r5
 100a3b8:	300b883a 	mov	r5,r6
 100a3bc:	100f0e00 	call	100f0e0 <sin>
 100a3c0:	100f883a 	mov	r7,r2
 100a3c4:	1811883a 	mov	r8,r3
 100a3c8:	8009883a 	mov	r4,r16
 100a3cc:	880b883a 	mov	r5,r17
 100a3d0:	380d883a 	mov	r6,r7
 100a3d4:	400f883a 	mov	r7,r8
 100a3d8:	1012a940 	call	1012a94 <__muldf3>
 100a3dc:	1009883a 	mov	r4,r2
 100a3e0:	180b883a 	mov	r5,r3
 100a3e4:	2025883a 	mov	r18,r4
 100a3e8:	2827883a 	mov	r19,r5
 100a3ec:	e13ffa17 	ldw	r4,-24(fp)
 100a3f0:	e17ffb17 	ldw	r5,-20(fp)
 100a3f4:	100a1bc0 	call	100a1bc <deg2rad>
 100a3f8:	100b883a 	mov	r5,r2
 100a3fc:	180d883a 	mov	r6,r3
 100a400:	2809883a 	mov	r4,r5
 100a404:	300b883a 	mov	r5,r6
 100a408:	100ef780 	call	100ef78 <cos>
 100a40c:	1021883a 	mov	r16,r2
 100a410:	1823883a 	mov	r17,r3
 100a414:	e1000617 	ldw	r4,24(fp)
 100a418:	e1400717 	ldw	r5,28(fp)
 100a41c:	100a1bc0 	call	100a1bc <deg2rad>
 100a420:	100b883a 	mov	r5,r2
 100a424:	180d883a 	mov	r6,r3
 100a428:	2809883a 	mov	r4,r5
 100a42c:	300b883a 	mov	r5,r6
 100a430:	100ef780 	call	100ef78 <cos>
 100a434:	100f883a 	mov	r7,r2
 100a438:	1811883a 	mov	r8,r3
 100a43c:	8009883a 	mov	r4,r16
 100a440:	880b883a 	mov	r5,r17
 100a444:	380d883a 	mov	r6,r7
 100a448:	400f883a 	mov	r7,r8
 100a44c:	1012a940 	call	1012a94 <__muldf3>
 100a450:	1009883a 	mov	r4,r2
 100a454:	180b883a 	mov	r5,r3
 100a458:	2021883a 	mov	r16,r4
 100a45c:	2823883a 	mov	r17,r5
 100a460:	e13ff817 	ldw	r4,-32(fp)
 100a464:	e17ff917 	ldw	r5,-28(fp)
 100a468:	100a1bc0 	call	100a1bc <deg2rad>
 100a46c:	100b883a 	mov	r5,r2
 100a470:	180d883a 	mov	r6,r3
 100a474:	2809883a 	mov	r4,r5
 100a478:	300b883a 	mov	r5,r6
 100a47c:	100ef780 	call	100ef78 <cos>
 100a480:	100f883a 	mov	r7,r2
 100a484:	1811883a 	mov	r8,r3
 100a488:	8009883a 	mov	r4,r16
 100a48c:	880b883a 	mov	r5,r17
 100a490:	380d883a 	mov	r6,r7
 100a494:	400f883a 	mov	r7,r8
 100a498:	1012a940 	call	1012a94 <__muldf3>
 100a49c:	1009883a 	mov	r4,r2
 100a4a0:	180b883a 	mov	r5,r3
 100a4a4:	2005883a 	mov	r2,r4
 100a4a8:	2807883a 	mov	r3,r5
 100a4ac:	9009883a 	mov	r4,r18
 100a4b0:	980b883a 	mov	r5,r19
 100a4b4:	100d883a 	mov	r6,r2
 100a4b8:	180f883a 	mov	r7,r3
 100a4bc:	1012a200 	call	1012a20 <__adddf3>
 100a4c0:	1009883a 	mov	r4,r2
 100a4c4:	180b883a 	mov	r5,r3
 100a4c8:	e13ff615 	stw	r4,-40(fp)
 100a4cc:	e17ff715 	stw	r5,-36(fp)
			+ cos(deg2rad(lat1)) * cos(deg2rad(lat2)) * cos(deg2rad(theta));
	dist = acos(dist);
 100a4d0:	e13ff617 	ldw	r4,-40(fp)
 100a4d4:	e17ff717 	ldw	r5,-36(fp)
 100a4d8:	100f24c0 	call	100f24c <acos>
 100a4dc:	1009883a 	mov	r4,r2
 100a4e0:	180b883a 	mov	r5,r3
 100a4e4:	e13ff615 	stw	r4,-40(fp)
 100a4e8:	e17ff715 	stw	r5,-36(fp)

	dist = rad2deg(dist);
 100a4ec:	e13ff617 	ldw	r4,-40(fp)
 100a4f0:	e17ff717 	ldw	r5,-36(fp)
 100a4f4:	100a24c0 	call	100a24c <rad2deg>
 100a4f8:	1009883a 	mov	r4,r2
 100a4fc:	180b883a 	mov	r5,r3
 100a500:	e13ff615 	stw	r4,-40(fp)
 100a504:	e17ff715 	stw	r5,-36(fp)

	dist = dist * 60 * 1.1515;
 100a508:	e13ff617 	ldw	r4,-40(fp)
 100a50c:	e17ff717 	ldw	r5,-36(fp)
 100a510:	000d883a 	mov	r6,zero
 100a514:	01d013b4 	movhi	r7,16462
 100a518:	1012a940 	call	1012a94 <__muldf3>
 100a51c:	1009883a 	mov	r4,r2
 100a520:	180b883a 	mov	r5,r3
 100a524:	2005883a 	mov	r2,r4
 100a528:	2807883a 	mov	r3,r5
 100a52c:	1009883a 	mov	r4,r2
 100a530:	180b883a 	mov	r5,r3
 100a534:	0190e5b4 	movhi	r6,17302
 100a538:	31a04184 	addi	r6,r6,-32506
 100a53c:	01cffcb4 	movhi	r7,16370
 100a540:	39db22c4 	addi	r7,r7,27787
 100a544:	1012a940 	call	1012a94 <__muldf3>
 100a548:	1009883a 	mov	r4,r2
 100a54c:	180b883a 	mov	r5,r3
 100a550:	e13ff615 	stw	r4,-40(fp)
 100a554:	e17ff715 	stw	r5,-36(fp)

	switch (unit) {
 100a558:	e0bffe07 	ldb	r2,-8(fp)
 100a55c:	e0bfff15 	stw	r2,-4(fp)
 100a560:	e0ffff17 	ldw	r3,-4(fp)
 100a564:	188012e0 	cmpeqi	r2,r3,75
 100a568:	10001a1e 	bne	r2,zero,100a5d4 <distance+0x2f8>
 100a56c:	e0ffff17 	ldw	r3,-4(fp)
 100a570:	18801360 	cmpeqi	r2,r3,77
 100a574:	1000011e 	bne	r2,zero,100a57c <distance+0x2a0>
 100a578:	00002106 	br	100a600 <distance+0x324>
	case 'M':
		dist = dist * 1.609344 * 1000;
 100a57c:	e13ff617 	ldw	r4,-40(fp)
 100a580:	e17ff717 	ldw	r5,-36(fp)
 100a584:	019fa034 	movhi	r6,32384
 100a588:	318e2804 	addi	r6,r6,14496
 100a58c:	01cffeb4 	movhi	r7,16378
 100a590:	39eff7c4 	addi	r7,r7,-16417
 100a594:	1012a940 	call	1012a94 <__muldf3>
 100a598:	1009883a 	mov	r4,r2
 100a59c:	180b883a 	mov	r5,r3
 100a5a0:	2005883a 	mov	r2,r4
 100a5a4:	2807883a 	mov	r3,r5
 100a5a8:	1009883a 	mov	r4,r2
 100a5ac:	180b883a 	mov	r5,r3
 100a5b0:	000d883a 	mov	r6,zero
 100a5b4:	01d023f4 	movhi	r7,16527
 100a5b8:	39d00004 	addi	r7,r7,16384
 100a5bc:	1012a940 	call	1012a94 <__muldf3>
 100a5c0:	1009883a 	mov	r4,r2
 100a5c4:	180b883a 	mov	r5,r3
 100a5c8:	e13ff615 	stw	r4,-40(fp)
 100a5cc:	e17ff715 	stw	r5,-36(fp)
		break;
 100a5d0:	00000b06 	br	100a600 <distance+0x324>
	case 'K':
		dist = dist * 1.609344;
 100a5d4:	e13ff617 	ldw	r4,-40(fp)
 100a5d8:	e17ff717 	ldw	r5,-36(fp)
 100a5dc:	019fa034 	movhi	r6,32384
 100a5e0:	318e2804 	addi	r6,r6,14496
 100a5e4:	01cffeb4 	movhi	r7,16378
 100a5e8:	39eff7c4 	addi	r7,r7,-16417
 100a5ec:	1012a940 	call	1012a94 <__muldf3>
 100a5f0:	1009883a 	mov	r4,r2
 100a5f4:	180b883a 	mov	r5,r3
 100a5f8:	e13ff615 	stw	r4,-40(fp)
 100a5fc:	e17ff715 	stw	r5,-36(fp)
		break;
	}

	return (dist);
 100a600:	e17ff617 	ldw	r5,-40(fp)
 100a604:	e1bff717 	ldw	r6,-36(fp)
 100a608:	2807883a 	mov	r3,r5
 100a60c:	3009883a 	mov	r4,r6
}
 100a610:	1805883a 	mov	r2,r3
 100a614:	2007883a 	mov	r3,r4
 100a618:	e037883a 	mov	sp,fp
 100a61c:	dfc00517 	ldw	ra,20(sp)
 100a620:	df000417 	ldw	fp,16(sp)
 100a624:	dcc00317 	ldw	r19,12(sp)
 100a628:	dc800217 	ldw	r18,8(sp)
 100a62c:	dc400117 	ldw	r17,4(sp)
 100a630:	dc000017 	ldw	r16,0(sp)
 100a634:	dec00604 	addi	sp,sp,24
 100a638:	f800283a 	ret

0100a63c <checkDistance>:

void checkDistance() {
 100a63c:	deffe504 	addi	sp,sp,-108
 100a640:	dfc01a15 	stw	ra,104(sp)
 100a644:	df001915 	stw	fp,100(sp)
 100a648:	dc001815 	stw	r16,96(sp)
 100a64c:	df001804 	addi	fp,sp,96

	//home latitude and longitude, west is negative
	double homeLat = 49.261812;
 100a650:	00838f74 	movhi	r2,3645
 100a654:	10b66944 	addi	r2,r2,-9819
 100a658:	e0bff815 	stw	r2,-32(fp)
 100a65c:	00901274 	movhi	r2,16457
 100a660:	10a860c4 	addi	r2,r2,-24189
 100a664:	e0bff915 	stw	r2,-28(fp)
	double homeLong = -123.250065;
 100a668:	00842874 	movhi	r2,4257
 100a66c:	108dfd04 	addi	r2,r2,14324
 100a670:	e0bff615 	stw	r2,-40(fp)
 100a674:	00b017f4 	movhi	r2,49247
 100a678:	10b40044 	addi	r2,r2,-12287
 100a67c:	e0bff715 	stw	r2,-36(fp)
	double currentLatitude = curLat;
 100a680:	d0a70a17 	ldw	r2,-25560(gp)
 100a684:	e0bff415 	stw	r2,-48(fp)
 100a688:	00804134 	movhi	r2,260
 100a68c:	10a2f504 	addi	r2,r2,-29740
 100a690:	10800017 	ldw	r2,0(r2)
 100a694:	e0bff515 	stw	r2,-44(fp)
	double currentLongitude = (-1)*curLong;
 100a698:	d0a70f17 	ldw	r2,-25540(gp)
 100a69c:	01004134 	movhi	r4,260
 100a6a0:	2122fa04 	addi	r4,r4,-29720
 100a6a4:	20c00017 	ldw	r3,0(r4)
 100a6a8:	e0bff215 	stw	r2,-56(fp)
 100a6ac:	18a0003c 	xorhi	r2,r3,32768
 100a6b0:	e0bff315 	stw	r2,-52(fp)
	double distanceCheck = distance(homeLat, homeLong, currentLatitude, currentLongitude, 'M');
 100a6b4:	e0bff417 	ldw	r2,-48(fp)
 100a6b8:	d8800015 	stw	r2,0(sp)
 100a6bc:	e0bff517 	ldw	r2,-44(fp)
 100a6c0:	d8800115 	stw	r2,4(sp)
 100a6c4:	e0bff217 	ldw	r2,-56(fp)
 100a6c8:	d8800215 	stw	r2,8(sp)
 100a6cc:	e0bff317 	ldw	r2,-52(fp)
 100a6d0:	d8800315 	stw	r2,12(sp)
 100a6d4:	00801344 	movi	r2,77
 100a6d8:	d8800415 	stw	r2,16(sp)
 100a6dc:	e13ff817 	ldw	r4,-32(fp)
 100a6e0:	e17ff917 	ldw	r5,-28(fp)
 100a6e4:	e1bff617 	ldw	r6,-40(fp)
 100a6e8:	e1fff717 	ldw	r7,-36(fp)
 100a6ec:	100a2dc0 	call	100a2dc <distance>
 100a6f0:	1009883a 	mov	r4,r2
 100a6f4:	180b883a 	mov	r5,r3
 100a6f8:	e13ff015 	stw	r4,-64(fp)
 100a6fc:	e17ff115 	stw	r5,-60(fp)

	char buf[6] = "";
 100a700:	008040f4 	movhi	r2,259
 100a704:	10916304 	addi	r2,r2,17804
 100a708:	10800003 	ldbu	r2,0(r2)
 100a70c:	e0bffa05 	stb	r2,-24(fp)
 100a710:	e03ffa45 	stb	zero,-23(fp)
 100a714:	e03ffa85 	stb	zero,-22(fp)
 100a718:	e03ffac5 	stb	zero,-21(fp)
 100a71c:	e03ffb05 	stb	zero,-20(fp)
 100a720:	e03ffb45 	stb	zero,-19(fp)
	int i;

	//9999 metres maximum
	readFromSD(buf,"log.txt", 5);
 100a724:	e13ffa04 	addi	r4,fp,-24
 100a728:	014040f4 	movhi	r5,259
 100a72c:	29515e04 	addi	r5,r5,17784
 100a730:	01800144 	movi	r6,5
 100a734:	100ae780 	call	100ae78 <readFromSD>

	for(i = 0 ; i < strlen(buf); i++){
 100a738:	e03fef15 	stw	zero,-68(fp)
 100a73c:	00001106 	br	100a784 <checkDistance+0x148>
		if(buf[i] == '$'){
 100a740:	e0ffef17 	ldw	r3,-68(fp)
 100a744:	e0bffa04 	addi	r2,fp,-24
 100a748:	10c5883a 	add	r2,r2,r3
 100a74c:	10800003 	ldbu	r2,0(r2)
 100a750:	10803fcc 	andi	r2,r2,255
 100a754:	1080201c 	xori	r2,r2,128
 100a758:	10bfe004 	addi	r2,r2,-128
 100a75c:	10800918 	cmpnei	r2,r2,36
 100a760:	1000051e 	bne	r2,zero,100a778 <checkDistance+0x13c>
			buf[i] = '\0';
 100a764:	e0bfef17 	ldw	r2,-68(fp)
 100a768:	e0fffa04 	addi	r3,fp,-24
 100a76c:	1885883a 	add	r2,r3,r2
 100a770:	10000005 	stb	zero,0(r2)
			break;
 100a774:	00000706 	br	100a794 <checkDistance+0x158>
	int i;

	//9999 metres maximum
	readFromSD(buf,"log.txt", 5);

	for(i = 0 ; i < strlen(buf); i++){
 100a778:	e0bfef17 	ldw	r2,-68(fp)
 100a77c:	10800044 	addi	r2,r2,1
 100a780:	e0bfef15 	stw	r2,-68(fp)
 100a784:	e43fef17 	ldw	r16,-68(fp)
 100a788:	e13ffa04 	addi	r4,fp,-24
 100a78c:	1015cfc0 	call	1015cfc <strlen>
 100a790:	80bfeb36 	bltu	r16,r2,100a740 <checkDistance+0x104>
			buf[i] = '\0';
			break;
		}
	}

	int storedDistance = atoi(buf);
 100a794:	e13ffa04 	addi	r4,fp,-24
 100a798:	1013da40 	call	1013da4 <atoi>
 100a79c:	e0bfee15 	stw	r2,-72(fp)

	int check = (int) distanceCheck - storedDistance;
 100a7a0:	e13ff017 	ldw	r4,-64(fp)
 100a7a4:	e17ff117 	ldw	r5,-60(fp)
 100a7a8:	10133c80 	call	10133c8 <__fixdfsi>
 100a7ac:	1007883a 	mov	r3,r2
 100a7b0:	e0bfee17 	ldw	r2,-72(fp)
 100a7b4:	1885c83a 	sub	r2,r3,r2
 100a7b8:	e0bfed15 	stw	r2,-76(fp)
	//will be positive if over buffer
	if (check >= 0 ) {
 100a7bc:	e0bfed17 	ldw	r2,-76(fp)
 100a7c0:	1004803a 	cmplt	r2,r2,zero
 100a7c4:	10001b1e 	bne	r2,zero,100a834 <checkDistance+0x1f8>
		char buff[1] = "";
 100a7c8:	008040f4 	movhi	r2,259
 100a7cc:	10916504 	addi	r2,r2,17812
 100a7d0:	10800003 	ldbu	r2,0(r2)
 100a7d4:	e0bffb85 	stb	r2,-18(fp)

		//read the logging flag to see if we log
		readFromSD(buff,"logfl.txt", 1);
 100a7d8:	e13ffb84 	addi	r4,fp,-18
 100a7dc:	014040f4 	movhi	r5,259
 100a7e0:	29516004 	addi	r5,r5,17792
 100a7e4:	01800044 	movi	r6,1
 100a7e8:	100ae780 	call	100ae78 <readFromSD>
		// we log if flag is set to 'y'
		// ie. we are outside the defined radius
		if(buff[0] == 'y'){
 100a7ec:	e0bffb83 	ldbu	r2,-18(fp)
 100a7f0:	10803fcc 	andi	r2,r2,255
 100a7f4:	1080201c 	xori	r2,r2,128
 100a7f8:	10bfe004 	addi	r2,r2,-128
 100a7fc:	10801e58 	cmpnei	r2,r2,121
 100a800:	1000071e 	bne	r2,zero,100a820 <checkDistance+0x1e4>
			redLEDS = 0xff;
 100a804:	00a00034 	movhi	r2,32768
 100a808:	10841004 	addi	r2,r2,4160
 100a80c:	00ffffc4 	movi	r3,-1
 100a810:	10c00005 	stb	r3,0(r2)
			panicFlag = 1;
 100a814:	00800044 	movi	r2,1
 100a818:	d0a71215 	stw	r2,-25528(gp)
 100a81c:	00000806 	br	100a840 <checkDistance+0x204>
		} else {
			redLEDS = 0x00;
 100a820:	00a00034 	movhi	r2,32768
 100a824:	10841004 	addi	r2,r2,4160
 100a828:	10000005 	stb	zero,0(r2)
			panicFlag = 0;
 100a82c:	d0271215 	stw	zero,-25528(gp)
 100a830:	00000306 	br	100a840 <checkDistance+0x204>
		}
	} else {
		redLEDS = 0x00;
 100a834:	00a00034 	movhi	r2,32768
 100a838:	10841004 	addi	r2,r2,4160
 100a83c:	10000005 	stb	zero,0(r2)
	}
	if (globalCurrentPage == map){
 100a840:	d0e71417 	ldw	r3,-25520(gp)
 100a844:	d0a70617 	ldw	r2,-25576(gp)
 100a848:	1880191e 	bne	r3,r2,100a8b0 <checkDistance+0x274>
		int xhome;
		int yhome;
		int xcur;
		int ycur;

		computePixel(homeLat, homeLong, &xhome, &yhome);
 100a84c:	e0bffc04 	addi	r2,fp,-16
 100a850:	d8800015 	stw	r2,0(sp)
 100a854:	e0bffd04 	addi	r2,fp,-12
 100a858:	d8800115 	stw	r2,4(sp)
 100a85c:	e13ff817 	ldw	r4,-32(fp)
 100a860:	e17ff917 	ldw	r5,-28(fp)
 100a864:	e1bff617 	ldw	r6,-40(fp)
 100a868:	e1fff717 	ldw	r7,-36(fp)
 100a86c:	100eb080 	call	100eb08 <computePixel>
		computePixel(currentLatitude, currentLongitude, &xcur, &ycur);
 100a870:	e0bffe04 	addi	r2,fp,-8
 100a874:	d8800015 	stw	r2,0(sp)
 100a878:	e0bfff04 	addi	r2,fp,-4
 100a87c:	d8800115 	stw	r2,4(sp)
 100a880:	e13ff417 	ldw	r4,-48(fp)
 100a884:	e17ff517 	ldw	r5,-44(fp)
 100a888:	e1bff217 	ldw	r6,-56(fp)
 100a88c:	e1fff317 	ldw	r7,-52(fp)
 100a890:	100eb080 	call	100eb08 <computePixel>

		DrawCircle(xhome+40, yhome+60, storedDistance, BLACK);
 100a894:	e0bffc17 	ldw	r2,-16(fp)
 100a898:	11000a04 	addi	r4,r2,40
 100a89c:	e0bffd17 	ldw	r2,-12(fp)
 100a8a0:	11400f04 	addi	r5,r2,60
 100a8a4:	e1bfee17 	ldw	r6,-72(fp)
 100a8a8:	000f883a 	mov	r7,zero
 100a8ac:	1000a6c0 	call	1000a6c <DrawCircle>
	}
}
 100a8b0:	e037883a 	mov	sp,fp
 100a8b4:	dfc00217 	ldw	ra,8(sp)
 100a8b8:	df000117 	ldw	fp,4(sp)
 100a8bc:	dc000017 	ldw	r16,0(sp)
 100a8c0:	dec00304 	addi	sp,sp,12
 100a8c4:	f800283a 	ret

0100a8c8 <buildInputBox>:
#include "InputBox.h"
#include "Hardware.h"
#include "Font_alg.h"

void buildInputBox(InputBox *ib, int x_centre, int y_centre, int box_width,
		int box_height, int fillColour, int fontColour, int outlineColour){
 100a8c8:	defffb04 	addi	sp,sp,-20
 100a8cc:	df000415 	stw	fp,16(sp)
 100a8d0:	df000404 	addi	fp,sp,16
 100a8d4:	e13ffc15 	stw	r4,-16(fp)
 100a8d8:	e17ffd15 	stw	r5,-12(fp)
 100a8dc:	e1bffe15 	stw	r6,-8(fp)
 100a8e0:	e1ffff15 	stw	r7,-4(fp)
	ib->x1 = x_centre - (box_width / 2);
 100a8e4:	e0ffff17 	ldw	r3,-4(fp)
 100a8e8:	1804d7fa 	srli	r2,r3,31
 100a8ec:	10c5883a 	add	r2,r2,r3
 100a8f0:	1005d07a 	srai	r2,r2,1
 100a8f4:	1007883a 	mov	r3,r2
 100a8f8:	e0bffd17 	ldw	r2,-12(fp)
 100a8fc:	10c7c83a 	sub	r3,r2,r3
 100a900:	e0bffc17 	ldw	r2,-16(fp)
 100a904:	10c00015 	stw	r3,0(r2)
	ib->x2 = x_centre + (box_width / 2);
 100a908:	e0ffff17 	ldw	r3,-4(fp)
 100a90c:	1804d7fa 	srli	r2,r3,31
 100a910:	10c5883a 	add	r2,r2,r3
 100a914:	1005d07a 	srai	r2,r2,1
 100a918:	1007883a 	mov	r3,r2
 100a91c:	e0bffd17 	ldw	r2,-12(fp)
 100a920:	1887883a 	add	r3,r3,r2
 100a924:	e0bffc17 	ldw	r2,-16(fp)
 100a928:	10c00115 	stw	r3,4(r2)
	ib->y1 = y_centre - (box_height / 2);
 100a92c:	e0c00117 	ldw	r3,4(fp)
 100a930:	1804d7fa 	srli	r2,r3,31
 100a934:	10c5883a 	add	r2,r2,r3
 100a938:	1005d07a 	srai	r2,r2,1
 100a93c:	1007883a 	mov	r3,r2
 100a940:	e0bffe17 	ldw	r2,-8(fp)
 100a944:	10c7c83a 	sub	r3,r2,r3
 100a948:	e0bffc17 	ldw	r2,-16(fp)
 100a94c:	10c00215 	stw	r3,8(r2)
	ib->y2 = y_centre + (box_height / 2);
 100a950:	e0c00117 	ldw	r3,4(fp)
 100a954:	1804d7fa 	srli	r2,r3,31
 100a958:	10c5883a 	add	r2,r2,r3
 100a95c:	1005d07a 	srai	r2,r2,1
 100a960:	1007883a 	mov	r3,r2
 100a964:	e0bffe17 	ldw	r2,-8(fp)
 100a968:	1887883a 	add	r3,r3,r2
 100a96c:	e0bffc17 	ldw	r2,-16(fp)
 100a970:	10c00315 	stw	r3,12(r2)
	ib->inputBuf[0] = '\0';
 100a974:	e0bffc17 	ldw	r2,-16(fp)
 100a978:	10000705 	stb	zero,28(r2)
	ib->fillColour = fillColour;
 100a97c:	e0fffc17 	ldw	r3,-16(fp)
 100a980:	e0800217 	ldw	r2,8(fp)
 100a984:	18800515 	stw	r2,20(r3)
	ib->fontColour = fontColour;
 100a988:	e0fffc17 	ldw	r3,-16(fp)
 100a98c:	e0800317 	ldw	r2,12(fp)
 100a990:	18800415 	stw	r2,16(r3)
	ib->outlineColour = outlineColour;
 100a994:	e0fffc17 	ldw	r3,-16(fp)
 100a998:	e0800417 	ldw	r2,16(fp)
 100a99c:	18800615 	stw	r2,24(r3)
}
 100a9a0:	e037883a 	mov	sp,fp
 100a9a4:	df000017 	ldw	fp,0(sp)
 100a9a8:	dec00104 	addi	sp,sp,4
 100a9ac:	f800283a 	ret

0100a9b0 <drawInputBox>:

void drawInputBox(InputBox *ib){
 100a9b0:	defffb04 	addi	sp,sp,-20
 100a9b4:	dfc00415 	stw	ra,16(sp)
 100a9b8:	df000315 	stw	fp,12(sp)
 100a9bc:	df000304 	addi	fp,sp,12
 100a9c0:	e13fff15 	stw	r4,-4(fp)
	DrawRectangleFill(ib->x1, ib->x2 + 30, ib->y1, ib->y2, ib->outlineColour,
 100a9c4:	e0bfff17 	ldw	r2,-4(fp)
 100a9c8:	11000017 	ldw	r4,0(r2)
 100a9cc:	e0bfff17 	ldw	r2,-4(fp)
 100a9d0:	10800117 	ldw	r2,4(r2)
 100a9d4:	11400784 	addi	r5,r2,30
 100a9d8:	e0bfff17 	ldw	r2,-4(fp)
 100a9dc:	11800217 	ldw	r6,8(r2)
 100a9e0:	e0bfff17 	ldw	r2,-4(fp)
 100a9e4:	11c00317 	ldw	r7,12(r2)
 100a9e8:	e0bfff17 	ldw	r2,-4(fp)
 100a9ec:	10c00617 	ldw	r3,24(r2)
 100a9f0:	e0bfff17 	ldw	r2,-4(fp)
 100a9f4:	10800517 	ldw	r2,20(r2)
 100a9f8:	d8c00015 	stw	r3,0(sp)
 100a9fc:	d8800115 	stw	r2,4(sp)
 100aa00:	10008140 	call	1000814 <DrawRectangleFill>
				ib->fillColour);
}
 100aa04:	e037883a 	mov	sp,fp
 100aa08:	dfc00117 	ldw	ra,4(sp)
 100aa0c:	df000017 	ldw	fp,0(sp)
 100aa10:	dec00204 	addi	sp,sp,8
 100aa14:	f800283a 	ret

0100aa18 <updateInputBox>:

void updateInputBox(InputBox *ib){
 100aa18:	defff804 	addi	sp,sp,-32
 100aa1c:	dfc00715 	stw	ra,28(sp)
 100aa20:	df000615 	stw	fp,24(sp)
 100aa24:	dc000515 	stw	r16,20(sp)
 100aa28:	df000504 	addi	fp,sp,20
 100aa2c:	e13fff15 	stw	r4,-4(fp)
	int yCenter = ib->y1 + (ib->y2 - ib->y1) / 2 - 4;
 100aa30:	e0bfff17 	ldw	r2,-4(fp)
 100aa34:	11000217 	ldw	r4,8(r2)
 100aa38:	e0bfff17 	ldw	r2,-4(fp)
 100aa3c:	10c00317 	ldw	r3,12(r2)
 100aa40:	e0bfff17 	ldw	r2,-4(fp)
 100aa44:	10800217 	ldw	r2,8(r2)
 100aa48:	1887c83a 	sub	r3,r3,r2
 100aa4c:	1804d7fa 	srli	r2,r3,31
 100aa50:	10c5883a 	add	r2,r2,r3
 100aa54:	1005d07a 	srai	r2,r2,1
 100aa58:	2085883a 	add	r2,r4,r2
 100aa5c:	10bfff04 	addi	r2,r2,-4
 100aa60:	e0bffe15 	stw	r2,-8(fp)
	int i;

	for (i = 0; i < strlen(ib->inputBuf); i++) {
 100aa64:	e03ffd15 	stw	zero,-12(fp)
 100aa68:	00001906 	br	100aad0 <updateInputBox+0xb8>

		OutGraphicsCharFont2a(ib->x1 + 2 + i * 11, yCenter - 2, ib->fontColour,
 100aa6c:	e0bfff17 	ldw	r2,-4(fp)
 100aa70:	10c00017 	ldw	r3,0(r2)
 100aa74:	e0bffd17 	ldw	r2,-12(fp)
 100aa78:	108002e4 	muli	r2,r2,11
 100aa7c:	1885883a 	add	r2,r3,r2
 100aa80:	11000084 	addi	r4,r2,2
 100aa84:	e0bffe17 	ldw	r2,-8(fp)
 100aa88:	117fff84 	addi	r5,r2,-2
 100aa8c:	e0bfff17 	ldw	r2,-4(fp)
 100aa90:	11800417 	ldw	r6,16(r2)
 100aa94:	e0fffd17 	ldw	r3,-12(fp)
 100aa98:	e0bfff17 	ldw	r2,-4(fp)
 100aa9c:	1885883a 	add	r2,r3,r2
 100aaa0:	10800704 	addi	r2,r2,28
 100aaa4:	10800003 	ldbu	r2,0(r2)
 100aaa8:	10803fcc 	andi	r2,r2,255
 100aaac:	1080201c 	xori	r2,r2,128
 100aab0:	10bfe004 	addi	r2,r2,-128
 100aab4:	d8800015 	stw	r2,0(sp)
 100aab8:	d8000115 	stw	zero,4(sp)
 100aabc:	000f883a 	mov	r7,zero
 100aac0:	10095d00 	call	10095d0 <OutGraphicsCharFont2a>

void updateInputBox(InputBox *ib){
	int yCenter = ib->y1 + (ib->y2 - ib->y1) / 2 - 4;
	int i;

	for (i = 0; i < strlen(ib->inputBuf); i++) {
 100aac4:	e0bffd17 	ldw	r2,-12(fp)
 100aac8:	10800044 	addi	r2,r2,1
 100aacc:	e0bffd15 	stw	r2,-12(fp)
 100aad0:	e43ffd17 	ldw	r16,-12(fp)
 100aad4:	e0bfff17 	ldw	r2,-4(fp)
 100aad8:	11000704 	addi	r4,r2,28
 100aadc:	1015cfc0 	call	1015cfc <strlen>
 100aae0:	80bfe236 	bltu	r16,r2,100aa6c <updateInputBox+0x54>

		OutGraphicsCharFont2a(ib->x1 + 2 + i * 11, yCenter - 2, ib->fontColour,
				0, ib->inputBuf[i], 0);

	}
}
 100aae4:	e037883a 	mov	sp,fp
 100aae8:	dfc00217 	ldw	ra,8(sp)
 100aaec:	df000117 	ldw	fp,4(sp)
 100aaf0:	dc000017 	ldw	r16,0(sp)
 100aaf4:	dec00304 	addi	sp,sp,12
 100aaf8:	f800283a 	ret

0100aafc <buildSDBox>:
#include "Font_alg.h"
#include <string.h>

void buildSDBox(int x_centre, int y_centre, int button_width, int button_height,
		int outlineColour, int fillColour, int fontColor, char *text,
		SDBox *sdb, int numChar) {
 100aafc:	defffb04 	addi	sp,sp,-20
 100ab00:	df000415 	stw	fp,16(sp)
 100ab04:	df000404 	addi	fp,sp,16
 100ab08:	e13ffc15 	stw	r4,-16(fp)
 100ab0c:	e17ffd15 	stw	r5,-12(fp)
 100ab10:	e1bffe15 	stw	r6,-8(fp)
 100ab14:	e1ffff15 	stw	r7,-4(fp)

	sdb->SDBoxText = text;
 100ab18:	e0c00517 	ldw	r3,20(fp)
 100ab1c:	e0800417 	ldw	r2,16(fp)
 100ab20:	18800015 	stw	r2,0(r3)
	sdb->x1 = x_centre - (button_width / 2);
 100ab24:	e0fffe17 	ldw	r3,-8(fp)
 100ab28:	1804d7fa 	srli	r2,r3,31
 100ab2c:	10c5883a 	add	r2,r2,r3
 100ab30:	1005d07a 	srai	r2,r2,1
 100ab34:	1007883a 	mov	r3,r2
 100ab38:	e0bffc17 	ldw	r2,-16(fp)
 100ab3c:	10c7c83a 	sub	r3,r2,r3
 100ab40:	e0800517 	ldw	r2,20(fp)
 100ab44:	10c00115 	stw	r3,4(r2)
	sdb->x2 = x_centre + (button_width / 2);
 100ab48:	e0fffe17 	ldw	r3,-8(fp)
 100ab4c:	1804d7fa 	srli	r2,r3,31
 100ab50:	10c5883a 	add	r2,r2,r3
 100ab54:	1005d07a 	srai	r2,r2,1
 100ab58:	1007883a 	mov	r3,r2
 100ab5c:	e0bffc17 	ldw	r2,-16(fp)
 100ab60:	1887883a 	add	r3,r3,r2
 100ab64:	e0800517 	ldw	r2,20(fp)
 100ab68:	10c00215 	stw	r3,8(r2)
	sdb->y1 = y_centre - (button_height / 2);
 100ab6c:	e0ffff17 	ldw	r3,-4(fp)
 100ab70:	1804d7fa 	srli	r2,r3,31
 100ab74:	10c5883a 	add	r2,r2,r3
 100ab78:	1005d07a 	srai	r2,r2,1
 100ab7c:	1007883a 	mov	r3,r2
 100ab80:	e0bffd17 	ldw	r2,-12(fp)
 100ab84:	10c7c83a 	sub	r3,r2,r3
 100ab88:	e0800517 	ldw	r2,20(fp)
 100ab8c:	10c00315 	stw	r3,12(r2)
	sdb->y2 = y_centre + (button_height / 2);
 100ab90:	e0ffff17 	ldw	r3,-4(fp)
 100ab94:	1804d7fa 	srli	r2,r3,31
 100ab98:	10c5883a 	add	r2,r2,r3
 100ab9c:	1005d07a 	srai	r2,r2,1
 100aba0:	1007883a 	mov	r3,r2
 100aba4:	e0bffd17 	ldw	r2,-12(fp)
 100aba8:	1887883a 	add	r3,r3,r2
 100abac:	e0800517 	ldw	r2,20(fp)
 100abb0:	10c00415 	stw	r3,16(r2)
	sdb->outlineColour = outlineColour;
 100abb4:	e0c00517 	ldw	r3,20(fp)
 100abb8:	e0800117 	ldw	r2,4(fp)
 100abbc:	18800515 	stw	r2,20(r3)
	sdb->fillColour = fillColour;
 100abc0:	e0c00517 	ldw	r3,20(fp)
 100abc4:	e0800217 	ldw	r2,8(fp)
 100abc8:	18800615 	stw	r2,24(r3)
	sdb->fontColour = fontColor;
 100abcc:	e0c00517 	ldw	r3,20(fp)
 100abd0:	e0800317 	ldw	r2,12(fp)
 100abd4:	18800715 	stw	r2,28(r3)
	sdb->captionLength = numChar;
 100abd8:	e0c00517 	ldw	r3,20(fp)
 100abdc:	e0800617 	ldw	r2,24(fp)
 100abe0:	18800815 	stw	r2,32(r3)
}
 100abe4:	e037883a 	mov	sp,fp
 100abe8:	df000017 	ldw	fp,0(sp)
 100abec:	dec00104 	addi	sp,sp,4
 100abf0:	f800283a 	ret

0100abf4 <drawSDBox>:

void drawSDBox(SDBox *sdb) {
 100abf4:	defffb04 	addi	sp,sp,-20
 100abf8:	dfc00415 	stw	ra,16(sp)
 100abfc:	df000315 	stw	fp,12(sp)
 100ac00:	df000304 	addi	fp,sp,12
 100ac04:	e13fff15 	stw	r4,-4(fp)
	DrawRectangleFill(sdb->x1, sdb->x2, sdb->y1, sdb->y2, sdb->outlineColour,
 100ac08:	e0bfff17 	ldw	r2,-4(fp)
 100ac0c:	11000117 	ldw	r4,4(r2)
 100ac10:	e0bfff17 	ldw	r2,-4(fp)
 100ac14:	11400217 	ldw	r5,8(r2)
 100ac18:	e0bfff17 	ldw	r2,-4(fp)
 100ac1c:	11800317 	ldw	r6,12(r2)
 100ac20:	e0bfff17 	ldw	r2,-4(fp)
 100ac24:	11c00417 	ldw	r7,16(r2)
 100ac28:	e0bfff17 	ldw	r2,-4(fp)
 100ac2c:	10c00517 	ldw	r3,20(r2)
 100ac30:	e0bfff17 	ldw	r2,-4(fp)
 100ac34:	10800617 	ldw	r2,24(r2)
 100ac38:	d8c00015 	stw	r3,0(sp)
 100ac3c:	d8800115 	stw	r2,4(sp)
 100ac40:	10008140 	call	1000814 <DrawRectangleFill>
			sdb->fillColour);
}
 100ac44:	e037883a 	mov	sp,fp
 100ac48:	dfc00117 	ldw	ra,4(sp)
 100ac4c:	df000017 	ldw	fp,0(sp)
 100ac50:	dec00204 	addi	sp,sp,8
 100ac54:	f800283a 	ret

0100ac58 <writeCaptionSDBox>:

void writeCaptionSDBox(SDBox * sdb, int fontColor, int backgroundColor) {
 100ac58:	defff404 	addi	sp,sp,-48
 100ac5c:	dfc00b15 	stw	ra,44(sp)
 100ac60:	df000a15 	stw	fp,40(sp)
 100ac64:	df000a04 	addi	fp,sp,40
 100ac68:	e13ffd15 	stw	r4,-12(fp)
 100ac6c:	e17ffe15 	stw	r5,-8(fp)
 100ac70:	e1bfff15 	stw	r6,-4(fp)

	int xCenter = sdb->x1 + BOX_WIDTH / 2;
 100ac74:	e0bffd17 	ldw	r2,-12(fp)
 100ac78:	10800117 	ldw	r2,4(r2)
 100ac7c:	108012c4 	addi	r2,r2,75
 100ac80:	e0bffc15 	stw	r2,-16(fp)
	int yCenter = sdb->y1 + BOX_HEIGHT / 2 - 4;
 100ac84:	e0bffd17 	ldw	r2,-12(fp)
 100ac88:	10800317 	ldw	r2,12(r2)
 100ac8c:	10800544 	addi	r2,r2,21
 100ac90:	e0bffb15 	stw	r2,-20(fp)
	int x_start = xCenter - (sdb->captionLength * 10 / 2);
 100ac94:	e0bffd17 	ldw	r2,-12(fp)
 100ac98:	10800817 	ldw	r2,32(r2)
 100ac9c:	10c00164 	muli	r3,r2,5
 100aca0:	e0bffc17 	ldw	r2,-16(fp)
 100aca4:	10c5c83a 	sub	r2,r2,r3
 100aca8:	e0bffa15 	stw	r2,-24(fp)
	int len = sdb->captionLength;
 100acac:	e0bffd17 	ldw	r2,-12(fp)
 100acb0:	10800817 	ldw	r2,32(r2)
 100acb4:	e0bff915 	stw	r2,-28(fp)
	int i;

	for (i = 0; i < len; i++) {
 100acb8:	e03ff815 	stw	zero,-32(fp)
 100acbc:	00001506 	br	100ad14 <writeCaptionSDBox+0xbc>
		OutGraphicsCharFont2a(x_start + i * 10, yCenter, fontColor,
 100acc0:	e0bff817 	ldw	r2,-32(fp)
 100acc4:	10c002a4 	muli	r3,r2,10
 100acc8:	e0bffa17 	ldw	r2,-24(fp)
 100accc:	1889883a 	add	r4,r3,r2
 100acd0:	e0bffd17 	ldw	r2,-12(fp)
 100acd4:	10c00017 	ldw	r3,0(r2)
 100acd8:	e0bff817 	ldw	r2,-32(fp)
 100acdc:	1885883a 	add	r2,r3,r2
 100ace0:	10800003 	ldbu	r2,0(r2)
 100ace4:	10803fcc 	andi	r2,r2,255
 100ace8:	1080201c 	xori	r2,r2,128
 100acec:	10bfe004 	addi	r2,r2,-128
 100acf0:	d8800015 	stw	r2,0(sp)
 100acf4:	d8000115 	stw	zero,4(sp)
 100acf8:	e17ffb17 	ldw	r5,-20(fp)
 100acfc:	e1bffe17 	ldw	r6,-8(fp)
 100ad00:	e1ffff17 	ldw	r7,-4(fp)
 100ad04:	10095d00 	call	10095d0 <OutGraphicsCharFont2a>
	int yCenter = sdb->y1 + BOX_HEIGHT / 2 - 4;
	int x_start = xCenter - (sdb->captionLength * 10 / 2);
	int len = sdb->captionLength;
	int i;

	for (i = 0; i < len; i++) {
 100ad08:	e0bff817 	ldw	r2,-32(fp)
 100ad0c:	10800044 	addi	r2,r2,1
 100ad10:	e0bff815 	stw	r2,-32(fp)
 100ad14:	e0fff817 	ldw	r3,-32(fp)
 100ad18:	e0bff917 	ldw	r2,-28(fp)
 100ad1c:	18bfe816 	blt	r3,r2,100acc0 <writeCaptionSDBox+0x68>
		OutGraphicsCharFont2a(x_start + i * 10, yCenter, fontColor,
				backgroundColor, sdb->SDBoxText[i], 0);
	}

}
 100ad20:	e037883a 	mov	sp,fp
 100ad24:	dfc00117 	ldw	ra,4(sp)
 100ad28:	df000017 	ldw	fp,0(sp)
 100ad2c:	dec00204 	addi	sp,sp,8
 100ad30:	f800283a 	ret

0100ad34 <writeToSD>:
#include "Font_alg.h"
#include "SD_Card.h"
#include "Cipher.h"
#include "Colours.h"

int writeToSD(char* buffer, char* fileName) {
 100ad34:	defff704 	addi	sp,sp,-36
 100ad38:	dfc00815 	stw	ra,32(sp)
 100ad3c:	df000715 	stw	fp,28(sp)
 100ad40:	dc000615 	stw	r16,24(sp)
 100ad44:	df000604 	addi	fp,sp,24
 100ad48:	e13ffd15 	stw	r4,-12(fp)
 100ad4c:	e17ffe15 	stw	r5,-8(fp)
	alt_up_sd_card_dev *device_reference = NULL;
 100ad50:	e03ffc15 	stw	zero,-16(fp)
	short int myFileHandle;
	int i;

	//printf("Opening SDCard\n");
	if ((device_reference = alt_up_sd_card_open_dev(
 100ad54:	010040f4 	movhi	r4,259
 100ad58:	2111a504 	addi	r4,r4,18068
 100ad5c:	10251e00 	call	10251e0 <alt_up_sd_card_open_dev>
 100ad60:	e0bffc15 	stw	r2,-16(fp)
 100ad64:	e0bffc17 	ldw	r2,-16(fp)
 100ad68:	1004c03a 	cmpne	r2,r2,zero
 100ad6c:	1000031e 	bne	r2,zero,100ad7c <writeToSD+0x48>
			"/dev/Altera_UP_SD_Card_Avalon_Interface_0")) == NULL) {
		//printf("SDCard Open FAILED\n");
		return -1;
 100ad70:	00bfffc4 	movi	r2,-1
 100ad74:	e0bfff15 	stw	r2,-4(fp)
 100ad78:	00003806 	br	100ae5c <writeToSD+0x128>
	} else {
		//printf("SDCard Open PASSED\n");
	}
	if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
 100ad7c:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 100ad80:	1005003a 	cmpeq	r2,r2,zero
 100ad84:	1000331e 	bne	r2,zero,100ae54 <writeToSD+0x120>
 100ad88:	102536c0 	call	102536c <alt_up_sd_card_is_FAT16>
 100ad8c:	1005003a 	cmpeq	r2,r2,zero
 100ad90:	1000301e 	bne	r2,zero,100ae54 <writeToSD+0x120>
		if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
 100ad94:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 100ad98:	1005003a 	cmpeq	r2,r2,zero
 100ad9c:	10002d1e 	bne	r2,zero,100ae54 <writeToSD+0x120>
 100ada0:	102536c0 	call	102536c <alt_up_sd_card_is_FAT16>
 100ada4:	1005003a 	cmpeq	r2,r2,zero
 100ada8:	10002a1e 	bne	r2,zero,100ae54 <writeToSD+0x120>
			myFileHandle = alt_up_sd_card_fopen(fileName, false);
 100adac:	e13ffe17 	ldw	r4,-8(fp)
 100adb0:	000b883a 	mov	r5,zero
 100adb4:	10258640 	call	1025864 <alt_up_sd_card_fopen>
 100adb8:	e0bffb0d 	sth	r2,-20(fp)
			if (myFileHandle == -1) {
 100adbc:	e0bffb0f 	ldh	r2,-20(fp)
 100adc0:	10bfffd8 	cmpnei	r2,r2,-1
 100adc4:	1000041e 	bne	r2,zero,100add8 <writeToSD+0xa4>
				myFileHandle = alt_up_sd_card_fopen(fileName, true);
 100adc8:	e13ffe17 	ldw	r4,-8(fp)
 100adcc:	01400044 	movi	r5,1
 100add0:	10258640 	call	1025864 <alt_up_sd_card_fopen>
 100add4:	e0bffb0d 	sth	r2,-20(fp)
			}
			if (myFileHandle != -1) {
 100add8:	e0bffb0f 	ldh	r2,-20(fp)
 100addc:	10bfffe0 	cmpeqi	r2,r2,-1
 100ade0:	10001c1e 	bne	r2,zero,100ae54 <writeToSD+0x120>
				//printf("File Opened\n");
				for (i = 0; i < strlen(buffer); i++) {
 100ade4:	e03ffa15 	stw	zero,-24(fp)
 100ade8:	00001206 	br	100ae34 <writeToSD+0x100>
					if (alt_up_sd_card_write(myFileHandle, buffer[i])
 100adec:	e13ffb0f 	ldh	r4,-20(fp)
 100adf0:	e0bffa17 	ldw	r2,-24(fp)
 100adf4:	1007883a 	mov	r3,r2
 100adf8:	e0bffd17 	ldw	r2,-12(fp)
 100adfc:	1885883a 	add	r2,r3,r2
 100ae00:	10800003 	ldbu	r2,0(r2)
 100ae04:	11403fcc 	andi	r5,r2,255
 100ae08:	2940201c 	xori	r5,r5,128
 100ae0c:	297fe004 	addi	r5,r5,-128
 100ae10:	10260bc0 	call	10260bc <alt_up_sd_card_write>
 100ae14:	1004c03a 	cmpne	r2,r2,zero
 100ae18:	1000031e 	bne	r2,zero,100ae28 <writeToSD+0xf4>
							== false) {
						//printf("Error writing to file...\n");
						return -1;
 100ae1c:	00bfffc4 	movi	r2,-1
 100ae20:	e0bfff15 	stw	r2,-4(fp)
 100ae24:	00000d06 	br	100ae5c <writeToSD+0x128>
			if (myFileHandle == -1) {
				myFileHandle = alt_up_sd_card_fopen(fileName, true);
			}
			if (myFileHandle != -1) {
				//printf("File Opened\n");
				for (i = 0; i < strlen(buffer); i++) {
 100ae28:	e0bffa17 	ldw	r2,-24(fp)
 100ae2c:	10800044 	addi	r2,r2,1
 100ae30:	e0bffa15 	stw	r2,-24(fp)
 100ae34:	e43ffa17 	ldw	r16,-24(fp)
 100ae38:	e13ffd17 	ldw	r4,-12(fp)
 100ae3c:	1015cfc0 	call	1015cfc <strlen>
 100ae40:	80bfea36 	bltu	r16,r2,100adec <writeToSD+0xb8>
						//printf("Error writing to file...\n");
						return -1;
					}
				}
				//printf("Done!!!\n");
				alt_up_sd_card_fclose(myFileHandle);
 100ae44:	e13ffb0f 	ldh	r4,-20(fp)
 100ae48:	10266f80 	call	10266f8 <alt_up_sd_card_fclose>
				return 0;
 100ae4c:	e03fff15 	stw	zero,-4(fp)
 100ae50:	00000206 	br	100ae5c <writeToSD+0x128>
			} else {
				//printf("File NOT Opened\n");
			}
		}
	}
	return -1;
 100ae54:	00bfffc4 	movi	r2,-1
 100ae58:	e0bfff15 	stw	r2,-4(fp)
 100ae5c:	e0bfff17 	ldw	r2,-4(fp)
}
 100ae60:	e037883a 	mov	sp,fp
 100ae64:	dfc00217 	ldw	ra,8(sp)
 100ae68:	df000117 	ldw	fp,4(sp)
 100ae6c:	dc000017 	ldw	r16,0(sp)
 100ae70:	dec00304 	addi	sp,sp,12
 100ae74:	f800283a 	ret

0100ae78 <readFromSD>:

int readFromSD(char* buffer, char* fileName, int bufferSize) {
 100ae78:	defff604 	addi	sp,sp,-40
 100ae7c:	dfc00915 	stw	ra,36(sp)
 100ae80:	df000815 	stw	fp,32(sp)
 100ae84:	df000804 	addi	fp,sp,32
 100ae88:	e13ffc15 	stw	r4,-16(fp)
 100ae8c:	e17ffd15 	stw	r5,-12(fp)
 100ae90:	e1bffe15 	stw	r6,-8(fp)
	alt_up_sd_card_dev *device_reference = NULL;
 100ae94:	e03ffa15 	stw	zero,-24(fp)
	short int myFileHandle;
	int i;
	char tempChar[2];
	tempChar[1] = '\0';
 100ae98:	e03ffb45 	stb	zero,-19(fp)

	//printf("Opening SDCard\n");
	if ((device_reference = alt_up_sd_card_open_dev(
 100ae9c:	010040f4 	movhi	r4,259
 100aea0:	2111a504 	addi	r4,r4,18068
 100aea4:	10251e00 	call	10251e0 <alt_up_sd_card_open_dev>
 100aea8:	e0bffa15 	stw	r2,-24(fp)
 100aeac:	e0bffa17 	ldw	r2,-24(fp)
 100aeb0:	1004c03a 	cmpne	r2,r2,zero
 100aeb4:	1000031e 	bne	r2,zero,100aec4 <readFromSD+0x4c>
			"/dev/Altera_UP_SD_Card_Avalon_Interface_0")) == NULL) {
		//printf("SDCard Open FAILED\n");
		return -1;
 100aeb8:	00bfffc4 	movi	r2,-1
 100aebc:	e0bfff15 	stw	r2,-4(fp)
 100aec0:	00003006 	br	100af84 <readFromSD+0x10c>
	} else {
		//printf("SDCard Open PASSED\n");
	}
	if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
 100aec4:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 100aec8:	1005003a 	cmpeq	r2,r2,zero
 100aecc:	10002b1e 	bne	r2,zero,100af7c <readFromSD+0x104>
 100aed0:	102536c0 	call	102536c <alt_up_sd_card_is_FAT16>
 100aed4:	1005003a 	cmpeq	r2,r2,zero
 100aed8:	1000281e 	bne	r2,zero,100af7c <readFromSD+0x104>
		myFileHandle = alt_up_sd_card_fopen(fileName, false);
 100aedc:	e13ffd17 	ldw	r4,-12(fp)
 100aee0:	000b883a 	mov	r5,zero
 100aee4:	10258640 	call	1025864 <alt_up_sd_card_fopen>
 100aee8:	e0bff90d 	sth	r2,-28(fp)
		if (myFileHandle == -1) {
 100aeec:	e0bff90f 	ldh	r2,-28(fp)
 100aef0:	10bfffd8 	cmpnei	r2,r2,-1
 100aef4:	1000041e 	bne	r2,zero,100af08 <readFromSD+0x90>
			myFileHandle = alt_up_sd_card_fopen(fileName, true);
 100aef8:	e13ffd17 	ldw	r4,-12(fp)
 100aefc:	01400044 	movi	r5,1
 100af00:	10258640 	call	1025864 <alt_up_sd_card_fopen>
 100af04:	e0bff90d 	sth	r2,-28(fp)
		}
		if (myFileHandle != -1) {
 100af08:	e0bff90f 	ldh	r2,-28(fp)
 100af0c:	10bfffe0 	cmpeqi	r2,r2,-1
 100af10:	10001a1e 	bne	r2,zero,100af7c <readFromSD+0x104>
			//printf("File Opened\n");
			for (i = 0; i < bufferSize; i++) {
 100af14:	e03ff815 	stw	zero,-32(fp)
 100af18:	00001106 	br	100af60 <readFromSD+0xe8>
				tempChar[0] = alt_up_sd_card_read(myFileHandle);
 100af1c:	e13ff90f 	ldh	r4,-28(fp)
 100af20:	1025d280 	call	1025d28 <alt_up_sd_card_read>
 100af24:	e0bffb05 	stb	r2,-20(fp)
				if (tempChar[0] < 0) {
 100af28:	e0bffb03 	ldbu	r2,-20(fp)
 100af2c:	10803fcc 	andi	r2,r2,255
 100af30:	1080201c 	xori	r2,r2,128
 100af34:	10bfe004 	addi	r2,r2,-128
 100af38:	1004403a 	cmpge	r2,r2,zero
 100af3c:	1000021e 	bne	r2,zero,100af48 <readFromSD+0xd0>
					return 0;
 100af40:	e03fff15 	stw	zero,-4(fp)
 100af44:	00000f06 	br	100af84 <readFromSD+0x10c>
				}
				strcat(buffer, tempChar);
 100af48:	e17ffb04 	addi	r5,fp,-20
 100af4c:	e13ffc17 	ldw	r4,-16(fp)
 100af50:	1015b240 	call	1015b24 <strcat>
		if (myFileHandle == -1) {
			myFileHandle = alt_up_sd_card_fopen(fileName, true);
		}
		if (myFileHandle != -1) {
			//printf("File Opened\n");
			for (i = 0; i < bufferSize; i++) {
 100af54:	e0bff817 	ldw	r2,-32(fp)
 100af58:	10800044 	addi	r2,r2,1
 100af5c:	e0bff815 	stw	r2,-32(fp)
 100af60:	e0fff817 	ldw	r3,-32(fp)
 100af64:	e0bffe17 	ldw	r2,-8(fp)
 100af68:	18bfec16 	blt	r3,r2,100af1c <readFromSD+0xa4>
					return 0;
				}
				strcat(buffer, tempChar);
			}
			//printf("Done!!!\n");
			alt_up_sd_card_fclose(myFileHandle);
 100af6c:	e13ff90f 	ldh	r4,-28(fp)
 100af70:	10266f80 	call	10266f8 <alt_up_sd_card_fclose>
			return 0;
 100af74:	e03fff15 	stw	zero,-4(fp)
 100af78:	00000206 	br	100af84 <readFromSD+0x10c>
		} else {
			//printf("File NOT Opened\n");
		}
	}
	return -1;
 100af7c:	00bfffc4 	movi	r2,-1
 100af80:	e0bfff15 	stw	r2,-4(fp)
 100af84:	e0bfff17 	ldw	r2,-4(fp)
}
 100af88:	e037883a 	mov	sp,fp
 100af8c:	dfc00117 	ldw	ra,4(sp)
 100af90:	df000017 	ldw	fp,0(sp)
 100af94:	dec00204 	addi	sp,sp,8
 100af98:	f800283a 	ret

0100af9c <formatAndSaveSD>:

int formatAndSaveSD(char* name, char* address, char* phone, char* emergency, char* file) {
 100af9c:	deff7804 	addi	sp,sp,-544
 100afa0:	dfc08715 	stw	ra,540(sp)
 100afa4:	df008615 	stw	fp,536(sp)
 100afa8:	df008604 	addi	fp,sp,536
 100afac:	e13ffb15 	stw	r4,-20(fp)
 100afb0:	e17ffc15 	stw	r5,-16(fp)
 100afb4:	e1bffd15 	stw	r6,-12(fp)
 100afb8:	e1fffe15 	stw	r7,-8(fp)

	char data[512] = "";
 100afbc:	008040f4 	movhi	r2,259
 100afc0:	1091b104 	addi	r2,r2,18116
 100afc4:	10800003 	ldbu	r2,0(r2)
 100afc8:	e0bf7b05 	stb	r2,-532(fp)
 100afcc:	e13f7b44 	addi	r4,fp,-531
 100afd0:	01807fc4 	movi	r6,511
 100afd4:	000b883a 	mov	r5,zero
 100afd8:	10153f40 	call	10153f4 <memset>
	int ret = 0;
 100afdc:	e03f7a15 	stw	zero,-536(fp)

	strcat(data, name);
 100afe0:	e13f7b04 	addi	r4,fp,-532
 100afe4:	e17ffb17 	ldw	r5,-20(fp)
 100afe8:	1015b240 	call	1015b24 <strcat>
	strcat(data, "$,");
 100afec:	e13f7b04 	addi	r4,fp,-532
 100aff0:	014040f4 	movhi	r5,259
 100aff4:	2951b004 	addi	r5,r5,18112
 100aff8:	1015b240 	call	1015b24 <strcat>
	strcat(data, address);
 100affc:	e13f7b04 	addi	r4,fp,-532
 100b000:	e17ffc17 	ldw	r5,-16(fp)
 100b004:	1015b240 	call	1015b24 <strcat>
	strcat(data, "$,");
 100b008:	e13f7b04 	addi	r4,fp,-532
 100b00c:	014040f4 	movhi	r5,259
 100b010:	2951b004 	addi	r5,r5,18112
 100b014:	1015b240 	call	1015b24 <strcat>
	strcat(data, phone);
 100b018:	e13f7b04 	addi	r4,fp,-532
 100b01c:	e17ffd17 	ldw	r5,-12(fp)
 100b020:	1015b240 	call	1015b24 <strcat>
	strcat(data, "$,");
 100b024:	e13f7b04 	addi	r4,fp,-532
 100b028:	014040f4 	movhi	r5,259
 100b02c:	2951b004 	addi	r5,r5,18112
 100b030:	1015b240 	call	1015b24 <strcat>
	strcat(data, emergency);
 100b034:	e13f7b04 	addi	r4,fp,-532
 100b038:	e17ffe17 	ldw	r5,-8(fp)
 100b03c:	1015b240 	call	1015b24 <strcat>
	strcat(data, "$,");
 100b040:	e13f7b04 	addi	r4,fp,-532
 100b044:	014040f4 	movhi	r5,259
 100b048:	2951b004 	addi	r5,r5,18112
 100b04c:	1015b240 	call	1015b24 <strcat>

	ret += writeToSD(data, file);
 100b050:	e13f7b04 	addi	r4,fp,-532
 100b054:	e1400217 	ldw	r5,8(fp)
 100b058:	100ad340 	call	100ad34 <writeToSD>
 100b05c:	1007883a 	mov	r3,r2
 100b060:	e0bf7a17 	ldw	r2,-536(fp)
 100b064:	10c5883a 	add	r2,r2,r3
 100b068:	e0bf7a15 	stw	r2,-536(fp)
	if (ret == 0) {
 100b06c:	e0bf7a17 	ldw	r2,-536(fp)
 100b070:	1004c03a 	cmpne	r2,r2,zero
 100b074:	1000021e 	bne	r2,zero,100b080 <formatAndSaveSD+0xe4>
		return 0;
 100b078:	e03fff15 	stw	zero,-4(fp)
 100b07c:	00000206 	br	100b088 <formatAndSaveSD+0xec>
	}
	return -1;
 100b080:	00bfffc4 	movi	r2,-1
 100b084:	e0bfff15 	stw	r2,-4(fp)
 100b088:	e0bfff17 	ldw	r2,-4(fp)
}
 100b08c:	e037883a 	mov	sp,fp
 100b090:	dfc00117 	ldw	ra,4(sp)
 100b094:	df000017 	ldw	fp,0(sp)
 100b098:	dec00204 	addi	sp,sp,8
 100b09c:	f800283a 	ret

0100b0a0 <loadInfo>:

int loadInfo(char* name, char* address, char* phone, char* emergency, char* read) {
 100b0a0:	defff904 	addi	sp,sp,-28
 100b0a4:	dfc00615 	stw	ra,24(sp)
 100b0a8:	df000515 	stw	fp,20(sp)
 100b0ac:	df000504 	addi	fp,sp,20
 100b0b0:	e13ffc15 	stw	r4,-16(fp)
 100b0b4:	e17ffd15 	stw	r5,-12(fp)
 100b0b8:	e1bffe15 	stw	r6,-8(fp)
 100b0bc:	e1ffff15 	stw	r7,-4(fp)

	const char delim[2] = ",";
 100b0c0:	008040f4 	movhi	r2,259
 100b0c4:	10923404 	addi	r2,r2,18640
 100b0c8:	1080000b 	ldhu	r2,0(r2)
 100b0cc:	e0bffb0d 	sth	r2,-20(fp)

	printf("read: %s", read);
 100b0d0:	010040f4 	movhi	r4,259
 100b0d4:	21123104 	addi	r4,r4,18628
 100b0d8:	e1400217 	ldw	r5,8(fp)
 100b0dc:	10155040 	call	1015504 <printf>
	strcpy(name, strtok(read, delim));
 100b0e0:	e1000217 	ldw	r4,8(fp)
 100b0e4:	e17ffb04 	addi	r5,fp,-20
 100b0e8:	10175480 	call	1017548 <strtok>
 100b0ec:	100b883a 	mov	r5,r2
 100b0f0:	e13ffc17 	ldw	r4,-16(fp)
 100b0f4:	1015c700 	call	1015c70 <strcpy>
	strcpy(address, strtok(NULL, delim));
 100b0f8:	0009883a 	mov	r4,zero
 100b0fc:	e17ffb04 	addi	r5,fp,-20
 100b100:	10175480 	call	1017548 <strtok>
 100b104:	100b883a 	mov	r5,r2
 100b108:	e13ffd17 	ldw	r4,-12(fp)
 100b10c:	1015c700 	call	1015c70 <strcpy>
	strcpy(phone, strtok(NULL, delim));
 100b110:	0009883a 	mov	r4,zero
 100b114:	e17ffb04 	addi	r5,fp,-20
 100b118:	10175480 	call	1017548 <strtok>
 100b11c:	100b883a 	mov	r5,r2
 100b120:	e13ffe17 	ldw	r4,-8(fp)
 100b124:	1015c700 	call	1015c70 <strcpy>
	strcpy(emergency, strtok(NULL, delim));
 100b128:	0009883a 	mov	r4,zero
 100b12c:	e17ffb04 	addi	r5,fp,-20
 100b130:	10175480 	call	1017548 <strtok>
 100b134:	100b883a 	mov	r5,r2
 100b138:	e13fff17 	ldw	r4,-4(fp)
 100b13c:	1015c700 	call	1015c70 <strcpy>

	name[strlen(name) - 1] = '\0';
 100b140:	e13ffc17 	ldw	r4,-16(fp)
 100b144:	1015cfc0 	call	1015cfc <strlen>
 100b148:	1007883a 	mov	r3,r2
 100b14c:	e0bffc17 	ldw	r2,-16(fp)
 100b150:	1885883a 	add	r2,r3,r2
 100b154:	10bfffc4 	addi	r2,r2,-1
 100b158:	10000005 	stb	zero,0(r2)
	address[strlen(address) - 1] = '\0';
 100b15c:	e13ffd17 	ldw	r4,-12(fp)
 100b160:	1015cfc0 	call	1015cfc <strlen>
 100b164:	1007883a 	mov	r3,r2
 100b168:	e0bffd17 	ldw	r2,-12(fp)
 100b16c:	1885883a 	add	r2,r3,r2
 100b170:	10bfffc4 	addi	r2,r2,-1
 100b174:	10000005 	stb	zero,0(r2)
	phone[strlen(phone) - 1] = '\0';
 100b178:	e13ffe17 	ldw	r4,-8(fp)
 100b17c:	1015cfc0 	call	1015cfc <strlen>
 100b180:	1007883a 	mov	r3,r2
 100b184:	e0bffe17 	ldw	r2,-8(fp)
 100b188:	1885883a 	add	r2,r3,r2
 100b18c:	10bfffc4 	addi	r2,r2,-1
 100b190:	10000005 	stb	zero,0(r2)
	emergency[strlen(emergency) - 1] = '\0';
 100b194:	e13fff17 	ldw	r4,-4(fp)
 100b198:	1015cfc0 	call	1015cfc <strlen>
 100b19c:	1007883a 	mov	r3,r2
 100b1a0:	e0bfff17 	ldw	r2,-4(fp)
 100b1a4:	1885883a 	add	r2,r3,r2
 100b1a8:	10bfffc4 	addi	r2,r2,-1
 100b1ac:	10000005 	stb	zero,0(r2)

	return 0;
 100b1b0:	0005883a 	mov	r2,zero
}
 100b1b4:	e037883a 	mov	sp,fp
 100b1b8:	dfc00117 	ldw	ra,4(sp)
 100b1bc:	df000017 	ldw	fp,0(sp)
 100b1c0:	dec00204 	addi	sp,sp,8
 100b1c4:	f800283a 	ret

0100b1c8 <writeToSDEncrypted>:

int writeToSDEncrypted(char* buffer, char* fileName) {
 100b1c8:	defff604 	addi	sp,sp,-40
 100b1cc:	dfc00915 	stw	ra,36(sp)
 100b1d0:	df000815 	stw	fp,32(sp)
 100b1d4:	dc000715 	stw	r16,28(sp)
 100b1d8:	df000704 	addi	fp,sp,28
 100b1dc:	e13ffd15 	stw	r4,-12(fp)
 100b1e0:	e17ffe15 	stw	r5,-8(fp)
	alt_up_sd_card_dev *device_reference = NULL;
 100b1e4:	e03ffc15 	stw	zero,-16(fp)
	short int myFileHandle;
	int i;

	char *encryptedBuffer = encryptData(buffer);
 100b1e8:	e13ffd17 	ldw	r4,-12(fp)
 100b1ec:	10062940 	call	1006294 <encryptData>
 100b1f0:	e0bff915 	stw	r2,-28(fp)

	printf("Opening SDCard\n");
 100b1f4:	010040f4 	movhi	r4,259
 100b1f8:	21123504 	addi	r4,r4,18644
 100b1fc:	10156400 	call	1015640 <puts>
	if ((device_reference = alt_up_sd_card_open_dev(
 100b200:	010040f4 	movhi	r4,259
 100b204:	2111a504 	addi	r4,r4,18068
 100b208:	10251e00 	call	10251e0 <alt_up_sd_card_open_dev>
 100b20c:	e0bffc15 	stw	r2,-16(fp)
 100b210:	e0bffc17 	ldw	r2,-16(fp)
 100b214:	1004c03a 	cmpne	r2,r2,zero
 100b218:	1000061e 	bne	r2,zero,100b234 <writeToSDEncrypted+0x6c>
			"/dev/Altera_UP_SD_Card_Avalon_Interface_0")) == NULL) {
		printf("SDCard Open FAILED\n");
 100b21c:	010040f4 	movhi	r4,259
 100b220:	21123904 	addi	r4,r4,18660
 100b224:	10156400 	call	1015640 <puts>
		return -1;
 100b228:	00bfffc4 	movi	r2,-1
 100b22c:	e0bfff15 	stw	r2,-4(fp)
 100b230:	00004506 	br	100b348 <writeToSDEncrypted+0x180>
	} else {
		printf("SDCard Open PASSED\n");
 100b234:	010040f4 	movhi	r4,259
 100b238:	21123e04 	addi	r4,r4,18680
 100b23c:	10156400 	call	1015640 <puts>
	}
	if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
 100b240:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 100b244:	1005003a 	cmpeq	r2,r2,zero
 100b248:	10003e1e 	bne	r2,zero,100b344 <writeToSDEncrypted+0x17c>
 100b24c:	102536c0 	call	102536c <alt_up_sd_card_is_FAT16>
 100b250:	1005003a 	cmpeq	r2,r2,zero
 100b254:	10003b1e 	bne	r2,zero,100b344 <writeToSDEncrypted+0x17c>
		if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
 100b258:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 100b25c:	1005003a 	cmpeq	r2,r2,zero
 100b260:	1000381e 	bne	r2,zero,100b344 <writeToSDEncrypted+0x17c>
 100b264:	102536c0 	call	102536c <alt_up_sd_card_is_FAT16>
 100b268:	1005003a 	cmpeq	r2,r2,zero
 100b26c:	1000351e 	bne	r2,zero,100b344 <writeToSDEncrypted+0x17c>
			myFileHandle = alt_up_sd_card_fopen(fileName, false);
 100b270:	e13ffe17 	ldw	r4,-8(fp)
 100b274:	000b883a 	mov	r5,zero
 100b278:	10258640 	call	1025864 <alt_up_sd_card_fopen>
 100b27c:	e0bffb0d 	sth	r2,-20(fp)
			if (myFileHandle == -1) {
 100b280:	e0bffb0f 	ldh	r2,-20(fp)
 100b284:	10bfffd8 	cmpnei	r2,r2,-1
 100b288:	1000041e 	bne	r2,zero,100b29c <writeToSDEncrypted+0xd4>
				myFileHandle = alt_up_sd_card_fopen(fileName, true);
 100b28c:	e13ffe17 	ldw	r4,-8(fp)
 100b290:	01400044 	movi	r5,1
 100b294:	10258640 	call	1025864 <alt_up_sd_card_fopen>
 100b298:	e0bffb0d 	sth	r2,-20(fp)
			}
			if (myFileHandle != -1) {
 100b29c:	e0bffb0f 	ldh	r2,-20(fp)
 100b2a0:	10bfffe0 	cmpeqi	r2,r2,-1
 100b2a4:	1000241e 	bne	r2,zero,100b338 <writeToSDEncrypted+0x170>
				printf("File Opened\n");
 100b2a8:	010040f4 	movhi	r4,259
 100b2ac:	21124304 	addi	r4,r4,18700
 100b2b0:	10156400 	call	1015640 <puts>
				for (i = 0; i < strlen(buffer); i++) {
 100b2b4:	e03ffa15 	stw	zero,-24(fp)
 100b2b8:	00001506 	br	100b310 <writeToSDEncrypted+0x148>
					if (alt_up_sd_card_write(myFileHandle, buffer[i])
 100b2bc:	e13ffb0f 	ldh	r4,-20(fp)
 100b2c0:	e0bffa17 	ldw	r2,-24(fp)
 100b2c4:	1007883a 	mov	r3,r2
 100b2c8:	e0bffd17 	ldw	r2,-12(fp)
 100b2cc:	1885883a 	add	r2,r3,r2
 100b2d0:	10800003 	ldbu	r2,0(r2)
 100b2d4:	11403fcc 	andi	r5,r2,255
 100b2d8:	2940201c 	xori	r5,r5,128
 100b2dc:	297fe004 	addi	r5,r5,-128
 100b2e0:	10260bc0 	call	10260bc <alt_up_sd_card_write>
 100b2e4:	1004c03a 	cmpne	r2,r2,zero
 100b2e8:	1000061e 	bne	r2,zero,100b304 <writeToSDEncrypted+0x13c>
							== false) {
						printf("Error writing to file...\n");
 100b2ec:	010040f4 	movhi	r4,259
 100b2f0:	21124604 	addi	r4,r4,18712
 100b2f4:	10156400 	call	1015640 <puts>
						return -1;
 100b2f8:	00bfffc4 	movi	r2,-1
 100b2fc:	e0bfff15 	stw	r2,-4(fp)
 100b300:	00001106 	br	100b348 <writeToSDEncrypted+0x180>
			if (myFileHandle == -1) {
				myFileHandle = alt_up_sd_card_fopen(fileName, true);
			}
			if (myFileHandle != -1) {
				printf("File Opened\n");
				for (i = 0; i < strlen(buffer); i++) {
 100b304:	e0bffa17 	ldw	r2,-24(fp)
 100b308:	10800044 	addi	r2,r2,1
 100b30c:	e0bffa15 	stw	r2,-24(fp)
 100b310:	e43ffa17 	ldw	r16,-24(fp)
 100b314:	e13ffd17 	ldw	r4,-12(fp)
 100b318:	1015cfc0 	call	1015cfc <strlen>
 100b31c:	80bfe736 	bltu	r16,r2,100b2bc <writeToSDEncrypted+0xf4>
							== false) {
						printf("Error writing to file...\n");
						return -1;
					}
				}
				printf("Done!!!\n");
 100b320:	010040f4 	movhi	r4,259
 100b324:	21124d04 	addi	r4,r4,18740
 100b328:	10156400 	call	1015640 <puts>
				alt_up_sd_card_fclose(myFileHandle);
 100b32c:	e13ffb0f 	ldh	r4,-20(fp)
 100b330:	10266f80 	call	10266f8 <alt_up_sd_card_fclose>
 100b334:	00000306 	br	100b344 <writeToSDEncrypted+0x17c>
			} else {
				printf("File NOT Opened\n");
 100b338:	010040f4 	movhi	r4,259
 100b33c:	21124f04 	addi	r4,r4,18748
 100b340:	10156400 	call	1015640 <puts>
			}
		}
	}
	return 0;
 100b344:	e03fff15 	stw	zero,-4(fp)
 100b348:	e0bfff17 	ldw	r2,-4(fp)
}
 100b34c:	e037883a 	mov	sp,fp
 100b350:	dfc00217 	ldw	ra,8(sp)
 100b354:	df000117 	ldw	fp,4(sp)
 100b358:	dc000017 	ldw	r16,0(sp)
 100b35c:	dec00304 	addi	sp,sp,12
 100b360:	f800283a 	ret

0100b364 <readFromSDEncrypted>:

int readFromSDEncrypted(char* buffer, char* fileName, int bufferSize) {
 100b364:	defff504 	addi	sp,sp,-44
 100b368:	dfc00a15 	stw	ra,40(sp)
 100b36c:	df000915 	stw	fp,36(sp)
 100b370:	df000904 	addi	fp,sp,36
 100b374:	e13ffc15 	stw	r4,-16(fp)
 100b378:	e17ffd15 	stw	r5,-12(fp)
 100b37c:	e1bffe15 	stw	r6,-8(fp)
	alt_up_sd_card_dev *device_reference = NULL;
 100b380:	e03ffa15 	stw	zero,-24(fp)
	short int myFileHandle;
	int i;
	char tempChar[2];
	tempChar[1] = '\0';
 100b384:	e03ffb45 	stb	zero,-19(fp)

	//printf("Opening SDCard\n");
	if ((device_reference = alt_up_sd_card_open_dev(
 100b388:	010040f4 	movhi	r4,259
 100b38c:	2111a504 	addi	r4,r4,18068
 100b390:	10251e00 	call	10251e0 <alt_up_sd_card_open_dev>
 100b394:	e0bffa15 	stw	r2,-24(fp)
 100b398:	e0bffa17 	ldw	r2,-24(fp)
 100b39c:	1004c03a 	cmpne	r2,r2,zero
 100b3a0:	1000031e 	bne	r2,zero,100b3b0 <readFromSDEncrypted+0x4c>
			"/dev/Altera_UP_SD_Card_Avalon_Interface_0")) == NULL) {
		//printf("SDCard Open FAILED\n");
		return -1;
 100b3a4:	00bfffc4 	movi	r2,-1
 100b3a8:	e0bfff15 	stw	r2,-4(fp)
 100b3ac:	00003706 	br	100b48c <readFromSDEncrypted+0x128>
	} else {
		//printf("SDCard Open PASSED\n");
	}
	if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
 100b3b0:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 100b3b4:	1005003a 	cmpeq	r2,r2,zero
 100b3b8:	1000321e 	bne	r2,zero,100b484 <readFromSDEncrypted+0x120>
 100b3bc:	102536c0 	call	102536c <alt_up_sd_card_is_FAT16>
 100b3c0:	1005003a 	cmpeq	r2,r2,zero
 100b3c4:	10002f1e 	bne	r2,zero,100b484 <readFromSDEncrypted+0x120>
		myFileHandle = alt_up_sd_card_fopen(fileName, false);
 100b3c8:	e13ffd17 	ldw	r4,-12(fp)
 100b3cc:	000b883a 	mov	r5,zero
 100b3d0:	10258640 	call	1025864 <alt_up_sd_card_fopen>
 100b3d4:	e0bff90d 	sth	r2,-28(fp)
		if (myFileHandle == -1) {
 100b3d8:	e0bff90f 	ldh	r2,-28(fp)
 100b3dc:	10bfffd8 	cmpnei	r2,r2,-1
 100b3e0:	1000041e 	bne	r2,zero,100b3f4 <readFromSDEncrypted+0x90>
			myFileHandle = alt_up_sd_card_fopen(fileName, true);
 100b3e4:	e13ffd17 	ldw	r4,-12(fp)
 100b3e8:	01400044 	movi	r5,1
 100b3ec:	10258640 	call	1025864 <alt_up_sd_card_fopen>
 100b3f0:	e0bff90d 	sth	r2,-28(fp)
		}
		if (myFileHandle != -1) {
 100b3f4:	e0bff90f 	ldh	r2,-28(fp)
 100b3f8:	10bfffe0 	cmpeqi	r2,r2,-1
 100b3fc:	1000211e 	bne	r2,zero,100b484 <readFromSDEncrypted+0x120>
			//printf("File Opened\n");
			for (i = 0; i < bufferSize; i++) {
 100b400:	e03ff815 	stw	zero,-32(fp)
 100b404:	00001106 	br	100b44c <readFromSDEncrypted+0xe8>
				tempChar[0] = alt_up_sd_card_read(myFileHandle);
 100b408:	e13ff90f 	ldh	r4,-28(fp)
 100b40c:	1025d280 	call	1025d28 <alt_up_sd_card_read>
 100b410:	e0bffb05 	stb	r2,-20(fp)
				if (tempChar[0] < 0) {
 100b414:	e0bffb03 	ldbu	r2,-20(fp)
 100b418:	10803fcc 	andi	r2,r2,255
 100b41c:	1080201c 	xori	r2,r2,128
 100b420:	10bfe004 	addi	r2,r2,-128
 100b424:	1004403a 	cmpge	r2,r2,zero
 100b428:	1000021e 	bne	r2,zero,100b434 <readFromSDEncrypted+0xd0>
					return 0;
 100b42c:	e03fff15 	stw	zero,-4(fp)
 100b430:	00001606 	br	100b48c <readFromSDEncrypted+0x128>
				}
				strcat(buffer, tempChar);
 100b434:	e17ffb04 	addi	r5,fp,-20
 100b438:	e13ffc17 	ldw	r4,-16(fp)
 100b43c:	1015b240 	call	1015b24 <strcat>
		if (myFileHandle == -1) {
			myFileHandle = alt_up_sd_card_fopen(fileName, true);
		}
		if (myFileHandle != -1) {
			//printf("File Opened\n");
			for (i = 0; i < bufferSize; i++) {
 100b440:	e0bff817 	ldw	r2,-32(fp)
 100b444:	10800044 	addi	r2,r2,1
 100b448:	e0bff815 	stw	r2,-32(fp)
 100b44c:	e0fff817 	ldw	r3,-32(fp)
 100b450:	e0bffe17 	ldw	r2,-8(fp)
 100b454:	18bfec16 	blt	r3,r2,100b408 <readFromSDEncrypted+0xa4>
					return 0;
				}
				strcat(buffer, tempChar);
			}
			//printf("Done!!!\n");
			alt_up_sd_card_fclose(myFileHandle);
 100b458:	e13ff90f 	ldh	r4,-28(fp)
 100b45c:	10266f80 	call	10266f8 <alt_up_sd_card_fclose>

			char *decryptedData = decryptData(buffer);
 100b460:	e13ffc17 	ldw	r4,-16(fp)
 100b464:	10063080 	call	1006308 <decryptData>
 100b468:	e0bff715 	stw	r2,-36(fp)
			printf("Decrypted after read: %s", buffer);
 100b46c:	010040f4 	movhi	r4,259
 100b470:	21125304 	addi	r4,r4,18764
 100b474:	e17ffc17 	ldw	r5,-16(fp)
 100b478:	10155040 	call	1015504 <printf>
			return 0;
 100b47c:	e03fff15 	stw	zero,-4(fp)
 100b480:	00000206 	br	100b48c <readFromSDEncrypted+0x128>
		} else {
			//printf("File NOT Opened\n");
		}
	}
	return -1;
 100b484:	00bfffc4 	movi	r2,-1
 100b488:	e0bfff15 	stw	r2,-4(fp)
 100b48c:	e0bfff17 	ldw	r2,-4(fp)
}
 100b490:	e037883a 	mov	sp,fp
 100b494:	dfc00117 	ldw	ra,4(sp)
 100b498:	df000017 	ldw	fp,0(sp)
 100b49c:	dec00204 	addi	sp,sp,8
 100b4a0:	f800283a 	ret

0100b4a4 <formatAndSaveSDEncrypted>:

int formatAndSaveSDEncrypted(char* name, char* address, char* phone, char* emergency, char* file) {
 100b4a4:	deff7804 	addi	sp,sp,-544
 100b4a8:	dfc08715 	stw	ra,540(sp)
 100b4ac:	df008615 	stw	fp,536(sp)
 100b4b0:	df008604 	addi	fp,sp,536
 100b4b4:	e13ffb15 	stw	r4,-20(fp)
 100b4b8:	e17ffc15 	stw	r5,-16(fp)
 100b4bc:	e1bffd15 	stw	r6,-12(fp)
 100b4c0:	e1fffe15 	stw	r7,-8(fp)

	char data[512] = "";
 100b4c4:	008040f4 	movhi	r2,259
 100b4c8:	1091b104 	addi	r2,r2,18116
 100b4cc:	10800003 	ldbu	r2,0(r2)
 100b4d0:	e0bf7b05 	stb	r2,-532(fp)
 100b4d4:	e13f7b44 	addi	r4,fp,-531
 100b4d8:	01807fc4 	movi	r6,511
 100b4dc:	000b883a 	mov	r5,zero
 100b4e0:	10153f40 	call	10153f4 <memset>
	int ret = 0;
 100b4e4:	e03f7a15 	stw	zero,-536(fp)

	strcpy(data, name);
 100b4e8:	e13f7b04 	addi	r4,fp,-532
 100b4ec:	e17ffb17 	ldw	r5,-20(fp)
 100b4f0:	1015c700 	call	1015c70 <strcpy>
	strcat(data, "$,");
 100b4f4:	e13f7b04 	addi	r4,fp,-532
 100b4f8:	014040f4 	movhi	r5,259
 100b4fc:	2951b004 	addi	r5,r5,18112
 100b500:	1015b240 	call	1015b24 <strcat>
	strcat(data, address);
 100b504:	e13f7b04 	addi	r4,fp,-532
 100b508:	e17ffc17 	ldw	r5,-16(fp)
 100b50c:	1015b240 	call	1015b24 <strcat>
	strcat(data, "$,");
 100b510:	e13f7b04 	addi	r4,fp,-532
 100b514:	014040f4 	movhi	r5,259
 100b518:	2951b004 	addi	r5,r5,18112
 100b51c:	1015b240 	call	1015b24 <strcat>
	strcat(data, phone);
 100b520:	e13f7b04 	addi	r4,fp,-532
 100b524:	e17ffd17 	ldw	r5,-12(fp)
 100b528:	1015b240 	call	1015b24 <strcat>
	strcat(data, "$,");
 100b52c:	e13f7b04 	addi	r4,fp,-532
 100b530:	014040f4 	movhi	r5,259
 100b534:	2951b004 	addi	r5,r5,18112
 100b538:	1015b240 	call	1015b24 <strcat>
	strcat(data, emergency);
 100b53c:	e13f7b04 	addi	r4,fp,-532
 100b540:	e17ffe17 	ldw	r5,-8(fp)
 100b544:	1015b240 	call	1015b24 <strcat>
	strcat(data, "$,");
 100b548:	e13f7b04 	addi	r4,fp,-532
 100b54c:	014040f4 	movhi	r5,259
 100b550:	2951b004 	addi	r5,r5,18112
 100b554:	1015b240 	call	1015b24 <strcat>

	ret += writeToSDEncrypted(data, file);
 100b558:	e13f7b04 	addi	r4,fp,-532
 100b55c:	e1400217 	ldw	r5,8(fp)
 100b560:	100b1c80 	call	100b1c8 <writeToSDEncrypted>
 100b564:	1007883a 	mov	r3,r2
 100b568:	e0bf7a17 	ldw	r2,-536(fp)
 100b56c:	10c5883a 	add	r2,r2,r3
 100b570:	e0bf7a15 	stw	r2,-536(fp)
	if (ret == 0) {
 100b574:	e0bf7a17 	ldw	r2,-536(fp)
 100b578:	1004c03a 	cmpne	r2,r2,zero
 100b57c:	1000021e 	bne	r2,zero,100b588 <formatAndSaveSDEncrypted+0xe4>
		return 0;
 100b580:	e03fff15 	stw	zero,-4(fp)
 100b584:	00000206 	br	100b590 <formatAndSaveSDEncrypted+0xec>
	}
	return -1;
 100b588:	00bfffc4 	movi	r2,-1
 100b58c:	e0bfff15 	stw	r2,-4(fp)
 100b590:	e0bfff17 	ldw	r2,-4(fp)
}
 100b594:	e037883a 	mov	sp,fp
 100b598:	dfc00117 	ldw	ra,4(sp)
 100b59c:	df000017 	ldw	fp,0(sp)
 100b5a0:	dec00204 	addi	sp,sp,8
 100b5a4:	f800283a 	ret

0100b5a8 <Init_Touch>:
#include "Colours.h"
#include "GPS.h"
#include "BuildFactory.h"
#include "WriteCaption.h"

void Init_Touch(void) {
 100b5a8:	defffe04 	addi	sp,sp,-8
 100b5ac:	dfc00115 	stw	ra,4(sp)
 100b5b0:	df000015 	stw	fp,0(sp)
 100b5b4:	d839883a 	mov	fp,sp
	// Program 6850 and baud rate generator to communicate with touchscreen
	// send touchscreen controller an "enable touch" command
	Touch_Control = 0x15;
 100b5b8:	00e10034 	movhi	r3,33792
 100b5bc:	18c08c04 	addi	r3,r3,560
 100b5c0:	00800544 	movi	r2,21
 100b5c4:	18800005 	stb	r2,0(r3)
	Touch_Baud = 0x05;
 100b5c8:	00e10034 	movhi	r3,33792
 100b5cc:	18c08d04 	addi	r3,r3,564
 100b5d0:	00800144 	movi	r2,5
 100b5d4:	18800005 	stb	r2,0(r3)
	usleep(4000); // sleep for 4 milliseconds
 100b5d8:	0103e804 	movi	r4,4000
 100b5dc:	10221b80 	call	10221b8 <usleep>
	// enable touch
	putcharTouch(0x55);
 100b5e0:	01001544 	movi	r4,85
 100b5e4:	100b88c0 	call	100b88c <putcharTouch>
	putcharTouch(0x01);
 100b5e8:	01000044 	movi	r4,1
 100b5ec:	100b88c0 	call	100b88c <putcharTouch>
	putcharTouch(0x12);
 100b5f0:	01000484 	movi	r4,18
 100b5f4:	100b88c0 	call	100b88c <putcharTouch>
	usleep(4000);
 100b5f8:	0103e804 	movi	r4,4000
 100b5fc:	10221b80 	call	10221b8 <usleep>
}
 100b600:	e037883a 	mov	sp,fp
 100b604:	dfc00117 	ldw	ra,4(sp)
 100b608:	df000017 	ldw	fp,0(sp)
 100b60c:	dec00204 	addi	sp,sp,8
 100b610:	f800283a 	ret

0100b614 <ScreenTouched>:

int ScreenTouched(void) {
 100b614:	deffff04 	addi	sp,sp,-4
 100b618:	df000015 	stw	fp,0(sp)
 100b61c:	d839883a 	mov	fp,sp
	// return TRUE if any data received from 6850 connected to touchscreen
	// or FALSE otherwise
	return (Touch_Recieve == 0x80);
 100b620:	00a10034 	movhi	r2,33792
 100b624:	10808c84 	addi	r2,r2,562
 100b628:	10800003 	ldbu	r2,0(r2)
 100b62c:	10803fcc 	andi	r2,r2,255
 100b630:	10802020 	cmpeqi	r2,r2,128
}
 100b634:	e037883a 	mov	sp,fp
 100b638:	df000017 	ldw	fp,0(sp)
 100b63c:	dec00104 	addi	sp,sp,4
 100b640:	f800283a 	ret

0100b644 <WaitForTouch>:

void WaitForTouch() {
 100b644:	defffd04 	addi	sp,sp,-12
 100b648:	dfc00215 	stw	ra,8(sp)
 100b64c:	df000115 	stw	fp,4(sp)
 100b650:	dc000015 	stw	r16,0(sp)
 100b654:	d839883a 	mov	fp,sp
	alt_timestamp_start();
 100b658:	10276200 	call	1027620 <alt_timestamp_start>

	while (!ScreenTouched()) {
 100b65c:	00000606 	br	100b678 <WaitForTouch+0x34>
		if (alt_timestamp() > ALARM_INTERVAL * alt_timestamp_freq()) {
 100b660:	10276c40 	call	10276c4 <alt_timestamp>
 100b664:	1021883a 	mov	r16,r2
 100b668:	10277600 	call	1027760 <alt_timestamp_freq>
 100b66c:	1085883a 	add	r2,r2,r2
 100b670:	1400012e 	bgeu	r2,r16,100b678 <WaitForTouch+0x34>
			timerISR();
 100b674:	100bc5c0 	call	100bc5c <timerISR>
}

void WaitForTouch() {
	alt_timestamp_start();

	while (!ScreenTouched()) {
 100b678:	100b6140 	call	100b614 <ScreenTouched>
 100b67c:	1005003a 	cmpeq	r2,r2,zero
 100b680:	103ff71e 	bne	r2,zero,100b660 <WaitForTouch+0x1c>
		if (alt_timestamp() > ALARM_INTERVAL * alt_timestamp_freq()) {
			timerISR();
		}
	}
}
 100b684:	e037883a 	mov	sp,fp
 100b688:	dfc00217 	ldw	ra,8(sp)
 100b68c:	df000117 	ldw	fp,4(sp)
 100b690:	dc000017 	ldw	r16,0(sp)
 100b694:	dec00304 	addi	sp,sp,12
 100b698:	f800283a 	ret

0100b69c <GetPress>:

void GetPress(Point *p1) {
 100b69c:	defff604 	addi	sp,sp,-40
 100b6a0:	dfc00915 	stw	ra,36(sp)
 100b6a4:	df000815 	stw	fp,32(sp)
 100b6a8:	dc000715 	stw	r16,28(sp)
 100b6ac:	df000704 	addi	fp,sp,28
 100b6b0:	e13fff15 	stw	r4,-4(fp)
	int buf[4];
	int i;
	int yOffset = 125;
 100b6b4:	00801f44 	movi	r2,125
 100b6b8:	e0bff915 	stw	r2,-28(fp)
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	WaitForTouch();
 100b6bc:	100b6440 	call	100b644 <WaitForTouch>
	// pick up reponse packets
	for (i = 0; i < 4; i++) {
 100b6c0:	e03ffa15 	stw	zero,-24(fp)
 100b6c4:	00000c06 	br	100b6f8 <GetPress+0x5c>
		buf[i] = getcharTouch();
 100b6c8:	e43ffa17 	ldw	r16,-24(fp)
 100b6cc:	100b8f40 	call	100b8f4 <getcharTouch>
 100b6d0:	1007883a 	mov	r3,r2
 100b6d4:	8405883a 	add	r2,r16,r16
 100b6d8:	1085883a 	add	r2,r2,r2
 100b6dc:	e13ff904 	addi	r4,fp,-28
 100b6e0:	1105883a 	add	r2,r2,r4
 100b6e4:	10800204 	addi	r2,r2,8
 100b6e8:	10c00015 	stw	r3,0(r2)
	int yOffset = 125;
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	WaitForTouch();
	// pick up reponse packets
	for (i = 0; i < 4; i++) {
 100b6ec:	e0bffa17 	ldw	r2,-24(fp)
 100b6f0:	10800044 	addi	r2,r2,1
 100b6f4:	e0bffa15 	stw	r2,-24(fp)
 100b6f8:	e0bffa17 	ldw	r2,-24(fp)
 100b6fc:	10800110 	cmplti	r2,r2,4
 100b700:	103ff11e 	bne	r2,zero,100b6c8 <GetPress+0x2c>
		buf[i] = getcharTouch();
	}
	// parse x and y coordinates
	p1->x = (buf[1] << 7) | buf[0];
 100b704:	e0bffc17 	ldw	r2,-16(fp)
 100b708:	100691fa 	slli	r3,r2,7
 100b70c:	e0bffb17 	ldw	r2,-20(fp)
 100b710:	1886b03a 	or	r3,r3,r2
 100b714:	e0bfff17 	ldw	r2,-4(fp)
 100b718:	10c00015 	stw	r3,0(r2)
	p1->y = (buf[3] << 7) | buf[2];
 100b71c:	e0bffe17 	ldw	r2,-8(fp)
 100b720:	100691fa 	slli	r3,r2,7
 100b724:	e0bffd17 	ldw	r2,-12(fp)
 100b728:	1886b03a 	or	r3,r3,r2
 100b72c:	e0bfff17 	ldw	r2,-4(fp)
 100b730:	10c00115 	stw	r3,4(r2)
	// compute screen coordinates
	p1->x = p1->x * 799 / 4095;
 100b734:	e0bfff17 	ldw	r2,-4(fp)
 100b738:	10800017 	ldw	r2,0(r2)
 100b73c:	10c0c7e4 	muli	r3,r2,799
 100b740:	0083ffc4 	movi	r2,4095
 100b744:	1887283a 	div	r3,r3,r2
 100b748:	e0bfff17 	ldw	r2,-4(fp)
 100b74c:	10c00015 	stw	r3,0(r2)
	p1->y = (p1->y - yOffset) * 479 / (4095 - yOffset);
 100b750:	e0bfff17 	ldw	r2,-4(fp)
 100b754:	10c00117 	ldw	r3,4(r2)
 100b758:	e0bff917 	ldw	r2,-28(fp)
 100b75c:	1885c83a 	sub	r2,r3,r2
 100b760:	110077e4 	muli	r4,r2,479
 100b764:	00c3ffc4 	movi	r3,4095
 100b768:	e0bff917 	ldw	r2,-28(fp)
 100b76c:	1885c83a 	sub	r2,r3,r2
 100b770:	2087283a 	div	r3,r4,r2
 100b774:	e0bfff17 	ldw	r2,-4(fp)
 100b778:	10c00115 	stw	r3,4(r2)
}
 100b77c:	e037883a 	mov	sp,fp
 100b780:	dfc00217 	ldw	ra,8(sp)
 100b784:	df000117 	ldw	fp,4(sp)
 100b788:	dc000017 	ldw	r16,0(sp)
 100b78c:	dec00304 	addi	sp,sp,12
 100b790:	f800283a 	ret

0100b794 <GetRelease>:

void GetRelease(Point *p1) {
 100b794:	defff604 	addi	sp,sp,-40
 100b798:	dfc00915 	stw	ra,36(sp)
 100b79c:	df000815 	stw	fp,32(sp)
 100b7a0:	dc000715 	stw	r16,28(sp)
 100b7a4:	df000704 	addi	fp,sp,28
 100b7a8:	e13fff15 	stw	r4,-4(fp)
	int buf[4];
	int i;
	int yOffset = 150;
 100b7ac:	00802584 	movi	r2,150
 100b7b0:	e0bff915 	stw	r2,-28(fp)
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	WaitForTouch();
 100b7b4:	100b6440 	call	100b644 <WaitForTouch>
	// pick up reponse packets
	for (i = 0; i < 4; i++) {
 100b7b8:	e03ffa15 	stw	zero,-24(fp)
 100b7bc:	00000c06 	br	100b7f0 <GetRelease+0x5c>
		buf[i] = getcharTouch();
 100b7c0:	e43ffa17 	ldw	r16,-24(fp)
 100b7c4:	100b8f40 	call	100b8f4 <getcharTouch>
 100b7c8:	1007883a 	mov	r3,r2
 100b7cc:	8405883a 	add	r2,r16,r16
 100b7d0:	1085883a 	add	r2,r2,r2
 100b7d4:	e13ff904 	addi	r4,fp,-28
 100b7d8:	1105883a 	add	r2,r2,r4
 100b7dc:	10800204 	addi	r2,r2,8
 100b7e0:	10c00015 	stw	r3,0(r2)
	int yOffset = 150;
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	WaitForTouch();
	// pick up reponse packets
	for (i = 0; i < 4; i++) {
 100b7e4:	e0bffa17 	ldw	r2,-24(fp)
 100b7e8:	10800044 	addi	r2,r2,1
 100b7ec:	e0bffa15 	stw	r2,-24(fp)
 100b7f0:	e0bffa17 	ldw	r2,-24(fp)
 100b7f4:	10800110 	cmplti	r2,r2,4
 100b7f8:	103ff11e 	bne	r2,zero,100b7c0 <GetRelease+0x2c>
		buf[i] = getcharTouch();
	}
	// parse x and y coordinates
	p1->x = (buf[1] << 7) | buf[0];
 100b7fc:	e0bffc17 	ldw	r2,-16(fp)
 100b800:	100691fa 	slli	r3,r2,7
 100b804:	e0bffb17 	ldw	r2,-20(fp)
 100b808:	1886b03a 	or	r3,r3,r2
 100b80c:	e0bfff17 	ldw	r2,-4(fp)
 100b810:	10c00015 	stw	r3,0(r2)
	p1->y = (buf[3] << 7) | buf[2];
 100b814:	e0bffe17 	ldw	r2,-8(fp)
 100b818:	100691fa 	slli	r3,r2,7
 100b81c:	e0bffd17 	ldw	r2,-12(fp)
 100b820:	1886b03a 	or	r3,r3,r2
 100b824:	e0bfff17 	ldw	r2,-4(fp)
 100b828:	10c00115 	stw	r3,4(r2)
	// compute screen coordinates
	p1->x = p1->x * 799 / 4095;
 100b82c:	e0bfff17 	ldw	r2,-4(fp)
 100b830:	10800017 	ldw	r2,0(r2)
 100b834:	10c0c7e4 	muli	r3,r2,799
 100b838:	0083ffc4 	movi	r2,4095
 100b83c:	1887283a 	div	r3,r3,r2
 100b840:	e0bfff17 	ldw	r2,-4(fp)
 100b844:	10c00015 	stw	r3,0(r2)
	p1->y = (p1->y - yOffset) * 479 / (4095 - yOffset);
 100b848:	e0bfff17 	ldw	r2,-4(fp)
 100b84c:	10c00117 	ldw	r3,4(r2)
 100b850:	e0bff917 	ldw	r2,-28(fp)
 100b854:	1885c83a 	sub	r2,r3,r2
 100b858:	110077e4 	muli	r4,r2,479
 100b85c:	00c3ffc4 	movi	r3,4095
 100b860:	e0bff917 	ldw	r2,-28(fp)
 100b864:	1885c83a 	sub	r2,r3,r2
 100b868:	2087283a 	div	r3,r4,r2
 100b86c:	e0bfff17 	ldw	r2,-4(fp)
 100b870:	10c00115 	stw	r3,4(r2)
}
 100b874:	e037883a 	mov	sp,fp
 100b878:	dfc00217 	ldw	ra,8(sp)
 100b87c:	df000117 	ldw	fp,4(sp)
 100b880:	dc000017 	ldw	r16,0(sp)
 100b884:	dec00304 	addi	sp,sp,12
 100b888:	f800283a 	ret

0100b88c <putcharTouch>:

int putcharTouch(int c) {
 100b88c:	defffe04 	addi	sp,sp,-8
 100b890:	df000115 	stw	fp,4(sp)
 100b894:	df000104 	addi	fp,sp,4
 100b898:	e13fff15 	stw	r4,-4(fp)
// poll Tx bit in 6850 status register. Wait for it to become '1'
// write 'c' to the 6850 TxData register to output the character
	while ((Touch_Status & 0x02) != 0x02)
 100b89c:	00a10034 	movhi	r2,33792
 100b8a0:	10808c04 	addi	r2,r2,560
 100b8a4:	10800003 	ldbu	r2,0(r2)
 100b8a8:	10803fcc 	andi	r2,r2,255
 100b8ac:	1080008c 	andi	r2,r2,2
 100b8b0:	1005003a 	cmpeq	r2,r2,zero
 100b8b4:	103ff91e 	bne	r2,zero,100b89c <putcharTouch+0x10>
		;
	Touch_Transmit = c & 0xFF;
 100b8b8:	01210034 	movhi	r4,33792
 100b8bc:	21008c84 	addi	r4,r4,562
 100b8c0:	e0bfff17 	ldw	r2,-4(fp)
 100b8c4:	1007883a 	mov	r3,r2
 100b8c8:	00bfffc4 	movi	r2,-1
 100b8cc:	1884703a 	and	r2,r3,r2
 100b8d0:	20800005 	stb	r2,0(r4)
	return Touch_Transmit; // return c
 100b8d4:	00a10034 	movhi	r2,33792
 100b8d8:	10808c84 	addi	r2,r2,562
 100b8dc:	10800003 	ldbu	r2,0(r2)
 100b8e0:	10803fcc 	andi	r2,r2,255
}
 100b8e4:	e037883a 	mov	sp,fp
 100b8e8:	df000017 	ldw	fp,0(sp)
 100b8ec:	dec00104 	addi	sp,sp,4
 100b8f0:	f800283a 	ret

0100b8f4 <getcharTouch>:

int getcharTouch(void) {
 100b8f4:	defffe04 	addi	sp,sp,-8
 100b8f8:	df000115 	stw	fp,4(sp)
 100b8fc:	df000104 	addi	fp,sp,4
	int rx;
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received character from 6850 RxData register.
	while ((Touch_Status & 0x01) != 0x01)
 100b900:	00a10034 	movhi	r2,33792
 100b904:	10808c04 	addi	r2,r2,560
 100b908:	10800003 	ldbu	r2,0(r2)
 100b90c:	10803fcc 	andi	r2,r2,255
 100b910:	1080004c 	andi	r2,r2,1
 100b914:	1005003a 	cmpeq	r2,r2,zero
 100b918:	103ff91e 	bne	r2,zero,100b900 <getcharTouch+0xc>
		;
	rx = Touch_Recieve;
 100b91c:	00a10034 	movhi	r2,33792
 100b920:	10808c84 	addi	r2,r2,562
 100b924:	10800003 	ldbu	r2,0(r2)
 100b928:	10803fcc 	andi	r2,r2,255
 100b92c:	e0bfff15 	stw	r2,-4(fp)
	return rx;
 100b930:	e0bfff17 	ldw	r2,-4(fp)
}
 100b934:	e037883a 	mov	sp,fp
 100b938:	df000017 	ldw	fp,0(sp)
 100b93c:	dec00104 	addi	sp,sp,4
 100b940:	f800283a 	ret

0100b944 <updateTime>:

void updateTime() {
 100b944:	deffb104 	addi	sp,sp,-316
 100b948:	dfc04e15 	stw	ra,312(sp)
 100b94c:	df004d15 	stw	fp,308(sp)
 100b950:	df004d04 	addi	fp,sp,308
	Object *timeObject = &(home->objects[2]);
 100b954:	d0a71117 	ldw	r2,-25532(gp)
 100b958:	10800917 	ldw	r2,36(r2)
 100b95c:	10801204 	addi	r2,r2,72
 100b960:	e0bfb815 	stw	r2,-288(fp)
	char c;
	char *ptr;
	char buff[256];
	ptr = buff;
 100b964:	e0bfb904 	addi	r2,fp,-284
 100b968:	e0bfb615 	stw	r2,-296(fp)
	if (globalCurrentPage != home) {
 100b96c:	d0e71417 	ldw	r3,-25520(gp)
 100b970:	d0a71117 	ldw	r2,-25532(gp)
 100b974:	1880411e 	bne	r3,r2,100ba7c <updateTime+0x138>
		return;
	}
	while (GetData() != '$') {
 100b978:	10097d80 	call	10097d8 <GetData>
 100b97c:	10803fcc 	andi	r2,r2,255
 100b980:	1080201c 	xori	r2,r2,128
 100b984:	10bfe004 	addi	r2,r2,-128
 100b988:	10800918 	cmpnei	r2,r2,36
 100b98c:	103ffa1e 	bne	r2,zero,100b978 <updateTime+0x34>

	}
	while ((c = GetData()) != '*') {
 100b990:	00000606 	br	100b9ac <updateTime+0x68>
		*ptr++ = c;
 100b994:	e0ffb617 	ldw	r3,-296(fp)
 100b998:	e0bfb703 	ldbu	r2,-292(fp)
 100b99c:	18800005 	stb	r2,0(r3)
 100b9a0:	e0bfb617 	ldw	r2,-296(fp)
 100b9a4:	10800044 	addi	r2,r2,1
 100b9a8:	e0bfb615 	stw	r2,-296(fp)
		return;
	}
	while (GetData() != '$') {

	}
	while ((c = GetData()) != '*') {
 100b9ac:	10097d80 	call	10097d8 <GetData>
 100b9b0:	e0bfb705 	stb	r2,-292(fp)
 100b9b4:	e0bfb707 	ldb	r2,-292(fp)
 100b9b8:	10800a98 	cmpnei	r2,r2,42
 100b9bc:	103ff51e 	bne	r2,zero,100b994 <updateTime+0x50>
		*ptr++ = c;
	}
	*ptr = '\0';
 100b9c0:	e0bfb617 	ldw	r2,-296(fp)
 100b9c4:	10000005 	stb	zero,0(r2)
	if (checkBuff(buff) == 1) {
 100b9c8:	e13fb904 	addi	r4,fp,-284
 100b9cc:	1009ae80 	call	1009ae8 <checkBuff>
 100b9d0:	10800058 	cmpnei	r2,r2,1
 100b9d4:	1000291e 	bne	r2,zero,100ba7c <updateTime+0x138>
		char minuteBuff[10];
		char timeBuff[10];
		char concatTime[8];

		// grab the time values concatenate them
		printTime(6, 8, 10, buff, "", minuteBuff, timeBuff);
 100b9d8:	e1ffb904 	addi	r7,fp,-284
 100b9dc:	008040f4 	movhi	r2,259
 100b9e0:	10926f04 	addi	r2,r2,18876
 100b9e4:	d8800015 	stw	r2,0(sp)
 100b9e8:	e0bff904 	addi	r2,fp,-28
 100b9ec:	d8800115 	stw	r2,4(sp)
 100b9f0:	e0bffb84 	addi	r2,fp,-18
 100b9f4:	d8800215 	stw	r2,8(sp)
 100b9f8:	01000184 	movi	r4,6
 100b9fc:	01400204 	movi	r5,8
 100ba00:	01800284 	movi	r6,10
 100ba04:	1009b9c0 	call	1009b9c <printTime>
		strcpy(concatTime, timeBuff);
 100ba08:	e13ffe04 	addi	r4,fp,-8
 100ba0c:	e17ffb84 	addi	r5,fp,-18
 100ba10:	1015c700 	call	1015c70 <strcpy>
		strcat(concatTime, minuteBuff);
 100ba14:	e13ffe04 	addi	r4,fp,-8
 100ba18:	e17ff904 	addi	r5,fp,-28
 100ba1c:	1015b240 	call	1015b24 <strcat>
		concatTime[strlen(concatTime) - 1] = '\0';
 100ba20:	e13ffe04 	addi	r4,fp,-8
 100ba24:	1015cfc0 	call	1015cfc <strlen>
 100ba28:	10ffffc4 	addi	r3,r2,-1
 100ba2c:	e0bffe04 	addi	r2,fp,-8
 100ba30:	10c5883a 	add	r2,r2,r3
 100ba34:	10000005 	stb	zero,0(r2)
		printf("%s\n", concatTime);
 100ba38:	e13ffe04 	addi	r4,fp,-8
 100ba3c:	10156400 	call	1015640 <puts>

		// draw the time onto the screen
		strcpy(timeObject->objectText, concatTime);
 100ba40:	e0bfb817 	ldw	r2,-288(fp)
 100ba44:	11000017 	ldw	r4,0(r2)
 100ba48:	e17ffe04 	addi	r5,fp,-8
 100ba4c:	1015c700 	call	1015c70 <strcpy>
		drawObject(timeObject);
 100ba50:	e13fb817 	ldw	r4,-288(fp)
 100ba54:	10063d80 	call	10063d8 <drawObject>
		printf("%s ", timeObject->objectText);
 100ba58:	e0bfb817 	ldw	r2,-288(fp)
 100ba5c:	11400017 	ldw	r5,0(r2)
 100ba60:	010040f4 	movhi	r4,259
 100ba64:	21127004 	addi	r4,r4,18880
 100ba68:	10155040 	call	1015504 <printf>
		writeCaptionObject(timeObject, BLACK, PINK);
 100ba6c:	e13fb817 	ldw	r4,-288(fp)
 100ba70:	000b883a 	mov	r5,zero
 100ba74:	01801a04 	movi	r6,104
 100ba78:	100be040 	call	100be04 <writeCaptionObject>
	}
}
 100ba7c:	e037883a 	mov	sp,fp
 100ba80:	dfc00117 	ldw	ra,4(sp)
 100ba84:	df000017 	ldw	fp,0(sp)
 100ba88:	dec00204 	addi	sp,sp,8
 100ba8c:	f800283a 	ret

0100ba90 <updateCoord>:

void updateCoord() {
 100ba90:	deffb204 	addi	sp,sp,-312
 100ba94:	dfc04d15 	stw	ra,308(sp)
 100ba98:	df004c15 	stw	fp,304(sp)
 100ba9c:	df004c04 	addi	fp,sp,304

	Object *gpsLat = &(self->objects[5]);
 100baa0:	d0a70517 	ldw	r2,-25580(gp)
 100baa4:	10800917 	ldw	r2,36(r2)
 100baa8:	10802d04 	addi	r2,r2,180
 100baac:	e0bfb815 	stw	r2,-288(fp)
	Object *gpsLong = &(self->objects[6]);
 100bab0:	d0a70517 	ldw	r2,-25580(gp)
 100bab4:	10800917 	ldw	r2,36(r2)
 100bab8:	10803604 	addi	r2,r2,216
 100babc:	e0bfb715 	stw	r2,-292(fp)
	char c;
	char *ptr;
	char buff[256];
	ptr = buff;
 100bac0:	e0bfb904 	addi	r2,fp,-284
 100bac4:	e0bfb515 	stw	r2,-300(fp)
	if (globalCurrentPage != self) {
 100bac8:	d0e71417 	ldw	r3,-25520(gp)
 100bacc:	d0a70517 	ldw	r2,-25580(gp)
 100bad0:	1880331e 	bne	r3,r2,100bba0 <updateCoord+0x110>
		return;
	}
	//Wait for the valid data
	while (GetData() != '$') {
 100bad4:	10097d80 	call	10097d8 <GetData>
 100bad8:	10803fcc 	andi	r2,r2,255
 100badc:	1080201c 	xori	r2,r2,128
 100bae0:	10bfe004 	addi	r2,r2,-128
 100bae4:	10800918 	cmpnei	r2,r2,36
 100bae8:	103ffa1e 	bne	r2,zero,100bad4 <updateCoord+0x44>

	}
	//save the date
	while ((c = GetData()) != '*') {
 100baec:	00000606 	br	100bb08 <updateCoord+0x78>

		*ptr++ = c;
 100baf0:	e0ffb517 	ldw	r3,-300(fp)
 100baf4:	e0bfb603 	ldbu	r2,-296(fp)
 100baf8:	18800005 	stb	r2,0(r3)
 100bafc:	e0bfb517 	ldw	r2,-300(fp)
 100bb00:	10800044 	addi	r2,r2,1
 100bb04:	e0bfb515 	stw	r2,-300(fp)
	//Wait for the valid data
	while (GetData() != '$') {

	}
	//save the date
	while ((c = GetData()) != '*') {
 100bb08:	10097d80 	call	10097d8 <GetData>
 100bb0c:	e0bfb605 	stb	r2,-296(fp)
 100bb10:	e0bfb607 	ldb	r2,-296(fp)
 100bb14:	10800a98 	cmpnei	r2,r2,42
 100bb18:	103ff51e 	bne	r2,zero,100baf0 <updateCoord+0x60>

		*ptr++ = c;
	}
	*ptr = '\0';
 100bb1c:	e0bfb517 	ldw	r2,-300(fp)
 100bb20:	10000005 	stb	zero,0(r2)

	if (checkBuff(buff) == 1) {
 100bb24:	e13fb904 	addi	r4,fp,-284
 100bb28:	1009ae80 	call	1009ae8 <checkBuff>
 100bb2c:	10800058 	cmpnei	r2,r2,1
 100bb30:	10001b1e 	bne	r2,zero,100bba0 <updateCoord+0x110>

		char lat[12];
		char longitude[13];

		printCoordinates(17, 29, buff, lat, longitude);
 100bb34:	e1bfb904 	addi	r6,fp,-284
 100bb38:	e1fff904 	addi	r7,fp,-28
 100bb3c:	e0bffc04 	addi	r2,fp,-16
 100bb40:	d8800015 	stw	r2,0(sp)
 100bb44:	01000444 	movi	r4,17
 100bb48:	01400744 	movi	r5,29
 100bb4c:	1009eb80 	call	1009eb8 <printCoordinates>

		//Draw Lat on to the object in the self page
		strcpy(gpsLat->objectText, lat);
 100bb50:	e0bfb817 	ldw	r2,-288(fp)
 100bb54:	11000017 	ldw	r4,0(r2)
 100bb58:	e17ff904 	addi	r5,fp,-28
 100bb5c:	1015c700 	call	1015c70 <strcpy>
		drawObject(gpsLat);
 100bb60:	e13fb817 	ldw	r4,-288(fp)
 100bb64:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObject(gpsLat, BLACK, PINK);
 100bb68:	e13fb817 	ldw	r4,-288(fp)
 100bb6c:	000b883a 	mov	r5,zero
 100bb70:	01801a04 	movi	r6,104
 100bb74:	100be040 	call	100be04 <writeCaptionObject>
		//Draw Long
		strcpy(gpsLong->objectText, longitude);
 100bb78:	e0bfb717 	ldw	r2,-292(fp)
 100bb7c:	11000017 	ldw	r4,0(r2)
 100bb80:	e17ffc04 	addi	r5,fp,-16
 100bb84:	1015c700 	call	1015c70 <strcpy>
		drawObject(gpsLong);
 100bb88:	e13fb717 	ldw	r4,-292(fp)
 100bb8c:	10063d80 	call	10063d8 <drawObject>
		writeCaptionObject(gpsLong, BLACK, PINK);
 100bb90:	e13fb717 	ldw	r4,-292(fp)
 100bb94:	000b883a 	mov	r5,zero
 100bb98:	01801a04 	movi	r6,104
 100bb9c:	100be040 	call	100be04 <writeCaptionObject>
	}
}
 100bba0:	e037883a 	mov	sp,fp
 100bba4:	dfc00117 	ldw	ra,4(sp)
 100bba8:	df000017 	ldw	fp,0(sp)
 100bbac:	dec00204 	addi	sp,sp,8
 100bbb0:	f800283a 	ret

0100bbb4 <updateCoordNoPrint>:

void updateCoordNoPrint() {
 100bbb4:	deffb504 	addi	sp,sp,-300
 100bbb8:	dfc04a15 	stw	ra,296(sp)
 100bbbc:	df004915 	stw	fp,292(sp)
 100bbc0:	df004904 	addi	fp,sp,292

	char c;
	char *ptr;
	char buff[256];
	ptr = buff;
 100bbc4:	e0bfb944 	addi	r2,fp,-283
 100bbc8:	e0bfb815 	stw	r2,-288(fp)
	//wait for valid data
	while (GetData() != '$') {
 100bbcc:	10097d80 	call	10097d8 <GetData>
 100bbd0:	10803fcc 	andi	r2,r2,255
 100bbd4:	1080201c 	xori	r2,r2,128
 100bbd8:	10bfe004 	addi	r2,r2,-128
 100bbdc:	10800918 	cmpnei	r2,r2,36
 100bbe0:	103ffa1e 	bne	r2,zero,100bbcc <updateCoordNoPrint+0x18>

	}
	while ((c = GetData()) != '*') {
 100bbe4:	00000606 	br	100bc00 <updateCoordNoPrint+0x4c>

		*ptr++ = c;
 100bbe8:	e0ffb817 	ldw	r3,-288(fp)
 100bbec:	e0bfb903 	ldbu	r2,-284(fp)
 100bbf0:	18800005 	stb	r2,0(r3)
 100bbf4:	e0bfb817 	ldw	r2,-288(fp)
 100bbf8:	10800044 	addi	r2,r2,1
 100bbfc:	e0bfb815 	stw	r2,-288(fp)
	ptr = buff;
	//wait for valid data
	while (GetData() != '$') {

	}
	while ((c = GetData()) != '*') {
 100bc00:	10097d80 	call	10097d8 <GetData>
 100bc04:	e0bfb905 	stb	r2,-284(fp)
 100bc08:	e0bfb907 	ldb	r2,-284(fp)
 100bc0c:	10800a98 	cmpnei	r2,r2,42
 100bc10:	103ff51e 	bne	r2,zero,100bbe8 <updateCoordNoPrint+0x34>

		*ptr++ = c;
	}
	*ptr = '\0';
 100bc14:	e0bfb817 	ldw	r2,-288(fp)
 100bc18:	10000005 	stb	zero,0(r2)
	if (checkBuff(buff) == 1) {
 100bc1c:	e13fb944 	addi	r4,fp,-283
 100bc20:	1009ae80 	call	1009ae8 <checkBuff>
 100bc24:	10800058 	cmpnei	r2,r2,1
 100bc28:	1000071e 	bne	r2,zero,100bc48 <updateCoordNoPrint+0x94>

		char lat[12];
		char longitude[13];

		printCoordinates(17, 29, buff, lat, longitude);
 100bc2c:	e1bfb944 	addi	r6,fp,-283
 100bc30:	e1fff944 	addi	r7,fp,-27
 100bc34:	e0bffc44 	addi	r2,fp,-15
 100bc38:	d8800015 	stw	r2,0(sp)
 100bc3c:	01000444 	movi	r4,17
 100bc40:	01400744 	movi	r5,29
 100bc44:	1009eb80 	call	1009eb8 <printCoordinates>

	}
}
 100bc48:	e037883a 	mov	sp,fp
 100bc4c:	dfc00117 	ldw	ra,4(sp)
 100bc50:	df000017 	ldw	fp,0(sp)
 100bc54:	dec00204 	addi	sp,sp,8
 100bc58:	f800283a 	ret

0100bc5c <timerISR>:

void timerISR() {
 100bc5c:	defffd04 	addi	sp,sp,-12
 100bc60:	dfc00215 	stw	ra,8(sp)
 100bc64:	df000115 	stw	fp,4(sp)
 100bc68:	df000104 	addi	fp,sp,4

	updateTime();
 100bc6c:	100b9440 	call	100b944 <updateTime>
	updateCoord();
 100bc70:	100ba900 	call	100ba90 <updateCoord>
	updateCoordNoPrint();
 100bc74:	100bbb40 	call	100bbb4 <updateCoordNoPrint>
	char *buf = "y";
 100bc78:	008040f4 	movhi	r2,259
 100bc7c:	10927104 	addi	r2,r2,18884
 100bc80:	e0bfff15 	stw	r2,-4(fp)
	readFromSD(buf, "logf.txt", 1);
 100bc84:	e13fff17 	ldw	r4,-4(fp)
 100bc88:	014040f4 	movhi	r5,259
 100bc8c:	29527204 	addi	r5,r5,18888
 100bc90:	01800044 	movi	r6,1
 100bc94:	100ae780 	call	100ae78 <readFromSD>
	//Reset the LEDS
	redLEDS = 0x0;
 100bc98:	00a00034 	movhi	r2,32768
 100bc9c:	10841004 	addi	r2,r2,4160
 100bca0:	10000005 	stb	zero,0(r2)
	greenLEDS = 0x0;
 100bca4:	00a00034 	movhi	r2,32768
 100bca8:	10840c04 	addi	r2,r2,4144
 100bcac:	10000005 	stb	zero,0(r2)
	//read the flag for logging
	if (strcmp(buf, "y") == 0) {
 100bcb0:	e13fff17 	ldw	r4,-4(fp)
 100bcb4:	014040f4 	movhi	r5,259
 100bcb8:	29527104 	addi	r5,r5,18884
 100bcbc:	1015bb40 	call	1015bb4 <strcmp>
 100bcc0:	1004c03a 	cmpne	r2,r2,zero
 100bcc4:	1000011e 	bne	r2,zero,100bccc <timerISR+0x70>
		checkDistance();
 100bcc8:	100a63c0 	call	100a63c <checkDistance>
	}
	alt_timestamp_start();
 100bccc:	10276200 	call	1027620 <alt_timestamp_start>

}
 100bcd0:	e037883a 	mov	sp,fp
 100bcd4:	dfc00117 	ldw	ra,4(sp)
 100bcd8:	df000017 	ldw	fp,0(sp)
 100bcdc:	dec00204 	addi	sp,sp,8
 100bce0:	f800283a 	ret

0100bce4 <writeCaptionButton>:
#include <stdlib.h>
#include "Structures.h"
#include "WriteCaption.h"
#include "Font_alg.h"

void writeCaptionButton(Button * button, int fontColor, int backgroundColor) {
 100bce4:	defff404 	addi	sp,sp,-48
 100bce8:	dfc00b15 	stw	ra,44(sp)
 100bcec:	df000a15 	stw	fp,40(sp)
 100bcf0:	df000a04 	addi	fp,sp,40
 100bcf4:	e13ffd15 	stw	r4,-12(fp)
 100bcf8:	e17ffe15 	stw	r5,-8(fp)
 100bcfc:	e1bfff15 	stw	r6,-4(fp)

	int xCenter = button->x1 + (button->x2 - button->x1) / 2;
 100bd00:	e0bffd17 	ldw	r2,-12(fp)
 100bd04:	11000117 	ldw	r4,4(r2)
 100bd08:	e0bffd17 	ldw	r2,-12(fp)
 100bd0c:	10c00217 	ldw	r3,8(r2)
 100bd10:	e0bffd17 	ldw	r2,-12(fp)
 100bd14:	10800117 	ldw	r2,4(r2)
 100bd18:	1887c83a 	sub	r3,r3,r2
 100bd1c:	1804d7fa 	srli	r2,r3,31
 100bd20:	10c5883a 	add	r2,r2,r3
 100bd24:	1005d07a 	srai	r2,r2,1
 100bd28:	2085883a 	add	r2,r4,r2
 100bd2c:	e0bffc15 	stw	r2,-16(fp)
	int yCenter = button->y1 + (button->y2 - button->y1) / 2 - 4;
 100bd30:	e0bffd17 	ldw	r2,-12(fp)
 100bd34:	11000317 	ldw	r4,12(r2)
 100bd38:	e0bffd17 	ldw	r2,-12(fp)
 100bd3c:	10c00417 	ldw	r3,16(r2)
 100bd40:	e0bffd17 	ldw	r2,-12(fp)
 100bd44:	10800317 	ldw	r2,12(r2)
 100bd48:	1887c83a 	sub	r3,r3,r2
 100bd4c:	1804d7fa 	srli	r2,r3,31
 100bd50:	10c5883a 	add	r2,r2,r3
 100bd54:	1005d07a 	srai	r2,r2,1
 100bd58:	2085883a 	add	r2,r4,r2
 100bd5c:	10bfff04 	addi	r2,r2,-4
 100bd60:	e0bffb15 	stw	r2,-20(fp)
	int x_start = xCenter - (button->captionLength * 10 / 2);
 100bd64:	e0bffd17 	ldw	r2,-12(fp)
 100bd68:	10800817 	ldw	r2,32(r2)
 100bd6c:	10c00164 	muli	r3,r2,5
 100bd70:	e0bffc17 	ldw	r2,-16(fp)
 100bd74:	10c5c83a 	sub	r2,r2,r3
 100bd78:	e0bffa15 	stw	r2,-24(fp)
	int len = button->captionLength;
 100bd7c:	e0bffd17 	ldw	r2,-12(fp)
 100bd80:	10800817 	ldw	r2,32(r2)
 100bd84:	e0bff915 	stw	r2,-28(fp)
	int i;

	for (i = 0; i < len; i++) {
 100bd88:	e03ff815 	stw	zero,-32(fp)
 100bd8c:	00001506 	br	100bde4 <writeCaptionButton+0x100>
		OutGraphicsCharFont2a(x_start + i * 10, yCenter, fontColor,
 100bd90:	e0bff817 	ldw	r2,-32(fp)
 100bd94:	10c002a4 	muli	r3,r2,10
 100bd98:	e0bffa17 	ldw	r2,-24(fp)
 100bd9c:	1889883a 	add	r4,r3,r2
 100bda0:	e0bffd17 	ldw	r2,-12(fp)
 100bda4:	10c00017 	ldw	r3,0(r2)
 100bda8:	e0bff817 	ldw	r2,-32(fp)
 100bdac:	1885883a 	add	r2,r3,r2
 100bdb0:	10800003 	ldbu	r2,0(r2)
 100bdb4:	10803fcc 	andi	r2,r2,255
 100bdb8:	1080201c 	xori	r2,r2,128
 100bdbc:	10bfe004 	addi	r2,r2,-128
 100bdc0:	d8800015 	stw	r2,0(sp)
 100bdc4:	d8000115 	stw	zero,4(sp)
 100bdc8:	e17ffb17 	ldw	r5,-20(fp)
 100bdcc:	e1bffe17 	ldw	r6,-8(fp)
 100bdd0:	e1ffff17 	ldw	r7,-4(fp)
 100bdd4:	10095d00 	call	10095d0 <OutGraphicsCharFont2a>
	int yCenter = button->y1 + (button->y2 - button->y1) / 2 - 4;
	int x_start = xCenter - (button->captionLength * 10 / 2);
	int len = button->captionLength;
	int i;

	for (i = 0; i < len; i++) {
 100bdd8:	e0bff817 	ldw	r2,-32(fp)
 100bddc:	10800044 	addi	r2,r2,1
 100bde0:	e0bff815 	stw	r2,-32(fp)
 100bde4:	e0fff817 	ldw	r3,-32(fp)
 100bde8:	e0bff917 	ldw	r2,-28(fp)
 100bdec:	18bfe816 	blt	r3,r2,100bd90 <writeCaptionButton+0xac>
		OutGraphicsCharFont2a(x_start + i * 10, yCenter, fontColor,
				backgroundColor, button->buttonText[i], 0);

	}
}
 100bdf0:	e037883a 	mov	sp,fp
 100bdf4:	dfc00117 	ldw	ra,4(sp)
 100bdf8:	df000017 	ldw	fp,0(sp)
 100bdfc:	dec00204 	addi	sp,sp,8
 100be00:	f800283a 	ret

0100be04 <writeCaptionObject>:

void writeCaptionObject(Object * object, int fontColor, int backgroundColor) {
 100be04:	defff404 	addi	sp,sp,-48
 100be08:	dfc00b15 	stw	ra,44(sp)
 100be0c:	df000a15 	stw	fp,40(sp)
 100be10:	df000a04 	addi	fp,sp,40
 100be14:	e13ffd15 	stw	r4,-12(fp)
 100be18:	e17ffe15 	stw	r5,-8(fp)
 100be1c:	e1bfff15 	stw	r6,-4(fp)

	int xCenter = object->x1 + (object->x2 - object->x1) / 2 - 8;
 100be20:	e0bffd17 	ldw	r2,-12(fp)
 100be24:	11000117 	ldw	r4,4(r2)
 100be28:	e0bffd17 	ldw	r2,-12(fp)
 100be2c:	10c00217 	ldw	r3,8(r2)
 100be30:	e0bffd17 	ldw	r2,-12(fp)
 100be34:	10800117 	ldw	r2,4(r2)
 100be38:	1887c83a 	sub	r3,r3,r2
 100be3c:	1804d7fa 	srli	r2,r3,31
 100be40:	10c5883a 	add	r2,r2,r3
 100be44:	1005d07a 	srai	r2,r2,1
 100be48:	2085883a 	add	r2,r4,r2
 100be4c:	10bffe04 	addi	r2,r2,-8
 100be50:	e0bffc15 	stw	r2,-16(fp)
	int yCenter = object->y1 + (object->y2 - object->y1) / 2 - 4;
 100be54:	e0bffd17 	ldw	r2,-12(fp)
 100be58:	11000317 	ldw	r4,12(r2)
 100be5c:	e0bffd17 	ldw	r2,-12(fp)
 100be60:	10c00417 	ldw	r3,16(r2)
 100be64:	e0bffd17 	ldw	r2,-12(fp)
 100be68:	10800317 	ldw	r2,12(r2)
 100be6c:	1887c83a 	sub	r3,r3,r2
 100be70:	1804d7fa 	srli	r2,r3,31
 100be74:	10c5883a 	add	r2,r2,r3
 100be78:	1005d07a 	srai	r2,r2,1
 100be7c:	2085883a 	add	r2,r4,r2
 100be80:	10bfff04 	addi	r2,r2,-4
 100be84:	e0bffb15 	stw	r2,-20(fp)
	int x_start = xCenter - (object->captionLength * 10 / 2);
 100be88:	e0bffd17 	ldw	r2,-12(fp)
 100be8c:	10800817 	ldw	r2,32(r2)
 100be90:	10c00164 	muli	r3,r2,5
 100be94:	e0bffc17 	ldw	r2,-16(fp)
 100be98:	10c5c83a 	sub	r2,r2,r3
 100be9c:	e0bffa15 	stw	r2,-24(fp)
	int len = object->captionLength;
 100bea0:	e0bffd17 	ldw	r2,-12(fp)
 100bea4:	10800817 	ldw	r2,32(r2)
 100bea8:	e0bff915 	stw	r2,-28(fp)
	int i;

	for (i = 0; i < len; i++) {
 100beac:	e03ff815 	stw	zero,-32(fp)
 100beb0:	00001506 	br	100bf08 <writeCaptionObject+0x104>

		OutGraphicsCharFont2a(x_start + i * 11, yCenter, fontColor,
 100beb4:	e0bff817 	ldw	r2,-32(fp)
 100beb8:	10c002e4 	muli	r3,r2,11
 100bebc:	e0bffa17 	ldw	r2,-24(fp)
 100bec0:	1889883a 	add	r4,r3,r2
 100bec4:	e0bffd17 	ldw	r2,-12(fp)
 100bec8:	10c00017 	ldw	r3,0(r2)
 100becc:	e0bff817 	ldw	r2,-32(fp)
 100bed0:	1885883a 	add	r2,r3,r2
 100bed4:	10800003 	ldbu	r2,0(r2)
 100bed8:	10803fcc 	andi	r2,r2,255
 100bedc:	1080201c 	xori	r2,r2,128
 100bee0:	10bfe004 	addi	r2,r2,-128
 100bee4:	d8800015 	stw	r2,0(sp)
 100bee8:	d8000115 	stw	zero,4(sp)
 100beec:	e17ffb17 	ldw	r5,-20(fp)
 100bef0:	e1bffe17 	ldw	r6,-8(fp)
 100bef4:	e1ffff17 	ldw	r7,-4(fp)
 100bef8:	10095d00 	call	10095d0 <OutGraphicsCharFont2a>
	int yCenter = object->y1 + (object->y2 - object->y1) / 2 - 4;
	int x_start = xCenter - (object->captionLength * 10 / 2);
	int len = object->captionLength;
	int i;

	for (i = 0; i < len; i++) {
 100befc:	e0bff817 	ldw	r2,-32(fp)
 100bf00:	10800044 	addi	r2,r2,1
 100bf04:	e0bff815 	stw	r2,-32(fp)
 100bf08:	e0fff817 	ldw	r3,-32(fp)
 100bf0c:	e0bff917 	ldw	r2,-28(fp)
 100bf10:	18bfe816 	blt	r3,r2,100beb4 <writeCaptionObject+0xb0>
		OutGraphicsCharFont2a(x_start + i * 11, yCenter, fontColor,
				backgroundColor, object->objectText[i], 0);

	}

}
 100bf14:	e037883a 	mov	sp,fp
 100bf18:	dfc00117 	ldw	ra,4(sp)
 100bf1c:	df000017 	ldw	fp,0(sp)
 100bf20:	dec00204 	addi	sp,sp,8
 100bf24:	f800283a 	ret

0100bf28 <writeCaptionObjectLarge>:

void writeCaptionObjectLarge(Object * object, int fontColor,
		int backgroundColor) {
 100bf28:	defff504 	addi	sp,sp,-44
 100bf2c:	dfc00a15 	stw	ra,40(sp)
 100bf30:	df000915 	stw	fp,36(sp)
 100bf34:	df000904 	addi	fp,sp,36
 100bf38:	e13ffd15 	stw	r4,-12(fp)
 100bf3c:	e17ffe15 	stw	r5,-8(fp)
 100bf40:	e1bfff15 	stw	r6,-4(fp)

	int xCenter = object->x1 + (object->x2 - object->x1) / 2 - 4;
 100bf44:	e0bffd17 	ldw	r2,-12(fp)
 100bf48:	11000117 	ldw	r4,4(r2)
 100bf4c:	e0bffd17 	ldw	r2,-12(fp)
 100bf50:	10c00217 	ldw	r3,8(r2)
 100bf54:	e0bffd17 	ldw	r2,-12(fp)
 100bf58:	10800117 	ldw	r2,4(r2)
 100bf5c:	1887c83a 	sub	r3,r3,r2
 100bf60:	1804d7fa 	srli	r2,r3,31
 100bf64:	10c5883a 	add	r2,r2,r3
 100bf68:	1005d07a 	srai	r2,r2,1
 100bf6c:	2085883a 	add	r2,r4,r2
 100bf70:	10bfff04 	addi	r2,r2,-4
 100bf74:	e0bffc15 	stw	r2,-16(fp)
	int yCenter = object->y1 + (object->y2 - object->y1) / 2 - 4;
 100bf78:	e0bffd17 	ldw	r2,-12(fp)
 100bf7c:	11000317 	ldw	r4,12(r2)
 100bf80:	e0bffd17 	ldw	r2,-12(fp)
 100bf84:	10c00417 	ldw	r3,16(r2)
 100bf88:	e0bffd17 	ldw	r2,-12(fp)
 100bf8c:	10800317 	ldw	r2,12(r2)
 100bf90:	1887c83a 	sub	r3,r3,r2
 100bf94:	1804d7fa 	srli	r2,r3,31
 100bf98:	10c5883a 	add	r2,r2,r3
 100bf9c:	1005d07a 	srai	r2,r2,1
 100bfa0:	2085883a 	add	r2,r4,r2
 100bfa4:	10bfff04 	addi	r2,r2,-4
 100bfa8:	e0bffb15 	stw	r2,-20(fp)
	int len = object->captionLength;
 100bfac:	e0bffd17 	ldw	r2,-12(fp)
 100bfb0:	10800817 	ldw	r2,32(r2)
 100bfb4:	e0bffa15 	stw	r2,-24(fp)
	int i;

	for (i = 0; i < len; i++) {
 100bfb8:	e03ff915 	stw	zero,-28(fp)
 100bfbc:	00001706 	br	100c01c <writeCaptionObjectLarge+0xf4>

		OutGraphicsCharFont2a(object->x1 + 5 + i * 11, yCenter, fontColor,
 100bfc0:	e0bffd17 	ldw	r2,-12(fp)
 100bfc4:	10c00117 	ldw	r3,4(r2)
 100bfc8:	e0bff917 	ldw	r2,-28(fp)
 100bfcc:	108002e4 	muli	r2,r2,11
 100bfd0:	1885883a 	add	r2,r3,r2
 100bfd4:	11000144 	addi	r4,r2,5
 100bfd8:	e0bffd17 	ldw	r2,-12(fp)
 100bfdc:	10c00017 	ldw	r3,0(r2)
 100bfe0:	e0bff917 	ldw	r2,-28(fp)
 100bfe4:	1885883a 	add	r2,r3,r2
 100bfe8:	10800003 	ldbu	r2,0(r2)
 100bfec:	10803fcc 	andi	r2,r2,255
 100bff0:	1080201c 	xori	r2,r2,128
 100bff4:	10bfe004 	addi	r2,r2,-128
 100bff8:	d8800015 	stw	r2,0(sp)
 100bffc:	d8000115 	stw	zero,4(sp)
 100c000:	e17ffb17 	ldw	r5,-20(fp)
 100c004:	e1bffe17 	ldw	r6,-8(fp)
 100c008:	e1ffff17 	ldw	r7,-4(fp)
 100c00c:	10095d00 	call	10095d0 <OutGraphicsCharFont2a>
	int xCenter = object->x1 + (object->x2 - object->x1) / 2 - 4;
	int yCenter = object->y1 + (object->y2 - object->y1) / 2 - 4;
	int len = object->captionLength;
	int i;

	for (i = 0; i < len; i++) {
 100c010:	e0bff917 	ldw	r2,-28(fp)
 100c014:	10800044 	addi	r2,r2,1
 100c018:	e0bff915 	stw	r2,-28(fp)
 100c01c:	e0fff917 	ldw	r3,-28(fp)
 100c020:	e0bffa17 	ldw	r2,-24(fp)
 100c024:	18bfe616 	blt	r3,r2,100bfc0 <writeCaptionObjectLarge+0x98>

		OutGraphicsCharFont2a(object->x1 + 5 + i * 11, yCenter, fontColor,
				backgroundColor, object->objectText[i], 0);
	}

}
 100c028:	e037883a 	mov	sp,fp
 100c02c:	dfc00117 	ldw	ra,4(sp)
 100c030:	df000017 	ldw	fp,0(sp)
 100c034:	dec00204 	addi	sp,sp,8
 100c038:	f800283a 	ret

0100c03c <writeCaptionKey>:

void writeCaptionKey(Key * k, int fontColor, int backgroundColor) {
 100c03c:	defff404 	addi	sp,sp,-48
 100c040:	dfc00b15 	stw	ra,44(sp)
 100c044:	df000a15 	stw	fp,40(sp)
 100c048:	df000a04 	addi	fp,sp,40
 100c04c:	e13ffd15 	stw	r4,-12(fp)
 100c050:	e17ffe15 	stw	r5,-8(fp)
 100c054:	e1bfff15 	stw	r6,-4(fp)

	int xCenter = k->x1 + (k->x2 - k->x1) / 2 - 4;
 100c058:	e0bffd17 	ldw	r2,-12(fp)
 100c05c:	11000317 	ldw	r4,12(r2)
 100c060:	e0bffd17 	ldw	r2,-12(fp)
 100c064:	10c00417 	ldw	r3,16(r2)
 100c068:	e0bffd17 	ldw	r2,-12(fp)
 100c06c:	10800317 	ldw	r2,12(r2)
 100c070:	1887c83a 	sub	r3,r3,r2
 100c074:	1804d7fa 	srli	r2,r3,31
 100c078:	10c5883a 	add	r2,r2,r3
 100c07c:	1005d07a 	srai	r2,r2,1
 100c080:	2085883a 	add	r2,r4,r2
 100c084:	10bfff04 	addi	r2,r2,-4
 100c088:	e0bffc15 	stw	r2,-16(fp)
	int yCenter = k->y1 + (k->y2 - k->y1) / 2 - 4;
 100c08c:	e0bffd17 	ldw	r2,-12(fp)
 100c090:	11000517 	ldw	r4,20(r2)
 100c094:	e0bffd17 	ldw	r2,-12(fp)
 100c098:	10c00617 	ldw	r3,24(r2)
 100c09c:	e0bffd17 	ldw	r2,-12(fp)
 100c0a0:	10800517 	ldw	r2,20(r2)
 100c0a4:	1887c83a 	sub	r3,r3,r2
 100c0a8:	1804d7fa 	srli	r2,r3,31
 100c0ac:	10c5883a 	add	r2,r2,r3
 100c0b0:	1005d07a 	srai	r2,r2,1
 100c0b4:	2085883a 	add	r2,r4,r2
 100c0b8:	10bfff04 	addi	r2,r2,-4
 100c0bc:	e0bffb15 	stw	r2,-20(fp)
	int x_start = xCenter - (k->len * 10 / 2);
 100c0c0:	e0bffd17 	ldw	r2,-12(fp)
 100c0c4:	10800817 	ldw	r2,32(r2)
 100c0c8:	10c00164 	muli	r3,r2,5
 100c0cc:	e0bffc17 	ldw	r2,-16(fp)
 100c0d0:	10c5c83a 	sub	r2,r2,r3
 100c0d4:	e0bffa15 	stw	r2,-24(fp)
	int len = k->len;
 100c0d8:	e0bffd17 	ldw	r2,-12(fp)
 100c0dc:	10800817 	ldw	r2,32(r2)
 100c0e0:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
 100c0e4:	e03ff815 	stw	zero,-32(fp)

	if (len == 1) {
 100c0e8:	e0bff917 	ldw	r2,-28(fp)
 100c0ec:	10800058 	cmpnei	r2,r2,1
 100c0f0:	10000b1e 	bne	r2,zero,100c120 <writeCaptionKey+0xe4>
		OutGraphicsCharFont2a(xCenter - 2, yCenter, fontColor, backgroundColor,
 100c0f4:	e0bffc17 	ldw	r2,-16(fp)
 100c0f8:	113fff84 	addi	r4,r2,-2
 100c0fc:	e0bffd17 	ldw	r2,-12(fp)
 100c100:	10800717 	ldw	r2,28(r2)
 100c104:	d8800015 	stw	r2,0(sp)
 100c108:	d8000115 	stw	zero,4(sp)
 100c10c:	e17ffb17 	ldw	r5,-20(fp)
 100c110:	e1bffe17 	ldw	r6,-8(fp)
 100c114:	e1ffff17 	ldw	r7,-4(fp)
 100c118:	10095d00 	call	10095d0 <OutGraphicsCharFont2a>
				k->alpha, 0);
		return;
 100c11c:	00001a06 	br	100c188 <writeCaptionKey+0x14c>
	}

	for (i = 0; i < len; i++) {
 100c120:	e03ff815 	stw	zero,-32(fp)
 100c124:	00001506 	br	100c17c <writeCaptionKey+0x140>

		OutGraphicsCharFont2a(x_start + i * 11, yCenter, fontColor,
 100c128:	e0bff817 	ldw	r2,-32(fp)
 100c12c:	10c002e4 	muli	r3,r2,11
 100c130:	e0bffa17 	ldw	r2,-24(fp)
 100c134:	1889883a 	add	r4,r3,r2
 100c138:	e0bffd17 	ldw	r2,-12(fp)
 100c13c:	10c00717 	ldw	r3,28(r2)
 100c140:	e0bff817 	ldw	r2,-32(fp)
 100c144:	1885883a 	add	r2,r3,r2
 100c148:	10800003 	ldbu	r2,0(r2)
 100c14c:	10803fcc 	andi	r2,r2,255
 100c150:	1080201c 	xori	r2,r2,128
 100c154:	10bfe004 	addi	r2,r2,-128
 100c158:	d8800015 	stw	r2,0(sp)
 100c15c:	d8000115 	stw	zero,4(sp)
 100c160:	e17ffb17 	ldw	r5,-20(fp)
 100c164:	e1bffe17 	ldw	r6,-8(fp)
 100c168:	e1ffff17 	ldw	r7,-4(fp)
 100c16c:	10095d00 	call	10095d0 <OutGraphicsCharFont2a>
		OutGraphicsCharFont2a(xCenter - 2, yCenter, fontColor, backgroundColor,
				k->alpha, 0);
		return;
	}

	for (i = 0; i < len; i++) {
 100c170:	e0bff817 	ldw	r2,-32(fp)
 100c174:	10800044 	addi	r2,r2,1
 100c178:	e0bff815 	stw	r2,-32(fp)
 100c17c:	e0fff817 	ldw	r3,-32(fp)
 100c180:	e0bff917 	ldw	r2,-28(fp)
 100c184:	18bfe816 	blt	r3,r2,100c128 <writeCaptionKey+0xec>

		OutGraphicsCharFont2a(x_start + i * 11, yCenter, fontColor,
				backgroundColor, k->alpha[i], 0);
	}
}
 100c188:	e037883a 	mov	sp,fp
 100c18c:	dfc00117 	ldw	ra,4(sp)
 100c190:	df000017 	ldw	fp,0(sp)
 100c194:	dec00204 	addi	sp,sp,8
 100c198:	f800283a 	ret

0100c19c <vec3>:
	Vertex* vertices;
	Triangle* T;
	Point2D *centroids;
} Delaunay;

Vector3 vec3(double x, double y, double z) {
 100c19c:	defff604 	addi	sp,sp,-40
 100c1a0:	df000815 	stw	fp,32(sp)
 100c1a4:	df000804 	addi	fp,sp,32
 100c1a8:	e17ffe15 	stw	r5,-8(fp)
 100c1ac:	e1bfff15 	stw	r6,-4(fp)
 100c1b0:	e1c00115 	stw	r7,4(fp)
	Vector3 v;
	v.x = x;
 100c1b4:	e0bffe17 	ldw	r2,-8(fp)
 100c1b8:	e0bff815 	stw	r2,-32(fp)
 100c1bc:	e0bfff17 	ldw	r2,-4(fp)
 100c1c0:	e0bff915 	stw	r2,-28(fp)
	v.y = y;
 100c1c4:	e0800117 	ldw	r2,4(fp)
 100c1c8:	e0bffa15 	stw	r2,-24(fp)
 100c1cc:	e0800217 	ldw	r2,8(fp)
 100c1d0:	e0bffb15 	stw	r2,-20(fp)
	v.z = z;
 100c1d4:	e0800317 	ldw	r2,12(fp)
 100c1d8:	e0bffc15 	stw	r2,-16(fp)
 100c1dc:	e0800417 	ldw	r2,16(fp)
 100c1e0:	e0bffd15 	stw	r2,-12(fp)

	return v;
 100c1e4:	e0bff817 	ldw	r2,-32(fp)
 100c1e8:	20800015 	stw	r2,0(r4)
 100c1ec:	e0bff917 	ldw	r2,-28(fp)
 100c1f0:	20800115 	stw	r2,4(r4)
 100c1f4:	e0bffa17 	ldw	r2,-24(fp)
 100c1f8:	20800215 	stw	r2,8(r4)
 100c1fc:	e0bffb17 	ldw	r2,-20(fp)
 100c200:	20800315 	stw	r2,12(r4)
 100c204:	e0bffc17 	ldw	r2,-16(fp)
 100c208:	20800415 	stw	r2,16(r4)
 100c20c:	e0bffd17 	ldw	r2,-12(fp)
 100c210:	20800515 	stw	r2,20(r4)
}
 100c214:	2005883a 	mov	r2,r4
 100c218:	e037883a 	mov	sp,fp
 100c21c:	df000017 	ldw	fp,0(sp)
 100c220:	dec00204 	addi	sp,sp,8
 100c224:	f800283a 	ret

0100c228 <dotv>:

double dotv(Vertex v1, Vertex v2) {
 100c228:	defff804 	addi	sp,sp,-32
 100c22c:	dfc00315 	stw	ra,12(sp)
 100c230:	df000215 	stw	fp,8(sp)
 100c234:	dc400115 	stw	r17,4(sp)
 100c238:	dc000015 	stw	r16,0(sp)
 100c23c:	d839883a 	mov	fp,sp
 100c240:	e1000415 	stw	r4,16(fp)
 100c244:	e1400515 	stw	r5,20(fp)
 100c248:	e1800615 	stw	r6,24(fp)
 100c24c:	e1c00715 	stw	r7,28(fp)
	return v1.x * v2.x + v1.y * v2.y;
 100c250:	e1400817 	ldw	r5,32(fp)
 100c254:	e1800917 	ldw	r6,36(fp)
 100c258:	e0801017 	ldw	r2,64(fp)
 100c25c:	e0c01117 	ldw	r3,68(fp)
 100c260:	2809883a 	mov	r4,r5
 100c264:	300b883a 	mov	r5,r6
 100c268:	100d883a 	mov	r6,r2
 100c26c:	180f883a 	mov	r7,r3
 100c270:	1012a940 	call	1012a94 <__muldf3>
 100c274:	1009883a 	mov	r4,r2
 100c278:	180b883a 	mov	r5,r3
 100c27c:	2021883a 	mov	r16,r4
 100c280:	2823883a 	mov	r17,r5
 100c284:	e1400a17 	ldw	r5,40(fp)
 100c288:	e1800b17 	ldw	r6,44(fp)
 100c28c:	e0801217 	ldw	r2,72(fp)
 100c290:	e0c01317 	ldw	r3,76(fp)
 100c294:	2809883a 	mov	r4,r5
 100c298:	300b883a 	mov	r5,r6
 100c29c:	100d883a 	mov	r6,r2
 100c2a0:	180f883a 	mov	r7,r3
 100c2a4:	1012a940 	call	1012a94 <__muldf3>
 100c2a8:	1009883a 	mov	r4,r2
 100c2ac:	180b883a 	mov	r5,r3
 100c2b0:	2005883a 	mov	r2,r4
 100c2b4:	2807883a 	mov	r3,r5
 100c2b8:	8009883a 	mov	r4,r16
 100c2bc:	880b883a 	mov	r5,r17
 100c2c0:	100d883a 	mov	r6,r2
 100c2c4:	180f883a 	mov	r7,r3
 100c2c8:	1012a200 	call	1012a20 <__adddf3>
 100c2cc:	1009883a 	mov	r4,r2
 100c2d0:	180b883a 	mov	r5,r3
 100c2d4:	200d883a 	mov	r6,r4
 100c2d8:	280f883a 	mov	r7,r5
 100c2dc:	3007883a 	mov	r3,r6
 100c2e0:	3809883a 	mov	r4,r7
}
 100c2e4:	1805883a 	mov	r2,r3
 100c2e8:	2007883a 	mov	r3,r4
 100c2ec:	e037883a 	mov	sp,fp
 100c2f0:	dfc00317 	ldw	ra,12(sp)
 100c2f4:	df000217 	ldw	fp,8(sp)
 100c2f8:	dc400117 	ldw	r17,4(sp)
 100c2fc:	dc000017 	ldw	r16,0(sp)
 100c300:	dec00804 	addi	sp,sp,32
 100c304:	f800283a 	ret

0100c308 <dotp>:

double dotp(Point2D p1, Point2D p2) {
 100c308:	defff804 	addi	sp,sp,-32
 100c30c:	dfc00715 	stw	ra,28(sp)
 100c310:	df000615 	stw	fp,24(sp)
 100c314:	dc400515 	stw	r17,20(sp)
 100c318:	dc000415 	stw	r16,16(sp)
 100c31c:	df000404 	addi	fp,sp,16
 100c320:	e13ffc15 	stw	r4,-16(fp)
 100c324:	e17ffd15 	stw	r5,-12(fp)
 100c328:	e1bffe15 	stw	r6,-8(fp)
 100c32c:	e1ffff15 	stw	r7,-4(fp)
	return p1.x * p2.x + p1.y * p2.y;
 100c330:	e17ffc17 	ldw	r5,-16(fp)
 100c334:	e1bffd17 	ldw	r6,-12(fp)
 100c338:	e0800417 	ldw	r2,16(fp)
 100c33c:	e0c00517 	ldw	r3,20(fp)
 100c340:	2809883a 	mov	r4,r5
 100c344:	300b883a 	mov	r5,r6
 100c348:	100d883a 	mov	r6,r2
 100c34c:	180f883a 	mov	r7,r3
 100c350:	1012a940 	call	1012a94 <__muldf3>
 100c354:	1009883a 	mov	r4,r2
 100c358:	180b883a 	mov	r5,r3
 100c35c:	2021883a 	mov	r16,r4
 100c360:	2823883a 	mov	r17,r5
 100c364:	e17ffe17 	ldw	r5,-8(fp)
 100c368:	e1bfff17 	ldw	r6,-4(fp)
 100c36c:	e0800617 	ldw	r2,24(fp)
 100c370:	e0c00717 	ldw	r3,28(fp)
 100c374:	2809883a 	mov	r4,r5
 100c378:	300b883a 	mov	r5,r6
 100c37c:	100d883a 	mov	r6,r2
 100c380:	180f883a 	mov	r7,r3
 100c384:	1012a940 	call	1012a94 <__muldf3>
 100c388:	1009883a 	mov	r4,r2
 100c38c:	180b883a 	mov	r5,r3
 100c390:	2005883a 	mov	r2,r4
 100c394:	2807883a 	mov	r3,r5
 100c398:	8009883a 	mov	r4,r16
 100c39c:	880b883a 	mov	r5,r17
 100c3a0:	100d883a 	mov	r6,r2
 100c3a4:	180f883a 	mov	r7,r3
 100c3a8:	1012a200 	call	1012a20 <__adddf3>
 100c3ac:	1009883a 	mov	r4,r2
 100c3b0:	180b883a 	mov	r5,r3
 100c3b4:	200d883a 	mov	r6,r4
 100c3b8:	280f883a 	mov	r7,r5
 100c3bc:	3007883a 	mov	r3,r6
 100c3c0:	3809883a 	mov	r4,r7
}
 100c3c4:	1805883a 	mov	r2,r3
 100c3c8:	2007883a 	mov	r3,r4
 100c3cc:	e037883a 	mov	sp,fp
 100c3d0:	dfc00317 	ldw	ra,12(sp)
 100c3d4:	df000217 	ldw	fp,8(sp)
 100c3d8:	dc400117 	ldw	r17,4(sp)
 100c3dc:	dc000017 	ldw	r16,0(sp)
 100c3e0:	dec00404 	addi	sp,sp,16
 100c3e4:	f800283a 	ret

0100c3e8 <crossp>:

double crossp(Point2D p1, Point2D p2) {
 100c3e8:	defff804 	addi	sp,sp,-32
 100c3ec:	dfc00715 	stw	ra,28(sp)
 100c3f0:	df000615 	stw	fp,24(sp)
 100c3f4:	dc400515 	stw	r17,20(sp)
 100c3f8:	dc000415 	stw	r16,16(sp)
 100c3fc:	df000404 	addi	fp,sp,16
 100c400:	e13ffc15 	stw	r4,-16(fp)
 100c404:	e17ffd15 	stw	r5,-12(fp)
 100c408:	e1bffe15 	stw	r6,-8(fp)
 100c40c:	e1ffff15 	stw	r7,-4(fp)
	return p1.x * p2.y - p2.x * p1.y;
 100c410:	e17ffc17 	ldw	r5,-16(fp)
 100c414:	e1bffd17 	ldw	r6,-12(fp)
 100c418:	e0800617 	ldw	r2,24(fp)
 100c41c:	e0c00717 	ldw	r3,28(fp)
 100c420:	2809883a 	mov	r4,r5
 100c424:	300b883a 	mov	r5,r6
 100c428:	100d883a 	mov	r6,r2
 100c42c:	180f883a 	mov	r7,r3
 100c430:	1012a940 	call	1012a94 <__muldf3>
 100c434:	1009883a 	mov	r4,r2
 100c438:	180b883a 	mov	r5,r3
 100c43c:	2021883a 	mov	r16,r4
 100c440:	2823883a 	mov	r17,r5
 100c444:	e1400417 	ldw	r5,16(fp)
 100c448:	e1800517 	ldw	r6,20(fp)
 100c44c:	e0bffe17 	ldw	r2,-8(fp)
 100c450:	e0ffff17 	ldw	r3,-4(fp)
 100c454:	2809883a 	mov	r4,r5
 100c458:	300b883a 	mov	r5,r6
 100c45c:	100d883a 	mov	r6,r2
 100c460:	180f883a 	mov	r7,r3
 100c464:	1012a940 	call	1012a94 <__muldf3>
 100c468:	1009883a 	mov	r4,r2
 100c46c:	180b883a 	mov	r5,r3
 100c470:	2005883a 	mov	r2,r4
 100c474:	2807883a 	mov	r3,r5
 100c478:	8009883a 	mov	r4,r16
 100c47c:	880b883a 	mov	r5,r17
 100c480:	100d883a 	mov	r6,r2
 100c484:	180f883a 	mov	r7,r3
 100c488:	10129a00 	call	10129a0 <__subdf3>
 100c48c:	1009883a 	mov	r4,r2
 100c490:	180b883a 	mov	r5,r3
 100c494:	200d883a 	mov	r6,r4
 100c498:	280f883a 	mov	r7,r5
 100c49c:	3007883a 	mov	r3,r6
 100c4a0:	3809883a 	mov	r4,r7
}
 100c4a4:	1805883a 	mov	r2,r3
 100c4a8:	2007883a 	mov	r3,r4
 100c4ac:	e037883a 	mov	sp,fp
 100c4b0:	dfc00317 	ldw	ra,12(sp)
 100c4b4:	df000217 	ldw	fp,8(sp)
 100c4b8:	dc400117 	ldw	r17,4(sp)
 100c4bc:	dc000017 	ldw	r16,0(sp)
 100c4c0:	dec00404 	addi	sp,sp,16
 100c4c4:	f800283a 	ret

0100c4c8 <crossv>:

double crossv(Vertex v1, Vertex v2) {
 100c4c8:	defff804 	addi	sp,sp,-32
 100c4cc:	dfc00315 	stw	ra,12(sp)
 100c4d0:	df000215 	stw	fp,8(sp)
 100c4d4:	dc400115 	stw	r17,4(sp)
 100c4d8:	dc000015 	stw	r16,0(sp)
 100c4dc:	d839883a 	mov	fp,sp
 100c4e0:	e1000415 	stw	r4,16(fp)
 100c4e4:	e1400515 	stw	r5,20(fp)
 100c4e8:	e1800615 	stw	r6,24(fp)
 100c4ec:	e1c00715 	stw	r7,28(fp)
	return v1.x * v2.y - v2.x * v1.y;
 100c4f0:	e1400817 	ldw	r5,32(fp)
 100c4f4:	e1800917 	ldw	r6,36(fp)
 100c4f8:	e0801217 	ldw	r2,72(fp)
 100c4fc:	e0c01317 	ldw	r3,76(fp)
 100c500:	2809883a 	mov	r4,r5
 100c504:	300b883a 	mov	r5,r6
 100c508:	100d883a 	mov	r6,r2
 100c50c:	180f883a 	mov	r7,r3
 100c510:	1012a940 	call	1012a94 <__muldf3>
 100c514:	1009883a 	mov	r4,r2
 100c518:	180b883a 	mov	r5,r3
 100c51c:	2021883a 	mov	r16,r4
 100c520:	2823883a 	mov	r17,r5
 100c524:	e1401017 	ldw	r5,64(fp)
 100c528:	e1801117 	ldw	r6,68(fp)
 100c52c:	e0800a17 	ldw	r2,40(fp)
 100c530:	e0c00b17 	ldw	r3,44(fp)
 100c534:	2809883a 	mov	r4,r5
 100c538:	300b883a 	mov	r5,r6
 100c53c:	100d883a 	mov	r6,r2
 100c540:	180f883a 	mov	r7,r3
 100c544:	1012a940 	call	1012a94 <__muldf3>
 100c548:	1009883a 	mov	r4,r2
 100c54c:	180b883a 	mov	r5,r3
 100c550:	2005883a 	mov	r2,r4
 100c554:	2807883a 	mov	r3,r5
 100c558:	8009883a 	mov	r4,r16
 100c55c:	880b883a 	mov	r5,r17
 100c560:	100d883a 	mov	r6,r2
 100c564:	180f883a 	mov	r7,r3
 100c568:	10129a00 	call	10129a0 <__subdf3>
 100c56c:	1009883a 	mov	r4,r2
 100c570:	180b883a 	mov	r5,r3
 100c574:	200d883a 	mov	r6,r4
 100c578:	280f883a 	mov	r7,r5
 100c57c:	3007883a 	mov	r3,r6
 100c580:	3809883a 	mov	r4,r7
}
 100c584:	1805883a 	mov	r2,r3
 100c588:	2007883a 	mov	r3,r4
 100c58c:	e037883a 	mov	sp,fp
 100c590:	dfc00317 	ldw	ra,12(sp)
 100c594:	df000217 	ldw	fp,8(sp)
 100c598:	dc400117 	ldw	r17,4(sp)
 100c59c:	dc000017 	ldw	r16,0(sp)
 100c5a0:	dec00804 	addi	sp,sp,32
 100c5a4:	f800283a 	ret

0100c5a8 <vsubv>:

Vertex vsubv(Vertex v1, Vertex v2) {
 100c5a8:	defff204 	addi	sp,sp,-56
 100c5ac:	dfc00a15 	stw	ra,40(sp)
 100c5b0:	df000915 	stw	fp,36(sp)
 100c5b4:	dc000815 	stw	r16,32(sp)
 100c5b8:	df000804 	addi	fp,sp,32
 100c5bc:	2021883a 	mov	r16,r4
 100c5c0:	e1400315 	stw	r5,12(fp)
 100c5c4:	e1800415 	stw	r6,16(fp)
 100c5c8:	e1c00515 	stw	r7,20(fp)
	Vertex v;
	v.x = v1.x - v2.x;
 100c5cc:	e1400717 	ldw	r5,28(fp)
 100c5d0:	e1800817 	ldw	r6,32(fp)
 100c5d4:	e0800f17 	ldw	r2,60(fp)
 100c5d8:	e0c01017 	ldw	r3,64(fp)
 100c5dc:	2809883a 	mov	r4,r5
 100c5e0:	300b883a 	mov	r5,r6
 100c5e4:	100d883a 	mov	r6,r2
 100c5e8:	180f883a 	mov	r7,r3
 100c5ec:	10129a00 	call	10129a0 <__subdf3>
 100c5f0:	1009883a 	mov	r4,r2
 100c5f4:	180b883a 	mov	r5,r3
 100c5f8:	2005883a 	mov	r2,r4
 100c5fc:	2807883a 	mov	r3,r5
 100c600:	e0bffc15 	stw	r2,-16(fp)
 100c604:	e0fffd15 	stw	r3,-12(fp)
	v.y = v1.y - v2.y;
 100c608:	e1400917 	ldw	r5,36(fp)
 100c60c:	e1800a17 	ldw	r6,40(fp)
 100c610:	e0801117 	ldw	r2,68(fp)
 100c614:	e0c01217 	ldw	r3,72(fp)
 100c618:	2809883a 	mov	r4,r5
 100c61c:	300b883a 	mov	r5,r6
 100c620:	100d883a 	mov	r6,r2
 100c624:	180f883a 	mov	r7,r3
 100c628:	10129a00 	call	10129a0 <__subdf3>
 100c62c:	1009883a 	mov	r4,r2
 100c630:	180b883a 	mov	r5,r3
 100c634:	2005883a 	mov	r2,r4
 100c638:	2807883a 	mov	r3,r5
 100c63c:	e0bffe15 	stw	r2,-8(fp)
 100c640:	e0ffff15 	stw	r3,-4(fp)
	return v;
 100c644:	e0bff817 	ldw	r2,-32(fp)
 100c648:	80800015 	stw	r2,0(r16)
 100c64c:	e0bff917 	ldw	r2,-28(fp)
 100c650:	80800115 	stw	r2,4(r16)
 100c654:	e0bffa17 	ldw	r2,-24(fp)
 100c658:	80800215 	stw	r2,8(r16)
 100c65c:	e0bffb17 	ldw	r2,-20(fp)
 100c660:	80800315 	stw	r2,12(r16)
 100c664:	e0bffc17 	ldw	r2,-16(fp)
 100c668:	80800415 	stw	r2,16(r16)
 100c66c:	e0bffd17 	ldw	r2,-12(fp)
 100c670:	80800515 	stw	r2,20(r16)
 100c674:	e0bffe17 	ldw	r2,-8(fp)
 100c678:	80800615 	stw	r2,24(r16)
 100c67c:	e0bfff17 	ldw	r2,-4(fp)
 100c680:	80800715 	stw	r2,28(r16)
}
 100c684:	8005883a 	mov	r2,r16
 100c688:	e037883a 	mov	sp,fp
 100c68c:	dfc00217 	ldw	ra,8(sp)
 100c690:	df000117 	ldw	fp,4(sp)
 100c694:	dc000017 	ldw	r16,0(sp)
 100c698:	dec00604 	addi	sp,sp,24
 100c69c:	f800283a 	ret

0100c6a0 <vsubp>:

Point2D vsubp(Vertex v1, Vertex v2) {
 100c6a0:	defff604 	addi	sp,sp,-40
 100c6a4:	dfc00615 	stw	ra,24(sp)
 100c6a8:	df000515 	stw	fp,20(sp)
 100c6ac:	dc000415 	stw	r16,16(sp)
 100c6b0:	df000404 	addi	fp,sp,16
 100c6b4:	2021883a 	mov	r16,r4
 100c6b8:	e1400315 	stw	r5,12(fp)
 100c6bc:	e1800415 	stw	r6,16(fp)
 100c6c0:	e1c00515 	stw	r7,20(fp)
	Point2D p;
	p.x = v1.x - v2.x;
 100c6c4:	e1400717 	ldw	r5,28(fp)
 100c6c8:	e1800817 	ldw	r6,32(fp)
 100c6cc:	e0800f17 	ldw	r2,60(fp)
 100c6d0:	e0c01017 	ldw	r3,64(fp)
 100c6d4:	2809883a 	mov	r4,r5
 100c6d8:	300b883a 	mov	r5,r6
 100c6dc:	100d883a 	mov	r6,r2
 100c6e0:	180f883a 	mov	r7,r3
 100c6e4:	10129a00 	call	10129a0 <__subdf3>
 100c6e8:	1009883a 	mov	r4,r2
 100c6ec:	180b883a 	mov	r5,r3
 100c6f0:	2005883a 	mov	r2,r4
 100c6f4:	2807883a 	mov	r3,r5
 100c6f8:	e0bffc15 	stw	r2,-16(fp)
 100c6fc:	e0fffd15 	stw	r3,-12(fp)
	p.y = v1.y - v2.y;
 100c700:	e1400917 	ldw	r5,36(fp)
 100c704:	e1800a17 	ldw	r6,40(fp)
 100c708:	e0801117 	ldw	r2,68(fp)
 100c70c:	e0c01217 	ldw	r3,72(fp)
 100c710:	2809883a 	mov	r4,r5
 100c714:	300b883a 	mov	r5,r6
 100c718:	100d883a 	mov	r6,r2
 100c71c:	180f883a 	mov	r7,r3
 100c720:	10129a00 	call	10129a0 <__subdf3>
 100c724:	1009883a 	mov	r4,r2
 100c728:	180b883a 	mov	r5,r3
 100c72c:	2005883a 	mov	r2,r4
 100c730:	2807883a 	mov	r3,r5
 100c734:	e0bffe15 	stw	r2,-8(fp)
 100c738:	e0ffff15 	stw	r3,-4(fp)
	return p;
 100c73c:	e0bffc17 	ldw	r2,-16(fp)
 100c740:	80800015 	stw	r2,0(r16)
 100c744:	e0bffd17 	ldw	r2,-12(fp)
 100c748:	80800115 	stw	r2,4(r16)
 100c74c:	e0bffe17 	ldw	r2,-8(fp)
 100c750:	80800215 	stw	r2,8(r16)
 100c754:	e0bfff17 	ldw	r2,-4(fp)
 100c758:	80800315 	stw	r2,12(r16)
}
 100c75c:	8005883a 	mov	r2,r16
 100c760:	e037883a 	mov	sp,fp
 100c764:	dfc00217 	ldw	ra,8(sp)
 100c768:	df000117 	ldw	fp,4(sp)
 100c76c:	dc000017 	ldw	r16,0(sp)
 100c770:	dec00604 	addi	sp,sp,24
 100c774:	f800283a 	ret

0100c778 <psubp>:

Point2D psubp(Point2D p1, Point2D p2) {
 100c778:	defff604 	addi	sp,sp,-40
 100c77c:	dfc00615 	stw	ra,24(sp)
 100c780:	df000515 	stw	fp,20(sp)
 100c784:	dc000415 	stw	r16,16(sp)
 100c788:	df000404 	addi	fp,sp,16
 100c78c:	2021883a 	mov	r16,r4
 100c790:	e1400315 	stw	r5,12(fp)
 100c794:	e1800415 	stw	r6,16(fp)
 100c798:	e1c00515 	stw	r7,20(fp)
	Point2D p;
	p.x = p1.x - p2.x;
 100c79c:	e1400317 	ldw	r5,12(fp)
 100c7a0:	e1800417 	ldw	r6,16(fp)
 100c7a4:	e0800717 	ldw	r2,28(fp)
 100c7a8:	e0c00817 	ldw	r3,32(fp)
 100c7ac:	2809883a 	mov	r4,r5
 100c7b0:	300b883a 	mov	r5,r6
 100c7b4:	100d883a 	mov	r6,r2
 100c7b8:	180f883a 	mov	r7,r3
 100c7bc:	10129a00 	call	10129a0 <__subdf3>
 100c7c0:	1009883a 	mov	r4,r2
 100c7c4:	180b883a 	mov	r5,r3
 100c7c8:	2005883a 	mov	r2,r4
 100c7cc:	2807883a 	mov	r3,r5
 100c7d0:	e0bffc15 	stw	r2,-16(fp)
 100c7d4:	e0fffd15 	stw	r3,-12(fp)
	p.y = p1.y - p2.y;
 100c7d8:	e1400517 	ldw	r5,20(fp)
 100c7dc:	e1800617 	ldw	r6,24(fp)
 100c7e0:	e0800917 	ldw	r2,36(fp)
 100c7e4:	e0c00a17 	ldw	r3,40(fp)
 100c7e8:	2809883a 	mov	r4,r5
 100c7ec:	300b883a 	mov	r5,r6
 100c7f0:	100d883a 	mov	r6,r2
 100c7f4:	180f883a 	mov	r7,r3
 100c7f8:	10129a00 	call	10129a0 <__subdf3>
 100c7fc:	1009883a 	mov	r4,r2
 100c800:	180b883a 	mov	r5,r3
 100c804:	2005883a 	mov	r2,r4
 100c808:	2807883a 	mov	r3,r5
 100c80c:	e0bffe15 	stw	r2,-8(fp)
 100c810:	e0ffff15 	stw	r3,-4(fp)
	return p;
 100c814:	e0bffc17 	ldw	r2,-16(fp)
 100c818:	80800015 	stw	r2,0(r16)
 100c81c:	e0bffd17 	ldw	r2,-12(fp)
 100c820:	80800115 	stw	r2,4(r16)
 100c824:	e0bffe17 	ldw	r2,-8(fp)
 100c828:	80800215 	stw	r2,8(r16)
 100c82c:	e0bfff17 	ldw	r2,-4(fp)
 100c830:	80800315 	stw	r2,12(r16)
}
 100c834:	8005883a 	mov	r2,r16
 100c838:	e037883a 	mov	sp,fp
 100c83c:	dfc00217 	ldw	ra,8(sp)
 100c840:	df000117 	ldw	fp,4(sp)
 100c844:	dc000017 	ldw	r16,0(sp)
 100c848:	dec00604 	addi	sp,sp,24
 100c84c:	f800283a 	ret

0100c850 <normsqv>:

double normsqv(Vertex v) {
 100c850:	deffee04 	addi	sp,sp,-72
 100c854:	dfc00d15 	stw	ra,52(sp)
 100c858:	df000c15 	stw	fp,48(sp)
 100c85c:	df000c04 	addi	fp,sp,48
 100c860:	e1000215 	stw	r4,8(fp)
 100c864:	e1400315 	stw	r5,12(fp)
 100c868:	e1800415 	stw	r6,16(fp)
 100c86c:	e1c00515 	stw	r7,20(fp)
	return dotv(v, v);
 100c870:	e0800217 	ldw	r2,8(fp)
 100c874:	d8800415 	stw	r2,16(sp)
 100c878:	e0800317 	ldw	r2,12(fp)
 100c87c:	d8800515 	stw	r2,20(sp)
 100c880:	e0800417 	ldw	r2,16(fp)
 100c884:	d8800615 	stw	r2,24(sp)
 100c888:	e0800517 	ldw	r2,20(fp)
 100c88c:	d8800715 	stw	r2,28(sp)
 100c890:	e0800617 	ldw	r2,24(fp)
 100c894:	d8800815 	stw	r2,32(sp)
 100c898:	e0800717 	ldw	r2,28(fp)
 100c89c:	d8800915 	stw	r2,36(sp)
 100c8a0:	e0800817 	ldw	r2,32(fp)
 100c8a4:	d8800a15 	stw	r2,40(sp)
 100c8a8:	e0800917 	ldw	r2,36(fp)
 100c8ac:	d8800b15 	stw	r2,44(sp)
 100c8b0:	e0800617 	ldw	r2,24(fp)
 100c8b4:	d8800015 	stw	r2,0(sp)
 100c8b8:	e0800717 	ldw	r2,28(fp)
 100c8bc:	d8800115 	stw	r2,4(sp)
 100c8c0:	e0800817 	ldw	r2,32(fp)
 100c8c4:	d8800215 	stw	r2,8(sp)
 100c8c8:	e0800917 	ldw	r2,36(fp)
 100c8cc:	d8800315 	stw	r2,12(sp)
 100c8d0:	e1000217 	ldw	r4,8(fp)
 100c8d4:	e1400317 	ldw	r5,12(fp)
 100c8d8:	e1800417 	ldw	r6,16(fp)
 100c8dc:	e1c00517 	ldw	r7,20(fp)
 100c8e0:	100c2280 	call	100c228 <dotv>
 100c8e4:	1009883a 	mov	r4,r2
 100c8e8:	180b883a 	mov	r5,r3
 100c8ec:	200d883a 	mov	r6,r4
 100c8f0:	280f883a 	mov	r7,r5
 100c8f4:	3007883a 	mov	r3,r6
 100c8f8:	3809883a 	mov	r4,r7
}
 100c8fc:	1805883a 	mov	r2,r3
 100c900:	2007883a 	mov	r3,r4
 100c904:	e037883a 	mov	sp,fp
 100c908:	dfc00117 	ldw	ra,4(sp)
 100c90c:	df000017 	ldw	fp,0(sp)
 100c910:	dec00604 	addi	sp,sp,24
 100c914:	f800283a 	ret

0100c918 <normsqp>:

double normsqp(Point2D p) {
 100c918:	defff604 	addi	sp,sp,-40
 100c91c:	dfc00915 	stw	ra,36(sp)
 100c920:	df000815 	stw	fp,32(sp)
 100c924:	df000804 	addi	fp,sp,32
 100c928:	e13ffc15 	stw	r4,-16(fp)
 100c92c:	e17ffd15 	stw	r5,-12(fp)
 100c930:	e1bffe15 	stw	r6,-8(fp)
 100c934:	e1ffff15 	stw	r7,-4(fp)
	return dotp(p, p);
 100c938:	e0bffc17 	ldw	r2,-16(fp)
 100c93c:	d8800015 	stw	r2,0(sp)
 100c940:	e0bffd17 	ldw	r2,-12(fp)
 100c944:	d8800115 	stw	r2,4(sp)
 100c948:	e0bffe17 	ldw	r2,-8(fp)
 100c94c:	d8800215 	stw	r2,8(sp)
 100c950:	e0bfff17 	ldw	r2,-4(fp)
 100c954:	d8800315 	stw	r2,12(sp)
 100c958:	e13ffc17 	ldw	r4,-16(fp)
 100c95c:	e17ffd17 	ldw	r5,-12(fp)
 100c960:	e1bffe17 	ldw	r6,-8(fp)
 100c964:	e1ffff17 	ldw	r7,-4(fp)
 100c968:	100c3080 	call	100c308 <dotp>
 100c96c:	1009883a 	mov	r4,r2
 100c970:	180b883a 	mov	r5,r3
 100c974:	200d883a 	mov	r6,r4
 100c978:	280f883a 	mov	r7,r5
 100c97c:	3007883a 	mov	r3,r6
 100c980:	3809883a 	mov	r4,r7
}
 100c984:	1805883a 	mov	r2,r3
 100c988:	2007883a 	mov	r3,r4
 100c98c:	e037883a 	mov	sp,fp
 100c990:	dfc00117 	ldw	ra,4(sp)
 100c994:	df000017 	ldw	fp,0(sp)
 100c998:	dec00204 	addi	sp,sp,8
 100c99c:	f800283a 	ret

0100c9a0 <normp>:

double normp(Point2D p) {
 100c9a0:	defff604 	addi	sp,sp,-40
 100c9a4:	dfc00915 	stw	ra,36(sp)
 100c9a8:	df000815 	stw	fp,32(sp)
 100c9ac:	df000804 	addi	fp,sp,32
 100c9b0:	e13ffc15 	stw	r4,-16(fp)
 100c9b4:	e17ffd15 	stw	r5,-12(fp)
 100c9b8:	e1bffe15 	stw	r6,-8(fp)
 100c9bc:	e1ffff15 	stw	r7,-4(fp)
	return sqrt(dotp(p, p));
 100c9c0:	e0bffc17 	ldw	r2,-16(fp)
 100c9c4:	d8800015 	stw	r2,0(sp)
 100c9c8:	e0bffd17 	ldw	r2,-12(fp)
 100c9cc:	d8800115 	stw	r2,4(sp)
 100c9d0:	e0bffe17 	ldw	r2,-8(fp)
 100c9d4:	d8800215 	stw	r2,8(sp)
 100c9d8:	e0bfff17 	ldw	r2,-4(fp)
 100c9dc:	d8800315 	stw	r2,12(sp)
 100c9e0:	e13ffc17 	ldw	r4,-16(fp)
 100c9e4:	e17ffd17 	ldw	r5,-12(fp)
 100c9e8:	e1bffe17 	ldw	r6,-8(fp)
 100c9ec:	e1ffff17 	ldw	r7,-4(fp)
 100c9f0:	100c3080 	call	100c308 <dotp>
 100c9f4:	100b883a 	mov	r5,r2
 100c9f8:	180d883a 	mov	r6,r3
 100c9fc:	2809883a 	mov	r4,r5
 100ca00:	300b883a 	mov	r5,r6
 100ca04:	100f37c0 	call	100f37c <sqrt>
 100ca08:	1009883a 	mov	r4,r2
 100ca0c:	180b883a 	mov	r5,r3
 100ca10:	200d883a 	mov	r6,r4
 100ca14:	280f883a 	mov	r7,r5
 100ca18:	3007883a 	mov	r3,r6
 100ca1c:	3809883a 	mov	r4,r7
}
 100ca20:	1805883a 	mov	r2,r3
 100ca24:	2007883a 	mov	r3,r4
 100ca28:	e037883a 	mov	sp,fp
 100ca2c:	dfc00117 	ldw	ra,4(sp)
 100ca30:	df000017 	ldw	fp,0(sp)
 100ca34:	dec00204 	addi	sp,sp,8
 100ca38:	f800283a 	ret

0100ca3c <point>:

Point2D point(double x, double y) {
 100ca3c:	defff804 	addi	sp,sp,-32
 100ca40:	df000615 	stw	fp,24(sp)
 100ca44:	df000604 	addi	fp,sp,24
 100ca48:	e17ffe15 	stw	r5,-8(fp)
 100ca4c:	e1bfff15 	stw	r6,-4(fp)
 100ca50:	e1c00115 	stw	r7,4(fp)
	Point2D p;
	p.x = x;
 100ca54:	e0bffe17 	ldw	r2,-8(fp)
 100ca58:	e0bffa15 	stw	r2,-24(fp)
 100ca5c:	e0bfff17 	ldw	r2,-4(fp)
 100ca60:	e0bffb15 	stw	r2,-20(fp)
	p.y = y;
 100ca64:	e0800117 	ldw	r2,4(fp)
 100ca68:	e0bffc15 	stw	r2,-16(fp)
 100ca6c:	e0800217 	ldw	r2,8(fp)
 100ca70:	e0bffd15 	stw	r2,-12(fp)
	return p;
 100ca74:	e0bffa17 	ldw	r2,-24(fp)
 100ca78:	20800015 	stw	r2,0(r4)
 100ca7c:	e0bffb17 	ldw	r2,-20(fp)
 100ca80:	20800115 	stw	r2,4(r4)
 100ca84:	e0bffc17 	ldw	r2,-16(fp)
 100ca88:	20800215 	stw	r2,8(r4)
 100ca8c:	e0bffd17 	ldw	r2,-12(fp)
 100ca90:	20800315 	stw	r2,12(r4)
}
 100ca94:	2005883a 	mov	r2,r4
 100ca98:	e037883a 	mov	sp,fp
 100ca9c:	df000017 	ldw	fp,0(sp)
 100caa0:	dec00204 	addi	sp,sp,8
 100caa4:	f800283a 	ret

0100caa8 <vtx>:

Vertex vtx(double x, double y, Point2D b) {
 100caa8:	defff404 	addi	sp,sp,-48
 100caac:	df000a15 	stw	fp,40(sp)
 100cab0:	df000a04 	addi	fp,sp,40
 100cab4:	e17ffe15 	stw	r5,-8(fp)
 100cab8:	e1bfff15 	stw	r6,-4(fp)
 100cabc:	e1c00115 	stw	r7,4(fp)
	Vertex v;
	v.x = x;
 100cac0:	e0bffe17 	ldw	r2,-8(fp)
 100cac4:	e0bffa15 	stw	r2,-24(fp)
 100cac8:	e0bfff17 	ldw	r2,-4(fp)
 100cacc:	e0bffb15 	stw	r2,-20(fp)
	v.y = y;
 100cad0:	e0800117 	ldw	r2,4(fp)
 100cad4:	e0bffc15 	stw	r2,-16(fp)
 100cad8:	e0800217 	ldw	r2,8(fp)
 100cadc:	e0bffd15 	stw	r2,-12(fp)
	v.bary = b;
 100cae0:	e0800317 	ldw	r2,12(fp)
 100cae4:	e0bff615 	stw	r2,-40(fp)
 100cae8:	e0800417 	ldw	r2,16(fp)
 100caec:	e0bff715 	stw	r2,-36(fp)
 100caf0:	e0800517 	ldw	r2,20(fp)
 100caf4:	e0bff815 	stw	r2,-32(fp)
 100caf8:	e0800617 	ldw	r2,24(fp)
 100cafc:	e0bff915 	stw	r2,-28(fp)
	return v;
 100cb00:	e0bff617 	ldw	r2,-40(fp)
 100cb04:	20800015 	stw	r2,0(r4)
 100cb08:	e0bff717 	ldw	r2,-36(fp)
 100cb0c:	20800115 	stw	r2,4(r4)
 100cb10:	e0bff817 	ldw	r2,-32(fp)
 100cb14:	20800215 	stw	r2,8(r4)
 100cb18:	e0bff917 	ldw	r2,-28(fp)
 100cb1c:	20800315 	stw	r2,12(r4)
 100cb20:	e0bffa17 	ldw	r2,-24(fp)
 100cb24:	20800415 	stw	r2,16(r4)
 100cb28:	e0bffb17 	ldw	r2,-20(fp)
 100cb2c:	20800515 	stw	r2,20(r4)
 100cb30:	e0bffc17 	ldw	r2,-16(fp)
 100cb34:	20800615 	stw	r2,24(r4)
 100cb38:	e0bffd17 	ldw	r2,-12(fp)
 100cb3c:	20800715 	stw	r2,28(r4)
}
 100cb40:	2005883a 	mov	r2,r4
 100cb44:	e037883a 	mov	sp,fp
 100cb48:	df000017 	ldw	fp,0(sp)
 100cb4c:	dec00204 	addi	sp,sp,8
 100cb50:	f800283a 	ret

0100cb54 <v2p>:

Point2D v2p(Vertex v) {
 100cb54:	defff904 	addi	sp,sp,-28
 100cb58:	dfc00315 	stw	ra,12(sp)
 100cb5c:	df000215 	stw	fp,8(sp)
 100cb60:	dc000115 	stw	r16,4(sp)
 100cb64:	df000104 	addi	fp,sp,4
 100cb68:	2021883a 	mov	r16,r4
 100cb6c:	e1400315 	stw	r5,12(fp)
 100cb70:	e1800415 	stw	r6,16(fp)
 100cb74:	e1c00515 	stw	r7,20(fp)
	return point(v.x, v.y);
 100cb78:	e2000717 	ldw	r8,28(fp)
 100cb7c:	e2400817 	ldw	r9,32(fp)
 100cb80:	e0800917 	ldw	r2,36(fp)
 100cb84:	e0c00a17 	ldw	r3,40(fp)
 100cb88:	d8c00015 	stw	r3,0(sp)
 100cb8c:	100f883a 	mov	r7,r2
 100cb90:	8009883a 	mov	r4,r16
 100cb94:	400b883a 	mov	r5,r8
 100cb98:	480d883a 	mov	r6,r9
 100cb9c:	100ca3c0 	call	100ca3c <point>
}
 100cba0:	8005883a 	mov	r2,r16
 100cba4:	e037883a 	mov	sp,fp
 100cba8:	dfc00217 	ldw	ra,8(sp)
 100cbac:	df000117 	ldw	fp,4(sp)
 100cbb0:	dc000017 	ldw	r16,0(sp)
 100cbb4:	dec00604 	addi	sp,sp,24
 100cbb8:	f800283a 	ret

0100cbbc <Vert>:

Vertex Vert(double x, double y, double bx, double by) {
 100cbbc:	defff404 	addi	sp,sp,-48
 100cbc0:	df000a15 	stw	fp,40(sp)
 100cbc4:	df000a04 	addi	fp,sp,40
 100cbc8:	e17ffe15 	stw	r5,-8(fp)
 100cbcc:	e1bfff15 	stw	r6,-4(fp)
 100cbd0:	e1c00115 	stw	r7,4(fp)
	Vertex v;
	v.x = x;
 100cbd4:	e0bffe17 	ldw	r2,-8(fp)
 100cbd8:	e0bffa15 	stw	r2,-24(fp)
 100cbdc:	e0bfff17 	ldw	r2,-4(fp)
 100cbe0:	e0bffb15 	stw	r2,-20(fp)
	v.y = y;
 100cbe4:	e0800117 	ldw	r2,4(fp)
 100cbe8:	e0bffc15 	stw	r2,-16(fp)
 100cbec:	e0800217 	ldw	r2,8(fp)
 100cbf0:	e0bffd15 	stw	r2,-12(fp)
	v.bary.x = bx;
 100cbf4:	e0800317 	ldw	r2,12(fp)
 100cbf8:	e0bff615 	stw	r2,-40(fp)
 100cbfc:	e0800417 	ldw	r2,16(fp)
 100cc00:	e0bff715 	stw	r2,-36(fp)
	v.bary.y = by;
 100cc04:	e0800517 	ldw	r2,20(fp)
 100cc08:	e0bff815 	stw	r2,-32(fp)
 100cc0c:	e0800617 	ldw	r2,24(fp)
 100cc10:	e0bff915 	stw	r2,-28(fp)

	return v;
 100cc14:	e0bff617 	ldw	r2,-40(fp)
 100cc18:	20800015 	stw	r2,0(r4)
 100cc1c:	e0bff717 	ldw	r2,-36(fp)
 100cc20:	20800115 	stw	r2,4(r4)
 100cc24:	e0bff817 	ldw	r2,-32(fp)
 100cc28:	20800215 	stw	r2,8(r4)
 100cc2c:	e0bff917 	ldw	r2,-28(fp)
 100cc30:	20800315 	stw	r2,12(r4)
 100cc34:	e0bffa17 	ldw	r2,-24(fp)
 100cc38:	20800415 	stw	r2,16(r4)
 100cc3c:	e0bffb17 	ldw	r2,-20(fp)
 100cc40:	20800515 	stw	r2,20(r4)
 100cc44:	e0bffc17 	ldw	r2,-16(fp)
 100cc48:	20800615 	stw	r2,24(r4)
 100cc4c:	e0bffd17 	ldw	r2,-12(fp)
 100cc50:	20800715 	stw	r2,28(r4)
}
 100cc54:	2005883a 	mov	r2,r4
 100cc58:	e037883a 	mov	sp,fp
 100cc5c:	df000017 	ldw	fp,0(sp)
 100cc60:	dec00204 	addi	sp,sp,8
 100cc64:	f800283a 	ret

0100cc68 <computeCentroid>:

Point2D computeCentroid(Triangle T) {
 100cc68:	defff504 	addi	sp,sp,-44
 100cc6c:	dfc00715 	stw	ra,28(sp)
 100cc70:	df000615 	stw	fp,24(sp)
 100cc74:	dc000515 	stw	r16,20(sp)
 100cc78:	df000504 	addi	fp,sp,20
 100cc7c:	2021883a 	mov	r16,r4
 100cc80:	e1400315 	stw	r5,12(fp)
 100cc84:	e1800415 	stw	r6,16(fp)
 100cc88:	e1c00515 	stw	r7,20(fp)
	double xavg = (T.v1.x + T.v2.x + T.v3.x) / 3;
 100cc8c:	e1400717 	ldw	r5,28(fp)
 100cc90:	e1800817 	ldw	r6,32(fp)
 100cc94:	e0800f17 	ldw	r2,60(fp)
 100cc98:	e0c01017 	ldw	r3,64(fp)
 100cc9c:	2809883a 	mov	r4,r5
 100cca0:	300b883a 	mov	r5,r6
 100cca4:	100d883a 	mov	r6,r2
 100cca8:	180f883a 	mov	r7,r3
 100ccac:	1012a200 	call	1012a20 <__adddf3>
 100ccb0:	1009883a 	mov	r4,r2
 100ccb4:	180b883a 	mov	r5,r3
 100ccb8:	200d883a 	mov	r6,r4
 100ccbc:	280f883a 	mov	r7,r5
 100ccc0:	e0801717 	ldw	r2,92(fp)
 100ccc4:	e0c01817 	ldw	r3,96(fp)
 100ccc8:	3009883a 	mov	r4,r6
 100cccc:	380b883a 	mov	r5,r7
 100ccd0:	100d883a 	mov	r6,r2
 100ccd4:	180f883a 	mov	r7,r3
 100ccd8:	1012a200 	call	1012a20 <__adddf3>
 100ccdc:	1009883a 	mov	r4,r2
 100cce0:	180b883a 	mov	r5,r3
 100cce4:	2005883a 	mov	r2,r4
 100cce8:	2807883a 	mov	r3,r5
 100ccec:	1009883a 	mov	r4,r2
 100ccf0:	180b883a 	mov	r5,r3
 100ccf4:	000d883a 	mov	r6,zero
 100ccf8:	01d00234 	movhi	r7,16392
 100ccfc:	1012e580 	call	1012e58 <__divdf3>
 100cd00:	1009883a 	mov	r4,r2
 100cd04:	180b883a 	mov	r5,r3
 100cd08:	e13ffe15 	stw	r4,-8(fp)
 100cd0c:	e17fff15 	stw	r5,-4(fp)
	double yavg = (T.v1.y + T.v2.y + T.v3.y) / 3;
 100cd10:	e1400917 	ldw	r5,36(fp)
 100cd14:	e1800a17 	ldw	r6,40(fp)
 100cd18:	e0801117 	ldw	r2,68(fp)
 100cd1c:	e0c01217 	ldw	r3,72(fp)
 100cd20:	2809883a 	mov	r4,r5
 100cd24:	300b883a 	mov	r5,r6
 100cd28:	100d883a 	mov	r6,r2
 100cd2c:	180f883a 	mov	r7,r3
 100cd30:	1012a200 	call	1012a20 <__adddf3>
 100cd34:	1009883a 	mov	r4,r2
 100cd38:	180b883a 	mov	r5,r3
 100cd3c:	200d883a 	mov	r6,r4
 100cd40:	280f883a 	mov	r7,r5
 100cd44:	e0801917 	ldw	r2,100(fp)
 100cd48:	e0c01a17 	ldw	r3,104(fp)
 100cd4c:	3009883a 	mov	r4,r6
 100cd50:	380b883a 	mov	r5,r7
 100cd54:	100d883a 	mov	r6,r2
 100cd58:	180f883a 	mov	r7,r3
 100cd5c:	1012a200 	call	1012a20 <__adddf3>
 100cd60:	1009883a 	mov	r4,r2
 100cd64:	180b883a 	mov	r5,r3
 100cd68:	2005883a 	mov	r2,r4
 100cd6c:	2807883a 	mov	r3,r5
 100cd70:	1009883a 	mov	r4,r2
 100cd74:	180b883a 	mov	r5,r3
 100cd78:	000d883a 	mov	r6,zero
 100cd7c:	01d00234 	movhi	r7,16392
 100cd80:	1012e580 	call	1012e58 <__divdf3>
 100cd84:	1009883a 	mov	r4,r2
 100cd88:	180b883a 	mov	r5,r3
 100cd8c:	e13ffc15 	stw	r4,-16(fp)
 100cd90:	e17ffd15 	stw	r5,-12(fp)
	// double zavg = (T.v1->z + T.v2->z + T.v3->z)/3;

	return point(xavg, yavg);
 100cd94:	e0bffd17 	ldw	r2,-12(fp)
 100cd98:	d8800015 	stw	r2,0(sp)
 100cd9c:	e1fffc17 	ldw	r7,-16(fp)
 100cda0:	8009883a 	mov	r4,r16
 100cda4:	e17ffe17 	ldw	r5,-8(fp)
 100cda8:	e1bfff17 	ldw	r6,-4(fp)
 100cdac:	100ca3c0 	call	100ca3c <point>
}
 100cdb0:	8005883a 	mov	r2,r16
 100cdb4:	e037883a 	mov	sp,fp
 100cdb8:	dfc00217 	ldw	ra,8(sp)
 100cdbc:	df000117 	ldw	fp,4(sp)
 100cdc0:	dc000017 	ldw	r16,0(sp)
 100cdc4:	dec00604 	addi	sp,sp,24
 100cdc8:	f800283a 	ret

0100cdcc <makeTri>:
//
// 	T.centroid = computeCentroid(T);
// 	return T;
// }

Triangle makeTri(Vertex v1, Vertex v2, Vertex v3) {
 100cdcc:	deff9f04 	addi	sp,sp,-388
 100cdd0:	dfc05d15 	stw	ra,372(sp)
 100cdd4:	df005c15 	stw	fp,368(sp)
 100cdd8:	dc805b15 	stw	r18,364(sp)
 100cddc:	dc405a15 	stw	r17,360(sp)
 100cde0:	dc005915 	stw	r16,356(sp)
 100cde4:	df005904 	addi	fp,sp,356
 100cde8:	2025883a 	mov	r18,r4
 100cdec:	e1400515 	stw	r5,20(fp)
 100cdf0:	e1800615 	stw	r6,24(fp)
 100cdf4:	e1c00715 	stw	r7,28(fp)
	Triangle T;
	T.v1 = v1;
 100cdf8:	e0800517 	ldw	r2,20(fp)
 100cdfc:	e0bfd015 	stw	r2,-192(fp)
 100ce00:	e0800617 	ldw	r2,24(fp)
 100ce04:	e0bfd115 	stw	r2,-188(fp)
 100ce08:	e0800717 	ldw	r2,28(fp)
 100ce0c:	e0bfd215 	stw	r2,-184(fp)
 100ce10:	e0800817 	ldw	r2,32(fp)
 100ce14:	e0bfd315 	stw	r2,-180(fp)
 100ce18:	e0800917 	ldw	r2,36(fp)
 100ce1c:	e0bfd415 	stw	r2,-176(fp)
 100ce20:	e0800a17 	ldw	r2,40(fp)
 100ce24:	e0bfd515 	stw	r2,-172(fp)
 100ce28:	e0800b17 	ldw	r2,44(fp)
 100ce2c:	e0bfd615 	stw	r2,-168(fp)
 100ce30:	e0800c17 	ldw	r2,48(fp)
 100ce34:	e0bfd715 	stw	r2,-164(fp)
	T.v2 = v2;
 100ce38:	e0800d17 	ldw	r2,52(fp)
 100ce3c:	e0bfd815 	stw	r2,-160(fp)
 100ce40:	e0800e17 	ldw	r2,56(fp)
 100ce44:	e0bfd915 	stw	r2,-156(fp)
 100ce48:	e0800f17 	ldw	r2,60(fp)
 100ce4c:	e0bfda15 	stw	r2,-152(fp)
 100ce50:	e0801017 	ldw	r2,64(fp)
 100ce54:	e0bfdb15 	stw	r2,-148(fp)
 100ce58:	e0801117 	ldw	r2,68(fp)
 100ce5c:	e0bfdc15 	stw	r2,-144(fp)
 100ce60:	e0801217 	ldw	r2,72(fp)
 100ce64:	e0bfdd15 	stw	r2,-140(fp)
 100ce68:	e0801317 	ldw	r2,76(fp)
 100ce6c:	e0bfde15 	stw	r2,-136(fp)
 100ce70:	e0801417 	ldw	r2,80(fp)
 100ce74:	e0bfdf15 	stw	r2,-132(fp)
	T.v3 = v3;
 100ce78:	e0801517 	ldw	r2,84(fp)
 100ce7c:	e0bfe015 	stw	r2,-128(fp)
 100ce80:	e0801617 	ldw	r2,88(fp)
 100ce84:	e0bfe115 	stw	r2,-124(fp)
 100ce88:	e0801717 	ldw	r2,92(fp)
 100ce8c:	e0bfe215 	stw	r2,-120(fp)
 100ce90:	e0801817 	ldw	r2,96(fp)
 100ce94:	e0bfe315 	stw	r2,-116(fp)
 100ce98:	e0801917 	ldw	r2,100(fp)
 100ce9c:	e0bfe415 	stw	r2,-112(fp)
 100cea0:	e0801a17 	ldw	r2,104(fp)
 100cea4:	e0bfe515 	stw	r2,-108(fp)
 100cea8:	e0801b17 	ldw	r2,108(fp)
 100ceac:	e0bfe615 	stw	r2,-104(fp)
 100ceb0:	e0801c17 	ldw	r2,112(fp)
 100ceb4:	e0bfe715 	stw	r2,-100(fp)

	T.e0 = vsubp(v2, v1);
 100ceb8:	e13ffc04 	addi	r4,fp,-16
 100cebc:	e0800517 	ldw	r2,20(fp)
 100cec0:	d8800515 	stw	r2,20(sp)
 100cec4:	e0800617 	ldw	r2,24(fp)
 100cec8:	d8800615 	stw	r2,24(sp)
 100cecc:	e0800717 	ldw	r2,28(fp)
 100ced0:	d8800715 	stw	r2,28(sp)
 100ced4:	e0800817 	ldw	r2,32(fp)
 100ced8:	d8800815 	stw	r2,32(sp)
 100cedc:	e0800917 	ldw	r2,36(fp)
 100cee0:	d8800915 	stw	r2,36(sp)
 100cee4:	e0800a17 	ldw	r2,40(fp)
 100cee8:	d8800a15 	stw	r2,40(sp)
 100ceec:	e0800b17 	ldw	r2,44(fp)
 100cef0:	d8800b15 	stw	r2,44(sp)
 100cef4:	e0800c17 	ldw	r2,48(fp)
 100cef8:	d8800c15 	stw	r2,48(sp)
 100cefc:	e0801017 	ldw	r2,64(fp)
 100cf00:	d8800015 	stw	r2,0(sp)
 100cf04:	e0801117 	ldw	r2,68(fp)
 100cf08:	d8800115 	stw	r2,4(sp)
 100cf0c:	e0801217 	ldw	r2,72(fp)
 100cf10:	d8800215 	stw	r2,8(sp)
 100cf14:	e0801317 	ldw	r2,76(fp)
 100cf18:	d8800315 	stw	r2,12(sp)
 100cf1c:	e0801417 	ldw	r2,80(fp)
 100cf20:	d8800415 	stw	r2,16(sp)
 100cf24:	e1400d17 	ldw	r5,52(fp)
 100cf28:	e1800e17 	ldw	r6,56(fp)
 100cf2c:	e1c00f17 	ldw	r7,60(fp)
 100cf30:	100c6a00 	call	100c6a0 <vsubp>
 100cf34:	e0bffc17 	ldw	r2,-16(fp)
 100cf38:	e0bff015 	stw	r2,-64(fp)
 100cf3c:	e0bffd17 	ldw	r2,-12(fp)
 100cf40:	e0bff115 	stw	r2,-60(fp)
 100cf44:	e0bffe17 	ldw	r2,-8(fp)
 100cf48:	e0bff215 	stw	r2,-56(fp)
 100cf4c:	e0bfff17 	ldw	r2,-4(fp)
 100cf50:	e0bff315 	stw	r2,-52(fp)
	T.e1 = vsubp(v3, v1);
 100cf54:	e13ffc04 	addi	r4,fp,-16
 100cf58:	e0800517 	ldw	r2,20(fp)
 100cf5c:	d8800515 	stw	r2,20(sp)
 100cf60:	e0800617 	ldw	r2,24(fp)
 100cf64:	d8800615 	stw	r2,24(sp)
 100cf68:	e0800717 	ldw	r2,28(fp)
 100cf6c:	d8800715 	stw	r2,28(sp)
 100cf70:	e0800817 	ldw	r2,32(fp)
 100cf74:	d8800815 	stw	r2,32(sp)
 100cf78:	e0800917 	ldw	r2,36(fp)
 100cf7c:	d8800915 	stw	r2,36(sp)
 100cf80:	e0800a17 	ldw	r2,40(fp)
 100cf84:	d8800a15 	stw	r2,40(sp)
 100cf88:	e0800b17 	ldw	r2,44(fp)
 100cf8c:	d8800b15 	stw	r2,44(sp)
 100cf90:	e0800c17 	ldw	r2,48(fp)
 100cf94:	d8800c15 	stw	r2,48(sp)
 100cf98:	e0801817 	ldw	r2,96(fp)
 100cf9c:	d8800015 	stw	r2,0(sp)
 100cfa0:	e0801917 	ldw	r2,100(fp)
 100cfa4:	d8800115 	stw	r2,4(sp)
 100cfa8:	e0801a17 	ldw	r2,104(fp)
 100cfac:	d8800215 	stw	r2,8(sp)
 100cfb0:	e0801b17 	ldw	r2,108(fp)
 100cfb4:	d8800315 	stw	r2,12(sp)
 100cfb8:	e0801c17 	ldw	r2,112(fp)
 100cfbc:	d8800415 	stw	r2,16(sp)
 100cfc0:	e1401517 	ldw	r5,84(fp)
 100cfc4:	e1801617 	ldw	r6,88(fp)
 100cfc8:	e1c01717 	ldw	r7,92(fp)
 100cfcc:	100c6a00 	call	100c6a0 <vsubp>
 100cfd0:	e0bffc17 	ldw	r2,-16(fp)
 100cfd4:	e0bff415 	stw	r2,-48(fp)
 100cfd8:	e0bffd17 	ldw	r2,-12(fp)
 100cfdc:	e0bff515 	stw	r2,-44(fp)
 100cfe0:	e0bffe17 	ldw	r2,-8(fp)
 100cfe4:	e0bff615 	stw	r2,-40(fp)
 100cfe8:	e0bfff17 	ldw	r2,-4(fp)
 100cfec:	e0bff715 	stw	r2,-36(fp)

	T.dot00 = dotp(T.e0, T.e0);
 100cff0:	e0bff017 	ldw	r2,-64(fp)
 100cff4:	d8800015 	stw	r2,0(sp)
 100cff8:	e0bff117 	ldw	r2,-60(fp)
 100cffc:	d8800115 	stw	r2,4(sp)
 100d000:	e0bff217 	ldw	r2,-56(fp)
 100d004:	d8800215 	stw	r2,8(sp)
 100d008:	e0bff317 	ldw	r2,-52(fp)
 100d00c:	d8800315 	stw	r2,12(sp)
 100d010:	e13ff017 	ldw	r4,-64(fp)
 100d014:	e17ff117 	ldw	r5,-60(fp)
 100d018:	e1bff217 	ldw	r6,-56(fp)
 100d01c:	e1fff317 	ldw	r7,-52(fp)
 100d020:	100c3080 	call	100c308 <dotp>
 100d024:	1009883a 	mov	r4,r2
 100d028:	180b883a 	mov	r5,r3
 100d02c:	e13fea15 	stw	r4,-88(fp)
 100d030:	e17feb15 	stw	r5,-84(fp)
	T.dot01 = dotp(T.e0, T.e1);
 100d034:	e0bff417 	ldw	r2,-48(fp)
 100d038:	d8800015 	stw	r2,0(sp)
 100d03c:	e0bff517 	ldw	r2,-44(fp)
 100d040:	d8800115 	stw	r2,4(sp)
 100d044:	e0bff617 	ldw	r2,-40(fp)
 100d048:	d8800215 	stw	r2,8(sp)
 100d04c:	e0bff717 	ldw	r2,-36(fp)
 100d050:	d8800315 	stw	r2,12(sp)
 100d054:	e13ff017 	ldw	r4,-64(fp)
 100d058:	e17ff117 	ldw	r5,-60(fp)
 100d05c:	e1bff217 	ldw	r6,-56(fp)
 100d060:	e1fff317 	ldw	r7,-52(fp)
 100d064:	100c3080 	call	100c308 <dotp>
 100d068:	1009883a 	mov	r4,r2
 100d06c:	180b883a 	mov	r5,r3
 100d070:	e13fec15 	stw	r4,-80(fp)
 100d074:	e17fed15 	stw	r5,-76(fp)
	T.dot11 = dotp(T.e1, T.e1);
 100d078:	e0bff417 	ldw	r2,-48(fp)
 100d07c:	d8800015 	stw	r2,0(sp)
 100d080:	e0bff517 	ldw	r2,-44(fp)
 100d084:	d8800115 	stw	r2,4(sp)
 100d088:	e0bff617 	ldw	r2,-40(fp)
 100d08c:	d8800215 	stw	r2,8(sp)
 100d090:	e0bff717 	ldw	r2,-36(fp)
 100d094:	d8800315 	stw	r2,12(sp)
 100d098:	e13ff417 	ldw	r4,-48(fp)
 100d09c:	e17ff517 	ldw	r5,-44(fp)
 100d0a0:	e1bff617 	ldw	r6,-40(fp)
 100d0a4:	e1fff717 	ldw	r7,-36(fp)
 100d0a8:	100c3080 	call	100c308 <dotp>
 100d0ac:	1009883a 	mov	r4,r2
 100d0b0:	180b883a 	mov	r5,r3
 100d0b4:	e13fee15 	stw	r4,-72(fp)
 100d0b8:	e17fef15 	stw	r5,-68(fp)

	T.bary_normalize = 1 / (T.dot00 * T.dot01 - T.dot01 * T.dot01);
 100d0bc:	e17fea17 	ldw	r5,-88(fp)
 100d0c0:	e1bfeb17 	ldw	r6,-84(fp)
 100d0c4:	e0bfec17 	ldw	r2,-80(fp)
 100d0c8:	e0ffed17 	ldw	r3,-76(fp)
 100d0cc:	2809883a 	mov	r4,r5
 100d0d0:	300b883a 	mov	r5,r6
 100d0d4:	100d883a 	mov	r6,r2
 100d0d8:	180f883a 	mov	r7,r3
 100d0dc:	1012a940 	call	1012a94 <__muldf3>
 100d0e0:	1009883a 	mov	r4,r2
 100d0e4:	180b883a 	mov	r5,r3
 100d0e8:	2021883a 	mov	r16,r4
 100d0ec:	2823883a 	mov	r17,r5
 100d0f0:	e17fec17 	ldw	r5,-80(fp)
 100d0f4:	e1bfed17 	ldw	r6,-76(fp)
 100d0f8:	e0bfec17 	ldw	r2,-80(fp)
 100d0fc:	e0ffed17 	ldw	r3,-76(fp)
 100d100:	2809883a 	mov	r4,r5
 100d104:	300b883a 	mov	r5,r6
 100d108:	100d883a 	mov	r6,r2
 100d10c:	180f883a 	mov	r7,r3
 100d110:	1012a940 	call	1012a94 <__muldf3>
 100d114:	1009883a 	mov	r4,r2
 100d118:	180b883a 	mov	r5,r3
 100d11c:	2005883a 	mov	r2,r4
 100d120:	2807883a 	mov	r3,r5
 100d124:	8009883a 	mov	r4,r16
 100d128:	880b883a 	mov	r5,r17
 100d12c:	100d883a 	mov	r6,r2
 100d130:	180f883a 	mov	r7,r3
 100d134:	10129a00 	call	10129a0 <__subdf3>
 100d138:	1009883a 	mov	r4,r2
 100d13c:	180b883a 	mov	r5,r3
 100d140:	2005883a 	mov	r2,r4
 100d144:	2807883a 	mov	r3,r5
 100d148:	0009883a 	mov	r4,zero
 100d14c:	014ffc34 	movhi	r5,16368
 100d150:	100d883a 	mov	r6,r2
 100d154:	180f883a 	mov	r7,r3
 100d158:	1012e580 	call	1012e58 <__divdf3>
 100d15c:	1009883a 	mov	r4,r2
 100d160:	180b883a 	mov	r5,r3
 100d164:	2005883a 	mov	r2,r4
 100d168:	2807883a 	mov	r3,r5
 100d16c:	e0bfe815 	stw	r2,-96(fp)
 100d170:	e0ffe915 	stw	r3,-92(fp)

	T.centroid = computeCentroid(T);
 100d174:	e43ffc04 	addi	r16,fp,-16
 100d178:	d809883a 	mov	r4,sp
 100d17c:	e17fd304 	addi	r5,fp,-180
 100d180:	01802904 	movi	r6,164
 100d184:	10152740 	call	1015274 <memcpy>
 100d188:	e17fd017 	ldw	r5,-192(fp)
 100d18c:	e1bfd117 	ldw	r6,-188(fp)
 100d190:	e1ffd217 	ldw	r7,-184(fp)
 100d194:	8009883a 	mov	r4,r16
 100d198:	100cc680 	call	100cc68 <computeCentroid>
 100d19c:	e0bffc17 	ldw	r2,-16(fp)
 100d1a0:	e0bff815 	stw	r2,-32(fp)
 100d1a4:	e0bffd17 	ldw	r2,-12(fp)
 100d1a8:	e0bff915 	stw	r2,-28(fp)
 100d1ac:	e0bffe17 	ldw	r2,-8(fp)
 100d1b0:	e0bffa15 	stw	r2,-24(fp)
 100d1b4:	e0bfff17 	ldw	r2,-4(fp)
 100d1b8:	e0bffb15 	stw	r2,-20(fp)
	return T;
 100d1bc:	9009883a 	mov	r4,r18
 100d1c0:	e17fd004 	addi	r5,fp,-192
 100d1c4:	01802c04 	movi	r6,176
 100d1c8:	10152740 	call	1015274 <memcpy>
}
 100d1cc:	9005883a 	mov	r2,r18
 100d1d0:	e037883a 	mov	sp,fp
 100d1d4:	dfc00417 	ldw	ra,16(sp)
 100d1d8:	df000317 	ldw	fp,12(sp)
 100d1dc:	dc800217 	ldw	r18,8(sp)
 100d1e0:	dc400117 	ldw	r17,4(sp)
 100d1e4:	dc000017 	ldw	r16,0(sp)
 100d1e8:	dec00804 	addi	sp,sp,32
 100d1ec:	f800283a 	ret

0100d1f0 <barycentric>:

Vector3 barycentric(Triangle T, Point2D q) {
 100d1f0:	deffe104 	addi	sp,sp,-124
 100d1f4:	dfc01b15 	stw	ra,108(sp)
 100d1f8:	df001a15 	stw	fp,104(sp)
 100d1fc:	dc801915 	stw	r18,100(sp)
 100d200:	dc401815 	stw	r17,96(sp)
 100d204:	dc001715 	stw	r16,92(sp)
 100d208:	df001704 	addi	fp,sp,92
 100d20c:	2025883a 	mov	r18,r4
 100d210:	e1400515 	stw	r5,20(fp)
 100d214:	e1800615 	stw	r6,24(fp)
 100d218:	e1c00715 	stw	r7,28(fp)
	// Point e2 = psubp(q, v2p(*(T.v1)));
	Point2D e2 = psubp(q, v2p(T.v1));
 100d21c:	e13ff804 	addi	r4,fp,-32
 100d220:	e0800817 	ldw	r2,32(fp)
 100d224:	d8800015 	stw	r2,0(sp)
 100d228:	e0800917 	ldw	r2,36(fp)
 100d22c:	d8800115 	stw	r2,4(sp)
 100d230:	e0800a17 	ldw	r2,40(fp)
 100d234:	d8800215 	stw	r2,8(sp)
 100d238:	e0800b17 	ldw	r2,44(fp)
 100d23c:	d8800315 	stw	r2,12(sp)
 100d240:	e0800c17 	ldw	r2,48(fp)
 100d244:	d8800415 	stw	r2,16(sp)
 100d248:	e1400517 	ldw	r5,20(fp)
 100d24c:	e1800617 	ldw	r6,24(fp)
 100d250:	e1c00717 	ldw	r7,28(fp)
 100d254:	100cb540 	call	100cb54 <v2p>
 100d258:	e13ffc04 	addi	r4,fp,-16
 100d25c:	e0bff817 	ldw	r2,-32(fp)
 100d260:	d8800115 	stw	r2,4(sp)
 100d264:	e0bff917 	ldw	r2,-28(fp)
 100d268:	d8800215 	stw	r2,8(sp)
 100d26c:	e0bffa17 	ldw	r2,-24(fp)
 100d270:	d8800315 	stw	r2,12(sp)
 100d274:	e0bffb17 	ldw	r2,-20(fp)
 100d278:	d8800415 	stw	r2,16(sp)
 100d27c:	e0803417 	ldw	r2,208(fp)
 100d280:	d8800015 	stw	r2,0(sp)
 100d284:	e1403117 	ldw	r5,196(fp)
 100d288:	e1803217 	ldw	r6,200(fp)
 100d28c:	e1c03317 	ldw	r7,204(fp)
 100d290:	100c7780 	call	100c778 <psubp>

	double dot20 = dotp(e2, T.e0);
 100d294:	e0802517 	ldw	r2,148(fp)
 100d298:	d8800015 	stw	r2,0(sp)
 100d29c:	e0802617 	ldw	r2,152(fp)
 100d2a0:	d8800115 	stw	r2,4(sp)
 100d2a4:	e0802717 	ldw	r2,156(fp)
 100d2a8:	d8800215 	stw	r2,8(sp)
 100d2ac:	e0802817 	ldw	r2,160(fp)
 100d2b0:	d8800315 	stw	r2,12(sp)
 100d2b4:	e13ffc17 	ldw	r4,-16(fp)
 100d2b8:	e17ffd17 	ldw	r5,-12(fp)
 100d2bc:	e1bffe17 	ldw	r6,-8(fp)
 100d2c0:	e1ffff17 	ldw	r7,-4(fp)
 100d2c4:	100c3080 	call	100c308 <dotp>
 100d2c8:	1009883a 	mov	r4,r2
 100d2cc:	180b883a 	mov	r5,r3
 100d2d0:	e13ff615 	stw	r4,-40(fp)
 100d2d4:	e17ff715 	stw	r5,-36(fp)
	double dot21 = dotp(e2, T.e1);
 100d2d8:	e0802917 	ldw	r2,164(fp)
 100d2dc:	d8800015 	stw	r2,0(sp)
 100d2e0:	e0802a17 	ldw	r2,168(fp)
 100d2e4:	d8800115 	stw	r2,4(sp)
 100d2e8:	e0802b17 	ldw	r2,172(fp)
 100d2ec:	d8800215 	stw	r2,8(sp)
 100d2f0:	e0802c17 	ldw	r2,176(fp)
 100d2f4:	d8800315 	stw	r2,12(sp)
 100d2f8:	e13ffc17 	ldw	r4,-16(fp)
 100d2fc:	e17ffd17 	ldw	r5,-12(fp)
 100d300:	e1bffe17 	ldw	r6,-8(fp)
 100d304:	e1ffff17 	ldw	r7,-4(fp)
 100d308:	100c3080 	call	100c308 <dotp>
 100d30c:	1009883a 	mov	r4,r2
 100d310:	180b883a 	mov	r5,r3
 100d314:	e13ff415 	stw	r4,-48(fp)
 100d318:	e17ff515 	stw	r5,-44(fp)

	double v = (T.dot11 * dot20 - T.dot01 * dot21) * T.bary_normalize;
 100d31c:	e0802317 	ldw	r2,140(fp)
 100d320:	e0c02417 	ldw	r3,144(fp)
 100d324:	1009883a 	mov	r4,r2
 100d328:	180b883a 	mov	r5,r3
 100d32c:	e1bff617 	ldw	r6,-40(fp)
 100d330:	e1fff717 	ldw	r7,-36(fp)
 100d334:	1012a940 	call	1012a94 <__muldf3>
 100d338:	1009883a 	mov	r4,r2
 100d33c:	180b883a 	mov	r5,r3
 100d340:	2021883a 	mov	r16,r4
 100d344:	2823883a 	mov	r17,r5
 100d348:	e0802117 	ldw	r2,132(fp)
 100d34c:	e0c02217 	ldw	r3,136(fp)
 100d350:	1009883a 	mov	r4,r2
 100d354:	180b883a 	mov	r5,r3
 100d358:	e1bff417 	ldw	r6,-48(fp)
 100d35c:	e1fff517 	ldw	r7,-44(fp)
 100d360:	1012a940 	call	1012a94 <__muldf3>
 100d364:	1009883a 	mov	r4,r2
 100d368:	180b883a 	mov	r5,r3
 100d36c:	2005883a 	mov	r2,r4
 100d370:	2807883a 	mov	r3,r5
 100d374:	8009883a 	mov	r4,r16
 100d378:	880b883a 	mov	r5,r17
 100d37c:	100d883a 	mov	r6,r2
 100d380:	180f883a 	mov	r7,r3
 100d384:	10129a00 	call	10129a0 <__subdf3>
 100d388:	1009883a 	mov	r4,r2
 100d38c:	180b883a 	mov	r5,r3
 100d390:	200d883a 	mov	r6,r4
 100d394:	280f883a 	mov	r7,r5
 100d398:	e0801d17 	ldw	r2,116(fp)
 100d39c:	e0c01e17 	ldw	r3,120(fp)
 100d3a0:	3009883a 	mov	r4,r6
 100d3a4:	380b883a 	mov	r5,r7
 100d3a8:	100d883a 	mov	r6,r2
 100d3ac:	180f883a 	mov	r7,r3
 100d3b0:	1012a940 	call	1012a94 <__muldf3>
 100d3b4:	1009883a 	mov	r4,r2
 100d3b8:	180b883a 	mov	r5,r3
 100d3bc:	e13ff215 	stw	r4,-56(fp)
 100d3c0:	e17ff315 	stw	r5,-52(fp)
	double w = (T.dot00 * dot21 - T.dot01 * dot20) * T.bary_normalize;
 100d3c4:	e0801f17 	ldw	r2,124(fp)
 100d3c8:	e0c02017 	ldw	r3,128(fp)
 100d3cc:	1009883a 	mov	r4,r2
 100d3d0:	180b883a 	mov	r5,r3
 100d3d4:	e1bff417 	ldw	r6,-48(fp)
 100d3d8:	e1fff517 	ldw	r7,-44(fp)
 100d3dc:	1012a940 	call	1012a94 <__muldf3>
 100d3e0:	1009883a 	mov	r4,r2
 100d3e4:	180b883a 	mov	r5,r3
 100d3e8:	2021883a 	mov	r16,r4
 100d3ec:	2823883a 	mov	r17,r5
 100d3f0:	e0802117 	ldw	r2,132(fp)
 100d3f4:	e0c02217 	ldw	r3,136(fp)
 100d3f8:	1009883a 	mov	r4,r2
 100d3fc:	180b883a 	mov	r5,r3
 100d400:	e1bff617 	ldw	r6,-40(fp)
 100d404:	e1fff717 	ldw	r7,-36(fp)
 100d408:	1012a940 	call	1012a94 <__muldf3>
 100d40c:	1009883a 	mov	r4,r2
 100d410:	180b883a 	mov	r5,r3
 100d414:	2005883a 	mov	r2,r4
 100d418:	2807883a 	mov	r3,r5
 100d41c:	8009883a 	mov	r4,r16
 100d420:	880b883a 	mov	r5,r17
 100d424:	100d883a 	mov	r6,r2
 100d428:	180f883a 	mov	r7,r3
 100d42c:	10129a00 	call	10129a0 <__subdf3>
 100d430:	1009883a 	mov	r4,r2
 100d434:	180b883a 	mov	r5,r3
 100d438:	200d883a 	mov	r6,r4
 100d43c:	280f883a 	mov	r7,r5
 100d440:	e0801d17 	ldw	r2,116(fp)
 100d444:	e0c01e17 	ldw	r3,120(fp)
 100d448:	3009883a 	mov	r4,r6
 100d44c:	380b883a 	mov	r5,r7
 100d450:	100d883a 	mov	r6,r2
 100d454:	180f883a 	mov	r7,r3
 100d458:	1012a940 	call	1012a94 <__muldf3>
 100d45c:	1009883a 	mov	r4,r2
 100d460:	180b883a 	mov	r5,r3
 100d464:	e13ff015 	stw	r4,-64(fp)
 100d468:	e17ff115 	stw	r5,-60(fp)
	double u = 1.f - v - w;
 100d46c:	0009883a 	mov	r4,zero
 100d470:	014ffc34 	movhi	r5,16368
 100d474:	e1bff217 	ldw	r6,-56(fp)
 100d478:	e1fff317 	ldw	r7,-52(fp)
 100d47c:	10129a00 	call	10129a0 <__subdf3>
 100d480:	1009883a 	mov	r4,r2
 100d484:	180b883a 	mov	r5,r3
 100d488:	2005883a 	mov	r2,r4
 100d48c:	2807883a 	mov	r3,r5
 100d490:	1009883a 	mov	r4,r2
 100d494:	180b883a 	mov	r5,r3
 100d498:	e1bff017 	ldw	r6,-64(fp)
 100d49c:	e1fff117 	ldw	r7,-60(fp)
 100d4a0:	10129a00 	call	10129a0 <__subdf3>
 100d4a4:	1009883a 	mov	r4,r2
 100d4a8:	180b883a 	mov	r5,r3
 100d4ac:	e13fee15 	stw	r4,-72(fp)
 100d4b0:	e17fef15 	stw	r5,-68(fp)

	return vec3(u, v, w);
 100d4b4:	e0bff017 	ldw	r2,-64(fp)
 100d4b8:	d8800115 	stw	r2,4(sp)
 100d4bc:	e0bff117 	ldw	r2,-60(fp)
 100d4c0:	d8800215 	stw	r2,8(sp)
 100d4c4:	e0bff317 	ldw	r2,-52(fp)
 100d4c8:	d8800015 	stw	r2,0(sp)
 100d4cc:	e1fff217 	ldw	r7,-56(fp)
 100d4d0:	9009883a 	mov	r4,r18
 100d4d4:	e17fee17 	ldw	r5,-72(fp)
 100d4d8:	e1bfef17 	ldw	r6,-68(fp)
 100d4dc:	100c19c0 	call	100c19c <vec3>
}
 100d4e0:	9005883a 	mov	r2,r18
 100d4e4:	e037883a 	mov	sp,fp
 100d4e8:	dfc00417 	ldw	ra,16(sp)
 100d4ec:	df000317 	ldw	fp,12(sp)
 100d4f0:	dc800217 	ldw	r18,8(sp)
 100d4f4:	dc400117 	ldw	r17,4(sp)
 100d4f8:	dc000017 	ldw	r16,0(sp)
 100d4fc:	dec00804 	addi	sp,sp,32
 100d500:	f800283a 	ret

0100d504 <barycentric2>:

Vector3 barycentric2(Triangle T, Point2D q) {
 100d504:	deffb904 	addi	sp,sp,-284
 100d508:	dfc04315 	stw	ra,268(sp)
 100d50c:	df004215 	stw	fp,264(sp)
 100d510:	dc004115 	stw	r16,260(sp)
 100d514:	df004104 	addi	fp,sp,260
 100d518:	2021883a 	mov	r16,r4
 100d51c:	e1400315 	stw	r5,12(fp)
 100d520:	e1800415 	stw	r6,16(fp)
 100d524:	e1c00515 	stw	r7,20(fp)
	double area = .5 * (crossp(vsubp(T.v2, T.v1), vsubp(T.v3, T.v1)));
 100d528:	e13ffc04 	addi	r4,fp,-16
 100d52c:	e0800317 	ldw	r2,12(fp)
 100d530:	d8800515 	stw	r2,20(sp)
 100d534:	e0800417 	ldw	r2,16(fp)
 100d538:	d8800615 	stw	r2,24(sp)
 100d53c:	e0800517 	ldw	r2,20(fp)
 100d540:	d8800715 	stw	r2,28(sp)
 100d544:	e0800617 	ldw	r2,24(fp)
 100d548:	d8800815 	stw	r2,32(sp)
 100d54c:	e0800717 	ldw	r2,28(fp)
 100d550:	d8800915 	stw	r2,36(sp)
 100d554:	e0800817 	ldw	r2,32(fp)
 100d558:	d8800a15 	stw	r2,40(sp)
 100d55c:	e0800917 	ldw	r2,36(fp)
 100d560:	d8800b15 	stw	r2,44(sp)
 100d564:	e0800a17 	ldw	r2,40(fp)
 100d568:	d8800c15 	stw	r2,48(sp)
 100d56c:	e0800e17 	ldw	r2,56(fp)
 100d570:	d8800015 	stw	r2,0(sp)
 100d574:	e0800f17 	ldw	r2,60(fp)
 100d578:	d8800115 	stw	r2,4(sp)
 100d57c:	e0801017 	ldw	r2,64(fp)
 100d580:	d8800215 	stw	r2,8(sp)
 100d584:	e0801117 	ldw	r2,68(fp)
 100d588:	d8800315 	stw	r2,12(sp)
 100d58c:	e0801217 	ldw	r2,72(fp)
 100d590:	d8800415 	stw	r2,16(sp)
 100d594:	e1400b17 	ldw	r5,44(fp)
 100d598:	e1800c17 	ldw	r6,48(fp)
 100d59c:	e1c00d17 	ldw	r7,52(fp)
 100d5a0:	100c6a00 	call	100c6a0 <vsubp>
 100d5a4:	e13ff804 	addi	r4,fp,-32
 100d5a8:	e0800317 	ldw	r2,12(fp)
 100d5ac:	d8800515 	stw	r2,20(sp)
 100d5b0:	e0800417 	ldw	r2,16(fp)
 100d5b4:	d8800615 	stw	r2,24(sp)
 100d5b8:	e0800517 	ldw	r2,20(fp)
 100d5bc:	d8800715 	stw	r2,28(sp)
 100d5c0:	e0800617 	ldw	r2,24(fp)
 100d5c4:	d8800815 	stw	r2,32(sp)
 100d5c8:	e0800717 	ldw	r2,28(fp)
 100d5cc:	d8800915 	stw	r2,36(sp)
 100d5d0:	e0800817 	ldw	r2,32(fp)
 100d5d4:	d8800a15 	stw	r2,40(sp)
 100d5d8:	e0800917 	ldw	r2,36(fp)
 100d5dc:	d8800b15 	stw	r2,44(sp)
 100d5e0:	e0800a17 	ldw	r2,40(fp)
 100d5e4:	d8800c15 	stw	r2,48(sp)
 100d5e8:	e0801617 	ldw	r2,88(fp)
 100d5ec:	d8800015 	stw	r2,0(sp)
 100d5f0:	e0801717 	ldw	r2,92(fp)
 100d5f4:	d8800115 	stw	r2,4(sp)
 100d5f8:	e0801817 	ldw	r2,96(fp)
 100d5fc:	d8800215 	stw	r2,8(sp)
 100d600:	e0801917 	ldw	r2,100(fp)
 100d604:	d8800315 	stw	r2,12(sp)
 100d608:	e0801a17 	ldw	r2,104(fp)
 100d60c:	d8800415 	stw	r2,16(sp)
 100d610:	e1401317 	ldw	r5,76(fp)
 100d614:	e1801417 	ldw	r6,80(fp)
 100d618:	e1c01517 	ldw	r7,84(fp)
 100d61c:	100c6a00 	call	100c6a0 <vsubp>
 100d620:	e0bff817 	ldw	r2,-32(fp)
 100d624:	d8800015 	stw	r2,0(sp)
 100d628:	e0bff917 	ldw	r2,-28(fp)
 100d62c:	d8800115 	stw	r2,4(sp)
 100d630:	e0bffa17 	ldw	r2,-24(fp)
 100d634:	d8800215 	stw	r2,8(sp)
 100d638:	e0bffb17 	ldw	r2,-20(fp)
 100d63c:	d8800315 	stw	r2,12(sp)
 100d640:	e13ffc17 	ldw	r4,-16(fp)
 100d644:	e17ffd17 	ldw	r5,-12(fp)
 100d648:	e1bffe17 	ldw	r6,-8(fp)
 100d64c:	e1ffff17 	ldw	r7,-4(fp)
 100d650:	100c3e80 	call	100c3e8 <crossp>
 100d654:	100b883a 	mov	r5,r2
 100d658:	180d883a 	mov	r6,r3
 100d65c:	2809883a 	mov	r4,r5
 100d660:	300b883a 	mov	r5,r6
 100d664:	000d883a 	mov	r6,zero
 100d668:	01cff834 	movhi	r7,16352
 100d66c:	1012a940 	call	1012a94 <__muldf3>
 100d670:	1009883a 	mov	r4,r2
 100d674:	180b883a 	mov	r5,r3
 100d678:	e13fd615 	stw	r4,-168(fp)
 100d67c:	e17fd715 	stw	r5,-164(fp)
	double area23q = .5 * (crossp(psubp(v2p(T.v2), q), psubp(v2p(T.v3), q)));
 100d680:	e13ff404 	addi	r4,fp,-48
 100d684:	e0800e17 	ldw	r2,56(fp)
 100d688:	d8800015 	stw	r2,0(sp)
 100d68c:	e0800f17 	ldw	r2,60(fp)
 100d690:	d8800115 	stw	r2,4(sp)
 100d694:	e0801017 	ldw	r2,64(fp)
 100d698:	d8800215 	stw	r2,8(sp)
 100d69c:	e0801117 	ldw	r2,68(fp)
 100d6a0:	d8800315 	stw	r2,12(sp)
 100d6a4:	e0801217 	ldw	r2,72(fp)
 100d6a8:	d8800415 	stw	r2,16(sp)
 100d6ac:	e1400b17 	ldw	r5,44(fp)
 100d6b0:	e1800c17 	ldw	r6,48(fp)
 100d6b4:	e1c00d17 	ldw	r7,52(fp)
 100d6b8:	100cb540 	call	100cb54 <v2p>
 100d6bc:	e13ff004 	addi	r4,fp,-64
 100d6c0:	e0802f17 	ldw	r2,188(fp)
 100d6c4:	d8800115 	stw	r2,4(sp)
 100d6c8:	e0803017 	ldw	r2,192(fp)
 100d6cc:	d8800215 	stw	r2,8(sp)
 100d6d0:	e0803117 	ldw	r2,196(fp)
 100d6d4:	d8800315 	stw	r2,12(sp)
 100d6d8:	e0803217 	ldw	r2,200(fp)
 100d6dc:	d8800415 	stw	r2,16(sp)
 100d6e0:	e0bff717 	ldw	r2,-36(fp)
 100d6e4:	d8800015 	stw	r2,0(sp)
 100d6e8:	e17ff417 	ldw	r5,-48(fp)
 100d6ec:	e1bff517 	ldw	r6,-44(fp)
 100d6f0:	e1fff617 	ldw	r7,-40(fp)
 100d6f4:	100c7780 	call	100c778 <psubp>
 100d6f8:	e13fec04 	addi	r4,fp,-80
 100d6fc:	e0801617 	ldw	r2,88(fp)
 100d700:	d8800015 	stw	r2,0(sp)
 100d704:	e0801717 	ldw	r2,92(fp)
 100d708:	d8800115 	stw	r2,4(sp)
 100d70c:	e0801817 	ldw	r2,96(fp)
 100d710:	d8800215 	stw	r2,8(sp)
 100d714:	e0801917 	ldw	r2,100(fp)
 100d718:	d8800315 	stw	r2,12(sp)
 100d71c:	e0801a17 	ldw	r2,104(fp)
 100d720:	d8800415 	stw	r2,16(sp)
 100d724:	e1401317 	ldw	r5,76(fp)
 100d728:	e1801417 	ldw	r6,80(fp)
 100d72c:	e1c01517 	ldw	r7,84(fp)
 100d730:	100cb540 	call	100cb54 <v2p>
 100d734:	e13fe804 	addi	r4,fp,-96
 100d738:	e0802f17 	ldw	r2,188(fp)
 100d73c:	d8800115 	stw	r2,4(sp)
 100d740:	e0803017 	ldw	r2,192(fp)
 100d744:	d8800215 	stw	r2,8(sp)
 100d748:	e0803117 	ldw	r2,196(fp)
 100d74c:	d8800315 	stw	r2,12(sp)
 100d750:	e0803217 	ldw	r2,200(fp)
 100d754:	d8800415 	stw	r2,16(sp)
 100d758:	e0bfef17 	ldw	r2,-68(fp)
 100d75c:	d8800015 	stw	r2,0(sp)
 100d760:	e17fec17 	ldw	r5,-80(fp)
 100d764:	e1bfed17 	ldw	r6,-76(fp)
 100d768:	e1ffee17 	ldw	r7,-72(fp)
 100d76c:	100c7780 	call	100c778 <psubp>
 100d770:	e0bfe817 	ldw	r2,-96(fp)
 100d774:	d8800015 	stw	r2,0(sp)
 100d778:	e0bfe917 	ldw	r2,-92(fp)
 100d77c:	d8800115 	stw	r2,4(sp)
 100d780:	e0bfea17 	ldw	r2,-88(fp)
 100d784:	d8800215 	stw	r2,8(sp)
 100d788:	e0bfeb17 	ldw	r2,-84(fp)
 100d78c:	d8800315 	stw	r2,12(sp)
 100d790:	e13ff017 	ldw	r4,-64(fp)
 100d794:	e17ff117 	ldw	r5,-60(fp)
 100d798:	e1bff217 	ldw	r6,-56(fp)
 100d79c:	e1fff317 	ldw	r7,-52(fp)
 100d7a0:	100c3e80 	call	100c3e8 <crossp>
 100d7a4:	100b883a 	mov	r5,r2
 100d7a8:	180d883a 	mov	r6,r3
 100d7ac:	2809883a 	mov	r4,r5
 100d7b0:	300b883a 	mov	r5,r6
 100d7b4:	000d883a 	mov	r6,zero
 100d7b8:	01cff834 	movhi	r7,16352
 100d7bc:	1012a940 	call	1012a94 <__muldf3>
 100d7c0:	1009883a 	mov	r4,r2
 100d7c4:	180b883a 	mov	r5,r3
 100d7c8:	e13fd415 	stw	r4,-176(fp)
 100d7cc:	e17fd515 	stw	r5,-172(fp)
	double area13q = .5 * (crossp(psubp(v2p(T.v3), q), psubp(v2p(T.v1), q)));
 100d7d0:	e13fe404 	addi	r4,fp,-112
 100d7d4:	e0801617 	ldw	r2,88(fp)
 100d7d8:	d8800015 	stw	r2,0(sp)
 100d7dc:	e0801717 	ldw	r2,92(fp)
 100d7e0:	d8800115 	stw	r2,4(sp)
 100d7e4:	e0801817 	ldw	r2,96(fp)
 100d7e8:	d8800215 	stw	r2,8(sp)
 100d7ec:	e0801917 	ldw	r2,100(fp)
 100d7f0:	d8800315 	stw	r2,12(sp)
 100d7f4:	e0801a17 	ldw	r2,104(fp)
 100d7f8:	d8800415 	stw	r2,16(sp)
 100d7fc:	e1401317 	ldw	r5,76(fp)
 100d800:	e1801417 	ldw	r6,80(fp)
 100d804:	e1c01517 	ldw	r7,84(fp)
 100d808:	100cb540 	call	100cb54 <v2p>
 100d80c:	e13fe004 	addi	r4,fp,-128
 100d810:	e0802f17 	ldw	r2,188(fp)
 100d814:	d8800115 	stw	r2,4(sp)
 100d818:	e0803017 	ldw	r2,192(fp)
 100d81c:	d8800215 	stw	r2,8(sp)
 100d820:	e0803117 	ldw	r2,196(fp)
 100d824:	d8800315 	stw	r2,12(sp)
 100d828:	e0803217 	ldw	r2,200(fp)
 100d82c:	d8800415 	stw	r2,16(sp)
 100d830:	e0bfe717 	ldw	r2,-100(fp)
 100d834:	d8800015 	stw	r2,0(sp)
 100d838:	e17fe417 	ldw	r5,-112(fp)
 100d83c:	e1bfe517 	ldw	r6,-108(fp)
 100d840:	e1ffe617 	ldw	r7,-104(fp)
 100d844:	100c7780 	call	100c778 <psubp>
 100d848:	e13fdc04 	addi	r4,fp,-144
 100d84c:	e0800617 	ldw	r2,24(fp)
 100d850:	d8800015 	stw	r2,0(sp)
 100d854:	e0800717 	ldw	r2,28(fp)
 100d858:	d8800115 	stw	r2,4(sp)
 100d85c:	e0800817 	ldw	r2,32(fp)
 100d860:	d8800215 	stw	r2,8(sp)
 100d864:	e0800917 	ldw	r2,36(fp)
 100d868:	d8800315 	stw	r2,12(sp)
 100d86c:	e0800a17 	ldw	r2,40(fp)
 100d870:	d8800415 	stw	r2,16(sp)
 100d874:	e1400317 	ldw	r5,12(fp)
 100d878:	e1800417 	ldw	r6,16(fp)
 100d87c:	e1c00517 	ldw	r7,20(fp)
 100d880:	100cb540 	call	100cb54 <v2p>
 100d884:	e13fd804 	addi	r4,fp,-160
 100d888:	e0802f17 	ldw	r2,188(fp)
 100d88c:	d8800115 	stw	r2,4(sp)
 100d890:	e0803017 	ldw	r2,192(fp)
 100d894:	d8800215 	stw	r2,8(sp)
 100d898:	e0803117 	ldw	r2,196(fp)
 100d89c:	d8800315 	stw	r2,12(sp)
 100d8a0:	e0803217 	ldw	r2,200(fp)
 100d8a4:	d8800415 	stw	r2,16(sp)
 100d8a8:	e0bfdf17 	ldw	r2,-132(fp)
 100d8ac:	d8800015 	stw	r2,0(sp)
 100d8b0:	e17fdc17 	ldw	r5,-144(fp)
 100d8b4:	e1bfdd17 	ldw	r6,-140(fp)
 100d8b8:	e1ffde17 	ldw	r7,-136(fp)
 100d8bc:	100c7780 	call	100c778 <psubp>
 100d8c0:	e0bfd817 	ldw	r2,-160(fp)
 100d8c4:	d8800015 	stw	r2,0(sp)
 100d8c8:	e0bfd917 	ldw	r2,-156(fp)
 100d8cc:	d8800115 	stw	r2,4(sp)
 100d8d0:	e0bfda17 	ldw	r2,-152(fp)
 100d8d4:	d8800215 	stw	r2,8(sp)
 100d8d8:	e0bfdb17 	ldw	r2,-148(fp)
 100d8dc:	d8800315 	stw	r2,12(sp)
 100d8e0:	e13fe017 	ldw	r4,-128(fp)
 100d8e4:	e17fe117 	ldw	r5,-124(fp)
 100d8e8:	e1bfe217 	ldw	r6,-120(fp)
 100d8ec:	e1ffe317 	ldw	r7,-116(fp)
 100d8f0:	100c3e80 	call	100c3e8 <crossp>
 100d8f4:	100b883a 	mov	r5,r2
 100d8f8:	180d883a 	mov	r6,r3
 100d8fc:	2809883a 	mov	r4,r5
 100d900:	300b883a 	mov	r5,r6
 100d904:	000d883a 	mov	r6,zero
 100d908:	01cff834 	movhi	r7,16352
 100d90c:	1012a940 	call	1012a94 <__muldf3>
 100d910:	1009883a 	mov	r4,r2
 100d914:	180b883a 	mov	r5,r3
 100d918:	e13fd215 	stw	r4,-184(fp)
 100d91c:	e17fd315 	stw	r5,-180(fp)

	double bx = area13q / area;
 100d920:	e13fd217 	ldw	r4,-184(fp)
 100d924:	e17fd317 	ldw	r5,-180(fp)
 100d928:	e1bfd617 	ldw	r6,-168(fp)
 100d92c:	e1ffd717 	ldw	r7,-164(fp)
 100d930:	1012e580 	call	1012e58 <__divdf3>
 100d934:	1009883a 	mov	r4,r2
 100d938:	180b883a 	mov	r5,r3
 100d93c:	e13fd015 	stw	r4,-192(fp)
 100d940:	e17fd115 	stw	r5,-188(fp)
	double bz = area23q / area;
 100d944:	e13fd417 	ldw	r4,-176(fp)
 100d948:	e17fd517 	ldw	r5,-172(fp)
 100d94c:	e1bfd617 	ldw	r6,-168(fp)
 100d950:	e1ffd717 	ldw	r7,-164(fp)
 100d954:	1012e580 	call	1012e58 <__divdf3>
 100d958:	1009883a 	mov	r4,r2
 100d95c:	180b883a 	mov	r5,r3
 100d960:	e13fce15 	stw	r4,-200(fp)
 100d964:	e17fcf15 	stw	r5,-196(fp)
	// printf("%f\n", );
	double by = 1.0 - bx - bz;
 100d968:	0009883a 	mov	r4,zero
 100d96c:	014ffc34 	movhi	r5,16368
 100d970:	e1bfd017 	ldw	r6,-192(fp)
 100d974:	e1ffd117 	ldw	r7,-188(fp)
 100d978:	10129a00 	call	10129a0 <__subdf3>
 100d97c:	1009883a 	mov	r4,r2
 100d980:	180b883a 	mov	r5,r3
 100d984:	2005883a 	mov	r2,r4
 100d988:	2807883a 	mov	r3,r5
 100d98c:	1009883a 	mov	r4,r2
 100d990:	180b883a 	mov	r5,r3
 100d994:	e1bfce17 	ldw	r6,-200(fp)
 100d998:	e1ffcf17 	ldw	r7,-196(fp)
 100d99c:	10129a00 	call	10129a0 <__subdf3>
 100d9a0:	1009883a 	mov	r4,r2
 100d9a4:	180b883a 	mov	r5,r3
 100d9a8:	e13fcc15 	stw	r4,-208(fp)
 100d9ac:	e17fcd15 	stw	r5,-204(fp)

	return vec3(bx, by, bz);
 100d9b0:	e0bfce17 	ldw	r2,-200(fp)
 100d9b4:	d8800115 	stw	r2,4(sp)
 100d9b8:	e0bfcf17 	ldw	r2,-196(fp)
 100d9bc:	d8800215 	stw	r2,8(sp)
 100d9c0:	e0bfcd17 	ldw	r2,-204(fp)
 100d9c4:	d8800015 	stw	r2,0(sp)
 100d9c8:	e1ffcc17 	ldw	r7,-208(fp)
 100d9cc:	8009883a 	mov	r4,r16
 100d9d0:	e17fd017 	ldw	r5,-192(fp)
 100d9d4:	e1bfd117 	ldw	r6,-188(fp)
 100d9d8:	100c19c0 	call	100c19c <vec3>
}
 100d9dc:	8005883a 	mov	r2,r16
 100d9e0:	e037883a 	mov	sp,fp
 100d9e4:	dfc00217 	ldw	ra,8(sp)
 100d9e8:	df000117 	ldw	fp,4(sp)
 100d9ec:	dc000017 	ldw	r16,0(sp)
 100d9f0:	dec00604 	addi	sp,sp,24
 100d9f4:	f800283a 	ret

0100d9f8 <centroidLessThan>:

int centroidLessThan(Triangle t1, Triangle t2, Point2D p) {
 100d9f8:	deffe804 	addi	sp,sp,-96
 100d9fc:	dfc01315 	stw	ra,76(sp)
 100da00:	df001215 	stw	fp,72(sp)
 100da04:	df001204 	addi	fp,sp,72
 100da08:	e1000215 	stw	r4,8(fp)
 100da0c:	e1400315 	stw	r5,12(fp)
 100da10:	e1800415 	stw	r6,16(fp)
 100da14:	e1c00515 	stw	r7,20(fp)
	double dist1 = normsqp(psubp(t1.centroid, p));
 100da18:	e13ffb04 	addi	r4,fp,-20
 100da1c:	e0805a17 	ldw	r2,360(fp)
 100da20:	d8800115 	stw	r2,4(sp)
 100da24:	e0805b17 	ldw	r2,364(fp)
 100da28:	d8800215 	stw	r2,8(sp)
 100da2c:	e0805c17 	ldw	r2,368(fp)
 100da30:	d8800315 	stw	r2,12(sp)
 100da34:	e0805d17 	ldw	r2,372(fp)
 100da38:	d8800415 	stw	r2,16(sp)
 100da3c:	e0802d17 	ldw	r2,180(fp)
 100da40:	d8800015 	stw	r2,0(sp)
 100da44:	e1402a17 	ldw	r5,168(fp)
 100da48:	e1802b17 	ldw	r6,172(fp)
 100da4c:	e1c02c17 	ldw	r7,176(fp)
 100da50:	100c7780 	call	100c778 <psubp>
 100da54:	e13ffb17 	ldw	r4,-20(fp)
 100da58:	e17ffc17 	ldw	r5,-16(fp)
 100da5c:	e1bffd17 	ldw	r6,-12(fp)
 100da60:	e1fffe17 	ldw	r7,-8(fp)
 100da64:	100c9180 	call	100c918 <normsqp>
 100da68:	1009883a 	mov	r4,r2
 100da6c:	180b883a 	mov	r5,r3
 100da70:	e13ff515 	stw	r4,-44(fp)
 100da74:	e17ff615 	stw	r5,-40(fp)
	double dist2 = normsqp(psubp(t2.centroid, p));
 100da78:	e13ff704 	addi	r4,fp,-36
 100da7c:	e0805a17 	ldw	r2,360(fp)
 100da80:	d8800115 	stw	r2,4(sp)
 100da84:	e0805b17 	ldw	r2,364(fp)
 100da88:	d8800215 	stw	r2,8(sp)
 100da8c:	e0805c17 	ldw	r2,368(fp)
 100da90:	d8800315 	stw	r2,12(sp)
 100da94:	e0805d17 	ldw	r2,372(fp)
 100da98:	d8800415 	stw	r2,16(sp)
 100da9c:	e0805917 	ldw	r2,356(fp)
 100daa0:	d8800015 	stw	r2,0(sp)
 100daa4:	e1405617 	ldw	r5,344(fp)
 100daa8:	e1805717 	ldw	r6,348(fp)
 100daac:	e1c05817 	ldw	r7,352(fp)
 100dab0:	100c7780 	call	100c778 <psubp>
 100dab4:	e13ff717 	ldw	r4,-36(fp)
 100dab8:	e17ff817 	ldw	r5,-32(fp)
 100dabc:	e1bff917 	ldw	r6,-28(fp)
 100dac0:	e1fffa17 	ldw	r7,-24(fp)
 100dac4:	100c9180 	call	100c918 <normsqp>
 100dac8:	1009883a 	mov	r4,r2
 100dacc:	180b883a 	mov	r5,r3
 100dad0:	e13ff315 	stw	r4,-52(fp)
 100dad4:	e17ff415 	stw	r5,-48(fp)

	return (dist1 < dist2) ? 1 : 0;
 100dad8:	e03fff15 	stw	zero,-4(fp)
 100dadc:	e13ff517 	ldw	r4,-44(fp)
 100dae0:	e17ff617 	ldw	r5,-40(fp)
 100dae4:	e1bff317 	ldw	r6,-52(fp)
 100dae8:	e1fff417 	ldw	r7,-48(fp)
 100daec:	10132480 	call	1013248 <__ltdf2>
 100daf0:	1004803a 	cmplt	r2,r2,zero
 100daf4:	1000011e 	bne	r2,zero,100dafc <centroidLessThan+0x104>
 100daf8:	00000206 	br	100db04 <centroidLessThan+0x10c>
 100dafc:	00800044 	movi	r2,1
 100db00:	e0bfff15 	stw	r2,-4(fp)
 100db04:	e0bfff17 	ldw	r2,-4(fp)
}
 100db08:	e037883a 	mov	sp,fp
 100db0c:	dfc00117 	ldw	ra,4(sp)
 100db10:	df000017 	ldw	fp,0(sp)
 100db14:	dec00604 	addi	sp,sp,24
 100db18:	f800283a 	ret

0100db1c <centroidGreaterThan>:

int centroidGreaterThan(Triangle t1, Triangle t2, Point2D p) {
 100db1c:	deffe804 	addi	sp,sp,-96
 100db20:	dfc01315 	stw	ra,76(sp)
 100db24:	df001215 	stw	fp,72(sp)
 100db28:	df001204 	addi	fp,sp,72
 100db2c:	e1000215 	stw	r4,8(fp)
 100db30:	e1400315 	stw	r5,12(fp)
 100db34:	e1800415 	stw	r6,16(fp)
 100db38:	e1c00515 	stw	r7,20(fp)
	double dist1 = normsqp(psubp(t1.centroid, p));
 100db3c:	e13ffb04 	addi	r4,fp,-20
 100db40:	e0805a17 	ldw	r2,360(fp)
 100db44:	d8800115 	stw	r2,4(sp)
 100db48:	e0805b17 	ldw	r2,364(fp)
 100db4c:	d8800215 	stw	r2,8(sp)
 100db50:	e0805c17 	ldw	r2,368(fp)
 100db54:	d8800315 	stw	r2,12(sp)
 100db58:	e0805d17 	ldw	r2,372(fp)
 100db5c:	d8800415 	stw	r2,16(sp)
 100db60:	e0802d17 	ldw	r2,180(fp)
 100db64:	d8800015 	stw	r2,0(sp)
 100db68:	e1402a17 	ldw	r5,168(fp)
 100db6c:	e1802b17 	ldw	r6,172(fp)
 100db70:	e1c02c17 	ldw	r7,176(fp)
 100db74:	100c7780 	call	100c778 <psubp>
 100db78:	e13ffb17 	ldw	r4,-20(fp)
 100db7c:	e17ffc17 	ldw	r5,-16(fp)
 100db80:	e1bffd17 	ldw	r6,-12(fp)
 100db84:	e1fffe17 	ldw	r7,-8(fp)
 100db88:	100c9180 	call	100c918 <normsqp>
 100db8c:	1009883a 	mov	r4,r2
 100db90:	180b883a 	mov	r5,r3
 100db94:	e13ff515 	stw	r4,-44(fp)
 100db98:	e17ff615 	stw	r5,-40(fp)
	double dist2 = normsqp(psubp(t2.centroid, p));
 100db9c:	e13ff704 	addi	r4,fp,-36
 100dba0:	e0805a17 	ldw	r2,360(fp)
 100dba4:	d8800115 	stw	r2,4(sp)
 100dba8:	e0805b17 	ldw	r2,364(fp)
 100dbac:	d8800215 	stw	r2,8(sp)
 100dbb0:	e0805c17 	ldw	r2,368(fp)
 100dbb4:	d8800315 	stw	r2,12(sp)
 100dbb8:	e0805d17 	ldw	r2,372(fp)
 100dbbc:	d8800415 	stw	r2,16(sp)
 100dbc0:	e0805917 	ldw	r2,356(fp)
 100dbc4:	d8800015 	stw	r2,0(sp)
 100dbc8:	e1405617 	ldw	r5,344(fp)
 100dbcc:	e1805717 	ldw	r6,348(fp)
 100dbd0:	e1c05817 	ldw	r7,352(fp)
 100dbd4:	100c7780 	call	100c778 <psubp>
 100dbd8:	e13ff717 	ldw	r4,-36(fp)
 100dbdc:	e17ff817 	ldw	r5,-32(fp)
 100dbe0:	e1bff917 	ldw	r6,-28(fp)
 100dbe4:	e1fffa17 	ldw	r7,-24(fp)
 100dbe8:	100c9180 	call	100c918 <normsqp>
 100dbec:	1009883a 	mov	r4,r2
 100dbf0:	180b883a 	mov	r5,r3
 100dbf4:	e13ff315 	stw	r4,-52(fp)
 100dbf8:	e17ff415 	stw	r5,-48(fp)

	return (dist1 > dist2) ? 1 : 0;
 100dbfc:	e03fff15 	stw	zero,-4(fp)
 100dc00:	e13ff517 	ldw	r4,-44(fp)
 100dc04:	e17ff617 	ldw	r5,-40(fp)
 100dc08:	e1bff317 	ldw	r6,-52(fp)
 100dc0c:	e1fff417 	ldw	r7,-48(fp)
 100dc10:	10131380 	call	1013138 <__gtdf2>
 100dc14:	10800048 	cmpgei	r2,r2,1
 100dc18:	1000011e 	bne	r2,zero,100dc20 <centroidGreaterThan+0x104>
 100dc1c:	00000206 	br	100dc28 <centroidGreaterThan+0x10c>
 100dc20:	00800044 	movi	r2,1
 100dc24:	e0bfff15 	stw	r2,-4(fp)
 100dc28:	e0bfff17 	ldw	r2,-4(fp)
}
 100dc2c:	e037883a 	mov	sp,fp
 100dc30:	dfc00117 	ldw	ra,4(sp)
 100dc34:	df000017 	ldw	fp,0(sp)
 100dc38:	dec00604 	addi	sp,sp,24
 100dc3c:	f800283a 	ret

0100dc40 <centroidEqualTo>:

int centroidEqualTo(Triangle t1, Triangle t2, Point2D p, double eps) {
 100dc40:	deffe804 	addi	sp,sp,-96
 100dc44:	dfc01315 	stw	ra,76(sp)
 100dc48:	df001215 	stw	fp,72(sp)
 100dc4c:	df001204 	addi	fp,sp,72
 100dc50:	e1000215 	stw	r4,8(fp)
 100dc54:	e1400315 	stw	r5,12(fp)
 100dc58:	e1800415 	stw	r6,16(fp)
 100dc5c:	e1c00515 	stw	r7,20(fp)
	double dist1 = normsqp(psubp(t1.centroid, p));
 100dc60:	e13ffb04 	addi	r4,fp,-20
 100dc64:	e0805a17 	ldw	r2,360(fp)
 100dc68:	d8800115 	stw	r2,4(sp)
 100dc6c:	e0805b17 	ldw	r2,364(fp)
 100dc70:	d8800215 	stw	r2,8(sp)
 100dc74:	e0805c17 	ldw	r2,368(fp)
 100dc78:	d8800315 	stw	r2,12(sp)
 100dc7c:	e0805d17 	ldw	r2,372(fp)
 100dc80:	d8800415 	stw	r2,16(sp)
 100dc84:	e0802d17 	ldw	r2,180(fp)
 100dc88:	d8800015 	stw	r2,0(sp)
 100dc8c:	e1402a17 	ldw	r5,168(fp)
 100dc90:	e1802b17 	ldw	r6,172(fp)
 100dc94:	e1c02c17 	ldw	r7,176(fp)
 100dc98:	100c7780 	call	100c778 <psubp>
 100dc9c:	e13ffb17 	ldw	r4,-20(fp)
 100dca0:	e17ffc17 	ldw	r5,-16(fp)
 100dca4:	e1bffd17 	ldw	r6,-12(fp)
 100dca8:	e1fffe17 	ldw	r7,-8(fp)
 100dcac:	100c9180 	call	100c918 <normsqp>
 100dcb0:	1009883a 	mov	r4,r2
 100dcb4:	180b883a 	mov	r5,r3
 100dcb8:	e13ff515 	stw	r4,-44(fp)
 100dcbc:	e17ff615 	stw	r5,-40(fp)
	double dist2 = normsqp(psubp(t2.centroid, p));
 100dcc0:	e13ff704 	addi	r4,fp,-36
 100dcc4:	e0805a17 	ldw	r2,360(fp)
 100dcc8:	d8800115 	stw	r2,4(sp)
 100dccc:	e0805b17 	ldw	r2,364(fp)
 100dcd0:	d8800215 	stw	r2,8(sp)
 100dcd4:	e0805c17 	ldw	r2,368(fp)
 100dcd8:	d8800315 	stw	r2,12(sp)
 100dcdc:	e0805d17 	ldw	r2,372(fp)
 100dce0:	d8800415 	stw	r2,16(sp)
 100dce4:	e0805917 	ldw	r2,356(fp)
 100dce8:	d8800015 	stw	r2,0(sp)
 100dcec:	e1405617 	ldw	r5,344(fp)
 100dcf0:	e1805717 	ldw	r6,348(fp)
 100dcf4:	e1c05817 	ldw	r7,352(fp)
 100dcf8:	100c7780 	call	100c778 <psubp>
 100dcfc:	e13ff717 	ldw	r4,-36(fp)
 100dd00:	e17ff817 	ldw	r5,-32(fp)
 100dd04:	e1bff917 	ldw	r6,-28(fp)
 100dd08:	e1fffa17 	ldw	r7,-24(fp)
 100dd0c:	100c9180 	call	100c918 <normsqp>
 100dd10:	1009883a 	mov	r4,r2
 100dd14:	180b883a 	mov	r5,r3
 100dd18:	e13ff315 	stw	r4,-52(fp)
 100dd1c:	e17ff415 	stw	r5,-48(fp)

	return (fabs(dist1 - dist2) < eps) ? 1 : 0;
 100dd20:	e13ff517 	ldw	r4,-44(fp)
 100dd24:	e17ff617 	ldw	r5,-40(fp)
 100dd28:	e1bff317 	ldw	r6,-52(fp)
 100dd2c:	e1fff417 	ldw	r7,-48(fp)
 100dd30:	10129a00 	call	10129a0 <__subdf3>
 100dd34:	1009883a 	mov	r4,r2
 100dd38:	180b883a 	mov	r5,r3
 100dd3c:	200d883a 	mov	r6,r4
 100dd40:	280f883a 	mov	r7,r5
 100dd44:	01200034 	movhi	r4,32768
 100dd48:	213fffc4 	addi	r4,r4,-1
 100dd4c:	3005883a 	mov	r2,r6
 100dd50:	3906703a 	and	r3,r7,r4
 100dd54:	e03fff15 	stw	zero,-4(fp)
 100dd58:	1009883a 	mov	r4,r2
 100dd5c:	180b883a 	mov	r5,r3
 100dd60:	e1805e17 	ldw	r6,376(fp)
 100dd64:	e1c05f17 	ldw	r7,380(fp)
 100dd68:	10132480 	call	1013248 <__ltdf2>
 100dd6c:	1004803a 	cmplt	r2,r2,zero
 100dd70:	1000011e 	bne	r2,zero,100dd78 <centroidEqualTo+0x138>
 100dd74:	00000206 	br	100dd80 <centroidEqualTo+0x140>
 100dd78:	00800044 	movi	r2,1
 100dd7c:	e0bfff15 	stw	r2,-4(fp)
 100dd80:	e0bfff17 	ldw	r2,-4(fp)
}
 100dd84:	e037883a 	mov	sp,fp
 100dd88:	dfc00117 	ldw	ra,4(sp)
 100dd8c:	df000017 	ldw	fp,0(sp)
 100dd90:	dec00604 	addi	sp,sp,24
 100dd94:	f800283a 	ret

0100dd98 <findMin>:

int findMin(double *numbers, int size) {
 100dd98:	defffa04 	addi	sp,sp,-24
 100dd9c:	dfc00515 	stw	ra,20(sp)
 100dda0:	df000415 	stw	fp,16(sp)
 100dda4:	df000404 	addi	fp,sp,16
 100dda8:	e13ffe15 	stw	r4,-8(fp)
 100ddac:	e17fff15 	stw	r5,-4(fp)
	int i, min = numbers[0];
 100ddb0:	e13ffe17 	ldw	r4,-8(fp)
 100ddb4:	20800017 	ldw	r2,0(r4)
 100ddb8:	20c00117 	ldw	r3,4(r4)
 100ddbc:	1009883a 	mov	r4,r2
 100ddc0:	180b883a 	mov	r5,r3
 100ddc4:	10133c80 	call	10133c8 <__fixdfsi>
 100ddc8:	e0bffc15 	stw	r2,-16(fp)
	for (i = 1; i < size; i++)
 100ddcc:	00800044 	movi	r2,1
 100ddd0:	e0bffd15 	stw	r2,-12(fp)
 100ddd4:	00001b06 	br	100de44 <findMin+0xac>
		(numbers[i] < numbers[min]) ? min = i : 1;
 100ddd8:	e0bffd17 	ldw	r2,-12(fp)
 100dddc:	100490fa 	slli	r2,r2,3
 100dde0:	1007883a 	mov	r3,r2
 100dde4:	e0bffe17 	ldw	r2,-8(fp)
 100dde8:	1885883a 	add	r2,r3,r2
 100ddec:	11400017 	ldw	r5,0(r2)
 100ddf0:	11800117 	ldw	r6,4(r2)
 100ddf4:	e0bffc17 	ldw	r2,-16(fp)
 100ddf8:	100490fa 	slli	r2,r2,3
 100ddfc:	1007883a 	mov	r3,r2
 100de00:	e0bffe17 	ldw	r2,-8(fp)
 100de04:	1889883a 	add	r4,r3,r2
 100de08:	20800017 	ldw	r2,0(r4)
 100de0c:	20c00117 	ldw	r3,4(r4)
 100de10:	2809883a 	mov	r4,r5
 100de14:	300b883a 	mov	r5,r6
 100de18:	100d883a 	mov	r6,r2
 100de1c:	180f883a 	mov	r7,r3
 100de20:	10132480 	call	1013248 <__ltdf2>
 100de24:	1004803a 	cmplt	r2,r2,zero
 100de28:	1000011e 	bne	r2,zero,100de30 <findMin+0x98>
 100de2c:	00000206 	br	100de38 <findMin+0xa0>
 100de30:	e0bffd17 	ldw	r2,-12(fp)
 100de34:	e0bffc15 	stw	r2,-16(fp)
	return (fabs(dist1 - dist2) < eps) ? 1 : 0;
}

int findMin(double *numbers, int size) {
	int i, min = numbers[0];
	for (i = 1; i < size; i++)
 100de38:	e0bffd17 	ldw	r2,-12(fp)
 100de3c:	10800044 	addi	r2,r2,1
 100de40:	e0bffd15 	stw	r2,-12(fp)
 100de44:	e0fffd17 	ldw	r3,-12(fp)
 100de48:	e0bfff17 	ldw	r2,-4(fp)
 100de4c:	18bfe216 	blt	r3,r2,100ddd8 <findMin+0x40>
		(numbers[i] < numbers[min]) ? min = i : 1;
	return min;
 100de50:	e0bffc17 	ldw	r2,-16(fp)
}
 100de54:	e037883a 	mov	sp,fp
 100de58:	dfc00117 	ldw	ra,4(sp)
 100de5c:	df000017 	ldw	fp,0(sp)
 100de60:	dec00204 	addi	sp,sp,8
 100de64:	f800283a 	ret

0100de68 <showMin>:

double showMin(double *numbers, int size) {
 100de68:	defff804 	addi	sp,sp,-32
 100de6c:	dfc00715 	stw	ra,28(sp)
 100de70:	df000615 	stw	fp,24(sp)
 100de74:	dc400515 	stw	r17,20(sp)
 100de78:	dc000415 	stw	r16,16(sp)
 100de7c:	df000404 	addi	fp,sp,16
 100de80:	e13ffe15 	stw	r4,-8(fp)
 100de84:	e17fff15 	stw	r5,-4(fp)
	int i, min = 1e6;
 100de88:	008003f4 	movhi	r2,15
 100de8c:	10909004 	addi	r2,r2,16960
 100de90:	e0bffc15 	stw	r2,-16(fp)
	for (i = 0; i < size; i++)
 100de94:	e03ffd15 	stw	zero,-12(fp)
 100de98:	00002106 	br	100df20 <showMin+0xb8>
		(numbers[i] < min) ? min = numbers[i] : 1;
 100de9c:	e0bffd17 	ldw	r2,-12(fp)
 100dea0:	100490fa 	slli	r2,r2,3
 100dea4:	1007883a 	mov	r3,r2
 100dea8:	e0bffe17 	ldw	r2,-8(fp)
 100deac:	1885883a 	add	r2,r3,r2
 100deb0:	14000017 	ldw	r16,0(r2)
 100deb4:	14400117 	ldw	r17,4(r2)
 100deb8:	e13ffc17 	ldw	r4,-16(fp)
 100debc:	10132d00 	call	10132d0 <__floatsidf>
 100dec0:	100f883a 	mov	r7,r2
 100dec4:	1811883a 	mov	r8,r3
 100dec8:	8009883a 	mov	r4,r16
 100decc:	880b883a 	mov	r5,r17
 100ded0:	380d883a 	mov	r6,r7
 100ded4:	400f883a 	mov	r7,r8
 100ded8:	10132480 	call	1013248 <__ltdf2>
 100dedc:	1004803a 	cmplt	r2,r2,zero
 100dee0:	1000011e 	bne	r2,zero,100dee8 <showMin+0x80>
 100dee4:	00000b06 	br	100df14 <showMin+0xac>
 100dee8:	e0bffd17 	ldw	r2,-12(fp)
 100deec:	100490fa 	slli	r2,r2,3
 100def0:	1007883a 	mov	r3,r2
 100def4:	e0bffe17 	ldw	r2,-8(fp)
 100def8:	1889883a 	add	r4,r3,r2
 100defc:	20800017 	ldw	r2,0(r4)
 100df00:	20c00117 	ldw	r3,4(r4)
 100df04:	1009883a 	mov	r4,r2
 100df08:	180b883a 	mov	r5,r3
 100df0c:	10133c80 	call	10133c8 <__fixdfsi>
 100df10:	e0bffc15 	stw	r2,-16(fp)
	return min;
}

double showMin(double *numbers, int size) {
	int i, min = 1e6;
	for (i = 0; i < size; i++)
 100df14:	e0bffd17 	ldw	r2,-12(fp)
 100df18:	10800044 	addi	r2,r2,1
 100df1c:	e0bffd15 	stw	r2,-12(fp)
 100df20:	e0fffd17 	ldw	r3,-12(fp)
 100df24:	e0bfff17 	ldw	r2,-4(fp)
 100df28:	18bfdc16 	blt	r3,r2,100de9c <showMin+0x34>
		(numbers[i] < min) ? min = numbers[i] : 1;
	return min;
 100df2c:	e13ffc17 	ldw	r4,-16(fp)
 100df30:	10132d00 	call	10132d0 <__floatsidf>
 100df34:	100b883a 	mov	r5,r2
 100df38:	180d883a 	mov	r6,r3
 100df3c:	2807883a 	mov	r3,r5
 100df40:	3009883a 	mov	r4,r6
}
 100df44:	1805883a 	mov	r2,r3
 100df48:	2007883a 	mov	r3,r4
 100df4c:	e037883a 	mov	sp,fp
 100df50:	dfc00317 	ldw	ra,12(sp)
 100df54:	df000217 	ldw	fp,8(sp)
 100df58:	dc400117 	ldw	r17,4(sp)
 100df5c:	dc000017 	ldw	r16,0(sp)
 100df60:	dec00404 	addi	sp,sp,16
 100df64:	f800283a 	ret

0100df68 <nearestneighbour>:

Triangle nearestneighbour(Delaunay d, Point2D q) {
 100df68:	deffeb04 	addi	sp,sp,-84
 100df6c:	dfc01115 	stw	ra,68(sp)
 100df70:	df001015 	stw	fp,64(sp)
 100df74:	dc000f15 	stw	r16,60(sp)
 100df78:	df000f04 	addi	fp,sp,60
 100df7c:	e13ffe15 	stw	r4,-8(fp)
 100df80:	e1400315 	stw	r5,12(fp)
 100df84:	e1800415 	stw	r6,16(fp)
 100df88:	e1c00515 	stw	r7,20(fp)
 100df8c:	e6ffff15 	stw	sp,-4(fp)
 100df90:	d805883a 	mov	r2,sp
 100df94:	e0bffc15 	stw	r2,-16(fp)
	int i;
	// printf("test: %.10f %.10f\n", q.x,q.y);
	double neighbours[d.numt];
 100df98:	e0800417 	ldw	r2,16(fp)
 100df9c:	100490fa 	slli	r2,r2,3
 100dfa0:	108000c4 	addi	r2,r2,3
 100dfa4:	108000c4 	addi	r2,r2,3
 100dfa8:	1004d0ba 	srli	r2,r2,2
 100dfac:	1085883a 	add	r2,r2,r2
 100dfb0:	1085883a 	add	r2,r2,r2
 100dfb4:	d8b7c83a 	sub	sp,sp,r2
 100dfb8:	d8800504 	addi	r2,sp,20
 100dfbc:	e0bffd15 	stw	r2,-12(fp)
 100dfc0:	e0fffd17 	ldw	r3,-12(fp)
 100dfc4:	188000c4 	addi	r2,r3,3
 100dfc8:	1004d0ba 	srli	r2,r2,2
 100dfcc:	1085883a 	add	r2,r2,r2
 100dfd0:	1085883a 	add	r2,r2,r2
 100dfd4:	e0bffd15 	stw	r2,-12(fp)
 100dfd8:	e0bffd17 	ldw	r2,-12(fp)
 100dfdc:	e0bffb15 	stw	r2,-20(fp)
	for (i = 0; i < d.numt; i++) {
 100dfe0:	e03ff615 	stw	zero,-40(fp)
 100dfe4:	00002306 	br	100e074 <nearestneighbour+0x10c>
		// printf("centroid: %.10f %.10f\n", d.T[i].centroid.x,d.T[i].centroid.y);
		neighbours[i] = normp(psubp(d.T[i].centroid, q));
 100dfe8:	e43ff617 	ldw	r16,-40(fp)
 100dfec:	e0c00617 	ldw	r3,24(fp)
 100dff0:	e0bff617 	ldw	r2,-40(fp)
 100dff4:	10802c24 	muli	r2,r2,176
 100dff8:	1887883a 	add	r3,r3,r2
 100dffc:	e13ff704 	addi	r4,fp,-36
 100e000:	e0800817 	ldw	r2,32(fp)
 100e004:	d8800115 	stw	r2,4(sp)
 100e008:	e0800917 	ldw	r2,36(fp)
 100e00c:	d8800215 	stw	r2,8(sp)
 100e010:	e0800a17 	ldw	r2,40(fp)
 100e014:	d8800315 	stw	r2,12(sp)
 100e018:	e0800b17 	ldw	r2,44(fp)
 100e01c:	d8800415 	stw	r2,16(sp)
 100e020:	18802b17 	ldw	r2,172(r3)
 100e024:	d8800015 	stw	r2,0(sp)
 100e028:	19402817 	ldw	r5,160(r3)
 100e02c:	19802917 	ldw	r6,164(r3)
 100e030:	19c02a17 	ldw	r7,168(r3)
 100e034:	100c7780 	call	100c778 <psubp>
 100e038:	e13ff717 	ldw	r4,-36(fp)
 100e03c:	e17ff817 	ldw	r5,-32(fp)
 100e040:	e1bff917 	ldw	r6,-28(fp)
 100e044:	e1fffa17 	ldw	r7,-24(fp)
 100e048:	100c9a00 	call	100c9a0 <normp>
 100e04c:	1009883a 	mov	r4,r2
 100e050:	180b883a 	mov	r5,r3
 100e054:	e0fffb17 	ldw	r3,-20(fp)
 100e058:	800490fa 	slli	r2,r16,3
 100e05c:	10c5883a 	add	r2,r2,r3
 100e060:	11000015 	stw	r4,0(r2)
 100e064:	11400115 	stw	r5,4(r2)

Triangle nearestneighbour(Delaunay d, Point2D q) {
	int i;
	// printf("test: %.10f %.10f\n", q.x,q.y);
	double neighbours[d.numt];
	for (i = 0; i < d.numt; i++) {
 100e068:	e0bff617 	ldw	r2,-40(fp)
 100e06c:	10800044 	addi	r2,r2,1
 100e070:	e0bff615 	stw	r2,-40(fp)
 100e074:	e0c00417 	ldw	r3,16(fp)
 100e078:	e0bff617 	ldw	r2,-40(fp)
 100e07c:	10ffda16 	blt	r2,r3,100dfe8 <nearestneighbour+0x80>
		neighbours[i] = normp(psubp(d.T[i].centroid, q));
		// printf("neighbours[i]: %.10f\n", neighbours[i]);
	}

	// printf("%d\n", findMin(neighbours,d.numt));
	return d.T[findMin(neighbours, d.numt)];
 100e080:	e4000617 	ldw	r16,24(fp)
 100e084:	e13ffb17 	ldw	r4,-20(fp)
 100e088:	e1400417 	ldw	r5,16(fp)
 100e08c:	100dd980 	call	100dd98 <findMin>
 100e090:	10802c24 	muli	r2,r2,176
 100e094:	808b883a 	add	r5,r16,r2
 100e098:	e13ffe17 	ldw	r4,-8(fp)
 100e09c:	01802c04 	movi	r6,176
 100e0a0:	10153140 	call	1015314 <memmove>
 100e0a4:	e6fffc17 	ldw	sp,-16(fp)
}
 100e0a8:	e0bffe17 	ldw	r2,-8(fp)
 100e0ac:	e6ffff17 	ldw	sp,-4(fp)
 100e0b0:	e037883a 	mov	sp,fp
 100e0b4:	dfc00217 	ldw	ra,8(sp)
 100e0b8:	df000117 	ldw	fp,4(sp)
 100e0bc:	dc000017 	ldw	r16,0(sp)
 100e0c0:	dec00604 	addi	sp,sp,24
 100e0c4:	f800283a 	ret

0100e0c8 <DelaunayTriangulation>:

Delaunay DelaunayTriangulation(double vs[][2], double bary[][2], int tris[][3],
		int vsize, int bsize, int tsize) {
 100e0c8:	deff7b04 	addi	sp,sp,-532
 100e0cc:	dfc08415 	stw	ra,528(sp)
 100e0d0:	df008315 	stw	fp,524(sp)
 100e0d4:	dd008215 	stw	r20,520(sp)
 100e0d8:	dcc08115 	stw	r19,516(sp)
 100e0dc:	dc808015 	stw	r18,512(sp)
 100e0e0:	dc407f15 	stw	r17,508(sp)
 100e0e4:	dc007e15 	stw	r16,504(sp)
 100e0e8:	df007e04 	addi	fp,sp,504
 100e0ec:	e13fff15 	stw	r4,-4(fp)
 100e0f0:	e17ff415 	stw	r5,-48(fp)
 100e0f4:	e1bff515 	stw	r6,-44(fp)
 100e0f8:	e1fff615 	stw	r7,-40(fp)
	assert(vsize == bsize);
 100e0fc:	e0c00717 	ldw	r3,28(fp)
 100e100:	e0800817 	ldw	r2,32(fp)
 100e104:	18800826 	beq	r3,r2,100e128 <DelaunayTriangulation+0x60>
 100e108:	010040f4 	movhi	r4,259
 100e10c:	2112a504 	addi	r4,r4,19092
 100e110:	01404044 	movi	r5,257
 100e114:	018040f4 	movhi	r6,259
 100e118:	31929f04 	addi	r6,r6,19068
 100e11c:	01c040f4 	movhi	r7,259
 100e120:	39d2a904 	addi	r7,r7,19108
 100e124:	1013d180 	call	1013d18 <__assert_func>
	Delaunay d;
	Triangle tri;
	int i;
	d.numv = vsize;
 100e128:	e0800717 	ldw	r2,28(fp)
 100e12c:	e0bfab15 	stw	r2,-340(fp)
	d.numt = tsize;
 100e130:	e0800917 	ldw	r2,36(fp)
 100e134:	e0bfac15 	stw	r2,-336(fp)
	d.vertices = malloc(sizeof(Vertex) * vsize);
 100e138:	e0800717 	ldw	r2,28(fp)
 100e13c:	1008917a 	slli	r4,r2,5
 100e140:	1014b200 	call	1014b20 <malloc>
 100e144:	e0bfad15 	stw	r2,-332(fp)
	d.centroids = malloc(sizeof(int) * tsize);
 100e148:	e0800917 	ldw	r2,36(fp)
 100e14c:	1085883a 	add	r2,r2,r2
 100e150:	1085883a 	add	r2,r2,r2
 100e154:	1009883a 	mov	r4,r2
 100e158:	1014b200 	call	1014b20 <malloc>
 100e15c:	e0bfaf15 	stw	r2,-324(fp)
	d.T = malloc(sizeof(Triangle) * tsize);
 100e160:	e0800917 	ldw	r2,36(fp)
 100e164:	11002c24 	muli	r4,r2,176
 100e168:	1014b200 	call	1014b20 <malloc>
 100e16c:	e0bfae15 	stw	r2,-328(fp)

	int one, two, three;
	for (i = 0; i < vsize; i++) {
 100e170:	e03f9a15 	stw	zero,-408(fp)
 100e174:	00004706 	br	100e294 <DelaunayTriangulation+0x1cc>
		d.vertices[i] = vtx(vs[i][0], vs[i][1], point(bary[i][0], bary[i][1]));
 100e178:	e0ffad17 	ldw	r3,-332(fp)
 100e17c:	e0bf9a17 	ldw	r2,-408(fp)
 100e180:	1004917a 	slli	r2,r2,5
 100e184:	18a9883a 	add	r20,r3,r2
 100e188:	e0bf9a17 	ldw	r2,-408(fp)
 100e18c:	1004913a 	slli	r2,r2,4
 100e190:	1007883a 	mov	r3,r2
 100e194:	e0bff417 	ldw	r2,-48(fp)
 100e198:	1885883a 	add	r2,r3,r2
 100e19c:	14800017 	ldw	r18,0(r2)
 100e1a0:	14c00117 	ldw	r19,4(r2)
 100e1a4:	e0bf9a17 	ldw	r2,-408(fp)
 100e1a8:	1004913a 	slli	r2,r2,4
 100e1ac:	1007883a 	mov	r3,r2
 100e1b0:	e0bff417 	ldw	r2,-48(fp)
 100e1b4:	1885883a 	add	r2,r3,r2
 100e1b8:	14000217 	ldw	r16,8(r2)
 100e1bc:	14400317 	ldw	r17,12(r2)
 100e1c0:	e0bf9a17 	ldw	r2,-408(fp)
 100e1c4:	1004913a 	slli	r2,r2,4
 100e1c8:	1007883a 	mov	r3,r2
 100e1cc:	e0bff517 	ldw	r2,-44(fp)
 100e1d0:	1885883a 	add	r2,r3,r2
 100e1d4:	12000017 	ldw	r8,0(r2)
 100e1d8:	12400117 	ldw	r9,4(r2)
 100e1dc:	e0bf9a17 	ldw	r2,-408(fp)
 100e1e0:	1004913a 	slli	r2,r2,4
 100e1e4:	1007883a 	mov	r3,r2
 100e1e8:	e0bff517 	ldw	r2,-44(fp)
 100e1ec:	1889883a 	add	r4,r3,r2
 100e1f0:	20800217 	ldw	r2,8(r4)
 100e1f4:	20c00317 	ldw	r3,12(r4)
 100e1f8:	e13fa704 	addi	r4,fp,-356
 100e1fc:	d8c00015 	stw	r3,0(sp)
 100e200:	100f883a 	mov	r7,r2
 100e204:	400b883a 	mov	r5,r8
 100e208:	480d883a 	mov	r6,r9
 100e20c:	100ca3c0 	call	100ca3c <point>
 100e210:	e13ff704 	addi	r4,fp,-36
 100e214:	e0bfa717 	ldw	r2,-356(fp)
 100e218:	d8800115 	stw	r2,4(sp)
 100e21c:	e0bfa817 	ldw	r2,-352(fp)
 100e220:	d8800215 	stw	r2,8(sp)
 100e224:	e0bfa917 	ldw	r2,-348(fp)
 100e228:	d8800315 	stw	r2,12(sp)
 100e22c:	e0bfaa17 	ldw	r2,-344(fp)
 100e230:	d8800415 	stw	r2,16(sp)
 100e234:	dc400015 	stw	r17,0(sp)
 100e238:	800f883a 	mov	r7,r16
 100e23c:	900b883a 	mov	r5,r18
 100e240:	980d883a 	mov	r6,r19
 100e244:	100caa80 	call	100caa8 <vtx>
 100e248:	e0bff717 	ldw	r2,-36(fp)
 100e24c:	a0800015 	stw	r2,0(r20)
 100e250:	e0bff817 	ldw	r2,-32(fp)
 100e254:	a0800115 	stw	r2,4(r20)
 100e258:	e0bff917 	ldw	r2,-28(fp)
 100e25c:	a0800215 	stw	r2,8(r20)
 100e260:	e0bffa17 	ldw	r2,-24(fp)
 100e264:	a0800315 	stw	r2,12(r20)
 100e268:	e0bffb17 	ldw	r2,-20(fp)
 100e26c:	a0800415 	stw	r2,16(r20)
 100e270:	e0bffc17 	ldw	r2,-16(fp)
 100e274:	a0800515 	stw	r2,20(r20)
 100e278:	e0bffd17 	ldw	r2,-12(fp)
 100e27c:	a0800615 	stw	r2,24(r20)
 100e280:	e0bffe17 	ldw	r2,-8(fp)
 100e284:	a0800715 	stw	r2,28(r20)
	d.vertices = malloc(sizeof(Vertex) * vsize);
	d.centroids = malloc(sizeof(int) * tsize);
	d.T = malloc(sizeof(Triangle) * tsize);

	int one, two, three;
	for (i = 0; i < vsize; i++) {
 100e288:	e0bf9a17 	ldw	r2,-408(fp)
 100e28c:	10800044 	addi	r2,r2,1
 100e290:	e0bf9a15 	stw	r2,-408(fp)
 100e294:	e0ff9a17 	ldw	r3,-408(fp)
 100e298:	e0800717 	ldw	r2,28(fp)
 100e29c:	18bfb616 	blt	r3,r2,100e178 <DelaunayTriangulation+0xb0>
		d.vertices[i] = vtx(vs[i][0], vs[i][1], point(bary[i][0], bary[i][1]));
		// printf("%f %f\n", vs[i][0],vs[i][1]);
	}
	for (i = 0; i < tsize; i++) {
 100e2a0:	e03f9a15 	stw	zero,-408(fp)
 100e2a4:	0000ee06 	br	100e660 <DelaunayTriangulation+0x598>

		one = tris[i][0] - 1;
 100e2a8:	e0bf9a17 	ldw	r2,-408(fp)
 100e2ac:	10800324 	muli	r2,r2,12
 100e2b0:	1007883a 	mov	r3,r2
 100e2b4:	e0bff617 	ldw	r2,-40(fp)
 100e2b8:	1885883a 	add	r2,r3,r2
 100e2bc:	10800017 	ldw	r2,0(r2)
 100e2c0:	10bfffc4 	addi	r2,r2,-1
 100e2c4:	e0bf9915 	stw	r2,-412(fp)
		two = tris[i][1] - 1;
 100e2c8:	e0bf9a17 	ldw	r2,-408(fp)
 100e2cc:	10800324 	muli	r2,r2,12
 100e2d0:	1007883a 	mov	r3,r2
 100e2d4:	e0bff617 	ldw	r2,-40(fp)
 100e2d8:	1885883a 	add	r2,r3,r2
 100e2dc:	10800117 	ldw	r2,4(r2)
 100e2e0:	10bfffc4 	addi	r2,r2,-1
 100e2e4:	e0bf9815 	stw	r2,-416(fp)
		three = tris[i][2] - 1;
 100e2e8:	e0bf9a17 	ldw	r2,-408(fp)
 100e2ec:	10800324 	muli	r2,r2,12
 100e2f0:	1007883a 	mov	r3,r2
 100e2f4:	e0bff617 	ldw	r2,-40(fp)
 100e2f8:	1885883a 	add	r2,r3,r2
 100e2fc:	10800217 	ldw	r2,8(r2)
 100e300:	10bfffc4 	addi	r2,r2,-1
 100e304:	e0bf9715 	stw	r2,-420(fp)

		Vertex v1 = vtx(vs[one][0], vs[one][1],
				point(bary[one][0], bary[one][1]));
 100e308:	e0bf9917 	ldw	r2,-412(fp)
 100e30c:	1004913a 	slli	r2,r2,4
 100e310:	1007883a 	mov	r3,r2
 100e314:	e0bff417 	ldw	r2,-48(fp)
 100e318:	1885883a 	add	r2,r3,r2
 100e31c:	14800017 	ldw	r18,0(r2)
 100e320:	14c00117 	ldw	r19,4(r2)
 100e324:	e0bf9917 	ldw	r2,-412(fp)
 100e328:	1004913a 	slli	r2,r2,4
 100e32c:	1007883a 	mov	r3,r2
 100e330:	e0bff417 	ldw	r2,-48(fp)
 100e334:	1885883a 	add	r2,r3,r2
 100e338:	14000217 	ldw	r16,8(r2)
 100e33c:	14400317 	ldw	r17,12(r2)
 100e340:	e0bf9917 	ldw	r2,-412(fp)
 100e344:	1004913a 	slli	r2,r2,4
 100e348:	1007883a 	mov	r3,r2
 100e34c:	e0bff517 	ldw	r2,-44(fp)
 100e350:	1885883a 	add	r2,r3,r2
 100e354:	12000017 	ldw	r8,0(r2)
 100e358:	12400117 	ldw	r9,4(r2)
 100e35c:	e0bf9917 	ldw	r2,-412(fp)
 100e360:	1004913a 	slli	r2,r2,4
 100e364:	1007883a 	mov	r3,r2
 100e368:	e0bff517 	ldw	r2,-44(fp)
 100e36c:	1889883a 	add	r4,r3,r2
 100e370:	20800217 	ldw	r2,8(r4)
 100e374:	20c00317 	ldw	r3,12(r4)
 100e378:	e13fa304 	addi	r4,fp,-372
 100e37c:	d8c00015 	stw	r3,0(sp)
 100e380:	100f883a 	mov	r7,r2
 100e384:	400b883a 	mov	r5,r8
 100e388:	480d883a 	mov	r6,r9
 100e38c:	100ca3c0 	call	100ca3c <point>
 100e390:	e13fec04 	addi	r4,fp,-80
 100e394:	e0bfa317 	ldw	r2,-372(fp)
 100e398:	d8800115 	stw	r2,4(sp)
 100e39c:	e0bfa417 	ldw	r2,-368(fp)
 100e3a0:	d8800215 	stw	r2,8(sp)
 100e3a4:	e0bfa517 	ldw	r2,-364(fp)
 100e3a8:	d8800315 	stw	r2,12(sp)
 100e3ac:	e0bfa617 	ldw	r2,-360(fp)
 100e3b0:	d8800415 	stw	r2,16(sp)
 100e3b4:	dc400015 	stw	r17,0(sp)
 100e3b8:	800f883a 	mov	r7,r16
 100e3bc:	900b883a 	mov	r5,r18
 100e3c0:	980d883a 	mov	r6,r19
 100e3c4:	100caa80 	call	100caa8 <vtx>
		Vertex v2 = vtx(vs[two][0], vs[two][1],
				point(bary[two][0], bary[two][1]));
 100e3c8:	e0bf9817 	ldw	r2,-416(fp)
 100e3cc:	1004913a 	slli	r2,r2,4
 100e3d0:	1007883a 	mov	r3,r2
 100e3d4:	e0bff417 	ldw	r2,-48(fp)
 100e3d8:	1885883a 	add	r2,r3,r2
 100e3dc:	14800017 	ldw	r18,0(r2)
 100e3e0:	14c00117 	ldw	r19,4(r2)
 100e3e4:	e0bf9817 	ldw	r2,-416(fp)
 100e3e8:	1004913a 	slli	r2,r2,4
 100e3ec:	1007883a 	mov	r3,r2
 100e3f0:	e0bff417 	ldw	r2,-48(fp)
 100e3f4:	1885883a 	add	r2,r3,r2
 100e3f8:	14000217 	ldw	r16,8(r2)
 100e3fc:	14400317 	ldw	r17,12(r2)
 100e400:	e0bf9817 	ldw	r2,-416(fp)
 100e404:	1004913a 	slli	r2,r2,4
 100e408:	1007883a 	mov	r3,r2
 100e40c:	e0bff517 	ldw	r2,-44(fp)
 100e410:	1885883a 	add	r2,r3,r2
 100e414:	12000017 	ldw	r8,0(r2)
 100e418:	12400117 	ldw	r9,4(r2)
 100e41c:	e0bf9817 	ldw	r2,-416(fp)
 100e420:	1004913a 	slli	r2,r2,4
 100e424:	1007883a 	mov	r3,r2
 100e428:	e0bff517 	ldw	r2,-44(fp)
 100e42c:	1889883a 	add	r4,r3,r2
 100e430:	20800217 	ldw	r2,8(r4)
 100e434:	20c00317 	ldw	r3,12(r4)
 100e438:	e13f9f04 	addi	r4,fp,-388
 100e43c:	d8c00015 	stw	r3,0(sp)
 100e440:	100f883a 	mov	r7,r2
 100e444:	400b883a 	mov	r5,r8
 100e448:	480d883a 	mov	r6,r9
 100e44c:	100ca3c0 	call	100ca3c <point>
 100e450:	e13fdc04 	addi	r4,fp,-144
 100e454:	e0bf9f17 	ldw	r2,-388(fp)
 100e458:	d8800115 	stw	r2,4(sp)
 100e45c:	e0bfa017 	ldw	r2,-384(fp)
 100e460:	d8800215 	stw	r2,8(sp)
 100e464:	e0bfa117 	ldw	r2,-380(fp)
 100e468:	d8800315 	stw	r2,12(sp)
 100e46c:	e0bfa217 	ldw	r2,-376(fp)
 100e470:	d8800415 	stw	r2,16(sp)
 100e474:	dc400015 	stw	r17,0(sp)
 100e478:	800f883a 	mov	r7,r16
 100e47c:	900b883a 	mov	r5,r18
 100e480:	980d883a 	mov	r6,r19
 100e484:	100caa80 	call	100caa8 <vtx>
		Vertex v3 = vtx(vs[three][0], vs[three][1],
				point(bary[three][0], bary[three][1]));
 100e488:	e0bf9717 	ldw	r2,-420(fp)
 100e48c:	1004913a 	slli	r2,r2,4
 100e490:	1007883a 	mov	r3,r2
 100e494:	e0bff417 	ldw	r2,-48(fp)
 100e498:	1885883a 	add	r2,r3,r2
 100e49c:	14800017 	ldw	r18,0(r2)
 100e4a0:	14c00117 	ldw	r19,4(r2)
 100e4a4:	e0bf9717 	ldw	r2,-420(fp)
 100e4a8:	1004913a 	slli	r2,r2,4
 100e4ac:	1007883a 	mov	r3,r2
 100e4b0:	e0bff417 	ldw	r2,-48(fp)
 100e4b4:	1885883a 	add	r2,r3,r2
 100e4b8:	14000217 	ldw	r16,8(r2)
 100e4bc:	14400317 	ldw	r17,12(r2)
 100e4c0:	e0bf9717 	ldw	r2,-420(fp)
 100e4c4:	1004913a 	slli	r2,r2,4
 100e4c8:	1007883a 	mov	r3,r2
 100e4cc:	e0bff517 	ldw	r2,-44(fp)
 100e4d0:	1885883a 	add	r2,r3,r2
 100e4d4:	12000017 	ldw	r8,0(r2)
 100e4d8:	12400117 	ldw	r9,4(r2)
 100e4dc:	e0bf9717 	ldw	r2,-420(fp)
 100e4e0:	1004913a 	slli	r2,r2,4
 100e4e4:	1007883a 	mov	r3,r2
 100e4e8:	e0bff517 	ldw	r2,-44(fp)
 100e4ec:	1889883a 	add	r4,r3,r2
 100e4f0:	20800217 	ldw	r2,8(r4)
 100e4f4:	20c00317 	ldw	r3,12(r4)
 100e4f8:	e13f9b04 	addi	r4,fp,-404
 100e4fc:	d8c00015 	stw	r3,0(sp)
 100e500:	100f883a 	mov	r7,r2
 100e504:	400b883a 	mov	r5,r8
 100e508:	480d883a 	mov	r6,r9
 100e50c:	100ca3c0 	call	100ca3c <point>
 100e510:	e13fe404 	addi	r4,fp,-112
 100e514:	e0bf9b17 	ldw	r2,-404(fp)
 100e518:	d8800115 	stw	r2,4(sp)
 100e51c:	e0bf9c17 	ldw	r2,-400(fp)
 100e520:	d8800215 	stw	r2,8(sp)
 100e524:	e0bf9d17 	ldw	r2,-396(fp)
 100e528:	d8800315 	stw	r2,12(sp)
 100e52c:	e0bf9e17 	ldw	r2,-392(fp)
 100e530:	d8800415 	stw	r2,16(sp)
 100e534:	dc400015 	stw	r17,0(sp)
 100e538:	800f883a 	mov	r7,r16
 100e53c:	900b883a 	mov	r5,r18
 100e540:	980d883a 	mov	r6,r19
 100e544:	100caa80 	call	100caa8 <vtx>
		tri = makeTri(v1, v2, v3);
 100e548:	e13fb004 	addi	r4,fp,-320
 100e54c:	e0bfdc17 	ldw	r2,-144(fp)
 100e550:	d8800515 	stw	r2,20(sp)
 100e554:	e0bfdd17 	ldw	r2,-140(fp)
 100e558:	d8800615 	stw	r2,24(sp)
 100e55c:	e0bfde17 	ldw	r2,-136(fp)
 100e560:	d8800715 	stw	r2,28(sp)
 100e564:	e0bfdf17 	ldw	r2,-132(fp)
 100e568:	d8800815 	stw	r2,32(sp)
 100e56c:	e0bfe017 	ldw	r2,-128(fp)
 100e570:	d8800915 	stw	r2,36(sp)
 100e574:	e0bfe117 	ldw	r2,-124(fp)
 100e578:	d8800a15 	stw	r2,40(sp)
 100e57c:	e0bfe217 	ldw	r2,-120(fp)
 100e580:	d8800b15 	stw	r2,44(sp)
 100e584:	e0bfe317 	ldw	r2,-116(fp)
 100e588:	d8800c15 	stw	r2,48(sp)
 100e58c:	e0bfe417 	ldw	r2,-112(fp)
 100e590:	d8800d15 	stw	r2,52(sp)
 100e594:	e0bfe517 	ldw	r2,-108(fp)
 100e598:	d8800e15 	stw	r2,56(sp)
 100e59c:	e0bfe617 	ldw	r2,-104(fp)
 100e5a0:	d8800f15 	stw	r2,60(sp)
 100e5a4:	e0bfe717 	ldw	r2,-100(fp)
 100e5a8:	d8801015 	stw	r2,64(sp)
 100e5ac:	e0bfe817 	ldw	r2,-96(fp)
 100e5b0:	d8801115 	stw	r2,68(sp)
 100e5b4:	e0bfe917 	ldw	r2,-92(fp)
 100e5b8:	d8801215 	stw	r2,72(sp)
 100e5bc:	e0bfea17 	ldw	r2,-88(fp)
 100e5c0:	d8801315 	stw	r2,76(sp)
 100e5c4:	e0bfeb17 	ldw	r2,-84(fp)
 100e5c8:	d8801415 	stw	r2,80(sp)
 100e5cc:	e0bfef17 	ldw	r2,-68(fp)
 100e5d0:	d8800015 	stw	r2,0(sp)
 100e5d4:	e0bff017 	ldw	r2,-64(fp)
 100e5d8:	d8800115 	stw	r2,4(sp)
 100e5dc:	e0bff117 	ldw	r2,-60(fp)
 100e5e0:	d8800215 	stw	r2,8(sp)
 100e5e4:	e0bff217 	ldw	r2,-56(fp)
 100e5e8:	d8800315 	stw	r2,12(sp)
 100e5ec:	e0bff317 	ldw	r2,-52(fp)
 100e5f0:	d8800415 	stw	r2,16(sp)
 100e5f4:	e17fec17 	ldw	r5,-80(fp)
 100e5f8:	e1bfed17 	ldw	r6,-76(fp)
 100e5fc:	e1ffee17 	ldw	r7,-72(fp)
 100e600:	100cdcc0 	call	100cdcc <makeTri>
		d.T[i] = tri;
 100e604:	e0ffae17 	ldw	r3,-328(fp)
 100e608:	e0bf9a17 	ldw	r2,-408(fp)
 100e60c:	10802c24 	muli	r2,r2,176
 100e610:	1885883a 	add	r2,r3,r2
 100e614:	1009883a 	mov	r4,r2
 100e618:	e17fb004 	addi	r5,fp,-320
 100e61c:	01802c04 	movi	r6,176
 100e620:	10152740 	call	1015274 <memcpy>
		d.centroids[i] = (tri.centroid);
 100e624:	e0ffaf17 	ldw	r3,-324(fp)
 100e628:	e0bf9a17 	ldw	r2,-408(fp)
 100e62c:	1004913a 	slli	r2,r2,4
 100e630:	1887883a 	add	r3,r3,r2
 100e634:	e0bfd817 	ldw	r2,-160(fp)
 100e638:	18800015 	stw	r2,0(r3)
 100e63c:	e0bfd917 	ldw	r2,-156(fp)
 100e640:	18800115 	stw	r2,4(r3)
 100e644:	e0bfda17 	ldw	r2,-152(fp)
 100e648:	18800215 	stw	r2,8(r3)
 100e64c:	e0bfdb17 	ldw	r2,-148(fp)
 100e650:	18800315 	stw	r2,12(r3)
	int one, two, three;
	for (i = 0; i < vsize; i++) {
		d.vertices[i] = vtx(vs[i][0], vs[i][1], point(bary[i][0], bary[i][1]));
		// printf("%f %f\n", vs[i][0],vs[i][1]);
	}
	for (i = 0; i < tsize; i++) {
 100e654:	e0bf9a17 	ldw	r2,-408(fp)
 100e658:	10800044 	addi	r2,r2,1
 100e65c:	e0bf9a15 	stw	r2,-408(fp)
 100e660:	e0ff9a17 	ldw	r3,-408(fp)
 100e664:	e0800917 	ldw	r2,36(fp)
 100e668:	18bf0f16 	blt	r3,r2,100e2a8 <DelaunayTriangulation+0x1e0>
		tri = makeTri(v1, v2, v3);
		d.T[i] = tri;
		d.centroids[i] = (tri.centroid);
	}

	return d;
 100e66c:	e0bfab17 	ldw	r2,-340(fp)
 100e670:	e0ffff17 	ldw	r3,-4(fp)
 100e674:	18800015 	stw	r2,0(r3)
 100e678:	e0bfac17 	ldw	r2,-336(fp)
 100e67c:	e0ffff17 	ldw	r3,-4(fp)
 100e680:	18800115 	stw	r2,4(r3)
 100e684:	e0bfad17 	ldw	r2,-332(fp)
 100e688:	e0ffff17 	ldw	r3,-4(fp)
 100e68c:	18800215 	stw	r2,8(r3)
 100e690:	e0bfae17 	ldw	r2,-328(fp)
 100e694:	e0ffff17 	ldw	r3,-4(fp)
 100e698:	18800315 	stw	r2,12(r3)
 100e69c:	e0bfaf17 	ldw	r2,-324(fp)
 100e6a0:	e0ffff17 	ldw	r3,-4(fp)
 100e6a4:	18800415 	stw	r2,16(r3)
}
 100e6a8:	e0bfff17 	ldw	r2,-4(fp)
 100e6ac:	e037883a 	mov	sp,fp
 100e6b0:	dfc00617 	ldw	ra,24(sp)
 100e6b4:	df000517 	ldw	fp,20(sp)
 100e6b8:	dd000417 	ldw	r20,16(sp)
 100e6bc:	dcc00317 	ldw	r19,12(sp)
 100e6c0:	dc800217 	ldw	r18,8(sp)
 100e6c4:	dc400117 	ldw	r17,4(sp)
 100e6c8:	dc000017 	ldw	r16,0(sp)
 100e6cc:	dec00704 	addi	sp,sp,28
 100e6d0:	f800283a 	ret

0100e6d4 <CopyDelaunayTriangulation>:

Delaunay CopyDelaunayTriangulation(Vertex* vs, Triangle* ts, int vsize,
		int tsize) {
 100e6d4:	defff404 	addi	sp,sp,-48
 100e6d8:	dfc00b15 	stw	ra,44(sp)
 100e6dc:	df000a15 	stw	fp,40(sp)
 100e6e0:	df000a04 	addi	fp,sp,40
 100e6e4:	e13fff15 	stw	r4,-4(fp)
 100e6e8:	e17ffc15 	stw	r5,-16(fp)
 100e6ec:	e1bffd15 	stw	r6,-12(fp)
 100e6f0:	e1fffe15 	stw	r7,-8(fp)
	Delaunay d;
	int i;
	d.vertices = malloc(sizeof(Vertex) * vsize);
 100e6f4:	e0bffe17 	ldw	r2,-8(fp)
 100e6f8:	1008917a 	slli	r4,r2,5
 100e6fc:	1014b200 	call	1014b20 <malloc>
 100e700:	e0bff915 	stw	r2,-28(fp)
	d.T = malloc(sizeof(Triangle) * tsize);
 100e704:	e0800217 	ldw	r2,8(fp)
 100e708:	11002c24 	muli	r4,r2,176
 100e70c:	1014b200 	call	1014b20 <malloc>
 100e710:	e0bffa15 	stw	r2,-24(fp)
	for (i = 0; i < vsize; i++)
 100e714:	e03ff615 	stw	zero,-40(fp)
 100e718:	00001c06 	br	100e78c <CopyDelaunayTriangulation+0xb8>
		d.vertices[i] = vs[i];
 100e71c:	e0fff917 	ldw	r3,-28(fp)
 100e720:	e0bff617 	ldw	r2,-40(fp)
 100e724:	1004917a 	slli	r2,r2,5
 100e728:	1889883a 	add	r4,r3,r2
 100e72c:	e0bff617 	ldw	r2,-40(fp)
 100e730:	1004917a 	slli	r2,r2,5
 100e734:	1007883a 	mov	r3,r2
 100e738:	e0bffc17 	ldw	r2,-16(fp)
 100e73c:	1887883a 	add	r3,r3,r2
 100e740:	18800017 	ldw	r2,0(r3)
 100e744:	20800015 	stw	r2,0(r4)
 100e748:	18800117 	ldw	r2,4(r3)
 100e74c:	20800115 	stw	r2,4(r4)
 100e750:	18800217 	ldw	r2,8(r3)
 100e754:	20800215 	stw	r2,8(r4)
 100e758:	18800317 	ldw	r2,12(r3)
 100e75c:	20800315 	stw	r2,12(r4)
 100e760:	18800417 	ldw	r2,16(r3)
 100e764:	20800415 	stw	r2,16(r4)
 100e768:	18800517 	ldw	r2,20(r3)
 100e76c:	20800515 	stw	r2,20(r4)
 100e770:	18800617 	ldw	r2,24(r3)
 100e774:	20800615 	stw	r2,24(r4)
 100e778:	18800717 	ldw	r2,28(r3)
 100e77c:	20800715 	stw	r2,28(r4)
		int tsize) {
	Delaunay d;
	int i;
	d.vertices = malloc(sizeof(Vertex) * vsize);
	d.T = malloc(sizeof(Triangle) * tsize);
	for (i = 0; i < vsize; i++)
 100e780:	e0bff617 	ldw	r2,-40(fp)
 100e784:	10800044 	addi	r2,r2,1
 100e788:	e0bff615 	stw	r2,-40(fp)
 100e78c:	e0fff617 	ldw	r3,-40(fp)
 100e790:	e0bffe17 	ldw	r2,-8(fp)
 100e794:	18bfe116 	blt	r3,r2,100e71c <CopyDelaunayTriangulation+0x48>
		d.vertices[i] = vs[i];
	for (i = 0; i < tsize; i++)
 100e798:	e03ff615 	stw	zero,-40(fp)
 100e79c:	00000f06 	br	100e7dc <CopyDelaunayTriangulation+0x108>
		d.T[i] = ts[i];
 100e7a0:	e0fffa17 	ldw	r3,-24(fp)
 100e7a4:	e0bff617 	ldw	r2,-40(fp)
 100e7a8:	10802c24 	muli	r2,r2,176
 100e7ac:	1889883a 	add	r4,r3,r2
 100e7b0:	e0bff617 	ldw	r2,-40(fp)
 100e7b4:	10802c24 	muli	r2,r2,176
 100e7b8:	1007883a 	mov	r3,r2
 100e7bc:	e0bffd17 	ldw	r2,-12(fp)
 100e7c0:	1885883a 	add	r2,r3,r2
 100e7c4:	100b883a 	mov	r5,r2
 100e7c8:	01802c04 	movi	r6,176
 100e7cc:	10152740 	call	1015274 <memcpy>
	int i;
	d.vertices = malloc(sizeof(Vertex) * vsize);
	d.T = malloc(sizeof(Triangle) * tsize);
	for (i = 0; i < vsize; i++)
		d.vertices[i] = vs[i];
	for (i = 0; i < tsize; i++)
 100e7d0:	e0bff617 	ldw	r2,-40(fp)
 100e7d4:	10800044 	addi	r2,r2,1
 100e7d8:	e0bff615 	stw	r2,-40(fp)
 100e7dc:	e0fff617 	ldw	r3,-40(fp)
 100e7e0:	e0800217 	ldw	r2,8(fp)
 100e7e4:	18bfee16 	blt	r3,r2,100e7a0 <CopyDelaunayTriangulation+0xcc>
		d.T[i] = ts[i];

	return d;
 100e7e8:	e0bff717 	ldw	r2,-36(fp)
 100e7ec:	e0ffff17 	ldw	r3,-4(fp)
 100e7f0:	18800015 	stw	r2,0(r3)
 100e7f4:	e0bff817 	ldw	r2,-32(fp)
 100e7f8:	e0ffff17 	ldw	r3,-4(fp)
 100e7fc:	18800115 	stw	r2,4(r3)
 100e800:	e0bff917 	ldw	r2,-28(fp)
 100e804:	e0ffff17 	ldw	r3,-4(fp)
 100e808:	18800215 	stw	r2,8(r3)
 100e80c:	e0bffa17 	ldw	r2,-24(fp)
 100e810:	e0ffff17 	ldw	r3,-4(fp)
 100e814:	18800315 	stw	r2,12(r3)
 100e818:	e0bffb17 	ldw	r2,-20(fp)
 100e81c:	e0ffff17 	ldw	r3,-4(fp)
 100e820:	18800415 	stw	r2,16(r3)
}
 100e824:	e0bfff17 	ldw	r2,-4(fp)
 100e828:	e037883a 	mov	sp,fp
 100e82c:	dfc00117 	ldw	ra,4(sp)
 100e830:	df000017 	ldw	fp,0(sp)
 100e834:	dec00204 	addi	sp,sp,8
 100e838:	f800283a 	ret

0100e83c <dot3>:

double dot3(Vector3 v1, Vector3 v2) {
 100e83c:	defff804 	addi	sp,sp,-32
 100e840:	dfc00315 	stw	ra,12(sp)
 100e844:	df000215 	stw	fp,8(sp)
 100e848:	dc400115 	stw	r17,4(sp)
 100e84c:	dc000015 	stw	r16,0(sp)
 100e850:	d839883a 	mov	fp,sp
 100e854:	e1000415 	stw	r4,16(fp)
 100e858:	e1400515 	stw	r5,20(fp)
 100e85c:	e1800615 	stw	r6,24(fp)
 100e860:	e1c00715 	stw	r7,28(fp)
	return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
 100e864:	e1400417 	ldw	r5,16(fp)
 100e868:	e1800517 	ldw	r6,20(fp)
 100e86c:	e0800a17 	ldw	r2,40(fp)
 100e870:	e0c00b17 	ldw	r3,44(fp)
 100e874:	2809883a 	mov	r4,r5
 100e878:	300b883a 	mov	r5,r6
 100e87c:	100d883a 	mov	r6,r2
 100e880:	180f883a 	mov	r7,r3
 100e884:	1012a940 	call	1012a94 <__muldf3>
 100e888:	1009883a 	mov	r4,r2
 100e88c:	180b883a 	mov	r5,r3
 100e890:	2021883a 	mov	r16,r4
 100e894:	2823883a 	mov	r17,r5
 100e898:	e1400617 	ldw	r5,24(fp)
 100e89c:	e1800717 	ldw	r6,28(fp)
 100e8a0:	e0800c17 	ldw	r2,48(fp)
 100e8a4:	e0c00d17 	ldw	r3,52(fp)
 100e8a8:	2809883a 	mov	r4,r5
 100e8ac:	300b883a 	mov	r5,r6
 100e8b0:	100d883a 	mov	r6,r2
 100e8b4:	180f883a 	mov	r7,r3
 100e8b8:	1012a940 	call	1012a94 <__muldf3>
 100e8bc:	1009883a 	mov	r4,r2
 100e8c0:	180b883a 	mov	r5,r3
 100e8c4:	2005883a 	mov	r2,r4
 100e8c8:	2807883a 	mov	r3,r5
 100e8cc:	8009883a 	mov	r4,r16
 100e8d0:	880b883a 	mov	r5,r17
 100e8d4:	100d883a 	mov	r6,r2
 100e8d8:	180f883a 	mov	r7,r3
 100e8dc:	1012a200 	call	1012a20 <__adddf3>
 100e8e0:	1009883a 	mov	r4,r2
 100e8e4:	180b883a 	mov	r5,r3
 100e8e8:	2021883a 	mov	r16,r4
 100e8ec:	2823883a 	mov	r17,r5
 100e8f0:	e1400817 	ldw	r5,32(fp)
 100e8f4:	e1800917 	ldw	r6,36(fp)
 100e8f8:	e0800e17 	ldw	r2,56(fp)
 100e8fc:	e0c00f17 	ldw	r3,60(fp)
 100e900:	2809883a 	mov	r4,r5
 100e904:	300b883a 	mov	r5,r6
 100e908:	100d883a 	mov	r6,r2
 100e90c:	180f883a 	mov	r7,r3
 100e910:	1012a940 	call	1012a94 <__muldf3>
 100e914:	1009883a 	mov	r4,r2
 100e918:	180b883a 	mov	r5,r3
 100e91c:	2005883a 	mov	r2,r4
 100e920:	2807883a 	mov	r3,r5
 100e924:	8009883a 	mov	r4,r16
 100e928:	880b883a 	mov	r5,r17
 100e92c:	100d883a 	mov	r6,r2
 100e930:	180f883a 	mov	r7,r3
 100e934:	1012a200 	call	1012a20 <__adddf3>
 100e938:	1009883a 	mov	r4,r2
 100e93c:	180b883a 	mov	r5,r3
 100e940:	200d883a 	mov	r6,r4
 100e944:	280f883a 	mov	r7,r5
 100e948:	3007883a 	mov	r3,r6
 100e94c:	3809883a 	mov	r4,r7
}
 100e950:	1805883a 	mov	r2,r3
 100e954:	2007883a 	mov	r3,r4
 100e958:	e037883a 	mov	sp,fp
 100e95c:	dfc00317 	ldw	ra,12(sp)
 100e960:	df000217 	ldw	fp,8(sp)
 100e964:	dc400117 	ldw	r17,4(sp)
 100e968:	dc000017 	ldw	r16,0(sp)
 100e96c:	dec00804 	addi	sp,sp,32
 100e970:	f800283a 	ret

0100e974 <toScreen>:

Point2D toScreen(Triangle tt, Vector3 b) {
 100e974:	deffe404 	addi	sp,sp,-112
 100e978:	dfc01815 	stw	ra,96(sp)
 100e97c:	df001715 	stw	fp,92(sp)
 100e980:	dc801615 	stw	r18,88(sp)
 100e984:	dc401515 	stw	r17,84(sp)
 100e988:	dc001415 	stw	r16,80(sp)
 100e98c:	df001404 	addi	fp,sp,80
 100e990:	2025883a 	mov	r18,r4
 100e994:	e1400515 	stw	r5,20(fp)
 100e998:	e1800615 	stw	r6,24(fp)
 100e99c:	e1c00715 	stw	r7,28(fp)
	return point(dot3(b, vec3(tt.v2.bary.x, tt.v3.bary.x, tt.v1.bary.x)),
 100e9a0:	e2000d17 	ldw	r8,52(fp)
 100e9a4:	e2400e17 	ldw	r9,56(fp)
 100e9a8:	e1001517 	ldw	r4,84(fp)
 100e9ac:	e1401617 	ldw	r5,88(fp)
 100e9b0:	e0800517 	ldw	r2,20(fp)
 100e9b4:	e0c00617 	ldw	r3,24(fp)
 100e9b8:	e1bffa04 	addi	r6,fp,-24
 100e9bc:	d8800115 	stw	r2,4(sp)
 100e9c0:	d8c00215 	stw	r3,8(sp)
 100e9c4:	d9400015 	stw	r5,0(sp)
 100e9c8:	200f883a 	mov	r7,r4
 100e9cc:	3009883a 	mov	r4,r6
 100e9d0:	400b883a 	mov	r5,r8
 100e9d4:	480d883a 	mov	r6,r9
 100e9d8:	100c19c0 	call	100c19c <vec3>
 100e9dc:	e0bffa17 	ldw	r2,-24(fp)
 100e9e0:	d8800215 	stw	r2,8(sp)
 100e9e4:	e0bffb17 	ldw	r2,-20(fp)
 100e9e8:	d8800315 	stw	r2,12(sp)
 100e9ec:	e0bffc17 	ldw	r2,-16(fp)
 100e9f0:	d8800415 	stw	r2,16(sp)
 100e9f4:	e0bffd17 	ldw	r2,-12(fp)
 100e9f8:	d8800515 	stw	r2,20(sp)
 100e9fc:	e0bffe17 	ldw	r2,-8(fp)
 100ea00:	d8800615 	stw	r2,24(sp)
 100ea04:	e0bfff17 	ldw	r2,-4(fp)
 100ea08:	d8800715 	stw	r2,28(sp)
 100ea0c:	e0803517 	ldw	r2,212(fp)
 100ea10:	d8800015 	stw	r2,0(sp)
 100ea14:	e0803617 	ldw	r2,216(fp)
 100ea18:	d8800115 	stw	r2,4(sp)
 100ea1c:	e1003117 	ldw	r4,196(fp)
 100ea20:	e1403217 	ldw	r5,200(fp)
 100ea24:	e1803317 	ldw	r6,204(fp)
 100ea28:	e1c03417 	ldw	r7,208(fp)
 100ea2c:	100e83c0 	call	100e83c <dot3>
 100ea30:	1021883a 	mov	r16,r2
 100ea34:	1823883a 	mov	r17,r3
 100ea38:	e2000f17 	ldw	r8,60(fp)
 100ea3c:	e2401017 	ldw	r9,64(fp)
 100ea40:	e1001717 	ldw	r4,92(fp)
 100ea44:	e1401817 	ldw	r5,96(fp)
 100ea48:	e0800717 	ldw	r2,28(fp)
 100ea4c:	e0c00817 	ldw	r3,32(fp)
 100ea50:	d8800115 	stw	r2,4(sp)
 100ea54:	d8c00215 	stw	r3,8(sp)
 100ea58:	d9400015 	stw	r5,0(sp)
 100ea5c:	200f883a 	mov	r7,r4
 100ea60:	e13ff404 	addi	r4,fp,-48
 100ea64:	400b883a 	mov	r5,r8
 100ea68:	480d883a 	mov	r6,r9
 100ea6c:	100c19c0 	call	100c19c <vec3>
 100ea70:	e0bff417 	ldw	r2,-48(fp)
 100ea74:	d8800215 	stw	r2,8(sp)
 100ea78:	e0bff517 	ldw	r2,-44(fp)
 100ea7c:	d8800315 	stw	r2,12(sp)
 100ea80:	e0bff617 	ldw	r2,-40(fp)
 100ea84:	d8800415 	stw	r2,16(sp)
 100ea88:	e0bff717 	ldw	r2,-36(fp)
 100ea8c:	d8800515 	stw	r2,20(sp)
 100ea90:	e0bff817 	ldw	r2,-32(fp)
 100ea94:	d8800615 	stw	r2,24(sp)
 100ea98:	e0bff917 	ldw	r2,-28(fp)
 100ea9c:	d8800715 	stw	r2,28(sp)
 100eaa0:	e0803517 	ldw	r2,212(fp)
 100eaa4:	d8800015 	stw	r2,0(sp)
 100eaa8:	e0803617 	ldw	r2,216(fp)
 100eaac:	d8800115 	stw	r2,4(sp)
 100eab0:	e1003117 	ldw	r4,196(fp)
 100eab4:	e1403217 	ldw	r5,200(fp)
 100eab8:	e1803317 	ldw	r6,204(fp)
 100eabc:	e1c03417 	ldw	r7,208(fp)
 100eac0:	100e83c0 	call	100e83c <dot3>
 100eac4:	1009883a 	mov	r4,r2
 100eac8:	180b883a 	mov	r5,r3
 100eacc:	d9400015 	stw	r5,0(sp)
 100ead0:	200f883a 	mov	r7,r4
 100ead4:	9009883a 	mov	r4,r18
 100ead8:	800b883a 	mov	r5,r16
 100eadc:	880d883a 	mov	r6,r17
 100eae0:	100ca3c0 	call	100ca3c <point>
			dot3(b, vec3(tt.v2.bary.y, tt.v3.bary.y, tt.v1.bary.y)));
}
 100eae4:	9005883a 	mov	r2,r18
 100eae8:	e037883a 	mov	sp,fp
 100eaec:	dfc00417 	ldw	ra,16(sp)
 100eaf0:	df000317 	ldw	fp,12(sp)
 100eaf4:	dc800217 	ldw	r18,8(sp)
 100eaf8:	dc400117 	ldw	r17,4(sp)
 100eafc:	dc000017 	ldw	r16,0(sp)
 100eb00:	dec00804 	addi	sp,sp,32
 100eb04:	f800283a 	ret

0100eb08 <computePixel>:

void computePixel(double lat, double lon, int * latPix, int * lonPix){
 100eb08:	deff8b04 	addi	sp,sp,-468
 100eb0c:	dfc07415 	stw	ra,464(sp)
 100eb10:	df007315 	stw	fp,460(sp)
 100eb14:	dc007215 	stw	r16,456(sp)
 100eb18:	df007204 	addi	fp,sp,456
 100eb1c:	e13ffc15 	stw	r4,-16(fp)
 100eb20:	e17ffd15 	stw	r5,-12(fp)
 100eb24:	e1bffe15 	stw	r6,-8(fp)
 100eb28:	e1ffff15 	stw	r7,-4(fp)
	Delaunay del_all = DelaunayTriangulation(extents,screen,TRI,4,4,2);
 100eb2c:	00800104 	movi	r2,4
 100eb30:	d8800015 	stw	r2,0(sp)
 100eb34:	00800104 	movi	r2,4
 100eb38:	d8800115 	stw	r2,4(sp)
 100eb3c:	00800084 	movi	r2,2
 100eb40:	d8800215 	stw	r2,8(sp)
 100eb44:	e13fbd04 	addi	r4,fp,-268
 100eb48:	014040f4 	movhi	r5,259
 100eb4c:	29551204 	addi	r5,r5,21576
 100eb50:	018040f4 	movhi	r6,259
 100eb54:	31952804 	addi	r6,r6,21664
 100eb58:	01c040f4 	movhi	r7,259
 100eb5c:	39d52204 	addi	r7,r7,21640
 100eb60:	100e0c80 	call	100e0c8 <DelaunayTriangulation>
	Point2D q = point(lat,lon);
 100eb64:	e13fc204 	addi	r4,fp,-248
 100eb68:	e0bfff17 	ldw	r2,-4(fp)
 100eb6c:	d8800015 	stw	r2,0(sp)
 100eb70:	e1fffe17 	ldw	r7,-8(fp)
 100eb74:	e17ffc17 	ldw	r5,-16(fp)
 100eb78:	e1bffd17 	ldw	r6,-12(fp)
 100eb7c:	100ca3c0 	call	100ca3c <point>
	Triangle tt = nearestneighbour(del_all,q);
 100eb80:	e13fc604 	addi	r4,fp,-232
 100eb84:	e0bfc217 	ldw	r2,-248(fp)
 100eb88:	d8800215 	stw	r2,8(sp)
 100eb8c:	e0bfc317 	ldw	r2,-244(fp)
 100eb90:	d8800315 	stw	r2,12(sp)
 100eb94:	e0bfc417 	ldw	r2,-240(fp)
 100eb98:	d8800415 	stw	r2,16(sp)
 100eb9c:	e0bfc517 	ldw	r2,-236(fp)
 100eba0:	d8800515 	stw	r2,20(sp)
 100eba4:	e0bfc017 	ldw	r2,-256(fp)
 100eba8:	d8800015 	stw	r2,0(sp)
 100ebac:	e0bfc117 	ldw	r2,-252(fp)
 100ebb0:	d8800115 	stw	r2,4(sp)
 100ebb4:	e17fbd17 	ldw	r5,-268(fp)
 100ebb8:	e1bfbe17 	ldw	r6,-264(fp)
 100ebbc:	e1ffbf17 	ldw	r7,-260(fp)
 100ebc0:	100df680 	call	100df68 <nearestneighbour>
	Vector3 vvv = barycentric2(tt,q);
 100ebc4:	e43ff204 	addi	r16,fp,-56
 100ebc8:	e0bfc217 	ldw	r2,-248(fp)
 100ebcc:	d8802915 	stw	r2,164(sp)
 100ebd0:	e0bfc317 	ldw	r2,-244(fp)
 100ebd4:	d8802a15 	stw	r2,168(sp)
 100ebd8:	e0bfc417 	ldw	r2,-240(fp)
 100ebdc:	d8802b15 	stw	r2,172(sp)
 100ebe0:	e0bfc517 	ldw	r2,-236(fp)
 100ebe4:	d8802c15 	stw	r2,176(sp)
 100ebe8:	d809883a 	mov	r4,sp
 100ebec:	e17fc904 	addi	r5,fp,-220
 100ebf0:	01802904 	movi	r6,164
 100ebf4:	10152740 	call	1015274 <memcpy>
 100ebf8:	e17fc617 	ldw	r5,-232(fp)
 100ebfc:	e1bfc717 	ldw	r6,-228(fp)
 100ec00:	e1ffc817 	ldw	r7,-224(fp)
 100ec04:	8009883a 	mov	r4,r16
 100ec08:	100d5040 	call	100d504 <barycentric2>
	Point2D pixel = toScreen(tt,vvv);
 100ec0c:	e43ff804 	addi	r16,fp,-32
 100ec10:	e0bff217 	ldw	r2,-56(fp)
 100ec14:	d8802915 	stw	r2,164(sp)
 100ec18:	e0bff317 	ldw	r2,-52(fp)
 100ec1c:	d8802a15 	stw	r2,168(sp)
 100ec20:	e0bff417 	ldw	r2,-48(fp)
 100ec24:	d8802b15 	stw	r2,172(sp)
 100ec28:	e0bff517 	ldw	r2,-44(fp)
 100ec2c:	d8802c15 	stw	r2,176(sp)
 100ec30:	e0bff617 	ldw	r2,-40(fp)
 100ec34:	d8802d15 	stw	r2,180(sp)
 100ec38:	e0bff717 	ldw	r2,-36(fp)
 100ec3c:	d8802e15 	stw	r2,184(sp)
 100ec40:	d809883a 	mov	r4,sp
 100ec44:	e17fc904 	addi	r5,fp,-220
 100ec48:	01802904 	movi	r6,164
 100ec4c:	10152740 	call	1015274 <memcpy>
 100ec50:	e17fc617 	ldw	r5,-232(fp)
 100ec54:	e1bfc717 	ldw	r6,-228(fp)
 100ec58:	e1ffc817 	ldw	r7,-224(fp)
 100ec5c:	8009883a 	mov	r4,r16
 100ec60:	100e9740 	call	100e974 <toScreen>
	printf("%f %f\n", pixel.x, pixel.y);
 100ec64:	e23ff817 	ldw	r8,-32(fp)
 100ec68:	e27ff917 	ldw	r9,-28(fp)
 100ec6c:	e0bffa17 	ldw	r2,-24(fp)
 100ec70:	e0fffb17 	ldw	r3,-20(fp)
 100ec74:	d8c00015 	stw	r3,0(sp)
 100ec78:	100f883a 	mov	r7,r2
 100ec7c:	010040f4 	movhi	r4,259
 100ec80:	2112ad04 	addi	r4,r4,19124
 100ec84:	400b883a 	mov	r5,r8
 100ec88:	480d883a 	mov	r6,r9
 100ec8c:	10155040 	call	1015504 <printf>

	*latPix = (int) pixel.x;
 100ec90:	e0bff817 	ldw	r2,-32(fp)
 100ec94:	e0fff917 	ldw	r3,-28(fp)
 100ec98:	1009883a 	mov	r4,r2
 100ec9c:	180b883a 	mov	r5,r3
 100eca0:	10133c80 	call	10133c8 <__fixdfsi>
 100eca4:	1007883a 	mov	r3,r2
 100eca8:	e0800317 	ldw	r2,12(fp)
 100ecac:	10c00015 	stw	r3,0(r2)
	*lonPix = (int) pixel.y;
 100ecb0:	e0bffa17 	ldw	r2,-24(fp)
 100ecb4:	e0fffb17 	ldw	r3,-20(fp)
 100ecb8:	1009883a 	mov	r4,r2
 100ecbc:	180b883a 	mov	r5,r3
 100ecc0:	10133c80 	call	10133c8 <__fixdfsi>
 100ecc4:	1007883a 	mov	r3,r2
 100ecc8:	e0800417 	ldw	r2,16(fp)
 100eccc:	10c00015 	stw	r3,0(r2)

	printf("Lat: %d, Long %d \n", *latPix, *lonPix);
 100ecd0:	e0800317 	ldw	r2,12(fp)
 100ecd4:	11400017 	ldw	r5,0(r2)
 100ecd8:	e0800417 	ldw	r2,16(fp)
 100ecdc:	11800017 	ldw	r6,0(r2)
 100ece0:	010040f4 	movhi	r4,259
 100ece4:	2112af04 	addi	r4,r4,19132
 100ece8:	10155040 	call	1015504 <printf>
}
 100ecec:	e037883a 	mov	sp,fp
 100ecf0:	dfc00217 	ldw	ra,8(sp)
 100ecf4:	df000117 	ldw	fp,4(sp)
 100ecf8:	dc000017 	ldw	r16,0(sp)
 100ecfc:	dec00304 	addi	sp,sp,12
 100ed00:	f800283a 	ret

0100ed04 <main>:

/**********************************************************************************
 * ************************** main Function ***************************************
 * ********************************************************************************
 ***********************************************************************************/
int main(void) {
 100ed04:	defffe04 	addi	sp,sp,-8
 100ed08:	dfc00115 	stw	ra,4(sp)
 100ed0c:	df000015 	stw	fp,0(sp)
 100ed10:	d839883a 	mov	fp,sp

	drawMenu();
 100ed14:	10066d00 	call	10066d0 <drawMenu>
	redLEDS = 0x00;
 100ed18:	00a00034 	movhi	r2,32768
 100ed1c:	10841004 	addi	r2,r2,4160
 100ed20:	10000005 	stb	zero,0(r2)
	greenLEDS = 0x00;
 100ed24:	00a00034 	movhi	r2,32768
 100ed28:	10840c04 	addi	r2,r2,4144
 100ed2c:	10000005 	stb	zero,0(r2)

	// initialize GPS
	Init_GPS();
 100ed30:	100979c0 	call	100979c <Init_GPS>
	StopLogging();
 100ed34:	10098cc0 	call	10098cc <StopLogging>
	usleep(500);
 100ed38:	01007d04 	movi	r4,500
 100ed3c:	10221b80 	call	10221b8 <usleep>
	ClearLogging();
 100ed40:	10099040 	call	1009904 <ClearLogging>
	usleep(500);
 100ed44:	01007d04 	movi	r4,500
 100ed48:	10221b80 	call	10221b8 <usleep>
	StartLogger();
 100ed4c:	100993c0 	call	100993c <StartLogger>
	usleep(500);
 100ed50:	01007d04 	movi	r4,500
 100ed54:	10221b80 	call	10221b8 <usleep>

	// initialize touch screen
	Init_Touch();
 100ed58:	100b5a80 	call	100b5a8 <Init_Touch>

	while (1) {
		//keep looping and calling mainmenu
		MainMenu();
 100ed5c:	10083b80 	call	10083b8 <MainMenu>
	}
 100ed60:	003ffe06 	br	100ed5c <main+0x58>

0100ed64 <ceil>:
 100ed64:	2805d53a 	srai	r2,r5,20
 100ed68:	defff604 	addi	sp,sp,-40
 100ed6c:	dd800615 	stw	r22,24(sp)
 100ed70:	10c1ffcc 	andi	r3,r2,2047
 100ed74:	1dbf0044 	addi	r22,r3,-1023
 100ed78:	008004c4 	movi	r2,19
 100ed7c:	ddc00715 	stw	r23,28(sp)
 100ed80:	dc800215 	stw	r18,8(sp)
 100ed84:	dc400115 	stw	r17,4(sp)
 100ed88:	dc000015 	stw	r16,0(sp)
 100ed8c:	dfc00915 	stw	ra,36(sp)
 100ed90:	df000815 	stw	fp,32(sp)
 100ed94:	dd400515 	stw	r21,20(sp)
 100ed98:	dd000415 	stw	r20,16(sp)
 100ed9c:	dcc00315 	stw	r19,12(sp)
 100eda0:	2021883a 	mov	r16,r4
 100eda4:	2823883a 	mov	r17,r5
 100eda8:	282f883a 	mov	r23,r5
 100edac:	2025883a 	mov	r18,r4
 100edb0:	15802c16 	blt	r2,r22,100ee64 <ceil+0x100>
 100edb4:	b0005416 	blt	r22,zero,100ef08 <ceil+0x1a4>
 100edb8:	00800434 	movhi	r2,16
 100edbc:	10bfffc4 	addi	r2,r2,-1
 100edc0:	15b9d83a 	sra	fp,r2,r22
 100edc4:	282f883a 	mov	r23,r5
 100edc8:	e144703a 	and	r2,fp,r5
 100edcc:	1104b03a 	or	r2,r2,r4
 100edd0:	10001626 	beq	r2,zero,100ee2c <ceil+0xc8>
 100edd4:	00a20034 	movhi	r2,34816
 100edd8:	109d6704 	addi	r2,r2,30108
 100eddc:	00df8e34 	movhi	r3,32312
 100ede0:	18f90f04 	addi	r3,r3,-7108
 100ede4:	180f883a 	mov	r7,r3
 100ede8:	100d883a 	mov	r6,r2
 100edec:	1012a200 	call	1012a20 <__adddf3>
 100edf0:	180b883a 	mov	r5,r3
 100edf4:	000d883a 	mov	r6,zero
 100edf8:	000f883a 	mov	r7,zero
 100edfc:	1009883a 	mov	r4,r2
 100ee00:	10131380 	call	1013138 <__gtdf2>
 100ee04:	0080070e 	bge	zero,r2,100ee24 <ceil+0xc0>
 100ee08:	0440030e 	bge	zero,r17,100ee18 <ceil+0xb4>
 100ee0c:	00800434 	movhi	r2,16
 100ee10:	1585d83a 	sra	r2,r2,r22
 100ee14:	88af883a 	add	r23,r17,r2
 100ee18:	0704303a 	nor	r2,zero,fp
 100ee1c:	b8ae703a 	and	r23,r23,r2
 100ee20:	0025883a 	mov	r18,zero
 100ee24:	9021883a 	mov	r16,r18
 100ee28:	b823883a 	mov	r17,r23
 100ee2c:	8005883a 	mov	r2,r16
 100ee30:	8807883a 	mov	r3,r17
 100ee34:	dfc00917 	ldw	ra,36(sp)
 100ee38:	df000817 	ldw	fp,32(sp)
 100ee3c:	ddc00717 	ldw	r23,28(sp)
 100ee40:	dd800617 	ldw	r22,24(sp)
 100ee44:	dd400517 	ldw	r21,20(sp)
 100ee48:	dd000417 	ldw	r20,16(sp)
 100ee4c:	dcc00317 	ldw	r19,12(sp)
 100ee50:	dc800217 	ldw	r18,8(sp)
 100ee54:	dc400117 	ldw	r17,4(sp)
 100ee58:	dc000017 	ldw	r16,0(sp)
 100ee5c:	dec00a04 	addi	sp,sp,40
 100ee60:	f800283a 	ret
 100ee64:	00800cc4 	movi	r2,51
 100ee68:	15801f16 	blt	r2,r22,100eee8 <ceil+0x184>
 100ee6c:	18befb44 	addi	r2,r3,-1043
 100ee70:	00ffffc4 	movi	r3,-1
 100ee74:	18b8d83a 	srl	fp,r3,r2
 100ee78:	e104703a 	and	r2,fp,r4
 100ee7c:	103feb26 	beq	r2,zero,100ee2c <ceil+0xc8>
 100ee80:	00a20034 	movhi	r2,34816
 100ee84:	109d6704 	addi	r2,r2,30108
 100ee88:	00df8e34 	movhi	r3,32312
 100ee8c:	18f90f04 	addi	r3,r3,-7108
 100ee90:	180f883a 	mov	r7,r3
 100ee94:	100d883a 	mov	r6,r2
 100ee98:	1012a200 	call	1012a20 <__adddf3>
 100ee9c:	180b883a 	mov	r5,r3
 100eea0:	000d883a 	mov	r6,zero
 100eea4:	000f883a 	mov	r7,zero
 100eea8:	1009883a 	mov	r4,r2
 100eeac:	10131380 	call	1013138 <__gtdf2>
 100eeb0:	0080250e 	bge	zero,r2,100ef48 <ceil+0x1e4>
 100eeb4:	0440090e 	bge	zero,r17,100eedc <ceil+0x178>
 100eeb8:	00800504 	movi	r2,20
 100eebc:	b0802926 	beq	r22,r2,100ef64 <ceil+0x200>
 100eec0:	00c00d04 	movi	r3,52
 100eec4:	1d87c83a 	sub	r3,r3,r22
 100eec8:	00800044 	movi	r2,1
 100eecc:	10c4983a 	sll	r2,r2,r3
 100eed0:	8085883a 	add	r2,r16,r2
 100eed4:	14001e36 	bltu	r2,r16,100ef50 <ceil+0x1ec>
 100eed8:	1025883a 	mov	r18,r2
 100eedc:	0704303a 	nor	r2,zero,fp
 100eee0:	90a4703a 	and	r18,r18,r2
 100eee4:	003fcf06 	br	100ee24 <ceil+0xc0>
 100eee8:	00810004 	movi	r2,1024
 100eeec:	b0bfcf1e 	bne	r22,r2,100ee2c <ceil+0xc8>
 100eef0:	800d883a 	mov	r6,r16
 100eef4:	280f883a 	mov	r7,r5
 100eef8:	1012a200 	call	1012a20 <__adddf3>
 100eefc:	1021883a 	mov	r16,r2
 100ef00:	1823883a 	mov	r17,r3
 100ef04:	003fc906 	br	100ee2c <ceil+0xc8>
 100ef08:	00a20034 	movhi	r2,34816
 100ef0c:	109d6704 	addi	r2,r2,30108
 100ef10:	00df8e34 	movhi	r3,32312
 100ef14:	18f90f04 	addi	r3,r3,-7108
 100ef18:	180f883a 	mov	r7,r3
 100ef1c:	100d883a 	mov	r6,r2
 100ef20:	1012a200 	call	1012a20 <__adddf3>
 100ef24:	180b883a 	mov	r5,r3
 100ef28:	000d883a 	mov	r6,zero
 100ef2c:	000f883a 	mov	r7,zero
 100ef30:	1009883a 	mov	r4,r2
 100ef34:	10131380 	call	1013138 <__gtdf2>
 100ef38:	00bfba0e 	bge	zero,r2,100ee24 <ceil+0xc0>
 100ef3c:	88000b16 	blt	r17,zero,100ef6c <ceil+0x208>
 100ef40:	8c04b03a 	or	r2,r17,r16
 100ef44:	1000041e 	bne	r2,zero,100ef58 <ceil+0x1f4>
 100ef48:	882f883a 	mov	r23,r17
 100ef4c:	003fb506 	br	100ee24 <ceil+0xc0>
 100ef50:	8dc00044 	addi	r23,r17,1
 100ef54:	003fe006 	br	100eed8 <ceil+0x174>
 100ef58:	05cffc34 	movhi	r23,16368
 100ef5c:	0025883a 	mov	r18,zero
 100ef60:	003fb006 	br	100ee24 <ceil+0xc0>
 100ef64:	8dc00044 	addi	r23,r17,1
 100ef68:	003fdc06 	br	100eedc <ceil+0x178>
 100ef6c:	05e00034 	movhi	r23,32768
 100ef70:	0025883a 	mov	r18,zero
 100ef74:	003fab06 	br	100ee24 <ceil+0xc0>

0100ef78 <cos>:
 100ef78:	00a00034 	movhi	r2,32768
 100ef7c:	10bfffc4 	addi	r2,r2,-1
 100ef80:	defffa04 	addi	sp,sp,-24
 100ef84:	114c703a 	and	r6,r2,r5
 100ef88:	008ffa74 	movhi	r2,16361
 100ef8c:	10887ec4 	addi	r2,r2,8699
 100ef90:	dfc00515 	stw	ra,20(sp)
 100ef94:	2011883a 	mov	r8,r4
 100ef98:	1180210e 	bge	r2,r6,100f020 <cos+0xa8>
 100ef9c:	009ffc34 	movhi	r2,32752
 100efa0:	10bfffc4 	addi	r2,r2,-1
 100efa4:	11800a0e 	bge	r2,r6,100efd0 <cos+0x58>
 100efa8:	280f883a 	mov	r7,r5
 100efac:	400d883a 	mov	r6,r8
 100efb0:	10129a00 	call	10129a0 <__subdf3>
 100efb4:	100d883a 	mov	r6,r2
 100efb8:	180f883a 	mov	r7,r3
 100efbc:	3005883a 	mov	r2,r6
 100efc0:	3807883a 	mov	r3,r7
 100efc4:	dfc00517 	ldw	ra,20(sp)
 100efc8:	dec00604 	addi	sp,sp,24
 100efcc:	f800283a 	ret
 100efd0:	d9800104 	addi	r6,sp,4
 100efd4:	100ff040 	call	100ff04 <__ieee754_rem_pio2>
 100efd8:	10c000cc 	andi	r3,r2,3
 100efdc:	01000044 	movi	r4,1
 100efe0:	19001926 	beq	r3,r4,100f048 <cos+0xd0>
 100efe4:	00800084 	movi	r2,2
 100efe8:	18803126 	beq	r3,r2,100f0b0 <cos+0x138>
 100efec:	1800231e 	bne	r3,zero,100f07c <cos+0x104>
 100eff0:	d8800117 	ldw	r2,4(sp)
 100eff4:	da000317 	ldw	r8,12(sp)
 100eff8:	d8c00217 	ldw	r3,8(sp)
 100effc:	da400417 	ldw	r9,16(sp)
 100f000:	400d883a 	mov	r6,r8
 100f004:	180b883a 	mov	r5,r3
 100f008:	480f883a 	mov	r7,r9
 100f00c:	1009883a 	mov	r4,r2
 100f010:	10109f40 	call	10109f4 <__kernel_cos>
 100f014:	100d883a 	mov	r6,r2
 100f018:	180f883a 	mov	r7,r3
 100f01c:	003fe706 	br	100efbc <cos+0x44>
 100f020:	000d883a 	mov	r6,zero
 100f024:	000f883a 	mov	r7,zero
 100f028:	10109f40 	call	10109f4 <__kernel_cos>
 100f02c:	100d883a 	mov	r6,r2
 100f030:	180f883a 	mov	r7,r3
 100f034:	3005883a 	mov	r2,r6
 100f038:	3807883a 	mov	r3,r7
 100f03c:	dfc00517 	ldw	ra,20(sp)
 100f040:	dec00604 	addi	sp,sp,24
 100f044:	f800283a 	ret
 100f048:	d8800117 	ldw	r2,4(sp)
 100f04c:	da000317 	ldw	r8,12(sp)
 100f050:	d8c00217 	ldw	r3,8(sp)
 100f054:	da400417 	ldw	r9,16(sp)
 100f058:	d9000015 	stw	r4,0(sp)
 100f05c:	400d883a 	mov	r6,r8
 100f060:	480f883a 	mov	r7,r9
 100f064:	180b883a 	mov	r5,r3
 100f068:	1009883a 	mov	r4,r2
 100f06c:	1011d9c0 	call	1011d9c <__kernel_sin>
 100f070:	100d883a 	mov	r6,r2
 100f074:	19e0003c 	xorhi	r7,r3,32768
 100f078:	003fd006 	br	100efbc <cos+0x44>
 100f07c:	d8800117 	ldw	r2,4(sp)
 100f080:	da000317 	ldw	r8,12(sp)
 100f084:	d8c00217 	ldw	r3,8(sp)
 100f088:	da400417 	ldw	r9,16(sp)
 100f08c:	d9000015 	stw	r4,0(sp)
 100f090:	400d883a 	mov	r6,r8
 100f094:	480f883a 	mov	r7,r9
 100f098:	180b883a 	mov	r5,r3
 100f09c:	1009883a 	mov	r4,r2
 100f0a0:	1011d9c0 	call	1011d9c <__kernel_sin>
 100f0a4:	100d883a 	mov	r6,r2
 100f0a8:	180f883a 	mov	r7,r3
 100f0ac:	003fc306 	br	100efbc <cos+0x44>
 100f0b0:	d8800117 	ldw	r2,4(sp)
 100f0b4:	da000317 	ldw	r8,12(sp)
 100f0b8:	d8c00217 	ldw	r3,8(sp)
 100f0bc:	da400417 	ldw	r9,16(sp)
 100f0c0:	400d883a 	mov	r6,r8
 100f0c4:	180b883a 	mov	r5,r3
 100f0c8:	480f883a 	mov	r7,r9
 100f0cc:	1009883a 	mov	r4,r2
 100f0d0:	10109f40 	call	10109f4 <__kernel_cos>
 100f0d4:	100d883a 	mov	r6,r2
 100f0d8:	19e0003c 	xorhi	r7,r3,32768
 100f0dc:	003fb706 	br	100efbc <cos+0x44>

0100f0e0 <sin>:
 100f0e0:	00a00034 	movhi	r2,32768
 100f0e4:	10bfffc4 	addi	r2,r2,-1
 100f0e8:	defffa04 	addi	sp,sp,-24
 100f0ec:	114c703a 	and	r6,r2,r5
 100f0f0:	008ffa74 	movhi	r2,16361
 100f0f4:	10887ec4 	addi	r2,r2,8699
 100f0f8:	dfc00515 	stw	ra,20(sp)
 100f0fc:	2011883a 	mov	r8,r4
 100f100:	1180220e 	bge	r2,r6,100f18c <sin+0xac>
 100f104:	009ffc34 	movhi	r2,32752
 100f108:	10bfffc4 	addi	r2,r2,-1
 100f10c:	11800a0e 	bge	r2,r6,100f138 <sin+0x58>
 100f110:	280f883a 	mov	r7,r5
 100f114:	400d883a 	mov	r6,r8
 100f118:	10129a00 	call	10129a0 <__subdf3>
 100f11c:	100d883a 	mov	r6,r2
 100f120:	180f883a 	mov	r7,r3
 100f124:	3005883a 	mov	r2,r6
 100f128:	3807883a 	mov	r3,r7
 100f12c:	dfc00517 	ldw	ra,20(sp)
 100f130:	dec00604 	addi	sp,sp,24
 100f134:	f800283a 	ret
 100f138:	d9800104 	addi	r6,sp,4
 100f13c:	100ff040 	call	100ff04 <__ieee754_rem_pio2>
 100f140:	10c000cc 	andi	r3,r2,3
 100f144:	01000044 	movi	r4,1
 100f148:	19001b26 	beq	r3,r4,100f1b8 <sin+0xd8>
 100f14c:	00800084 	movi	r2,2
 100f150:	18803126 	beq	r3,r2,100f218 <sin+0x138>
 100f154:	1800241e 	bne	r3,zero,100f1e8 <sin+0x108>
 100f158:	d8800117 	ldw	r2,4(sp)
 100f15c:	da000317 	ldw	r8,12(sp)
 100f160:	d8c00217 	ldw	r3,8(sp)
 100f164:	da400417 	ldw	r9,16(sp)
 100f168:	d9000015 	stw	r4,0(sp)
 100f16c:	400d883a 	mov	r6,r8
 100f170:	480f883a 	mov	r7,r9
 100f174:	180b883a 	mov	r5,r3
 100f178:	1009883a 	mov	r4,r2
 100f17c:	1011d9c0 	call	1011d9c <__kernel_sin>
 100f180:	100d883a 	mov	r6,r2
 100f184:	180f883a 	mov	r7,r3
 100f188:	003fe606 	br	100f124 <sin+0x44>
 100f18c:	000d883a 	mov	r6,zero
 100f190:	000f883a 	mov	r7,zero
 100f194:	d8000015 	stw	zero,0(sp)
 100f198:	1011d9c0 	call	1011d9c <__kernel_sin>
 100f19c:	100d883a 	mov	r6,r2
 100f1a0:	180f883a 	mov	r7,r3
 100f1a4:	3005883a 	mov	r2,r6
 100f1a8:	3807883a 	mov	r3,r7
 100f1ac:	dfc00517 	ldw	ra,20(sp)
 100f1b0:	dec00604 	addi	sp,sp,24
 100f1b4:	f800283a 	ret
 100f1b8:	d8800117 	ldw	r2,4(sp)
 100f1bc:	da000317 	ldw	r8,12(sp)
 100f1c0:	d8c00217 	ldw	r3,8(sp)
 100f1c4:	da400417 	ldw	r9,16(sp)
 100f1c8:	400d883a 	mov	r6,r8
 100f1cc:	180b883a 	mov	r5,r3
 100f1d0:	480f883a 	mov	r7,r9
 100f1d4:	1009883a 	mov	r4,r2
 100f1d8:	10109f40 	call	10109f4 <__kernel_cos>
 100f1dc:	100d883a 	mov	r6,r2
 100f1e0:	180f883a 	mov	r7,r3
 100f1e4:	003fcf06 	br	100f124 <sin+0x44>
 100f1e8:	d8800117 	ldw	r2,4(sp)
 100f1ec:	da000317 	ldw	r8,12(sp)
 100f1f0:	d8c00217 	ldw	r3,8(sp)
 100f1f4:	da400417 	ldw	r9,16(sp)
 100f1f8:	400d883a 	mov	r6,r8
 100f1fc:	180b883a 	mov	r5,r3
 100f200:	480f883a 	mov	r7,r9
 100f204:	1009883a 	mov	r4,r2
 100f208:	10109f40 	call	10109f4 <__kernel_cos>
 100f20c:	100d883a 	mov	r6,r2
 100f210:	19e0003c 	xorhi	r7,r3,32768
 100f214:	003fc306 	br	100f124 <sin+0x44>
 100f218:	d8800117 	ldw	r2,4(sp)
 100f21c:	da000317 	ldw	r8,12(sp)
 100f220:	d8c00217 	ldw	r3,8(sp)
 100f224:	da400417 	ldw	r9,16(sp)
 100f228:	d9000015 	stw	r4,0(sp)
 100f22c:	400d883a 	mov	r6,r8
 100f230:	480f883a 	mov	r7,r9
 100f234:	180b883a 	mov	r5,r3
 100f238:	1009883a 	mov	r4,r2
 100f23c:	1011d9c0 	call	1011d9c <__kernel_sin>
 100f240:	100d883a 	mov	r6,r2
 100f244:	19e0003c 	xorhi	r7,r3,32768
 100f248:	003fb606 	br	100f124 <sin+0x44>

0100f24c <acos>:
 100f24c:	defff104 	addi	sp,sp,-60
 100f250:	dd000d15 	stw	r20,52(sp)
 100f254:	050040f4 	movhi	r20,259
 100f258:	a51bec04 	addi	r20,r20,28592
 100f25c:	dcc00c15 	stw	r19,48(sp)
 100f260:	dc800b15 	stw	r18,44(sp)
 100f264:	dc400a15 	stw	r17,40(sp)
 100f268:	dc000915 	stw	r16,36(sp)
 100f26c:	2025883a 	mov	r18,r4
 100f270:	dfc00e15 	stw	ra,56(sp)
 100f274:	2827883a 	mov	r19,r5
 100f278:	100f4ac0 	call	100f4ac <__ieee754_acos>
 100f27c:	a1000017 	ldw	r4,0(r20)
 100f280:	1021883a 	mov	r16,r2
 100f284:	00bfffc4 	movi	r2,-1
 100f288:	1823883a 	mov	r17,r3
 100f28c:	20800426 	beq	r4,r2,100f2a0 <acos+0x54>
 100f290:	9009883a 	mov	r4,r18
 100f294:	980b883a 	mov	r5,r19
 100f298:	10122f00 	call	10122f0 <__isnand>
 100f29c:	10000a26 	beq	r2,zero,100f2c8 <acos+0x7c>
 100f2a0:	8005883a 	mov	r2,r16
 100f2a4:	8807883a 	mov	r3,r17
 100f2a8:	dfc00e17 	ldw	ra,56(sp)
 100f2ac:	dd000d17 	ldw	r20,52(sp)
 100f2b0:	dcc00c17 	ldw	r19,48(sp)
 100f2b4:	dc800b17 	ldw	r18,44(sp)
 100f2b8:	dc400a17 	ldw	r17,40(sp)
 100f2bc:	dc000917 	ldw	r16,36(sp)
 100f2c0:	dec00f04 	addi	sp,sp,60
 100f2c4:	f800283a 	ret
 100f2c8:	9009883a 	mov	r4,r18
 100f2cc:	980b883a 	mov	r5,r19
 100f2d0:	10120b40 	call	10120b4 <fabs>
 100f2d4:	0011883a 	mov	r8,zero
 100f2d8:	024ffc34 	movhi	r9,16368
 100f2dc:	180b883a 	mov	r5,r3
 100f2e0:	480f883a 	mov	r7,r9
 100f2e4:	1009883a 	mov	r4,r2
 100f2e8:	400d883a 	mov	r6,r8
 100f2ec:	10131380 	call	1013138 <__gtdf2>
 100f2f0:	00bfeb0e 	bge	zero,r2,100f2a0 <acos+0x54>
 100f2f4:	00800044 	movi	r2,1
 100f2f8:	00c040f4 	movhi	r3,259
 100f2fc:	18d2c904 	addi	r3,r3,19236
 100f300:	010040f4 	movhi	r4,259
 100f304:	21139704 	addi	r4,r4,20060
 100f308:	d8800015 	stw	r2,0(sp)
 100f30c:	d8c00115 	stw	r3,4(sp)
 100f310:	dcc00315 	stw	r19,12(sp)
 100f314:	d8000815 	stw	zero,32(sp)
 100f318:	dc800415 	stw	r18,16(sp)
 100f31c:	dcc00515 	stw	r19,20(sp)
 100f320:	dc800215 	stw	r18,8(sp)
 100f324:	10123280 	call	1012328 <nan>
 100f328:	a1800017 	ldw	r6,0(r20)
 100f32c:	d8800615 	stw	r2,24(sp)
 100f330:	00800084 	movi	r2,2
 100f334:	d8c00715 	stw	r3,28(sp)
 100f338:	30800826 	beq	r6,r2,100f35c <acos+0x110>
 100f33c:	d809883a 	mov	r4,sp
 100f340:	10123200 	call	1012320 <matherr>
 100f344:	10000526 	beq	r2,zero,100f35c <acos+0x110>
 100f348:	d8800817 	ldw	r2,32(sp)
 100f34c:	1000071e 	bne	r2,zero,100f36c <acos+0x120>
 100f350:	dc000617 	ldw	r16,24(sp)
 100f354:	dc400717 	ldw	r17,28(sp)
 100f358:	003fd106 	br	100f2a0 <acos+0x54>
 100f35c:	1013db00 	call	1013db0 <__errno>
 100f360:	00c00844 	movi	r3,33
 100f364:	10c00015 	stw	r3,0(r2)
 100f368:	003ff706 	br	100f348 <acos+0xfc>
 100f36c:	1013db00 	call	1013db0 <__errno>
 100f370:	d8c00817 	ldw	r3,32(sp)
 100f374:	10c00015 	stw	r3,0(r2)
 100f378:	003ff506 	br	100f350 <acos+0x104>

0100f37c <sqrt>:
 100f37c:	defff104 	addi	sp,sp,-60
 100f380:	dd000d15 	stw	r20,52(sp)
 100f384:	050040f4 	movhi	r20,259
 100f388:	a51bec04 	addi	r20,r20,28592
 100f38c:	dcc00c15 	stw	r19,48(sp)
 100f390:	dc800b15 	stw	r18,44(sp)
 100f394:	dc400a15 	stw	r17,40(sp)
 100f398:	dc000915 	stw	r16,36(sp)
 100f39c:	2025883a 	mov	r18,r4
 100f3a0:	dfc00e15 	stw	ra,56(sp)
 100f3a4:	2827883a 	mov	r19,r5
 100f3a8:	101072c0 	call	101072c <__ieee754_sqrt>
 100f3ac:	a1000017 	ldw	r4,0(r20)
 100f3b0:	1021883a 	mov	r16,r2
 100f3b4:	00bfffc4 	movi	r2,-1
 100f3b8:	1823883a 	mov	r17,r3
 100f3bc:	20800a26 	beq	r4,r2,100f3e8 <sqrt+0x6c>
 100f3c0:	9009883a 	mov	r4,r18
 100f3c4:	980b883a 	mov	r5,r19
 100f3c8:	10122f00 	call	10122f0 <__isnand>
 100f3cc:	1000061e 	bne	r2,zero,100f3e8 <sqrt+0x6c>
 100f3d0:	000d883a 	mov	r6,zero
 100f3d4:	000f883a 	mov	r7,zero
 100f3d8:	9009883a 	mov	r4,r18
 100f3dc:	980b883a 	mov	r5,r19
 100f3e0:	10132480 	call	1013248 <__ltdf2>
 100f3e4:	10000a16 	blt	r2,zero,100f410 <sqrt+0x94>
 100f3e8:	8005883a 	mov	r2,r16
 100f3ec:	8807883a 	mov	r3,r17
 100f3f0:	dfc00e17 	ldw	ra,56(sp)
 100f3f4:	dd000d17 	ldw	r20,52(sp)
 100f3f8:	dcc00c17 	ldw	r19,48(sp)
 100f3fc:	dc800b17 	ldw	r18,44(sp)
 100f400:	dc400a17 	ldw	r17,40(sp)
 100f404:	dc000917 	ldw	r16,36(sp)
 100f408:	dec00f04 	addi	sp,sp,60
 100f40c:	f800283a 	ret
 100f410:	a4000017 	ldw	r16,0(r20)
 100f414:	00800044 	movi	r2,1
 100f418:	00c040f4 	movhi	r3,259
 100f41c:	18d2cb04 	addi	r3,r3,19244
 100f420:	d8800015 	stw	r2,0(sp)
 100f424:	d8c00115 	stw	r3,4(sp)
 100f428:	dcc00315 	stw	r19,12(sp)
 100f42c:	d8000815 	stw	zero,32(sp)
 100f430:	dc800415 	stw	r18,16(sp)
 100f434:	dcc00515 	stw	r19,20(sp)
 100f438:	dc800215 	stw	r18,8(sp)
 100f43c:	80000a1e 	bne	r16,zero,100f468 <sqrt+0xec>
 100f440:	d8000615 	stw	zero,24(sp)
 100f444:	d8000715 	stw	zero,28(sp)
 100f448:	d809883a 	mov	r4,sp
 100f44c:	10123200 	call	1012320 <matherr>
 100f450:	10000e26 	beq	r2,zero,100f48c <sqrt+0x110>
 100f454:	d8800817 	ldw	r2,32(sp)
 100f458:	1000101e 	bne	r2,zero,100f49c <sqrt+0x120>
 100f45c:	dc000617 	ldw	r16,24(sp)
 100f460:	dc400717 	ldw	r17,28(sp)
 100f464:	003fe006 	br	100f3e8 <sqrt+0x6c>
 100f468:	0009883a 	mov	r4,zero
 100f46c:	000d883a 	mov	r6,zero
 100f470:	000b883a 	mov	r5,zero
 100f474:	000f883a 	mov	r7,zero
 100f478:	1012e580 	call	1012e58 <__divdf3>
 100f47c:	d8800615 	stw	r2,24(sp)
 100f480:	00800084 	movi	r2,2
 100f484:	d8c00715 	stw	r3,28(sp)
 100f488:	80bfef1e 	bne	r16,r2,100f448 <sqrt+0xcc>
 100f48c:	1013db00 	call	1013db0 <__errno>
 100f490:	00c00844 	movi	r3,33
 100f494:	10c00015 	stw	r3,0(r2)
 100f498:	003fee06 	br	100f454 <sqrt+0xd8>
 100f49c:	1013db00 	call	1013db0 <__errno>
 100f4a0:	d8c00817 	ldw	r3,32(sp)
 100f4a4:	10c00015 	stw	r3,0(r2)
 100f4a8:	003fec06 	br	100f45c <sqrt+0xe0>

0100f4ac <__ieee754_acos>:
 100f4ac:	00a00034 	movhi	r2,32768
 100f4b0:	10bfffc4 	addi	r2,r2,-1
 100f4b4:	deffeb04 	addi	sp,sp,-84
 100f4b8:	288c703a 	and	r6,r5,r2
 100f4bc:	008ffc34 	movhi	r2,16368
 100f4c0:	10bfffc4 	addi	r2,r2,-1
 100f4c4:	dfc01415 	stw	ra,80(sp)
 100f4c8:	ddc01315 	stw	r23,76(sp)
 100f4cc:	dd801215 	stw	r22,72(sp)
 100f4d0:	dd401115 	stw	r21,68(sp)
 100f4d4:	dd001015 	stw	r20,64(sp)
 100f4d8:	dcc00f15 	stw	r19,60(sp)
 100f4dc:	dc800e15 	stw	r18,56(sp)
 100f4e0:	dc400d15 	stw	r17,52(sp)
 100f4e4:	dc000c15 	stw	r16,48(sp)
 100f4e8:	d9000615 	stw	r4,24(sp)
 100f4ec:	d9400715 	stw	r5,28(sp)
 100f4f0:	1180150e 	bge	r2,r6,100f548 <__ieee754_acos+0x9c>
 100f4f4:	2005883a 	mov	r2,r4
 100f4f8:	01300434 	movhi	r4,49168
 100f4fc:	3109883a 	add	r4,r6,r4
 100f500:	2088b03a 	or	r4,r4,r2
 100f504:	2001a51e 	bne	r4,zero,100fb9c <__ieee754_acos+0x6f0>
 100f508:	0142790e 	bge	zero,r5,100fef0 <__ieee754_acos+0xa44>
 100f50c:	000d883a 	mov	r6,zero
 100f510:	000f883a 	mov	r7,zero
 100f514:	3005883a 	mov	r2,r6
 100f518:	3807883a 	mov	r3,r7
 100f51c:	dfc01417 	ldw	ra,80(sp)
 100f520:	ddc01317 	ldw	r23,76(sp)
 100f524:	dd801217 	ldw	r22,72(sp)
 100f528:	dd401117 	ldw	r21,68(sp)
 100f52c:	dd001017 	ldw	r20,64(sp)
 100f530:	dcc00f17 	ldw	r19,60(sp)
 100f534:	dc800e17 	ldw	r18,56(sp)
 100f538:	dc400d17 	ldw	r17,52(sp)
 100f53c:	dc000c17 	ldw	r16,48(sp)
 100f540:	dec01504 	addi	sp,sp,84
 100f544:	f800283a 	ret
 100f548:	008ff834 	movhi	r2,16352
 100f54c:	10bfffc4 	addi	r2,r2,-1
 100f550:	1180db0e 	bge	r2,r6,100f8c0 <__ieee754_acos+0x414>
 100f554:	2801a216 	blt	r5,zero,100fbe0 <__ieee754_acos+0x734>
 100f558:	010ffc34 	movhi	r4,16368
 100f55c:	d9000915 	stw	r4,36(sp)
 100f560:	d9c00717 	ldw	r7,28(sp)
 100f564:	d9400917 	ldw	r5,36(sp)
 100f568:	d9800617 	ldw	r6,24(sp)
 100f56c:	0005883a 	mov	r2,zero
 100f570:	0009883a 	mov	r4,zero
 100f574:	d8800815 	stw	r2,32(sp)
 100f578:	10129a00 	call	10129a0 <__subdf3>
 100f57c:	0011883a 	mov	r8,zero
 100f580:	024ff834 	movhi	r9,16352
 100f584:	480f883a 	mov	r7,r9
 100f588:	400d883a 	mov	r6,r8
 100f58c:	180b883a 	mov	r5,r3
 100f590:	1009883a 	mov	r4,r2
 100f594:	1012a940 	call	1012a94 <__muldf3>
 100f598:	1009883a 	mov	r4,r2
 100f59c:	180b883a 	mov	r5,r3
 100f5a0:	1025883a 	mov	r18,r2
 100f5a4:	1827883a 	mov	r19,r3
 100f5a8:	101072c0 	call	101072c <__ieee754_sqrt>
 100f5ac:	180b883a 	mov	r5,r3
 100f5b0:	0009883a 	mov	r4,zero
 100f5b4:	000d883a 	mov	r6,zero
 100f5b8:	180f883a 	mov	r7,r3
 100f5bc:	182f883a 	mov	r23,r3
 100f5c0:	d9000215 	stw	r4,8(sp)
 100f5c4:	d8800415 	stw	r2,16(sp)
 100f5c8:	d8c00515 	stw	r3,20(sp)
 100f5cc:	d8c00315 	stw	r3,12(sp)
 100f5d0:	1012a940 	call	1012a94 <__muldf3>
 100f5d4:	180f883a 	mov	r7,r3
 100f5d8:	9009883a 	mov	r4,r18
 100f5dc:	980b883a 	mov	r5,r19
 100f5e0:	100d883a 	mov	r6,r2
 100f5e4:	10129a00 	call	10129a0 <__subdf3>
 100f5e8:	d9000417 	ldw	r4,16(sp)
 100f5ec:	d9400517 	ldw	r5,20(sp)
 100f5f0:	d9800217 	ldw	r6,8(sp)
 100f5f4:	b80f883a 	mov	r7,r23
 100f5f8:	1021883a 	mov	r16,r2
 100f5fc:	1823883a 	mov	r17,r3
 100f600:	1012a200 	call	1012a20 <__adddf3>
 100f604:	180f883a 	mov	r7,r3
 100f608:	880b883a 	mov	r5,r17
 100f60c:	8009883a 	mov	r4,r16
 100f610:	100d883a 	mov	r6,r2
 100f614:	1012e580 	call	1012e58 <__divdf3>
 100f618:	02037fb4 	movhi	r8,3582
 100f61c:	423dc244 	addi	r8,r8,-2295
 100f620:	024fc0b4 	movhi	r9,16130
 100f624:	4a4f7844 	addi	r9,r9,15841
 100f628:	480f883a 	mov	r7,r9
 100f62c:	400d883a 	mov	r6,r8
 100f630:	9009883a 	mov	r4,r18
 100f634:	980b883a 	mov	r5,r19
 100f638:	d8800a15 	stw	r2,40(sp)
 100f63c:	d8c00b15 	stw	r3,44(sp)
 100f640:	1012a940 	call	1012a94 <__muldf3>
 100f644:	021d40b4 	movhi	r8,29954
 100f648:	422ca204 	addi	r8,r8,-19832
 100f64c:	024fd2b4 	movhi	r9,16202
 100f650:	4a7bf804 	addi	r9,r9,-4128
 100f654:	480f883a 	mov	r7,r9
 100f658:	400d883a 	mov	r6,r8
 100f65c:	180b883a 	mov	r5,r3
 100f660:	1009883a 	mov	r4,r2
 100f664:	1012a200 	call	1012a20 <__adddf3>
 100f668:	180f883a 	mov	r7,r3
 100f66c:	9009883a 	mov	r4,r18
 100f670:	980b883a 	mov	r5,r19
 100f674:	100d883a 	mov	r6,r2
 100f678:	1012a940 	call	1012a94 <__muldf3>
 100f67c:	022d5a74 	movhi	r8,46441
 100f680:	4223cec4 	addi	r8,r8,-28869
 100f684:	024fe974 	movhi	r9,16293
 100f688:	4a608a04 	addi	r9,r9,-32216
 100f68c:	480f883a 	mov	r7,r9
 100f690:	400d883a 	mov	r6,r8
 100f694:	180b883a 	mov	r5,r3
 100f698:	1009883a 	mov	r4,r2
 100f69c:	10129a00 	call	10129a0 <__subdf3>
 100f6a0:	180f883a 	mov	r7,r3
 100f6a4:	9009883a 	mov	r4,r18
 100f6a8:	980b883a 	mov	r5,r19
 100f6ac:	100d883a 	mov	r6,r2
 100f6b0:	1012a940 	call	1012a94 <__muldf3>
 100f6b4:	0203a234 	movhi	r8,3720
 100f6b8:	42111544 	addi	r8,r8,17493
 100f6bc:	024ff2b4 	movhi	r9,16330
 100f6c0:	4a705544 	addi	r9,r9,-16043
 100f6c4:	480f883a 	mov	r7,r9
 100f6c8:	400d883a 	mov	r6,r8
 100f6cc:	180b883a 	mov	r5,r3
 100f6d0:	1009883a 	mov	r4,r2
 100f6d4:	1012a200 	call	1012a20 <__adddf3>
 100f6d8:	180f883a 	mov	r7,r3
 100f6dc:	9009883a 	mov	r4,r18
 100f6e0:	980b883a 	mov	r5,r19
 100f6e4:	100d883a 	mov	r6,r2
 100f6e8:	1012a940 	call	1012a94 <__muldf3>
 100f6ec:	0200faf4 	movhi	r8,1003
 100f6f0:	421bdf44 	addi	r8,r8,28541
 100f6f4:	024ff574 	movhi	r9,16341
 100f6f8:	4a758484 	addi	r9,r9,-10734
 100f6fc:	480f883a 	mov	r7,r9
 100f700:	400d883a 	mov	r6,r8
 100f704:	180b883a 	mov	r5,r3
 100f708:	1009883a 	mov	r4,r2
 100f70c:	10129a00 	call	10129a0 <__subdf3>
 100f710:	180f883a 	mov	r7,r3
 100f714:	9009883a 	mov	r4,r18
 100f718:	980b883a 	mov	r5,r19
 100f71c:	100d883a 	mov	r6,r2
 100f720:	1012a940 	call	1012a94 <__muldf3>
 100f724:	02155574 	movhi	r8,21845
 100f728:	42155544 	addi	r8,r8,21845
 100f72c:	024ff174 	movhi	r9,16325
 100f730:	4a555544 	addi	r9,r9,21845
 100f734:	480f883a 	mov	r7,r9
 100f738:	400d883a 	mov	r6,r8
 100f73c:	180b883a 	mov	r5,r3
 100f740:	1009883a 	mov	r4,r2
 100f744:	1012a200 	call	1012a20 <__adddf3>
 100f748:	180f883a 	mov	r7,r3
 100f74c:	9009883a 	mov	r4,r18
 100f750:	980b883a 	mov	r5,r19
 100f754:	100d883a 	mov	r6,r2
 100f758:	1012a940 	call	1012a94 <__muldf3>
 100f75c:	022c4bf4 	movhi	r8,45359
 100f760:	4224a084 	addi	r8,r8,-28030
 100f764:	024fed34 	movhi	r9,16308
 100f768:	4a6e3144 	addi	r9,r9,-18235
 100f76c:	480f883a 	mov	r7,r9
 100f770:	400d883a 	mov	r6,r8
 100f774:	9009883a 	mov	r4,r18
 100f778:	980b883a 	mov	r5,r19
 100f77c:	1021883a 	mov	r16,r2
 100f780:	1823883a 	mov	r17,r3
 100f784:	1012a940 	call	1012a94 <__muldf3>
 100f788:	0206e374 	movhi	r8,7053
 100f78c:	42005644 	addi	r8,r8,345
 100f790:	024ff9b4 	movhi	r9,16358
 100f794:	4a419b04 	addi	r9,r9,1644
 100f798:	480f883a 	mov	r7,r9
 100f79c:	400d883a 	mov	r6,r8
 100f7a0:	180b883a 	mov	r5,r3
 100f7a4:	1009883a 	mov	r4,r2
 100f7a8:	10129a00 	call	10129a0 <__subdf3>
 100f7ac:	180f883a 	mov	r7,r3
 100f7b0:	9009883a 	mov	r4,r18
 100f7b4:	980b883a 	mov	r5,r19
 100f7b8:	100d883a 	mov	r6,r2
 100f7bc:	1012a940 	call	1012a94 <__muldf3>
 100f7c0:	022716b4 	movhi	r8,40026
 100f7c4:	4222b204 	addi	r8,r8,-30008
 100f7c8:	02500034 	movhi	r9,16384
 100f7cc:	4a4ab944 	addi	r9,r9,10981
 100f7d0:	480f883a 	mov	r7,r9
 100f7d4:	400d883a 	mov	r6,r8
 100f7d8:	180b883a 	mov	r5,r3
 100f7dc:	1009883a 	mov	r4,r2
 100f7e0:	1012a200 	call	1012a20 <__adddf3>
 100f7e4:	180f883a 	mov	r7,r3
 100f7e8:	9009883a 	mov	r4,r18
 100f7ec:	980b883a 	mov	r5,r19
 100f7f0:	100d883a 	mov	r6,r2
 100f7f4:	1012a940 	call	1012a94 <__muldf3>
 100f7f8:	025000f4 	movhi	r9,16387
 100f7fc:	4a4e89c4 	addi	r9,r9,14887
 100f800:	020722b4 	movhi	r8,7306
 100f804:	420b52c4 	addi	r8,r8,11595
 100f808:	480f883a 	mov	r7,r9
 100f80c:	400d883a 	mov	r6,r8
 100f810:	180b883a 	mov	r5,r3
 100f814:	1009883a 	mov	r4,r2
 100f818:	10129a00 	call	10129a0 <__subdf3>
 100f81c:	180f883a 	mov	r7,r3
 100f820:	9009883a 	mov	r4,r18
 100f824:	980b883a 	mov	r5,r19
 100f828:	100d883a 	mov	r6,r2
 100f82c:	1012a940 	call	1012a94 <__muldf3>
 100f830:	1011883a 	mov	r8,r2
 100f834:	d8800917 	ldw	r2,36(sp)
 100f838:	4009883a 	mov	r4,r8
 100f83c:	000d883a 	mov	r6,zero
 100f840:	100f883a 	mov	r7,r2
 100f844:	180b883a 	mov	r5,r3
 100f848:	1012a200 	call	1012a20 <__adddf3>
 100f84c:	180f883a 	mov	r7,r3
 100f850:	880b883a 	mov	r5,r17
 100f854:	8009883a 	mov	r4,r16
 100f858:	100d883a 	mov	r6,r2
 100f85c:	1012e580 	call	1012e58 <__divdf3>
 100f860:	d9400517 	ldw	r5,20(sp)
 100f864:	d9000417 	ldw	r4,16(sp)
 100f868:	180f883a 	mov	r7,r3
 100f86c:	100d883a 	mov	r6,r2
 100f870:	1012a940 	call	1012a94 <__muldf3>
 100f874:	d9400b17 	ldw	r5,44(sp)
 100f878:	d9000a17 	ldw	r4,40(sp)
 100f87c:	180f883a 	mov	r7,r3
 100f880:	100d883a 	mov	r6,r2
 100f884:	1012a200 	call	1012a20 <__adddf3>
 100f888:	d9000217 	ldw	r4,8(sp)
 100f88c:	b80b883a 	mov	r5,r23
 100f890:	180f883a 	mov	r7,r3
 100f894:	100d883a 	mov	r6,r2
 100f898:	1012a200 	call	1012a20 <__adddf3>
 100f89c:	1011883a 	mov	r8,r2
 100f8a0:	180f883a 	mov	r7,r3
 100f8a4:	1009883a 	mov	r4,r2
 100f8a8:	180b883a 	mov	r5,r3
 100f8ac:	400d883a 	mov	r6,r8
 100f8b0:	1012a200 	call	1012a20 <__adddf3>
 100f8b4:	100d883a 	mov	r6,r2
 100f8b8:	180f883a 	mov	r7,r3
 100f8bc:	003f1506 	br	100f514 <__ieee754_acos+0x68>
 100f8c0:	008f1834 	movhi	r2,15456
 100f8c4:	1180c10e 	bge	r2,r6,100fbcc <__ieee754_acos+0x720>
 100f8c8:	d9000617 	ldw	r4,24(sp)
 100f8cc:	d9c00717 	ldw	r7,28(sp)
 100f8d0:	200d883a 	mov	r6,r4
 100f8d4:	1012a940 	call	1012a94 <__muldf3>
 100f8d8:	1021883a 	mov	r16,r2
 100f8dc:	1823883a 	mov	r17,r3
 100f8e0:	00837fb4 	movhi	r2,3582
 100f8e4:	10bdc244 	addi	r2,r2,-2295
 100f8e8:	00cfc0b4 	movhi	r3,16130
 100f8ec:	18cf7844 	addi	r3,r3,15841
 100f8f0:	180f883a 	mov	r7,r3
 100f8f4:	8009883a 	mov	r4,r16
 100f8f8:	880b883a 	mov	r5,r17
 100f8fc:	100d883a 	mov	r6,r2
 100f900:	1012a940 	call	1012a94 <__muldf3>
 100f904:	021d40b4 	movhi	r8,29954
 100f908:	422ca204 	addi	r8,r8,-19832
 100f90c:	024fd2b4 	movhi	r9,16202
 100f910:	4a7bf804 	addi	r9,r9,-4128
 100f914:	480f883a 	mov	r7,r9
 100f918:	400d883a 	mov	r6,r8
 100f91c:	180b883a 	mov	r5,r3
 100f920:	1009883a 	mov	r4,r2
 100f924:	1012a200 	call	1012a20 <__adddf3>
 100f928:	180f883a 	mov	r7,r3
 100f92c:	8009883a 	mov	r4,r16
 100f930:	880b883a 	mov	r5,r17
 100f934:	100d883a 	mov	r6,r2
 100f938:	1012a940 	call	1012a94 <__muldf3>
 100f93c:	022d5a74 	movhi	r8,46441
 100f940:	4223cec4 	addi	r8,r8,-28869
 100f944:	024fe974 	movhi	r9,16293
 100f948:	4a608a04 	addi	r9,r9,-32216
 100f94c:	480f883a 	mov	r7,r9
 100f950:	400d883a 	mov	r6,r8
 100f954:	180b883a 	mov	r5,r3
 100f958:	1009883a 	mov	r4,r2
 100f95c:	10129a00 	call	10129a0 <__subdf3>
 100f960:	180f883a 	mov	r7,r3
 100f964:	8009883a 	mov	r4,r16
 100f968:	880b883a 	mov	r5,r17
 100f96c:	100d883a 	mov	r6,r2
 100f970:	1012a940 	call	1012a94 <__muldf3>
 100f974:	0203a234 	movhi	r8,3720
 100f978:	42111544 	addi	r8,r8,17493
 100f97c:	024ff2b4 	movhi	r9,16330
 100f980:	4a705544 	addi	r9,r9,-16043
 100f984:	480f883a 	mov	r7,r9
 100f988:	400d883a 	mov	r6,r8
 100f98c:	180b883a 	mov	r5,r3
 100f990:	1009883a 	mov	r4,r2
 100f994:	1012a200 	call	1012a20 <__adddf3>
 100f998:	180f883a 	mov	r7,r3
 100f99c:	8009883a 	mov	r4,r16
 100f9a0:	880b883a 	mov	r5,r17
 100f9a4:	100d883a 	mov	r6,r2
 100f9a8:	1012a940 	call	1012a94 <__muldf3>
 100f9ac:	0200faf4 	movhi	r8,1003
 100f9b0:	421bdf44 	addi	r8,r8,28541
 100f9b4:	024ff574 	movhi	r9,16341
 100f9b8:	4a758484 	addi	r9,r9,-10734
 100f9bc:	480f883a 	mov	r7,r9
 100f9c0:	400d883a 	mov	r6,r8
 100f9c4:	180b883a 	mov	r5,r3
 100f9c8:	1009883a 	mov	r4,r2
 100f9cc:	10129a00 	call	10129a0 <__subdf3>
 100f9d0:	180f883a 	mov	r7,r3
 100f9d4:	8009883a 	mov	r4,r16
 100f9d8:	880b883a 	mov	r5,r17
 100f9dc:	100d883a 	mov	r6,r2
 100f9e0:	1012a940 	call	1012a94 <__muldf3>
 100f9e4:	02155574 	movhi	r8,21845
 100f9e8:	42155544 	addi	r8,r8,21845
 100f9ec:	024ff174 	movhi	r9,16325
 100f9f0:	4a555544 	addi	r9,r9,21845
 100f9f4:	480f883a 	mov	r7,r9
 100f9f8:	400d883a 	mov	r6,r8
 100f9fc:	180b883a 	mov	r5,r3
 100fa00:	1009883a 	mov	r4,r2
 100fa04:	1012a200 	call	1012a20 <__adddf3>
 100fa08:	180f883a 	mov	r7,r3
 100fa0c:	8009883a 	mov	r4,r16
 100fa10:	880b883a 	mov	r5,r17
 100fa14:	100d883a 	mov	r6,r2
 100fa18:	1012a940 	call	1012a94 <__muldf3>
 100fa1c:	022c4bf4 	movhi	r8,45359
 100fa20:	4224a084 	addi	r8,r8,-28030
 100fa24:	024fed34 	movhi	r9,16308
 100fa28:	4a6e3144 	addi	r9,r9,-18235
 100fa2c:	480f883a 	mov	r7,r9
 100fa30:	400d883a 	mov	r6,r8
 100fa34:	8009883a 	mov	r4,r16
 100fa38:	880b883a 	mov	r5,r17
 100fa3c:	1029883a 	mov	r20,r2
 100fa40:	182b883a 	mov	r21,r3
 100fa44:	1012a940 	call	1012a94 <__muldf3>
 100fa48:	0206e374 	movhi	r8,7053
 100fa4c:	42005644 	addi	r8,r8,345
 100fa50:	024ff9b4 	movhi	r9,16358
 100fa54:	4a419b04 	addi	r9,r9,1644
 100fa58:	480f883a 	mov	r7,r9
 100fa5c:	400d883a 	mov	r6,r8
 100fa60:	180b883a 	mov	r5,r3
 100fa64:	1009883a 	mov	r4,r2
 100fa68:	10129a00 	call	10129a0 <__subdf3>
 100fa6c:	180f883a 	mov	r7,r3
 100fa70:	8009883a 	mov	r4,r16
 100fa74:	880b883a 	mov	r5,r17
 100fa78:	100d883a 	mov	r6,r2
 100fa7c:	1012a940 	call	1012a94 <__muldf3>
 100fa80:	022716b4 	movhi	r8,40026
 100fa84:	4222b204 	addi	r8,r8,-30008
 100fa88:	02500034 	movhi	r9,16384
 100fa8c:	4a4ab944 	addi	r9,r9,10981
 100fa90:	480f883a 	mov	r7,r9
 100fa94:	400d883a 	mov	r6,r8
 100fa98:	180b883a 	mov	r5,r3
 100fa9c:	1009883a 	mov	r4,r2
 100faa0:	1012a200 	call	1012a20 <__adddf3>
 100faa4:	180f883a 	mov	r7,r3
 100faa8:	8009883a 	mov	r4,r16
 100faac:	880b883a 	mov	r5,r17
 100fab0:	100d883a 	mov	r6,r2
 100fab4:	1012a940 	call	1012a94 <__muldf3>
 100fab8:	020722b4 	movhi	r8,7306
 100fabc:	420b52c4 	addi	r8,r8,11595
 100fac0:	025000f4 	movhi	r9,16387
 100fac4:	4a4e89c4 	addi	r9,r9,14887
 100fac8:	480f883a 	mov	r7,r9
 100facc:	400d883a 	mov	r6,r8
 100fad0:	180b883a 	mov	r5,r3
 100fad4:	1009883a 	mov	r4,r2
 100fad8:	10129a00 	call	10129a0 <__subdf3>
 100fadc:	180f883a 	mov	r7,r3
 100fae0:	8009883a 	mov	r4,r16
 100fae4:	880b883a 	mov	r5,r17
 100fae8:	100d883a 	mov	r6,r2
 100faec:	1012a940 	call	1012a94 <__muldf3>
 100faf0:	0011883a 	mov	r8,zero
 100faf4:	024ffc34 	movhi	r9,16368
 100faf8:	480f883a 	mov	r7,r9
 100fafc:	400d883a 	mov	r6,r8
 100fb00:	180b883a 	mov	r5,r3
 100fb04:	1009883a 	mov	r4,r2
 100fb08:	1012a200 	call	1012a20 <__adddf3>
 100fb0c:	180f883a 	mov	r7,r3
 100fb10:	a80b883a 	mov	r5,r21
 100fb14:	a009883a 	mov	r4,r20
 100fb18:	100d883a 	mov	r6,r2
 100fb1c:	1012e580 	call	1012e58 <__divdf3>
 100fb20:	d9000617 	ldw	r4,24(sp)
 100fb24:	d9400717 	ldw	r5,28(sp)
 100fb28:	180f883a 	mov	r7,r3
 100fb2c:	100d883a 	mov	r6,r2
 100fb30:	1012a940 	call	1012a94 <__muldf3>
 100fb34:	020cc534 	movhi	r8,13076
 100fb38:	421701c4 	addi	r8,r8,23559
 100fb3c:	024f24b4 	movhi	r9,15506
 100fb40:	4a698984 	addi	r9,r9,-23002
 100fb44:	480b883a 	mov	r5,r9
 100fb48:	4009883a 	mov	r4,r8
 100fb4c:	180f883a 	mov	r7,r3
 100fb50:	100d883a 	mov	r6,r2
 100fb54:	10129a00 	call	10129a0 <__subdf3>
 100fb58:	d9400717 	ldw	r5,28(sp)
 100fb5c:	d9000617 	ldw	r4,24(sp)
 100fb60:	180f883a 	mov	r7,r3
 100fb64:	100d883a 	mov	r6,r2
 100fb68:	10129a00 	call	10129a0 <__subdf3>
 100fb6c:	02151134 	movhi	r8,21572
 100fb70:	420b4604 	addi	r8,r8,11544
 100fb74:	024ffe74 	movhi	r9,16377
 100fb78:	4a487ec4 	addi	r9,r9,8699
 100fb7c:	180f883a 	mov	r7,r3
 100fb80:	100d883a 	mov	r6,r2
 100fb84:	480b883a 	mov	r5,r9
 100fb88:	4009883a 	mov	r4,r8
 100fb8c:	10129a00 	call	10129a0 <__subdf3>
 100fb90:	100d883a 	mov	r6,r2
 100fb94:	180f883a 	mov	r7,r3
 100fb98:	003e5e06 	br	100f514 <__ieee754_acos+0x68>
 100fb9c:	d9000617 	ldw	r4,24(sp)
 100fba0:	d9c00717 	ldw	r7,28(sp)
 100fba4:	200d883a 	mov	r6,r4
 100fba8:	10129a00 	call	10129a0 <__subdf3>
 100fbac:	100d883a 	mov	r6,r2
 100fbb0:	180f883a 	mov	r7,r3
 100fbb4:	1009883a 	mov	r4,r2
 100fbb8:	180b883a 	mov	r5,r3
 100fbbc:	1012e580 	call	1012e58 <__divdf3>
 100fbc0:	100d883a 	mov	r6,r2
 100fbc4:	180f883a 	mov	r7,r3
 100fbc8:	003e5206 	br	100f514 <__ieee754_acos+0x68>
 100fbcc:	01951134 	movhi	r6,21572
 100fbd0:	318b4604 	addi	r6,r6,11544
 100fbd4:	01cffe74 	movhi	r7,16377
 100fbd8:	39c87ec4 	addi	r7,r7,8699
 100fbdc:	003e4d06 	br	100f514 <__ieee754_acos+0x68>
 100fbe0:	d9000617 	ldw	r4,24(sp)
 100fbe4:	05cffc34 	movhi	r23,16368
 100fbe8:	002d883a 	mov	r22,zero
 100fbec:	b00d883a 	mov	r6,r22
 100fbf0:	b80f883a 	mov	r7,r23
 100fbf4:	1012a200 	call	1012a20 <__adddf3>
 100fbf8:	0011883a 	mov	r8,zero
 100fbfc:	024ff834 	movhi	r9,16352
 100fc00:	480f883a 	mov	r7,r9
 100fc04:	400d883a 	mov	r6,r8
 100fc08:	180b883a 	mov	r5,r3
 100fc0c:	1009883a 	mov	r4,r2
 100fc10:	1012a940 	call	1012a94 <__muldf3>
 100fc14:	1009883a 	mov	r4,r2
 100fc18:	180b883a 	mov	r5,r3
 100fc1c:	1021883a 	mov	r16,r2
 100fc20:	1823883a 	mov	r17,r3
 100fc24:	101072c0 	call	101072c <__ieee754_sqrt>
 100fc28:	02037fb4 	movhi	r8,3582
 100fc2c:	423dc244 	addi	r8,r8,-2295
 100fc30:	024fc0b4 	movhi	r9,16130
 100fc34:	4a4f7844 	addi	r9,r9,15841
 100fc38:	480f883a 	mov	r7,r9
 100fc3c:	400d883a 	mov	r6,r8
 100fc40:	8009883a 	mov	r4,r16
 100fc44:	880b883a 	mov	r5,r17
 100fc48:	d8800015 	stw	r2,0(sp)
 100fc4c:	d8c00115 	stw	r3,4(sp)
 100fc50:	1012a940 	call	1012a94 <__muldf3>
 100fc54:	021d40b4 	movhi	r8,29954
 100fc58:	422ca204 	addi	r8,r8,-19832
 100fc5c:	024fd2b4 	movhi	r9,16202
 100fc60:	4a7bf804 	addi	r9,r9,-4128
 100fc64:	480f883a 	mov	r7,r9
 100fc68:	400d883a 	mov	r6,r8
 100fc6c:	180b883a 	mov	r5,r3
 100fc70:	1009883a 	mov	r4,r2
 100fc74:	1012a200 	call	1012a20 <__adddf3>
 100fc78:	180f883a 	mov	r7,r3
 100fc7c:	8009883a 	mov	r4,r16
 100fc80:	880b883a 	mov	r5,r17
 100fc84:	100d883a 	mov	r6,r2
 100fc88:	1012a940 	call	1012a94 <__muldf3>
 100fc8c:	022d5a74 	movhi	r8,46441
 100fc90:	4223cec4 	addi	r8,r8,-28869
 100fc94:	024fe974 	movhi	r9,16293
 100fc98:	4a608a04 	addi	r9,r9,-32216
 100fc9c:	480f883a 	mov	r7,r9
 100fca0:	400d883a 	mov	r6,r8
 100fca4:	180b883a 	mov	r5,r3
 100fca8:	1009883a 	mov	r4,r2
 100fcac:	10129a00 	call	10129a0 <__subdf3>
 100fcb0:	180f883a 	mov	r7,r3
 100fcb4:	8009883a 	mov	r4,r16
 100fcb8:	880b883a 	mov	r5,r17
 100fcbc:	100d883a 	mov	r6,r2
 100fcc0:	1012a940 	call	1012a94 <__muldf3>
 100fcc4:	0203a234 	movhi	r8,3720
 100fcc8:	42111544 	addi	r8,r8,17493
 100fccc:	024ff2b4 	movhi	r9,16330
 100fcd0:	4a705544 	addi	r9,r9,-16043
 100fcd4:	480f883a 	mov	r7,r9
 100fcd8:	400d883a 	mov	r6,r8
 100fcdc:	180b883a 	mov	r5,r3
 100fce0:	1009883a 	mov	r4,r2
 100fce4:	1012a200 	call	1012a20 <__adddf3>
 100fce8:	180f883a 	mov	r7,r3
 100fcec:	8009883a 	mov	r4,r16
 100fcf0:	880b883a 	mov	r5,r17
 100fcf4:	100d883a 	mov	r6,r2
 100fcf8:	1012a940 	call	1012a94 <__muldf3>
 100fcfc:	0200faf4 	movhi	r8,1003
 100fd00:	421bdf44 	addi	r8,r8,28541
 100fd04:	024ff574 	movhi	r9,16341
 100fd08:	4a758484 	addi	r9,r9,-10734
 100fd0c:	480f883a 	mov	r7,r9
 100fd10:	400d883a 	mov	r6,r8
 100fd14:	180b883a 	mov	r5,r3
 100fd18:	1009883a 	mov	r4,r2
 100fd1c:	10129a00 	call	10129a0 <__subdf3>
 100fd20:	180f883a 	mov	r7,r3
 100fd24:	8009883a 	mov	r4,r16
 100fd28:	880b883a 	mov	r5,r17
 100fd2c:	100d883a 	mov	r6,r2
 100fd30:	1012a940 	call	1012a94 <__muldf3>
 100fd34:	02155574 	movhi	r8,21845
 100fd38:	42155544 	addi	r8,r8,21845
 100fd3c:	024ff174 	movhi	r9,16325
 100fd40:	4a555544 	addi	r9,r9,21845
 100fd44:	480f883a 	mov	r7,r9
 100fd48:	400d883a 	mov	r6,r8
 100fd4c:	180b883a 	mov	r5,r3
 100fd50:	1009883a 	mov	r4,r2
 100fd54:	1012a200 	call	1012a20 <__adddf3>
 100fd58:	180f883a 	mov	r7,r3
 100fd5c:	8009883a 	mov	r4,r16
 100fd60:	880b883a 	mov	r5,r17
 100fd64:	100d883a 	mov	r6,r2
 100fd68:	1012a940 	call	1012a94 <__muldf3>
 100fd6c:	022c4bf4 	movhi	r8,45359
 100fd70:	4224a084 	addi	r8,r8,-28030
 100fd74:	024fed34 	movhi	r9,16308
 100fd78:	4a6e3144 	addi	r9,r9,-18235
 100fd7c:	480f883a 	mov	r7,r9
 100fd80:	400d883a 	mov	r6,r8
 100fd84:	8009883a 	mov	r4,r16
 100fd88:	880b883a 	mov	r5,r17
 100fd8c:	1029883a 	mov	r20,r2
 100fd90:	182b883a 	mov	r21,r3
 100fd94:	1012a940 	call	1012a94 <__muldf3>
 100fd98:	0206e374 	movhi	r8,7053
 100fd9c:	42005644 	addi	r8,r8,345
 100fda0:	024ff9b4 	movhi	r9,16358
 100fda4:	4a419b04 	addi	r9,r9,1644
 100fda8:	480f883a 	mov	r7,r9
 100fdac:	400d883a 	mov	r6,r8
 100fdb0:	180b883a 	mov	r5,r3
 100fdb4:	1009883a 	mov	r4,r2
 100fdb8:	10129a00 	call	10129a0 <__subdf3>
 100fdbc:	180f883a 	mov	r7,r3
 100fdc0:	8009883a 	mov	r4,r16
 100fdc4:	880b883a 	mov	r5,r17
 100fdc8:	100d883a 	mov	r6,r2
 100fdcc:	1012a940 	call	1012a94 <__muldf3>
 100fdd0:	022716b4 	movhi	r8,40026
 100fdd4:	4222b204 	addi	r8,r8,-30008
 100fdd8:	02500034 	movhi	r9,16384
 100fddc:	4a4ab944 	addi	r9,r9,10981
 100fde0:	480f883a 	mov	r7,r9
 100fde4:	400d883a 	mov	r6,r8
 100fde8:	180b883a 	mov	r5,r3
 100fdec:	1009883a 	mov	r4,r2
 100fdf0:	1012a200 	call	1012a20 <__adddf3>
 100fdf4:	180f883a 	mov	r7,r3
 100fdf8:	8009883a 	mov	r4,r16
 100fdfc:	880b883a 	mov	r5,r17
 100fe00:	100d883a 	mov	r6,r2
 100fe04:	1012a940 	call	1012a94 <__muldf3>
 100fe08:	020722b4 	movhi	r8,7306
 100fe0c:	420b52c4 	addi	r8,r8,11595
 100fe10:	025000f4 	movhi	r9,16387
 100fe14:	4a4e89c4 	addi	r9,r9,14887
 100fe18:	480f883a 	mov	r7,r9
 100fe1c:	400d883a 	mov	r6,r8
 100fe20:	180b883a 	mov	r5,r3
 100fe24:	1009883a 	mov	r4,r2
 100fe28:	10129a00 	call	10129a0 <__subdf3>
 100fe2c:	180f883a 	mov	r7,r3
 100fe30:	8009883a 	mov	r4,r16
 100fe34:	880b883a 	mov	r5,r17
 100fe38:	100d883a 	mov	r6,r2
 100fe3c:	1012a940 	call	1012a94 <__muldf3>
 100fe40:	180b883a 	mov	r5,r3
 100fe44:	000d883a 	mov	r6,zero
 100fe48:	b80f883a 	mov	r7,r23
 100fe4c:	1009883a 	mov	r4,r2
 100fe50:	1012a200 	call	1012a20 <__adddf3>
 100fe54:	180f883a 	mov	r7,r3
 100fe58:	a80b883a 	mov	r5,r21
 100fe5c:	a009883a 	mov	r4,r20
 100fe60:	100d883a 	mov	r6,r2
 100fe64:	1012e580 	call	1012e58 <__divdf3>
 100fe68:	d9000017 	ldw	r4,0(sp)
 100fe6c:	d9400117 	ldw	r5,4(sp)
 100fe70:	180f883a 	mov	r7,r3
 100fe74:	100d883a 	mov	r6,r2
 100fe78:	1012a940 	call	1012a94 <__muldf3>
 100fe7c:	020cc534 	movhi	r8,13076
 100fe80:	421701c4 	addi	r8,r8,23559
 100fe84:	024f24b4 	movhi	r9,15506
 100fe88:	4a698984 	addi	r9,r9,-23002
 100fe8c:	480f883a 	mov	r7,r9
 100fe90:	400d883a 	mov	r6,r8
 100fe94:	180b883a 	mov	r5,r3
 100fe98:	1009883a 	mov	r4,r2
 100fe9c:	10129a00 	call	10129a0 <__subdf3>
 100fea0:	d9400117 	ldw	r5,4(sp)
 100fea4:	d9000017 	ldw	r4,0(sp)
 100fea8:	180f883a 	mov	r7,r3
 100feac:	100d883a 	mov	r6,r2
 100feb0:	1012a200 	call	1012a20 <__adddf3>
 100feb4:	0011883a 	mov	r8,zero
 100feb8:	02700034 	movhi	r9,49152
 100febc:	480f883a 	mov	r7,r9
 100fec0:	180b883a 	mov	r5,r3
 100fec4:	1009883a 	mov	r4,r2
 100fec8:	400d883a 	mov	r6,r8
 100fecc:	1012a940 	call	1012a94 <__muldf3>
 100fed0:	02500274 	movhi	r9,16393
 100fed4:	4a487ec4 	addi	r9,r9,8699
 100fed8:	02151134 	movhi	r8,21572
 100fedc:	420b4604 	addi	r8,r8,11544
 100fee0:	180b883a 	mov	r5,r3
 100fee4:	480f883a 	mov	r7,r9
 100fee8:	1009883a 	mov	r4,r2
 100feec:	003e6f06 	br	100f8ac <__ieee754_acos+0x400>
 100fef0:	01951134 	movhi	r6,21572
 100fef4:	318b4604 	addi	r6,r6,11544
 100fef8:	01d00274 	movhi	r7,16393
 100fefc:	39c87ec4 	addi	r7,r7,8699
 100ff00:	003d8406 	br	100f514 <__ieee754_acos+0x68>

0100ff04 <__ieee754_rem_pio2>:
 100ff04:	deffe304 	addi	sp,sp,-116
 100ff08:	00a00034 	movhi	r2,32768
 100ff0c:	10bfffc4 	addi	r2,r2,-1
 100ff10:	dd801915 	stw	r22,100(sp)
 100ff14:	28ac703a 	and	r22,r5,r2
 100ff18:	008ffa74 	movhi	r2,16361
 100ff1c:	10887ec4 	addi	r2,r2,8699
 100ff20:	df001b15 	stw	fp,108(sp)
 100ff24:	dfc01c15 	stw	ra,112(sp)
 100ff28:	ddc01a15 	stw	r23,104(sp)
 100ff2c:	dd401815 	stw	r21,96(sp)
 100ff30:	dd001715 	stw	r20,92(sp)
 100ff34:	dcc01615 	stw	r19,88(sp)
 100ff38:	dc801515 	stw	r18,84(sp)
 100ff3c:	dc401415 	stw	r17,80(sp)
 100ff40:	dc001315 	stw	r16,76(sp)
 100ff44:	2013883a 	mov	r9,r4
 100ff48:	d9400a15 	stw	r5,40(sp)
 100ff4c:	3039883a 	mov	fp,r6
 100ff50:	15801216 	blt	r2,r22,100ff9c <__ieee754_rem_pio2+0x98>
 100ff54:	e1400115 	stw	r5,4(fp)
 100ff58:	30000315 	stw	zero,12(r6)
 100ff5c:	e1000015 	stw	r4,0(fp)
 100ff60:	d8000b15 	stw	zero,44(sp)
 100ff64:	30000215 	stw	zero,8(r6)
 100ff68:	d8800b17 	ldw	r2,44(sp)
 100ff6c:	dfc01c17 	ldw	ra,112(sp)
 100ff70:	df001b17 	ldw	fp,108(sp)
 100ff74:	ddc01a17 	ldw	r23,104(sp)
 100ff78:	dd801917 	ldw	r22,100(sp)
 100ff7c:	dd401817 	ldw	r21,96(sp)
 100ff80:	dd001717 	ldw	r20,92(sp)
 100ff84:	dcc01617 	ldw	r19,88(sp)
 100ff88:	dc801517 	ldw	r18,84(sp)
 100ff8c:	dc401417 	ldw	r17,80(sp)
 100ff90:	dc001317 	ldw	r16,76(sp)
 100ff94:	dec01d04 	addi	sp,sp,116
 100ff98:	f800283a 	ret
 100ff9c:	009000f4 	movhi	r2,16387
 100ffa0:	10b65ec4 	addi	r2,r2,-9861
 100ffa4:	15800f0e 	bge	r2,r22,100ffe4 <__ieee754_rem_pio2+0xe0>
 100ffa8:	00904e74 	movhi	r2,16697
 100ffac:	10887ec4 	addi	r2,r2,8699
 100ffb0:	1580330e 	bge	r2,r22,1010080 <__ieee754_rem_pio2+0x17c>
 100ffb4:	009ffc34 	movhi	r2,32752
 100ffb8:	10bfffc4 	addi	r2,r2,-1
 100ffbc:	1580fe0e 	bge	r2,r22,10103b8 <__ieee754_rem_pio2+0x4b4>
 100ffc0:	280f883a 	mov	r7,r5
 100ffc4:	480d883a 	mov	r6,r9
 100ffc8:	10129a00 	call	10129a0 <__subdf3>
 100ffcc:	e0c00115 	stw	r3,4(fp)
 100ffd0:	d8000b15 	stw	zero,44(sp)
 100ffd4:	e0800015 	stw	r2,0(fp)
 100ffd8:	e0800215 	stw	r2,8(fp)
 100ffdc:	e0c00315 	stw	r3,12(fp)
 100ffe0:	003fe106 	br	100ff68 <__ieee754_rem_pio2+0x64>
 100ffe4:	d9000a17 	ldw	r4,40(sp)
 100ffe8:	0100ce0e 	bge	zero,r4,1010324 <__ieee754_rem_pio2+0x420>
 100ffec:	04151034 	movhi	r16,21568
 100fff0:	044ffe74 	movhi	r17,16377
 100fff4:	8c487ec4 	addi	r17,r17,8699
 100fff8:	4809883a 	mov	r4,r9
 100fffc:	800d883a 	mov	r6,r16
 1010000:	880f883a 	mov	r7,r17
 1010004:	10129a00 	call	10129a0 <__subdf3>
 1010008:	1025883a 	mov	r18,r2
 101000c:	1827883a 	mov	r19,r3
 1010010:	b4413c26 	beq	r22,r17,1010504 <__ieee754_rem_pio2+0x600>
 1010014:	040698b4 	movhi	r16,6754
 1010018:	8418cc44 	addi	r16,r16,25393
 101001c:	044f7474 	movhi	r17,15825
 1010020:	8c6d1844 	addi	r17,r17,-19359
 1010024:	1009883a 	mov	r4,r2
 1010028:	180b883a 	mov	r5,r3
 101002c:	800d883a 	mov	r6,r16
 1010030:	880f883a 	mov	r7,r17
 1010034:	10129a00 	call	10129a0 <__subdf3>
 1010038:	100d883a 	mov	r6,r2
 101003c:	9009883a 	mov	r4,r18
 1010040:	980b883a 	mov	r5,r19
 1010044:	180f883a 	mov	r7,r3
 1010048:	e0800015 	stw	r2,0(fp)
 101004c:	e0c00115 	stw	r3,4(fp)
 1010050:	10129a00 	call	10129a0 <__subdf3>
 1010054:	1009883a 	mov	r4,r2
 1010058:	800d883a 	mov	r6,r16
 101005c:	880f883a 	mov	r7,r17
 1010060:	180b883a 	mov	r5,r3
 1010064:	10129a00 	call	10129a0 <__subdf3>
 1010068:	1009883a 	mov	r4,r2
 101006c:	00800044 	movi	r2,1
 1010070:	d8800b15 	stw	r2,44(sp)
 1010074:	e0c00315 	stw	r3,12(fp)
 1010078:	e1000215 	stw	r4,8(fp)
 101007c:	003fba06 	br	100ff68 <__ieee754_rem_pio2+0x64>
 1010080:	10120b40 	call	10120b4 <fabs>
 1010084:	021b72b4 	movhi	r8,28106
 1010088:	423220c4 	addi	r8,r8,-14205
 101008c:	024ff934 	movhi	r9,16356
 1010090:	4a57cc04 	addi	r9,r9,24368
 1010094:	480f883a 	mov	r7,r9
 1010098:	400d883a 	mov	r6,r8
 101009c:	1009883a 	mov	r4,r2
 10100a0:	180b883a 	mov	r5,r3
 10100a4:	1025883a 	mov	r18,r2
 10100a8:	1827883a 	mov	r19,r3
 10100ac:	1012a940 	call	1012a94 <__muldf3>
 10100b0:	0011883a 	mov	r8,zero
 10100b4:	024ff834 	movhi	r9,16352
 10100b8:	480f883a 	mov	r7,r9
 10100bc:	400d883a 	mov	r6,r8
 10100c0:	180b883a 	mov	r5,r3
 10100c4:	1009883a 	mov	r4,r2
 10100c8:	1012a200 	call	1012a20 <__adddf3>
 10100cc:	180b883a 	mov	r5,r3
 10100d0:	1009883a 	mov	r4,r2
 10100d4:	10133c80 	call	10133c8 <__fixdfsi>
 10100d8:	1009883a 	mov	r4,r2
 10100dc:	d8800b15 	stw	r2,44(sp)
 10100e0:	10132d00 	call	10132d0 <__floatsidf>
 10100e4:	1823883a 	mov	r17,r3
 10100e8:	1009883a 	mov	r4,r2
 10100ec:	d8800c15 	stw	r2,48(sp)
 10100f0:	00effe74 	movhi	r3,49145
 10100f4:	18c87ec4 	addi	r3,r3,8699
 10100f8:	00951034 	movhi	r2,21568
 10100fc:	880b883a 	mov	r5,r17
 1010100:	180f883a 	mov	r7,r3
 1010104:	100d883a 	mov	r6,r2
 1010108:	dc400d15 	stw	r17,52(sp)
 101010c:	1012a940 	call	1012a94 <__muldf3>
 1010110:	180f883a 	mov	r7,r3
 1010114:	980b883a 	mov	r5,r19
 1010118:	9009883a 	mov	r4,r18
 101011c:	100d883a 	mov	r6,r2
 1010120:	1012a200 	call	1012a20 <__adddf3>
 1010124:	d9000c17 	ldw	r4,48(sp)
 1010128:	020698b4 	movhi	r8,6754
 101012c:	4218cc44 	addi	r8,r8,25393
 1010130:	024f7474 	movhi	r9,15825
 1010134:	4a6d1844 	addi	r9,r9,-19359
 1010138:	880b883a 	mov	r5,r17
 101013c:	480f883a 	mov	r7,r9
 1010140:	400d883a 	mov	r6,r8
 1010144:	1025883a 	mov	r18,r2
 1010148:	1827883a 	mov	r19,r3
 101014c:	1012a940 	call	1012a94 <__muldf3>
 1010150:	d9000b17 	ldw	r4,44(sp)
 1010154:	100f883a 	mov	r7,r2
 1010158:	1811883a 	mov	r8,r3
 101015c:	008007c4 	movi	r2,31
 1010160:	dc800e15 	stw	r18,56(sp)
 1010164:	3821883a 	mov	r16,r7
 1010168:	dcc00f15 	stw	r19,60(sp)
 101016c:	4023883a 	mov	r17,r8
 1010170:	11010a0e 	bge	r2,r4,101059c <__ieee754_rem_pio2+0x698>
 1010174:	d9000e17 	ldw	r4,56(sp)
 1010178:	d9400f17 	ldw	r5,60(sp)
 101017c:	800d883a 	mov	r6,r16
 1010180:	880f883a 	mov	r7,r17
 1010184:	10129a00 	call	10129a0 <__subdf3>
 1010188:	1810d53a 	srli	r8,r3,20
 101018c:	b02dd53a 	srai	r22,r22,20
 1010190:	1009883a 	mov	r4,r2
 1010194:	4201ffcc 	andi	r8,r8,2047
 1010198:	180b883a 	mov	r5,r3
 101019c:	b211c83a 	sub	r8,r22,r8
 10101a0:	00800404 	movi	r2,16
 10101a4:	dd801015 	stw	r22,64(sp)
 10101a8:	e1000015 	stw	r4,0(fp)
 10101ac:	e1400115 	stw	r5,4(fp)
 10101b0:	1200430e 	bge	r2,r8,10102c0 <__ieee754_rem_pio2+0x3bc>
 10101b4:	d9000c17 	ldw	r4,48(sp)
 10101b8:	d9400d17 	ldw	r5,52(sp)
 10101bc:	00869834 	movhi	r2,6752
 10101c0:	00cf7474 	movhi	r3,15825
 10101c4:	18ed1844 	addi	r3,r3,-19359
 10101c8:	180f883a 	mov	r7,r3
 10101cc:	100d883a 	mov	r6,r2
 10101d0:	1012a940 	call	1012a94 <__muldf3>
 10101d4:	d9000e17 	ldw	r4,56(sp)
 10101d8:	d9400f17 	ldw	r5,60(sp)
 10101dc:	100d883a 	mov	r6,r2
 10101e0:	180f883a 	mov	r7,r3
 10101e4:	1025883a 	mov	r18,r2
 10101e8:	1827883a 	mov	r19,r3
 10101ec:	10129a00 	call	10129a0 <__subdf3>
 10101f0:	d9000c17 	ldw	r4,48(sp)
 10101f4:	d9400d17 	ldw	r5,52(sp)
 10101f8:	058b80f4 	movhi	r22,11779
 10101fc:	b59c1cc4 	addi	r22,r22,28787
 1010200:	05cee8f4 	movhi	r23,15267
 1010204:	bdc66284 	addi	r23,r23,6538
 1010208:	b00d883a 	mov	r6,r22
 101020c:	b80f883a 	mov	r7,r23
 1010210:	d8801115 	stw	r2,68(sp)
 1010214:	d8c01215 	stw	r3,72(sp)
 1010218:	d8800815 	stw	r2,32(sp)
 101021c:	1012a940 	call	1012a94 <__muldf3>
 1010220:	d9001217 	ldw	r4,72(sp)
 1010224:	d9400f17 	ldw	r5,60(sp)
 1010228:	d9800817 	ldw	r6,32(sp)
 101022c:	d9000915 	stw	r4,36(sp)
 1010230:	d9c01217 	ldw	r7,72(sp)
 1010234:	d9000e17 	ldw	r4,56(sp)
 1010238:	1021883a 	mov	r16,r2
 101023c:	1823883a 	mov	r17,r3
 1010240:	10129a00 	call	10129a0 <__subdf3>
 1010244:	180b883a 	mov	r5,r3
 1010248:	900d883a 	mov	r6,r18
 101024c:	980f883a 	mov	r7,r19
 1010250:	1009883a 	mov	r4,r2
 1010254:	10129a00 	call	10129a0 <__subdf3>
 1010258:	180f883a 	mov	r7,r3
 101025c:	880b883a 	mov	r5,r17
 1010260:	8009883a 	mov	r4,r16
 1010264:	100d883a 	mov	r6,r2
 1010268:	10129a00 	call	10129a0 <__subdf3>
 101026c:	d9000817 	ldw	r4,32(sp)
 1010270:	d9401217 	ldw	r5,72(sp)
 1010274:	180f883a 	mov	r7,r3
 1010278:	100d883a 	mov	r6,r2
 101027c:	1021883a 	mov	r16,r2
 1010280:	1823883a 	mov	r17,r3
 1010284:	10129a00 	call	10129a0 <__subdf3>
 1010288:	1810d53a 	srli	r8,r3,20
 101028c:	1009883a 	mov	r4,r2
 1010290:	d8801017 	ldw	r2,64(sp)
 1010294:	4201ffcc 	andi	r8,r8,2047
 1010298:	180b883a 	mov	r5,r3
 101029c:	1211c83a 	sub	r8,r2,r8
 10102a0:	00800c44 	movi	r2,49
 10102a4:	e1000015 	stw	r4,0(fp)
 10102a8:	e1400115 	stw	r5,4(fp)
 10102ac:	1200f016 	blt	r2,r8,1010670 <__ieee754_rem_pio2+0x76c>
 10102b0:	d8c00817 	ldw	r3,32(sp)
 10102b4:	d9001217 	ldw	r4,72(sp)
 10102b8:	d8c00e15 	stw	r3,56(sp)
 10102bc:	d9000f15 	stw	r4,60(sp)
 10102c0:	e1800017 	ldw	r6,0(fp)
 10102c4:	e1c00117 	ldw	r7,4(fp)
 10102c8:	d9400f17 	ldw	r5,60(sp)
 10102cc:	d9000e17 	ldw	r4,56(sp)
 10102d0:	10129a00 	call	10129a0 <__subdf3>
 10102d4:	180b883a 	mov	r5,r3
 10102d8:	800d883a 	mov	r6,r16
 10102dc:	880f883a 	mov	r7,r17
 10102e0:	1009883a 	mov	r4,r2
 10102e4:	10129a00 	call	10129a0 <__subdf3>
 10102e8:	d9400a17 	ldw	r5,40(sp)
 10102ec:	e0800215 	stw	r2,8(fp)
 10102f0:	e1800204 	addi	r6,fp,8
 10102f4:	30c00115 	stw	r3,4(r6)
 10102f8:	283f1b0e 	bge	r5,zero,100ff68 <__ieee754_rem_pio2+0x64>
 10102fc:	e0c00117 	ldw	r3,4(fp)
 1010300:	d8800b17 	ldw	r2,44(sp)
 1010304:	18e0003c 	xorhi	r3,r3,32768
 1010308:	0085c83a 	sub	r2,zero,r2
 101030c:	e0c00115 	stw	r3,4(fp)
 1010310:	d8800b15 	stw	r2,44(sp)
 1010314:	30800117 	ldw	r2,4(r6)
 1010318:	10a0003c 	xorhi	r2,r2,32768
 101031c:	30800115 	stw	r2,4(r6)
 1010320:	003f1106 	br	100ff68 <__ieee754_rem_pio2+0x64>
 1010324:	04151034 	movhi	r16,21568
 1010328:	044ffe74 	movhi	r17,16377
 101032c:	8c487ec4 	addi	r17,r17,8699
 1010330:	4809883a 	mov	r4,r9
 1010334:	800d883a 	mov	r6,r16
 1010338:	880f883a 	mov	r7,r17
 101033c:	1012a200 	call	1012a20 <__adddf3>
 1010340:	1025883a 	mov	r18,r2
 1010344:	1827883a 	mov	r19,r3
 1010348:	b440a326 	beq	r22,r17,10105d8 <__ieee754_rem_pio2+0x6d4>
 101034c:	040698b4 	movhi	r16,6754
 1010350:	8418cc44 	addi	r16,r16,25393
 1010354:	044f7474 	movhi	r17,15825
 1010358:	8c6d1844 	addi	r17,r17,-19359
 101035c:	1009883a 	mov	r4,r2
 1010360:	180b883a 	mov	r5,r3
 1010364:	800d883a 	mov	r6,r16
 1010368:	880f883a 	mov	r7,r17
 101036c:	1012a200 	call	1012a20 <__adddf3>
 1010370:	100d883a 	mov	r6,r2
 1010374:	9009883a 	mov	r4,r18
 1010378:	980b883a 	mov	r5,r19
 101037c:	180f883a 	mov	r7,r3
 1010380:	e0800015 	stw	r2,0(fp)
 1010384:	e0c00115 	stw	r3,4(fp)
 1010388:	10129a00 	call	10129a0 <__subdf3>
 101038c:	1009883a 	mov	r4,r2
 1010390:	800d883a 	mov	r6,r16
 1010394:	880f883a 	mov	r7,r17
 1010398:	180b883a 	mov	r5,r3
 101039c:	1012a200 	call	1012a20 <__adddf3>
 10103a0:	1009883a 	mov	r4,r2
 10103a4:	00bfffc4 	movi	r2,-1
 10103a8:	d8800b15 	stw	r2,44(sp)
 10103ac:	e0c00315 	stw	r3,12(fp)
 10103b0:	e1000215 	stw	r4,8(fp)
 10103b4:	003eec06 	br	100ff68 <__ieee754_rem_pio2+0x64>
 10103b8:	b005d53a 	srai	r2,r22,20
 10103bc:	4821883a 	mov	r16,r9
 10103c0:	05505c34 	movhi	r21,16752
 10103c4:	15fefa84 	addi	r23,r2,-1046
 10103c8:	b826953a 	slli	r19,r23,20
 10103cc:	0029883a 	mov	r20,zero
 10103d0:	048000c4 	movi	r18,3
 10103d4:	b4e7c83a 	sub	r19,r22,r19
 10103d8:	980b883a 	mov	r5,r19
 10103dc:	10133c80 	call	10133c8 <__fixdfsi>
 10103e0:	1009883a 	mov	r4,r2
 10103e4:	10132d00 	call	10132d0 <__floatsidf>
 10103e8:	980b883a 	mov	r5,r19
 10103ec:	8009883a 	mov	r4,r16
 10103f0:	180f883a 	mov	r7,r3
 10103f4:	100d883a 	mov	r6,r2
 10103f8:	d8800215 	stw	r2,8(sp)
 10103fc:	d8c00315 	stw	r3,12(sp)
 1010400:	10129a00 	call	10129a0 <__subdf3>
 1010404:	180b883a 	mov	r5,r3
 1010408:	a00d883a 	mov	r6,r20
 101040c:	a80f883a 	mov	r7,r21
 1010410:	1009883a 	mov	r4,r2
 1010414:	1012a940 	call	1012a94 <__muldf3>
 1010418:	180b883a 	mov	r5,r3
 101041c:	1009883a 	mov	r4,r2
 1010420:	1823883a 	mov	r17,r3
 1010424:	1021883a 	mov	r16,r2
 1010428:	10133c80 	call	10133c8 <__fixdfsi>
 101042c:	1009883a 	mov	r4,r2
 1010430:	10132d00 	call	10132d0 <__floatsidf>
 1010434:	880b883a 	mov	r5,r17
 1010438:	8009883a 	mov	r4,r16
 101043c:	180f883a 	mov	r7,r3
 1010440:	100d883a 	mov	r6,r2
 1010444:	d8800415 	stw	r2,16(sp)
 1010448:	d8c00515 	stw	r3,20(sp)
 101044c:	10129a00 	call	10129a0 <__subdf3>
 1010450:	180b883a 	mov	r5,r3
 1010454:	000d883a 	mov	r6,zero
 1010458:	a80f883a 	mov	r7,r21
 101045c:	1009883a 	mov	r4,r2
 1010460:	1012a940 	call	1012a94 <__muldf3>
 1010464:	d8c00715 	stw	r3,28(sp)
 1010468:	d8800615 	stw	r2,24(sp)
 101046c:	00000106 	br	1010474 <__ieee754_rem_pio2+0x570>
 1010470:	8025883a 	mov	r18,r16
 1010474:	943fffc4 	addi	r16,r18,-1
 1010478:	800890fa 	slli	r4,r16,3
 101047c:	d9400204 	addi	r5,sp,8
 1010480:	000d883a 	mov	r6,zero
 1010484:	2149883a 	add	r4,r4,r5
 1010488:	20c00117 	ldw	r3,4(r4)
 101048c:	20800017 	ldw	r2,0(r4)
 1010490:	000f883a 	mov	r7,zero
 1010494:	180b883a 	mov	r5,r3
 1010498:	1009883a 	mov	r4,r2
 101049c:	10130b00 	call	10130b0 <__eqdf2>
 10104a0:	103ff326 	beq	r2,zero,1010470 <__ieee754_rem_pio2+0x56c>
 10104a4:	00800084 	movi	r2,2
 10104a8:	00c040f4 	movhi	r3,259
 10104ac:	18d2ed04 	addi	r3,r3,19380
 10104b0:	b80d883a 	mov	r6,r23
 10104b4:	900f883a 	mov	r7,r18
 10104b8:	d9000204 	addi	r4,sp,8
 10104bc:	e00b883a 	mov	r5,fp
 10104c0:	d8800015 	stw	r2,0(sp)
 10104c4:	d8c00115 	stw	r3,4(sp)
 10104c8:	1010f200 	call	1010f20 <__kernel_rem_pio2>
 10104cc:	d8800b15 	stw	r2,44(sp)
 10104d0:	d8800a17 	ldw	r2,40(sp)
 10104d4:	103ea40e 	bge	r2,zero,100ff68 <__ieee754_rem_pio2+0x64>
 10104d8:	e0800117 	ldw	r2,4(fp)
 10104dc:	d8c00b17 	ldw	r3,44(sp)
 10104e0:	e1000204 	addi	r4,fp,8
 10104e4:	10a0003c 	xorhi	r2,r2,32768
 10104e8:	00c7c83a 	sub	r3,zero,r3
 10104ec:	e0800115 	stw	r2,4(fp)
 10104f0:	d8c00b15 	stw	r3,44(sp)
 10104f4:	20c00117 	ldw	r3,4(r4)
 10104f8:	18e0003c 	xorhi	r3,r3,32768
 10104fc:	20c00115 	stw	r3,4(r4)
 1010500:	003e9906 	br	100ff68 <__ieee754_rem_pio2+0x64>
 1010504:	00869834 	movhi	r2,6752
 1010508:	00cf7474 	movhi	r3,15825
 101050c:	18ed1844 	addi	r3,r3,-19359
 1010510:	9009883a 	mov	r4,r18
 1010514:	980b883a 	mov	r5,r19
 1010518:	180f883a 	mov	r7,r3
 101051c:	100d883a 	mov	r6,r2
 1010520:	10129a00 	call	10129a0 <__subdf3>
 1010524:	048b80f4 	movhi	r18,11779
 1010528:	949c1cc4 	addi	r18,r18,28787
 101052c:	04cee8f4 	movhi	r19,15267
 1010530:	9cc66284 	addi	r19,r19,6538
 1010534:	1009883a 	mov	r4,r2
 1010538:	180b883a 	mov	r5,r3
 101053c:	900d883a 	mov	r6,r18
 1010540:	980f883a 	mov	r7,r19
 1010544:	1021883a 	mov	r16,r2
 1010548:	1823883a 	mov	r17,r3
 101054c:	10129a00 	call	10129a0 <__subdf3>
 1010550:	100d883a 	mov	r6,r2
 1010554:	8009883a 	mov	r4,r16
 1010558:	880b883a 	mov	r5,r17
 101055c:	180f883a 	mov	r7,r3
 1010560:	e0800015 	stw	r2,0(fp)
 1010564:	e0c00115 	stw	r3,4(fp)
 1010568:	10129a00 	call	10129a0 <__subdf3>
 101056c:	180b883a 	mov	r5,r3
 1010570:	1009883a 	mov	r4,r2
 1010574:	900d883a 	mov	r6,r18
 1010578:	980f883a 	mov	r7,r19
 101057c:	10129a00 	call	10129a0 <__subdf3>
 1010580:	180b883a 	mov	r5,r3
 1010584:	1009883a 	mov	r4,r2
 1010588:	00c00044 	movi	r3,1
 101058c:	d8c00b15 	stw	r3,44(sp)
 1010590:	e1400315 	stw	r5,12(fp)
 1010594:	e1000215 	stw	r4,8(fp)
 1010598:	003e7306 	br	100ff68 <__ieee754_rem_pio2+0x64>
 101059c:	2105883a 	add	r2,r4,r4
 10105a0:	1085883a 	add	r2,r2,r2
 10105a4:	00c040f4 	movhi	r3,259
 10105a8:	18d2cd04 	addi	r3,r3,19252
 10105ac:	10c5883a 	add	r2,r2,r3
 10105b0:	113fff17 	ldw	r4,-4(r2)
 10105b4:	b13eef26 	beq	r22,r4,1010174 <__ieee754_rem_pio2+0x270>
 10105b8:	980b883a 	mov	r5,r19
 10105bc:	400f883a 	mov	r7,r8
 10105c0:	9009883a 	mov	r4,r18
 10105c4:	800d883a 	mov	r6,r16
 10105c8:	10129a00 	call	10129a0 <__subdf3>
 10105cc:	e0c00115 	stw	r3,4(fp)
 10105d0:	e0800015 	stw	r2,0(fp)
 10105d4:	003f3a06 	br	10102c0 <__ieee754_rem_pio2+0x3bc>
 10105d8:	00869834 	movhi	r2,6752
 10105dc:	00cf7474 	movhi	r3,15825
 10105e0:	18ed1844 	addi	r3,r3,-19359
 10105e4:	9009883a 	mov	r4,r18
 10105e8:	980b883a 	mov	r5,r19
 10105ec:	180f883a 	mov	r7,r3
 10105f0:	100d883a 	mov	r6,r2
 10105f4:	1012a200 	call	1012a20 <__adddf3>
 10105f8:	048b80f4 	movhi	r18,11779
 10105fc:	949c1cc4 	addi	r18,r18,28787
 1010600:	04cee8f4 	movhi	r19,15267
 1010604:	9cc66284 	addi	r19,r19,6538
 1010608:	1009883a 	mov	r4,r2
 101060c:	180b883a 	mov	r5,r3
 1010610:	900d883a 	mov	r6,r18
 1010614:	980f883a 	mov	r7,r19
 1010618:	1021883a 	mov	r16,r2
 101061c:	1823883a 	mov	r17,r3
 1010620:	1012a200 	call	1012a20 <__adddf3>
 1010624:	100d883a 	mov	r6,r2
 1010628:	8009883a 	mov	r4,r16
 101062c:	880b883a 	mov	r5,r17
 1010630:	180f883a 	mov	r7,r3
 1010634:	e0800015 	stw	r2,0(fp)
 1010638:	e0c00115 	stw	r3,4(fp)
 101063c:	10129a00 	call	10129a0 <__subdf3>
 1010640:	180b883a 	mov	r5,r3
 1010644:	1009883a 	mov	r4,r2
 1010648:	900d883a 	mov	r6,r18
 101064c:	980f883a 	mov	r7,r19
 1010650:	1012a200 	call	1012a20 <__adddf3>
 1010654:	180b883a 	mov	r5,r3
 1010658:	1009883a 	mov	r4,r2
 101065c:	00ffffc4 	movi	r3,-1
 1010660:	d8c00b15 	stw	r3,44(sp)
 1010664:	e1400315 	stw	r5,12(fp)
 1010668:	e1000215 	stw	r4,8(fp)
 101066c:	003e3e06 	br	100ff68 <__ieee754_rem_pio2+0x64>
 1010670:	d9000c17 	ldw	r4,48(sp)
 1010674:	d9400d17 	ldw	r5,52(sp)
 1010678:	018b8034 	movhi	r6,11776
 101067c:	b80f883a 	mov	r7,r23
 1010680:	1012a940 	call	1012a94 <__muldf3>
 1010684:	d9000817 	ldw	r4,32(sp)
 1010688:	d9401217 	ldw	r5,72(sp)
 101068c:	100d883a 	mov	r6,r2
 1010690:	180f883a 	mov	r7,r3
 1010694:	1025883a 	mov	r18,r2
 1010698:	1827883a 	mov	r19,r3
 101069c:	10129a00 	call	10129a0 <__subdf3>
 10106a0:	d9400d17 	ldw	r5,52(sp)
 10106a4:	d9000c17 	ldw	r4,48(sp)
 10106a8:	02094834 	movhi	r8,9504
 10106ac:	42127044 	addi	r8,r8,18881
 10106b0:	024e5f34 	movhi	r9,14716
 10106b4:	4a60e684 	addi	r9,r9,-31846
 10106b8:	480f883a 	mov	r7,r9
 10106bc:	400d883a 	mov	r6,r8
 10106c0:	182b883a 	mov	r21,r3
 10106c4:	d8800e15 	stw	r2,56(sp)
 10106c8:	1012a940 	call	1012a94 <__muldf3>
 10106cc:	d9000817 	ldw	r4,32(sp)
 10106d0:	d9401217 	ldw	r5,72(sp)
 10106d4:	d9800e17 	ldw	r6,56(sp)
 10106d8:	a80f883a 	mov	r7,r21
 10106dc:	1021883a 	mov	r16,r2
 10106e0:	1823883a 	mov	r17,r3
 10106e4:	dd400f15 	stw	r21,60(sp)
 10106e8:	10129a00 	call	10129a0 <__subdf3>
 10106ec:	180b883a 	mov	r5,r3
 10106f0:	900d883a 	mov	r6,r18
 10106f4:	980f883a 	mov	r7,r19
 10106f8:	1009883a 	mov	r4,r2
 10106fc:	10129a00 	call	10129a0 <__subdf3>
 1010700:	180f883a 	mov	r7,r3
 1010704:	880b883a 	mov	r5,r17
 1010708:	8009883a 	mov	r4,r16
 101070c:	100d883a 	mov	r6,r2
 1010710:	10129a00 	call	10129a0 <__subdf3>
 1010714:	d9000e17 	ldw	r4,56(sp)
 1010718:	1021883a 	mov	r16,r2
 101071c:	1823883a 	mov	r17,r3
 1010720:	a80b883a 	mov	r5,r21
 1010724:	180f883a 	mov	r7,r3
 1010728:	003fa606 	br	10105c4 <__ieee754_rem_pio2+0x6c0>

0101072c <__ieee754_sqrt>:
 101072c:	defffd04 	addi	sp,sp,-12
 1010730:	dc000015 	stw	r16,0(sp)
 1010734:	009ffc34 	movhi	r2,32752
 1010738:	2021883a 	mov	r16,r4
 101073c:	291ffc2c 	andhi	r4,r5,32752
 1010740:	dc400115 	stw	r17,4(sp)
 1010744:	dfc00215 	stw	ra,8(sp)
 1010748:	2823883a 	mov	r17,r5
 101074c:	280f883a 	mov	r7,r5
 1010750:	2807883a 	mov	r3,r5
 1010754:	8011883a 	mov	r8,r16
 1010758:	20807d26 	beq	r4,r2,1010950 <__ieee754_sqrt+0x224>
 101075c:	01408d0e 	bge	zero,r5,1010994 <__ieee754_sqrt+0x268>
 1010760:	380dd53a 	srai	r6,r7,20
 1010764:	3000131e 	bne	r6,zero,10107b4 <__ieee754_sqrt+0x88>
 1010768:	1800041e 	bne	r3,zero,101077c <__ieee754_sqrt+0x50>
 101076c:	400ed2fa 	srli	r7,r8,11
 1010770:	31bffac4 	addi	r6,r6,-21
 1010774:	4010957a 	slli	r8,r8,21
 1010778:	383ffc26 	beq	r7,zero,101076c <__ieee754_sqrt+0x40>
 101077c:	3880042c 	andhi	r2,r7,16
 1010780:	1000991e 	bne	r2,zero,10109e8 <__ieee754_sqrt+0x2bc>
 1010784:	0009883a 	mov	r4,zero
 1010788:	39cf883a 	add	r7,r7,r7
 101078c:	3880042c 	andhi	r2,r7,16
 1010790:	21000044 	addi	r4,r4,1
 1010794:	103ffc26 	beq	r2,zero,1010788 <__ieee754_sqrt+0x5c>
 1010798:	00800804 	movi	r2,32
 101079c:	1105c83a 	sub	r2,r2,r4
 10107a0:	4086d83a 	srl	r3,r8,r2
 10107a4:	4110983a 	sll	r8,r8,r4
 10107a8:	3105c83a 	sub	r2,r6,r4
 10107ac:	38ceb03a 	or	r7,r7,r3
 10107b0:	11800044 	addi	r6,r2,1
 10107b4:	31bf0044 	addi	r6,r6,-1023
 10107b8:	30c0004c 	andi	r3,r6,1
 10107bc:	00800434 	movhi	r2,16
 10107c0:	10bfffc4 	addi	r2,r2,-1
 10107c4:	3884703a 	and	r2,r7,r2
 10107c8:	1807003a 	cmpeq	r3,r3,zero
 10107cc:	11000434 	orhi	r4,r2,16
 10107d0:	18005426 	beq	r3,zero,1010924 <__ieee754_sqrt+0x1f8>
 10107d4:	4004d7fa 	srli	r2,r8,31
 10107d8:	4207883a 	add	r3,r8,r8
 10107dc:	02800834 	movhi	r10,32
 10107e0:	1105883a 	add	r2,r2,r4
 10107e4:	2089883a 	add	r4,r4,r2
 10107e8:	0011883a 	mov	r8,zero
 10107ec:	000b883a 	mov	r5,zero
 10107f0:	0013883a 	mov	r9,zero
 10107f4:	02c00584 	movi	r11,22
 10107f8:	520f883a 	add	r7,r10,r8
 10107fc:	1804d7fa 	srli	r2,r3,31
 1010800:	4a400044 	addi	r9,r9,1
 1010804:	18c7883a 	add	r3,r3,r3
 1010808:	21c00316 	blt	r4,r7,1010818 <__ieee754_sqrt+0xec>
 101080c:	21c9c83a 	sub	r4,r4,r7
 1010810:	2a8b883a 	add	r5,r5,r10
 1010814:	51d1883a 	add	r8,r10,r7
 1010818:	1105883a 	add	r2,r2,r4
 101081c:	5014d07a 	srli	r10,r10,1
 1010820:	2089883a 	add	r4,r4,r2
 1010824:	4afff41e 	bne	r9,r11,10107f8 <__ieee754_sqrt+0xcc>
 1010828:	02600034 	movhi	r9,32768
 101082c:	0017883a 	mov	r11,zero
 1010830:	0019883a 	mov	r12,zero
 1010834:	0015883a 	mov	r10,zero
 1010838:	4821883a 	mov	r16,r9
 101083c:	03c00804 	movi	r15,32
 1010840:	00000806 	br	1010864 <__ieee754_sqrt+0x138>
 1010844:	22003426 	beq	r4,r8,1010918 <__ieee754_sqrt+0x1ec>
 1010848:	1804d7fa 	srli	r2,r3,31
 101084c:	52800044 	addi	r10,r10,1
 1010850:	18c7883a 	add	r3,r3,r3
 1010854:	1105883a 	add	r2,r2,r4
 1010858:	2089883a 	add	r4,r4,r2
 101085c:	4812d07a 	srli	r9,r9,1
 1010860:	53c01326 	beq	r10,r15,10108b0 <__ieee754_sqrt+0x184>
 1010864:	4acf883a 	add	r7,r9,r11
 1010868:	413ff60e 	bge	r8,r4,1010844 <__ieee754_sqrt+0x118>
 101086c:	38a0002c 	andhi	r2,r7,32768
 1010870:	3a57883a 	add	r11,r7,r9
 1010874:	14002426 	beq	r2,r16,1010908 <__ieee754_sqrt+0x1dc>
 1010878:	4005883a 	mov	r2,r8
 101087c:	2209c83a 	sub	r4,r4,r8
 1010880:	19c0012e 	bgeu	r3,r7,1010888 <__ieee754_sqrt+0x15c>
 1010884:	213fffc4 	addi	r4,r4,-1
 1010888:	19c7c83a 	sub	r3,r3,r7
 101088c:	1011883a 	mov	r8,r2
 1010890:	1804d7fa 	srli	r2,r3,31
 1010894:	52800044 	addi	r10,r10,1
 1010898:	6259883a 	add	r12,r12,r9
 101089c:	1105883a 	add	r2,r2,r4
 10108a0:	18c7883a 	add	r3,r3,r3
 10108a4:	2089883a 	add	r4,r4,r2
 10108a8:	4812d07a 	srli	r9,r9,1
 10108ac:	53ffed1e 	bne	r10,r15,1010864 <__ieee754_sqrt+0x138>
 10108b0:	20c4b03a 	or	r2,r4,r3
 10108b4:	1000201e 	bne	r2,zero,1010938 <__ieee754_sqrt+0x20c>
 10108b8:	600ed07a 	srli	r7,r12,1
 10108bc:	2880004c 	andi	r2,r5,1
 10108c0:	1005003a 	cmpeq	r2,r2,zero
 10108c4:	1000011e 	bne	r2,zero,10108cc <__ieee754_sqrt+0x1a0>
 10108c8:	39e00034 	orhi	r7,r7,32768
 10108cc:	300dd07a 	srai	r6,r6,1
 10108d0:	280bd07a 	srai	r5,r5,1
 10108d4:	010ff834 	movhi	r4,16352
 10108d8:	300c953a 	slli	r6,r6,20
 10108dc:	290b883a 	add	r5,r5,r4
 10108e0:	3821883a 	mov	r16,r7
 10108e4:	299d883a 	add	r14,r5,r6
 10108e8:	7023883a 	mov	r17,r14
 10108ec:	8005883a 	mov	r2,r16
 10108f0:	8807883a 	mov	r3,r17
 10108f4:	dfc00217 	ldw	ra,8(sp)
 10108f8:	dc400117 	ldw	r17,4(sp)
 10108fc:	dc000017 	ldw	r16,0(sp)
 1010900:	dec00304 	addi	sp,sp,12
 1010904:	f800283a 	ret
 1010908:	5884703a 	and	r2,r11,r2
 101090c:	103fda1e 	bne	r2,zero,1010878 <__ieee754_sqrt+0x14c>
 1010910:	40800044 	addi	r2,r8,1
 1010914:	003fd906 	br	101087c <__ieee754_sqrt+0x150>
 1010918:	19ffd42e 	bgeu	r3,r7,101086c <__ieee754_sqrt+0x140>
 101091c:	2011883a 	mov	r8,r4
 1010920:	003fc906 	br	1010848 <__ieee754_sqrt+0x11c>
 1010924:	4004d7fa 	srli	r2,r8,31
 1010928:	4211883a 	add	r8,r8,r8
 101092c:	1105883a 	add	r2,r2,r4
 1010930:	2089883a 	add	r4,r4,r2
 1010934:	003fa706 	br	10107d4 <__ieee754_sqrt+0xa8>
 1010938:	00bfffc4 	movi	r2,-1
 101093c:	60802726 	beq	r12,r2,10109dc <__ieee754_sqrt+0x2b0>
 1010940:	6080004c 	andi	r2,r12,1
 1010944:	6085883a 	add	r2,r12,r2
 1010948:	100ed07a 	srli	r7,r2,1
 101094c:	003fdb06 	br	10108bc <__ieee754_sqrt+0x190>
 1010950:	8009883a 	mov	r4,r16
 1010954:	800d883a 	mov	r6,r16
 1010958:	1012a940 	call	1012a94 <__muldf3>
 101095c:	180f883a 	mov	r7,r3
 1010960:	880b883a 	mov	r5,r17
 1010964:	8009883a 	mov	r4,r16
 1010968:	100d883a 	mov	r6,r2
 101096c:	1012a200 	call	1012a20 <__adddf3>
 1010970:	1021883a 	mov	r16,r2
 1010974:	1823883a 	mov	r17,r3
 1010978:	8005883a 	mov	r2,r16
 101097c:	8807883a 	mov	r3,r17
 1010980:	dfc00217 	ldw	ra,8(sp)
 1010984:	dc400117 	ldw	r17,4(sp)
 1010988:	dc000017 	ldw	r16,0(sp)
 101098c:	dec00304 	addi	sp,sp,12
 1010990:	f800283a 	ret
 1010994:	00a00034 	movhi	r2,32768
 1010998:	10bfffc4 	addi	r2,r2,-1
 101099c:	2884703a 	and	r2,r5,r2
 10109a0:	8084b03a 	or	r2,r16,r2
 10109a4:	103fd126 	beq	r2,zero,10108ec <__ieee754_sqrt+0x1c0>
 10109a8:	283f6d26 	beq	r5,zero,1010760 <__ieee754_sqrt+0x34>
 10109ac:	280f883a 	mov	r7,r5
 10109b0:	8009883a 	mov	r4,r16
 10109b4:	800d883a 	mov	r6,r16
 10109b8:	10129a00 	call	10129a0 <__subdf3>
 10109bc:	1009883a 	mov	r4,r2
 10109c0:	180b883a 	mov	r5,r3
 10109c4:	100d883a 	mov	r6,r2
 10109c8:	180f883a 	mov	r7,r3
 10109cc:	1012e580 	call	1012e58 <__divdf3>
 10109d0:	1021883a 	mov	r16,r2
 10109d4:	1823883a 	mov	r17,r3
 10109d8:	003fc406 	br	10108ec <__ieee754_sqrt+0x1c0>
 10109dc:	29400044 	addi	r5,r5,1
 10109e0:	000f883a 	mov	r7,zero
 10109e4:	003fb506 	br	10108bc <__ieee754_sqrt+0x190>
 10109e8:	0009883a 	mov	r4,zero
 10109ec:	00800804 	movi	r2,32
 10109f0:	003f6b06 	br	10107a0 <__ieee754_sqrt+0x74>

010109f4 <__kernel_cos>:
 10109f4:	defff104 	addi	sp,sp,-60
 10109f8:	00a00034 	movhi	r2,32768
 10109fc:	10bfffc4 	addi	r2,r2,-1
 1010a00:	dd800c15 	stw	r22,48(sp)
 1010a04:	116c703a 	and	r22,r2,r5
 1010a08:	0005883a 	mov	r2,zero
 1010a0c:	dd000a15 	stw	r20,40(sp)
 1010a10:	d8800215 	stw	r2,8(sp)
 1010a14:	2029883a 	mov	r20,r4
 1010a18:	008f9034 	movhi	r2,15936
 1010a1c:	10bfffc4 	addi	r2,r2,-1
 1010a20:	0009883a 	mov	r4,zero
 1010a24:	dd400b15 	stw	r21,44(sp)
 1010a28:	dfc00e15 	stw	ra,56(sp)
 1010a2c:	ddc00d15 	stw	r23,52(sp)
 1010a30:	dcc00915 	stw	r19,36(sp)
 1010a34:	dc800815 	stw	r18,32(sp)
 1010a38:	dc400715 	stw	r17,28(sp)
 1010a3c:	dc000615 	stw	r16,24(sp)
 1010a40:	282b883a 	mov	r21,r5
 1010a44:	d9800415 	stw	r6,16(sp)
 1010a48:	d9c00515 	stw	r7,20(sp)
 1010a4c:	d9000315 	stw	r4,12(sp)
 1010a50:	15809216 	blt	r2,r22,1010c9c <__kernel_cos+0x2a8>
 1010a54:	a009883a 	mov	r4,r20
 1010a58:	10133c80 	call	10133c8 <__fixdfsi>
 1010a5c:	10011c26 	beq	r2,zero,1010ed0 <__kernel_cos+0x4dc>
 1010a60:	a009883a 	mov	r4,r20
 1010a64:	a80b883a 	mov	r5,r21
 1010a68:	a00d883a 	mov	r6,r20
 1010a6c:	a80f883a 	mov	r7,r21
 1010a70:	1012a940 	call	1012a94 <__muldf3>
 1010a74:	1021883a 	mov	r16,r2
 1010a78:	1823883a 	mov	r17,r3
 1010a7c:	1025883a 	mov	r18,r2
 1010a80:	1827883a 	mov	r19,r3
 1010a84:	00afa234 	movhi	r2,48776
 1010a88:	108e3504 	addi	r2,r2,14548
 1010a8c:	00ef6a74 	movhi	r3,48553
 1010a90:	18feba44 	addi	r3,r3,-1303
 1010a94:	8009883a 	mov	r4,r16
 1010a98:	880b883a 	mov	r5,r17
 1010a9c:	180f883a 	mov	r7,r3
 1010aa0:	100d883a 	mov	r6,r2
 1010aa4:	1012a940 	call	1012a94 <__muldf3>
 1010aa8:	022f6d74 	movhi	r8,48565
 1010aac:	422c7104 	addi	r8,r8,-20028
 1010ab0:	024f88b4 	movhi	r9,15906
 1010ab4:	4a7ba784 	addi	r9,r9,-4450
 1010ab8:	480f883a 	mov	r7,r9
 1010abc:	400d883a 	mov	r6,r8
 1010ac0:	180b883a 	mov	r5,r3
 1010ac4:	1009883a 	mov	r4,r2
 1010ac8:	1012a200 	call	1012a20 <__adddf3>
 1010acc:	180f883a 	mov	r7,r3
 1010ad0:	8009883a 	mov	r4,r16
 1010ad4:	880b883a 	mov	r5,r17
 1010ad8:	100d883a 	mov	r6,r2
 1010adc:	1012a940 	call	1012a94 <__muldf3>
 1010ae0:	02202734 	movhi	r8,32924
 1010ae4:	4214ab44 	addi	r8,r8,21165
 1010ae8:	024fa4b4 	movhi	r9,16018
 1010aec:	4a5f93c4 	addi	r9,r9,32335
 1010af0:	480f883a 	mov	r7,r9
 1010af4:	400d883a 	mov	r6,r8
 1010af8:	180b883a 	mov	r5,r3
 1010afc:	1009883a 	mov	r4,r2
 1010b00:	10129a00 	call	10129a0 <__subdf3>
 1010b04:	180f883a 	mov	r7,r3
 1010b08:	8009883a 	mov	r4,r16
 1010b0c:	880b883a 	mov	r5,r17
 1010b10:	100d883a 	mov	r6,r2
 1010b14:	1012a940 	call	1012a94 <__muldf3>
 1010b18:	020672f4 	movhi	r8,6603
 1010b1c:	42056404 	addi	r8,r8,5520
 1010b20:	024fbeb4 	movhi	r9,16122
 1010b24:	4a406804 	addi	r9,r9,416
 1010b28:	480f883a 	mov	r7,r9
 1010b2c:	400d883a 	mov	r6,r8
 1010b30:	180b883a 	mov	r5,r3
 1010b34:	1009883a 	mov	r4,r2
 1010b38:	1012a200 	call	1012a20 <__adddf3>
 1010b3c:	180f883a 	mov	r7,r3
 1010b40:	8009883a 	mov	r4,r16
 1010b44:	880b883a 	mov	r5,r17
 1010b48:	100d883a 	mov	r6,r2
 1010b4c:	1012a940 	call	1012a94 <__muldf3>
 1010b50:	0205b074 	movhi	r8,5825
 1010b54:	42145dc4 	addi	r8,r8,20855
 1010b58:	024fd5f4 	movhi	r9,16215
 1010b5c:	4a705b04 	addi	r9,r9,-16020
 1010b60:	480f883a 	mov	r7,r9
 1010b64:	400d883a 	mov	r6,r8
 1010b68:	180b883a 	mov	r5,r3
 1010b6c:	1009883a 	mov	r4,r2
 1010b70:	10129a00 	call	10129a0 <__subdf3>
 1010b74:	180f883a 	mov	r7,r3
 1010b78:	8009883a 	mov	r4,r16
 1010b7c:	880b883a 	mov	r5,r17
 1010b80:	100d883a 	mov	r6,r2
 1010b84:	1012a940 	call	1012a94 <__muldf3>
 1010b88:	02155574 	movhi	r8,21845
 1010b8c:	42155304 	addi	r8,r8,21836
 1010b90:	024fe974 	movhi	r9,16293
 1010b94:	4a555544 	addi	r9,r9,21845
 1010b98:	480f883a 	mov	r7,r9
 1010b9c:	400d883a 	mov	r6,r8
 1010ba0:	180b883a 	mov	r5,r3
 1010ba4:	1009883a 	mov	r4,r2
 1010ba8:	1012a200 	call	1012a20 <__adddf3>
 1010bac:	180f883a 	mov	r7,r3
 1010bb0:	880b883a 	mov	r5,r17
 1010bb4:	8009883a 	mov	r4,r16
 1010bb8:	100d883a 	mov	r6,r2
 1010bbc:	1012a940 	call	1012a94 <__muldf3>
 1010bc0:	1021883a 	mov	r16,r2
 1010bc4:	1823883a 	mov	r17,r3
 1010bc8:	0005883a 	mov	r2,zero
 1010bcc:	00cff834 	movhi	r3,16352
 1010bd0:	9009883a 	mov	r4,r18
 1010bd4:	980b883a 	mov	r5,r19
 1010bd8:	180f883a 	mov	r7,r3
 1010bdc:	100d883a 	mov	r6,r2
 1010be0:	1012a940 	call	1012a94 <__muldf3>
 1010be4:	980b883a 	mov	r5,r19
 1010be8:	880f883a 	mov	r7,r17
 1010bec:	9009883a 	mov	r4,r18
 1010bf0:	800d883a 	mov	r6,r16
 1010bf4:	1025883a 	mov	r18,r2
 1010bf8:	1827883a 	mov	r19,r3
 1010bfc:	1012a940 	call	1012a94 <__muldf3>
 1010c00:	d9c00517 	ldw	r7,20(sp)
 1010c04:	d9800417 	ldw	r6,16(sp)
 1010c08:	a80b883a 	mov	r5,r21
 1010c0c:	a009883a 	mov	r4,r20
 1010c10:	1021883a 	mov	r16,r2
 1010c14:	1823883a 	mov	r17,r3
 1010c18:	1012a940 	call	1012a94 <__muldf3>
 1010c1c:	180f883a 	mov	r7,r3
 1010c20:	880b883a 	mov	r5,r17
 1010c24:	8009883a 	mov	r4,r16
 1010c28:	100d883a 	mov	r6,r2
 1010c2c:	10129a00 	call	10129a0 <__subdf3>
 1010c30:	180f883a 	mov	r7,r3
 1010c34:	980b883a 	mov	r5,r19
 1010c38:	9009883a 	mov	r4,r18
 1010c3c:	100d883a 	mov	r6,r2
 1010c40:	10129a00 	call	10129a0 <__subdf3>
 1010c44:	0011883a 	mov	r8,zero
 1010c48:	024ffc34 	movhi	r9,16368
 1010c4c:	480b883a 	mov	r5,r9
 1010c50:	180f883a 	mov	r7,r3
 1010c54:	4009883a 	mov	r4,r8
 1010c58:	100d883a 	mov	r6,r2
 1010c5c:	10129a00 	call	10129a0 <__subdf3>
 1010c60:	100d883a 	mov	r6,r2
 1010c64:	180f883a 	mov	r7,r3
 1010c68:	3005883a 	mov	r2,r6
 1010c6c:	3807883a 	mov	r3,r7
 1010c70:	dfc00e17 	ldw	ra,56(sp)
 1010c74:	ddc00d17 	ldw	r23,52(sp)
 1010c78:	dd800c17 	ldw	r22,48(sp)
 1010c7c:	dd400b17 	ldw	r21,44(sp)
 1010c80:	dd000a17 	ldw	r20,40(sp)
 1010c84:	dcc00917 	ldw	r19,36(sp)
 1010c88:	dc800817 	ldw	r18,32(sp)
 1010c8c:	dc400717 	ldw	r17,28(sp)
 1010c90:	dc000617 	ldw	r16,24(sp)
 1010c94:	dec00f04 	addi	sp,sp,60
 1010c98:	f800283a 	ret
 1010c9c:	280f883a 	mov	r7,r5
 1010ca0:	a009883a 	mov	r4,r20
 1010ca4:	a00d883a 	mov	r6,r20
 1010ca8:	1012a940 	call	1012a94 <__muldf3>
 1010cac:	1021883a 	mov	r16,r2
 1010cb0:	1823883a 	mov	r17,r3
 1010cb4:	1025883a 	mov	r18,r2
 1010cb8:	1827883a 	mov	r19,r3
 1010cbc:	00afa234 	movhi	r2,48776
 1010cc0:	108e3504 	addi	r2,r2,14548
 1010cc4:	00ef6a74 	movhi	r3,48553
 1010cc8:	18feba44 	addi	r3,r3,-1303
 1010ccc:	8009883a 	mov	r4,r16
 1010cd0:	880b883a 	mov	r5,r17
 1010cd4:	180f883a 	mov	r7,r3
 1010cd8:	100d883a 	mov	r6,r2
 1010cdc:	1012a940 	call	1012a94 <__muldf3>
 1010ce0:	022f6d74 	movhi	r8,48565
 1010ce4:	422c7104 	addi	r8,r8,-20028
 1010ce8:	024f88b4 	movhi	r9,15906
 1010cec:	4a7ba784 	addi	r9,r9,-4450
 1010cf0:	480f883a 	mov	r7,r9
 1010cf4:	400d883a 	mov	r6,r8
 1010cf8:	180b883a 	mov	r5,r3
 1010cfc:	1009883a 	mov	r4,r2
 1010d00:	1012a200 	call	1012a20 <__adddf3>
 1010d04:	180f883a 	mov	r7,r3
 1010d08:	8009883a 	mov	r4,r16
 1010d0c:	880b883a 	mov	r5,r17
 1010d10:	100d883a 	mov	r6,r2
 1010d14:	1012a940 	call	1012a94 <__muldf3>
 1010d18:	02202734 	movhi	r8,32924
 1010d1c:	4214ab44 	addi	r8,r8,21165
 1010d20:	024fa4b4 	movhi	r9,16018
 1010d24:	4a5f93c4 	addi	r9,r9,32335
 1010d28:	480f883a 	mov	r7,r9
 1010d2c:	400d883a 	mov	r6,r8
 1010d30:	180b883a 	mov	r5,r3
 1010d34:	1009883a 	mov	r4,r2
 1010d38:	10129a00 	call	10129a0 <__subdf3>
 1010d3c:	180f883a 	mov	r7,r3
 1010d40:	8009883a 	mov	r4,r16
 1010d44:	880b883a 	mov	r5,r17
 1010d48:	100d883a 	mov	r6,r2
 1010d4c:	1012a940 	call	1012a94 <__muldf3>
 1010d50:	020672f4 	movhi	r8,6603
 1010d54:	42056404 	addi	r8,r8,5520
 1010d58:	024fbeb4 	movhi	r9,16122
 1010d5c:	4a406804 	addi	r9,r9,416
 1010d60:	480f883a 	mov	r7,r9
 1010d64:	400d883a 	mov	r6,r8
 1010d68:	180b883a 	mov	r5,r3
 1010d6c:	1009883a 	mov	r4,r2
 1010d70:	1012a200 	call	1012a20 <__adddf3>
 1010d74:	180f883a 	mov	r7,r3
 1010d78:	8009883a 	mov	r4,r16
 1010d7c:	880b883a 	mov	r5,r17
 1010d80:	100d883a 	mov	r6,r2
 1010d84:	1012a940 	call	1012a94 <__muldf3>
 1010d88:	0205b074 	movhi	r8,5825
 1010d8c:	42145dc4 	addi	r8,r8,20855
 1010d90:	024fd5f4 	movhi	r9,16215
 1010d94:	4a705b04 	addi	r9,r9,-16020
 1010d98:	480f883a 	mov	r7,r9
 1010d9c:	400d883a 	mov	r6,r8
 1010da0:	180b883a 	mov	r5,r3
 1010da4:	1009883a 	mov	r4,r2
 1010da8:	10129a00 	call	10129a0 <__subdf3>
 1010dac:	180f883a 	mov	r7,r3
 1010db0:	8009883a 	mov	r4,r16
 1010db4:	880b883a 	mov	r5,r17
 1010db8:	100d883a 	mov	r6,r2
 1010dbc:	1012a940 	call	1012a94 <__muldf3>
 1010dc0:	02155574 	movhi	r8,21845
 1010dc4:	42155304 	addi	r8,r8,21836
 1010dc8:	024fe974 	movhi	r9,16293
 1010dcc:	4a555544 	addi	r9,r9,21845
 1010dd0:	480f883a 	mov	r7,r9
 1010dd4:	400d883a 	mov	r6,r8
 1010dd8:	180b883a 	mov	r5,r3
 1010ddc:	1009883a 	mov	r4,r2
 1010de0:	1012a200 	call	1012a20 <__adddf3>
 1010de4:	180f883a 	mov	r7,r3
 1010de8:	880b883a 	mov	r5,r17
 1010dec:	8009883a 	mov	r4,r16
 1010df0:	100d883a 	mov	r6,r2
 1010df4:	1012a940 	call	1012a94 <__muldf3>
 1010df8:	1021883a 	mov	r16,r2
 1010dfc:	008ff4f4 	movhi	r2,16339
 1010e00:	108ccc84 	addi	r2,r2,13106
 1010e04:	1823883a 	mov	r17,r3
 1010e08:	15bf6f0e 	bge	r2,r22,1010bc8 <__kernel_cos+0x1d4>
 1010e0c:	008ffa74 	movhi	r2,16361
 1010e10:	1580320e 	bge	r2,r22,1010edc <__kernel_cos+0x4e8>
 1010e14:	0005883a 	mov	r2,zero
 1010e18:	010ff9f4 	movhi	r4,16359
 1010e1c:	002d883a 	mov	r22,zero
 1010e20:	d8800015 	stw	r2,0(sp)
 1010e24:	05cff4b4 	movhi	r23,16338
 1010e28:	d9000115 	stw	r4,4(sp)
 1010e2c:	0005883a 	mov	r2,zero
 1010e30:	00cff834 	movhi	r3,16352
 1010e34:	9009883a 	mov	r4,r18
 1010e38:	980b883a 	mov	r5,r19
 1010e3c:	180f883a 	mov	r7,r3
 1010e40:	100d883a 	mov	r6,r2
 1010e44:	1012a940 	call	1012a94 <__muldf3>
 1010e48:	180b883a 	mov	r5,r3
 1010e4c:	b80f883a 	mov	r7,r23
 1010e50:	1009883a 	mov	r4,r2
 1010e54:	b00d883a 	mov	r6,r22
 1010e58:	10129a00 	call	10129a0 <__subdf3>
 1010e5c:	980b883a 	mov	r5,r19
 1010e60:	880f883a 	mov	r7,r17
 1010e64:	9009883a 	mov	r4,r18
 1010e68:	800d883a 	mov	r6,r16
 1010e6c:	1025883a 	mov	r18,r2
 1010e70:	1827883a 	mov	r19,r3
 1010e74:	1012a940 	call	1012a94 <__muldf3>
 1010e78:	d9c00517 	ldw	r7,20(sp)
 1010e7c:	d9800417 	ldw	r6,16(sp)
 1010e80:	a80b883a 	mov	r5,r21
 1010e84:	a009883a 	mov	r4,r20
 1010e88:	1021883a 	mov	r16,r2
 1010e8c:	1823883a 	mov	r17,r3
 1010e90:	1012a940 	call	1012a94 <__muldf3>
 1010e94:	180f883a 	mov	r7,r3
 1010e98:	880b883a 	mov	r5,r17
 1010e9c:	8009883a 	mov	r4,r16
 1010ea0:	100d883a 	mov	r6,r2
 1010ea4:	10129a00 	call	10129a0 <__subdf3>
 1010ea8:	180f883a 	mov	r7,r3
 1010eac:	980b883a 	mov	r5,r19
 1010eb0:	9009883a 	mov	r4,r18
 1010eb4:	100d883a 	mov	r6,r2
 1010eb8:	10129a00 	call	10129a0 <__subdf3>
 1010ebc:	d9400117 	ldw	r5,4(sp)
 1010ec0:	d9000017 	ldw	r4,0(sp)
 1010ec4:	180f883a 	mov	r7,r3
 1010ec8:	100d883a 	mov	r6,r2
 1010ecc:	003f6306 	br	1010c5c <__kernel_cos+0x268>
 1010ed0:	000d883a 	mov	r6,zero
 1010ed4:	01cffc34 	movhi	r7,16368
 1010ed8:	003f6306 	br	1010c68 <__kernel_cos+0x274>
 1010edc:	00bff834 	movhi	r2,65504
 1010ee0:	b0ad883a 	add	r22,r22,r2
 1010ee4:	dd800315 	stw	r22,12(sp)
 1010ee8:	d9000317 	ldw	r4,12(sp)
 1010eec:	0005883a 	mov	r2,zero
 1010ef0:	00cffc34 	movhi	r3,16368
 1010ef4:	002d883a 	mov	r22,zero
 1010ef8:	200f883a 	mov	r7,r4
 1010efc:	202f883a 	mov	r23,r4
 1010f00:	180b883a 	mov	r5,r3
 1010f04:	1009883a 	mov	r4,r2
 1010f08:	b00d883a 	mov	r6,r22
 1010f0c:	d8800215 	stw	r2,8(sp)
 1010f10:	10129a00 	call	10129a0 <__subdf3>
 1010f14:	d8800015 	stw	r2,0(sp)
 1010f18:	d8c00115 	stw	r3,4(sp)
 1010f1c:	003fc306 	br	1010e2c <__kernel_cos+0x438>

01010f20 <__kernel_rem_pio2>:
 1010f20:	deff5304 	addi	sp,sp,-692
 1010f24:	d880ad17 	ldw	r2,692(sp)
 1010f28:	d9009615 	stw	r4,600(sp)
 1010f2c:	d9409715 	stw	r5,604(sp)
 1010f30:	1087883a 	add	r3,r2,r2
 1010f34:	18c7883a 	add	r3,r3,r3
 1010f38:	008040f4 	movhi	r2,259
 1010f3c:	10932f04 	addi	r2,r2,19644
 1010f40:	1887883a 	add	r3,r3,r2
 1010f44:	18c00017 	ldw	r3,0(r3)
 1010f48:	313fff44 	addi	r4,r6,-3
 1010f4c:	01400604 	movi	r5,24
 1010f50:	df00ab15 	stw	fp,684(sp)
 1010f54:	dc00a315 	stw	r16,652(sp)
 1010f58:	d8c09515 	stw	r3,596(sp)
 1010f5c:	dfc0ac15 	stw	ra,688(sp)
 1010f60:	ddc0aa15 	stw	r23,680(sp)
 1010f64:	dd80a915 	stw	r22,676(sp)
 1010f68:	dd40a815 	stw	r21,672(sp)
 1010f6c:	dd00a715 	stw	r20,668(sp)
 1010f70:	dcc0a615 	stw	r19,664(sp)
 1010f74:	dc80a515 	stw	r18,660(sp)
 1010f78:	dc40a415 	stw	r17,656(sp)
 1010f7c:	3021883a 	mov	r16,r6
 1010f80:	d9c09815 	stw	r7,608(sp)
 1010f84:	10135540 	call	1013554 <__divsi3>
 1010f88:	d8c09817 	ldw	r3,608(sp)
 1010f8c:	d8808c15 	stw	r2,560(sp)
 1010f90:	1f3fffc4 	addi	fp,r3,-1
 1010f94:	10031816 	blt	r2,zero,1011bf8 <__kernel_rem_pio2+0xcd8>
 1010f98:	d9008c17 	ldw	r4,560(sp)
 1010f9c:	d9409517 	ldw	r5,596(sp)
 1010fa0:	20bffa24 	muli	r2,r4,-24
 1010fa4:	2f07883a 	add	r3,r5,fp
 1010fa8:	8085883a 	add	r2,r16,r2
 1010fac:	10bffa04 	addi	r2,r2,-24
 1010fb0:	d8809315 	stw	r2,588(sp)
 1010fb4:	18001516 	blt	r3,zero,101100c <__kernel_rem_pio2+0xec>
 1010fb8:	2721c83a 	sub	r16,r4,fp
 1010fbc:	d980ae17 	ldw	r6,696(sp)
 1010fc0:	8405883a 	add	r2,r16,r16
 1010fc4:	1085883a 	add	r2,r2,r2
 1010fc8:	30a3883a 	add	r17,r6,r2
 1010fcc:	80e7883a 	add	r19,r16,r3
 1010fd0:	dc801404 	addi	r18,sp,80
 1010fd4:	00000106 	br	1010fdc <__kernel_rem_pio2+0xbc>
 1010fd8:	84000044 	addi	r16,r16,1
 1010fdc:	0009883a 	mov	r4,zero
 1010fe0:	000b883a 	mov	r5,zero
 1010fe4:	80000416 	blt	r16,zero,1010ff8 <__kernel_rem_pio2+0xd8>
 1010fe8:	89000017 	ldw	r4,0(r17)
 1010fec:	10132d00 	call	10132d0 <__floatsidf>
 1010ff0:	1009883a 	mov	r4,r2
 1010ff4:	180b883a 	mov	r5,r3
 1010ff8:	91400115 	stw	r5,4(r18)
 1010ffc:	91000015 	stw	r4,0(r18)
 1011000:	8c400104 	addi	r17,r17,4
 1011004:	94800204 	addi	r18,r18,8
 1011008:	84fff31e 	bne	r16,r19,1010fd8 <__kernel_rem_pio2+0xb8>
 101100c:	d9c09517 	ldw	r7,596(sp)
 1011010:	38002416 	blt	r7,zero,10110a4 <__kernel_rem_pio2+0x184>
 1011014:	da809817 	ldw	r10,608(sp)
 1011018:	e029883a 	mov	r20,fp
 101101c:	dd406404 	addi	r21,sp,400
 1011020:	3aaf883a 	add	r23,r7,r10
 1011024:	e02c403a 	cmpge	r22,fp,zero
 1011028:	b0023e26 	beq	r22,zero,1011924 <__kernel_rem_pio2+0xa04>
 101102c:	dcc09617 	ldw	r19,600(sp)
 1011030:	0021883a 	mov	r16,zero
 1011034:	0025883a 	mov	r18,zero
 1011038:	0023883a 	mov	r17,zero
 101103c:	a489c83a 	sub	r4,r20,r18
 1011040:	200890fa 	slli	r4,r4,3
 1011044:	99800017 	ldw	r6,0(r19)
 1011048:	99c00117 	ldw	r7,4(r19)
 101104c:	26c9883a 	add	r4,r4,sp
 1011050:	20c01517 	ldw	r3,84(r4)
 1011054:	20801417 	ldw	r2,80(r4)
 1011058:	94800044 	addi	r18,r18,1
 101105c:	180b883a 	mov	r5,r3
 1011060:	1009883a 	mov	r4,r2
 1011064:	1012a940 	call	1012a94 <__muldf3>
 1011068:	180f883a 	mov	r7,r3
 101106c:	880b883a 	mov	r5,r17
 1011070:	8009883a 	mov	r4,r16
 1011074:	100d883a 	mov	r6,r2
 1011078:	1012a200 	call	1012a20 <__adddf3>
 101107c:	1021883a 	mov	r16,r2
 1011080:	d8809817 	ldw	r2,608(sp)
 1011084:	9cc00204 	addi	r19,r19,8
 1011088:	1823883a 	mov	r17,r3
 101108c:	14bfeb1e 	bne	r2,r18,101103c <__kernel_rem_pio2+0x11c>
 1011090:	a5000044 	addi	r20,r20,1
 1011094:	ac400115 	stw	r17,4(r21)
 1011098:	ac000015 	stw	r16,0(r21)
 101109c:	ad400204 	addi	r21,r21,8
 10110a0:	a5ffe11e 	bne	r20,r23,1011028 <__kernel_rem_pio2+0x108>
 10110a4:	d8c09517 	ldw	r3,596(sp)
 10110a8:	d9409317 	ldw	r5,588(sp)
 10110ac:	e038403a 	cmpge	fp,fp,zero
 10110b0:	d8c08d15 	stw	r3,564(sp)
 10110b4:	d9008d17 	ldw	r4,564(sp)
 10110b8:	18c5883a 	add	r2,r3,r3
 10110bc:	10c7883a 	add	r3,r2,r3
 10110c0:	1907883a 	add	r3,r3,r4
 10110c4:	1085883a 	add	r2,r2,r2
 10110c8:	16c5883a 	add	r2,r2,sp
 10110cc:	1ec7883a 	add	r3,r3,sp
 10110d0:	29400050 	cmplti	r5,r5,1
 10110d4:	df00a215 	stw	fp,648(sp)
 10110d8:	d8809915 	stw	r2,612(sp)
 10110dc:	d8c0a115 	stw	r3,644(sp)
 10110e0:	d940a015 	stw	r5,640(sp)
 10110e4:	d9808d17 	ldw	r6,564(sp)
 10110e8:	300490fa 	slli	r2,r6,3
 10110ec:	16c5883a 	add	r2,r2,sp
 10110f0:	15006417 	ldw	r20,400(r2)
 10110f4:	15406517 	ldw	r21,404(r2)
 10110f8:	01802e0e 	bge	zero,r6,10111b4 <__kernel_rem_pio2+0x294>
 10110fc:	102d883a 	mov	r22,r2
 1011100:	302f883a 	mov	r23,r6
 1011104:	d839883a 	mov	fp,sp
 1011108:	0005883a 	mov	r2,zero
 101110c:	00cf9c34 	movhi	r3,15984
 1011110:	180f883a 	mov	r7,r3
 1011114:	100d883a 	mov	r6,r2
 1011118:	a009883a 	mov	r4,r20
 101111c:	a80b883a 	mov	r5,r21
 1011120:	1012a940 	call	1012a94 <__muldf3>
 1011124:	180b883a 	mov	r5,r3
 1011128:	1009883a 	mov	r4,r2
 101112c:	10133c80 	call	10133c8 <__fixdfsi>
 1011130:	1009883a 	mov	r4,r2
 1011134:	10132d00 	call	10132d0 <__floatsidf>
 1011138:	1021883a 	mov	r16,r2
 101113c:	1823883a 	mov	r17,r3
 1011140:	0005883a 	mov	r2,zero
 1011144:	00f05c34 	movhi	r3,49520
 1011148:	180f883a 	mov	r7,r3
 101114c:	8009883a 	mov	r4,r16
 1011150:	880b883a 	mov	r5,r17
 1011154:	100d883a 	mov	r6,r2
 1011158:	1012a940 	call	1012a94 <__muldf3>
 101115c:	180b883a 	mov	r5,r3
 1011160:	a80f883a 	mov	r7,r21
 1011164:	a00d883a 	mov	r6,r20
 1011168:	1009883a 	mov	r4,r2
 101116c:	1012a200 	call	1012a20 <__adddf3>
 1011170:	180b883a 	mov	r5,r3
 1011174:	1009883a 	mov	r4,r2
 1011178:	10133c80 	call	10133c8 <__fixdfsi>
 101117c:	e0800015 	stw	r2,0(fp)
 1011180:	b5bffe04 	addi	r22,r22,-8
 1011184:	b0806417 	ldw	r2,400(r22)
 1011188:	b0c06517 	ldw	r3,404(r22)
 101118c:	8009883a 	mov	r4,r16
 1011190:	880b883a 	mov	r5,r17
 1011194:	180f883a 	mov	r7,r3
 1011198:	100d883a 	mov	r6,r2
 101119c:	1012a200 	call	1012a20 <__adddf3>
 10111a0:	bdffffc4 	addi	r23,r23,-1
 10111a4:	e7000104 	addi	fp,fp,4
 10111a8:	1029883a 	mov	r20,r2
 10111ac:	182b883a 	mov	r21,r3
 10111b0:	b83fd51e 	bne	r23,zero,1011108 <__kernel_rem_pio2+0x1e8>
 10111b4:	d9809317 	ldw	r6,588(sp)
 10111b8:	a80b883a 	mov	r5,r21
 10111bc:	a009883a 	mov	r4,r20
 10111c0:	10123380 	call	1012338 <scalbn>
 10111c4:	0009883a 	mov	r4,zero
 10111c8:	014ff034 	movhi	r5,16320
 10111cc:	280f883a 	mov	r7,r5
 10111d0:	200d883a 	mov	r6,r4
 10111d4:	180b883a 	mov	r5,r3
 10111d8:	1009883a 	mov	r4,r2
 10111dc:	1021883a 	mov	r16,r2
 10111e0:	1823883a 	mov	r17,r3
 10111e4:	1012a940 	call	1012a94 <__muldf3>
 10111e8:	180b883a 	mov	r5,r3
 10111ec:	1009883a 	mov	r4,r2
 10111f0:	10120cc0 	call	10120cc <floor>
 10111f4:	0011883a 	mov	r8,zero
 10111f8:	02700834 	movhi	r9,49184
 10111fc:	480f883a 	mov	r7,r9
 1011200:	400d883a 	mov	r6,r8
 1011204:	180b883a 	mov	r5,r3
 1011208:	1009883a 	mov	r4,r2
 101120c:	1012a940 	call	1012a94 <__muldf3>
 1011210:	180f883a 	mov	r7,r3
 1011214:	100d883a 	mov	r6,r2
 1011218:	880b883a 	mov	r5,r17
 101121c:	8009883a 	mov	r4,r16
 1011220:	1012a200 	call	1012a20 <__adddf3>
 1011224:	180b883a 	mov	r5,r3
 1011228:	1009883a 	mov	r4,r2
 101122c:	1823883a 	mov	r17,r3
 1011230:	1021883a 	mov	r16,r2
 1011234:	10133c80 	call	10133c8 <__fixdfsi>
 1011238:	1009883a 	mov	r4,r2
 101123c:	d8809415 	stw	r2,592(sp)
 1011240:	10132d00 	call	10132d0 <__floatsidf>
 1011244:	880b883a 	mov	r5,r17
 1011248:	8009883a 	mov	r4,r16
 101124c:	180f883a 	mov	r7,r3
 1011250:	100d883a 	mov	r6,r2
 1011254:	10129a00 	call	10129a0 <__subdf3>
 1011258:	d9c0a017 	ldw	r7,640(sp)
 101125c:	180d883a 	mov	r6,r3
 1011260:	1021883a 	mov	r16,r2
 1011264:	1823883a 	mov	r17,r3
 1011268:	38017d1e 	bne	r7,zero,1011860 <__kernel_rem_pio2+0x940>
 101126c:	da808d17 	ldw	r10,564(sp)
 1011270:	d9009317 	ldw	r4,588(sp)
 1011274:	00c00604 	movi	r3,24
 1011278:	50bfffc4 	addi	r2,r10,-1
 101127c:	1085883a 	add	r2,r2,r2
 1011280:	1085883a 	add	r2,r2,r2
 1011284:	16c5883a 	add	r2,r2,sp
 1011288:	11400017 	ldw	r5,0(r2)
 101128c:	1907c83a 	sub	r3,r3,r4
 1011290:	d9c09317 	ldw	r7,588(sp)
 1011294:	28cdd83a 	sra	r6,r5,r3
 1011298:	010005c4 	movi	r4,23
 101129c:	da809417 	ldw	r10,592(sp)
 10112a0:	30c6983a 	sll	r3,r6,r3
 10112a4:	21c9c83a 	sub	r4,r4,r7
 10112a8:	5195883a 	add	r10,r10,r6
 10112ac:	28cbc83a 	sub	r5,r5,r3
 10112b0:	2909d83a 	sra	r4,r5,r4
 10112b4:	da809415 	stw	r10,592(sp)
 10112b8:	11400015 	stw	r5,0(r2)
 10112bc:	d9009215 	stw	r4,584(sp)
 10112c0:	d9409217 	ldw	r5,584(sp)
 10112c4:	0140270e 	bge	zero,r5,1011364 <__kernel_rem_pio2+0x444>
 10112c8:	d9809417 	ldw	r6,592(sp)
 10112cc:	d9c08d17 	ldw	r7,564(sp)
 10112d0:	31800044 	addi	r6,r6,1
 10112d4:	d9809415 	stw	r6,592(sp)
 10112d8:	01c1a50e 	bge	zero,r7,1011970 <__kernel_rem_pio2+0xa50>
 10112dc:	002d883a 	mov	r22,zero
 10112e0:	000b883a 	mov	r5,zero
 10112e4:	d809883a 	mov	r4,sp
 10112e8:	01c04034 	movhi	r7,256
 10112ec:	01804034 	movhi	r6,256
 10112f0:	31bfffc4 	addi	r6,r6,-1
 10112f4:	00000806 	br	1011318 <__kernel_rem_pio2+0x3f8>
 10112f8:	38c5c83a 	sub	r2,r7,r3
 10112fc:	18000226 	beq	r3,zero,1011308 <__kernel_rem_pio2+0x3e8>
 1011300:	05800044 	movi	r22,1
 1011304:	20800015 	stw	r2,0(r4)
 1011308:	da808d17 	ldw	r10,564(sp)
 101130c:	29400044 	addi	r5,r5,1
 1011310:	21000104 	addi	r4,r4,4
 1011314:	51400926 	beq	r10,r5,101133c <__kernel_rem_pio2+0x41c>
 1011318:	b004c03a 	cmpne	r2,r22,zero
 101131c:	20c00017 	ldw	r3,0(r4)
 1011320:	103ff526 	beq	r2,zero,10112f8 <__kernel_rem_pio2+0x3d8>
 1011324:	da808d17 	ldw	r10,564(sp)
 1011328:	30c5c83a 	sub	r2,r6,r3
 101132c:	29400044 	addi	r5,r5,1
 1011330:	20800015 	stw	r2,0(r4)
 1011334:	21000104 	addi	r4,r4,4
 1011338:	517ff71e 	bne	r10,r5,1011318 <__kernel_rem_pio2+0x3f8>
 101133c:	d880a017 	ldw	r2,640(sp)
 1011340:	1000051e 	bne	r2,zero,1011358 <__kernel_rem_pio2+0x438>
 1011344:	d8c09317 	ldw	r3,588(sp)
 1011348:	00800044 	movi	r2,1
 101134c:	18814e26 	beq	r3,r2,1011888 <__kernel_rem_pio2+0x968>
 1011350:	00800084 	movi	r2,2
 1011354:	18815826 	beq	r3,r2,10118b8 <__kernel_rem_pio2+0x998>
 1011358:	d9c09217 	ldw	r7,584(sp)
 101135c:	00800084 	movi	r2,2
 1011360:	38806926 	beq	r7,r2,1011508 <__kernel_rem_pio2+0x5e8>
 1011364:	000d883a 	mov	r6,zero
 1011368:	000f883a 	mov	r7,zero
 101136c:	8009883a 	mov	r4,r16
 1011370:	880b883a 	mov	r5,r17
 1011374:	10130b00 	call	10130b0 <__eqdf2>
 1011378:	1000811e 	bne	r2,zero,1011580 <__kernel_rem_pio2+0x660>
 101137c:	da808d17 	ldw	r10,564(sp)
 1011380:	d8809517 	ldw	r2,596(sp)
 1011384:	51bfffc4 	addi	r6,r10,-1
 1011388:	30800c16 	blt	r6,r2,10113bc <__kernel_rem_pio2+0x49c>
 101138c:	3185883a 	add	r2,r6,r6
 1011390:	1085883a 	add	r2,r2,r2
 1011394:	16c9883a 	add	r4,r2,sp
 1011398:	3007883a 	mov	r3,r6
 101139c:	000b883a 	mov	r5,zero
 10113a0:	20800017 	ldw	r2,0(r4)
 10113a4:	d9c09517 	ldw	r7,596(sp)
 10113a8:	18ffffc4 	addi	r3,r3,-1
 10113ac:	213fff04 	addi	r4,r4,-4
 10113b0:	288ab03a 	or	r5,r5,r2
 10113b4:	19fffa0e 	bge	r3,r7,10113a0 <__kernel_rem_pio2+0x480>
 10113b8:	2800791e 	bne	r5,zero,10115a0 <__kernel_rem_pio2+0x680>
 10113bc:	da809917 	ldw	r10,612(sp)
 10113c0:	50bfff17 	ldw	r2,-4(r10)
 10113c4:	1001511e 	bne	r2,zero,101190c <__kernel_rem_pio2+0x9ec>
 10113c8:	d880a117 	ldw	r2,644(sp)
 10113cc:	01000044 	movi	r4,1
 10113d0:	10ffff04 	addi	r3,r2,-4
 10113d4:	18ffff04 	addi	r3,r3,-4
 10113d8:	18800017 	ldw	r2,0(r3)
 10113dc:	21000044 	addi	r4,r4,1
 10113e0:	103ffc26 	beq	r2,zero,10113d4 <__kernel_rem_pio2+0x4b4>
 10113e4:	d8c08d17 	ldw	r3,564(sp)
 10113e8:	192f883a 	add	r23,r3,r4
 10113ec:	1f000044 	addi	fp,r3,1
 10113f0:	bf00020e 	bge	r23,fp,10113fc <__kernel_rem_pio2+0x4dc>
 10113f4:	ddc08d15 	stw	r23,564(sp)
 10113f8:	003f3a06 	br	10110e4 <__kernel_rem_pio2+0x1c4>
 10113fc:	d9408c17 	ldw	r5,560(sp)
 1011400:	d9009817 	ldw	r4,608(sp)
 1011404:	da80ae17 	ldw	r10,696(sp)
 1011408:	1945883a 	add	r2,r3,r5
 101140c:	190f883a 	add	r7,r3,r4
 1011410:	1085883a 	add	r2,r2,r2
 1011414:	380a90fa 	slli	r5,r7,3
 1011418:	e00c90fa 	slli	r6,fp,3
 101141c:	1085883a 	add	r2,r2,r2
 1011420:	5085883a 	add	r2,r10,r2
 1011424:	d8c01404 	addi	r3,sp,80
 1011428:	d9006404 	addi	r4,sp,400
 101142c:	10800104 	addi	r2,r2,4
 1011430:	196b883a 	add	r21,r3,r5
 1011434:	21a1883a 	add	r16,r4,r6
 1011438:	d8809115 	stw	r2,580(sp)
 101143c:	d9c09015 	stw	r7,576(sp)
 1011440:	d8809117 	ldw	r2,580(sp)
 1011444:	11000017 	ldw	r4,0(r2)
 1011448:	10132d00 	call	10132d0 <__floatsidf>
 101144c:	a8c00115 	stw	r3,4(r21)
 1011450:	d8c0a217 	ldw	r3,648(sp)
 1011454:	a8800015 	stw	r2,0(r21)
 1011458:	18002826 	beq	r3,zero,10114fc <__kernel_rem_pio2+0x5dc>
 101145c:	d9009017 	ldw	r4,576(sp)
 1011460:	dd009617 	ldw	r20,600(sp)
 1011464:	0023883a 	mov	r17,zero
 1011468:	200490fa 	slli	r2,r4,3
 101146c:	002d883a 	mov	r22,zero
 1011470:	0025883a 	mov	r18,zero
 1011474:	16e7883a 	add	r19,r2,sp
 1011478:	98801417 	ldw	r2,80(r19)
 101147c:	98c01517 	ldw	r3,84(r19)
 1011480:	a1800017 	ldw	r6,0(r20)
 1011484:	a1c00117 	ldw	r7,4(r20)
 1011488:	180b883a 	mov	r5,r3
 101148c:	1009883a 	mov	r4,r2
 1011490:	1012a940 	call	1012a94 <__muldf3>
 1011494:	180f883a 	mov	r7,r3
 1011498:	900b883a 	mov	r5,r18
 101149c:	8809883a 	mov	r4,r17
 10114a0:	100d883a 	mov	r6,r2
 10114a4:	1012a200 	call	1012a20 <__adddf3>
 10114a8:	d9409817 	ldw	r5,608(sp)
 10114ac:	b5800044 	addi	r22,r22,1
 10114b0:	9cfffe04 	addi	r19,r19,-8
 10114b4:	1023883a 	mov	r17,r2
 10114b8:	1825883a 	mov	r18,r3
 10114bc:	a5000204 	addi	r20,r20,8
 10114c0:	2dbfed1e 	bne	r5,r22,1011478 <__kernel_rem_pio2+0x558>
 10114c4:	d9809117 	ldw	r6,580(sp)
 10114c8:	d9c09017 	ldw	r7,576(sp)
 10114cc:	e7000044 	addi	fp,fp,1
 10114d0:	31800104 	addi	r6,r6,4
 10114d4:	39c00044 	addi	r7,r7,1
 10114d8:	84800115 	stw	r18,4(r16)
 10114dc:	84400015 	stw	r17,0(r16)
 10114e0:	d9809115 	stw	r6,580(sp)
 10114e4:	ad400204 	addi	r21,r21,8
 10114e8:	84000204 	addi	r16,r16,8
 10114ec:	d9c09015 	stw	r7,576(sp)
 10114f0:	bf3fd30e 	bge	r23,fp,1011440 <__kernel_rem_pio2+0x520>
 10114f4:	ddc08d15 	stw	r23,564(sp)
 10114f8:	003efa06 	br	10110e4 <__kernel_rem_pio2+0x1c4>
 10114fc:	0023883a 	mov	r17,zero
 1011500:	0025883a 	mov	r18,zero
 1011504:	003fef06 	br	10114c4 <__kernel_rem_pio2+0x5a4>
 1011508:	0029883a 	mov	r20,zero
 101150c:	054ffc34 	movhi	r21,16368
 1011510:	880f883a 	mov	r7,r17
 1011514:	800d883a 	mov	r6,r16
 1011518:	a009883a 	mov	r4,r20
 101151c:	a80b883a 	mov	r5,r21
 1011520:	10129a00 	call	10129a0 <__subdf3>
 1011524:	1025883a 	mov	r18,r2
 1011528:	b005003a 	cmpeq	r2,r22,zero
 101152c:	1827883a 	mov	r19,r3
 1011530:	9021883a 	mov	r16,r18
 1011534:	1823883a 	mov	r17,r3
 1011538:	103f8a1e 	bne	r2,zero,1011364 <__kernel_rem_pio2+0x444>
 101153c:	d9809317 	ldw	r6,588(sp)
 1011540:	0009883a 	mov	r4,zero
 1011544:	a80b883a 	mov	r5,r21
 1011548:	10123380 	call	1012338 <scalbn>
 101154c:	180f883a 	mov	r7,r3
 1011550:	9009883a 	mov	r4,r18
 1011554:	980b883a 	mov	r5,r19
 1011558:	100d883a 	mov	r6,r2
 101155c:	10129a00 	call	10129a0 <__subdf3>
 1011560:	1021883a 	mov	r16,r2
 1011564:	1823883a 	mov	r17,r3
 1011568:	000d883a 	mov	r6,zero
 101156c:	000f883a 	mov	r7,zero
 1011570:	8009883a 	mov	r4,r16
 1011574:	880b883a 	mov	r5,r17
 1011578:	10130b00 	call	10130b0 <__eqdf2>
 101157c:	103f7f26 	beq	r2,zero,101137c <__kernel_rem_pio2+0x45c>
 1011580:	000d883a 	mov	r6,zero
 1011584:	000f883a 	mov	r7,zero
 1011588:	8009883a 	mov	r4,r16
 101158c:	880b883a 	mov	r5,r17
 1011590:	10130b00 	call	10130b0 <__eqdf2>
 1011594:	10019a1e 	bne	r2,zero,1011c00 <__kernel_rem_pio2+0xce0>
 1011598:	da808d17 	ldw	r10,564(sp)
 101159c:	51bfffc4 	addi	r6,r10,-1
 10115a0:	3185883a 	add	r2,r6,r6
 10115a4:	1085883a 	add	r2,r2,r2
 10115a8:	d9009317 	ldw	r4,588(sp)
 10115ac:	16c5883a 	add	r2,r2,sp
 10115b0:	10c00017 	ldw	r3,0(r2)
 10115b4:	213ffa04 	addi	r4,r4,-24
 10115b8:	d9009315 	stw	r4,588(sp)
 10115bc:	1801d41e 	bne	r3,zero,1011d10 <__kernel_rem_pio2+0xdf0>
 10115c0:	d9808d15 	stw	r6,564(sp)
 10115c4:	1007883a 	mov	r3,r2
 10115c8:	d9408d17 	ldw	r5,564(sp)
 10115cc:	d9809317 	ldw	r6,588(sp)
 10115d0:	18ffff04 	addi	r3,r3,-4
 10115d4:	18800017 	ldw	r2,0(r3)
 10115d8:	297fffc4 	addi	r5,r5,-1
 10115dc:	31bffa04 	addi	r6,r6,-24
 10115e0:	d9408d15 	stw	r5,564(sp)
 10115e4:	d9809315 	stw	r6,588(sp)
 10115e8:	103ff726 	beq	r2,zero,10115c8 <__kernel_rem_pio2+0x6a8>
 10115ec:	d9809317 	ldw	r6,588(sp)
 10115f0:	0005883a 	mov	r2,zero
 10115f4:	00cffc34 	movhi	r3,16368
 10115f8:	180b883a 	mov	r5,r3
 10115fc:	1009883a 	mov	r4,r2
 1011600:	10123380 	call	1012338 <scalbn>
 1011604:	d9808d17 	ldw	r6,564(sp)
 1011608:	1021883a 	mov	r16,r2
 101160c:	1823883a 	mov	r17,r3
 1011610:	30004616 	blt	r6,zero,101172c <__kernel_rem_pio2+0x80c>
 1011614:	300690fa 	slli	r3,r6,3
 1011618:	3185883a 	add	r2,r6,r6
 101161c:	1085883a 	add	r2,r2,r2
 1011620:	16e9883a 	add	r20,r2,sp
 1011624:	1ee5883a 	add	r18,r3,sp
 1011628:	3027883a 	mov	r19,r6
 101162c:	057fffc4 	movi	r21,-1
 1011630:	a1000017 	ldw	r4,0(r20)
 1011634:	9cffffc4 	addi	r19,r19,-1
 1011638:	a53fff04 	addi	r20,r20,-4
 101163c:	10132d00 	call	10132d0 <__floatsidf>
 1011640:	800d883a 	mov	r6,r16
 1011644:	880f883a 	mov	r7,r17
 1011648:	180b883a 	mov	r5,r3
 101164c:	1009883a 	mov	r4,r2
 1011650:	1012a940 	call	1012a94 <__muldf3>
 1011654:	0015883a 	mov	r10,zero
 1011658:	02cf9c34 	movhi	r11,15984
 101165c:	880b883a 	mov	r5,r17
 1011660:	8009883a 	mov	r4,r16
 1011664:	90c06515 	stw	r3,404(r18)
 1011668:	90806415 	stw	r2,400(r18)
 101166c:	580f883a 	mov	r7,r11
 1011670:	500d883a 	mov	r6,r10
 1011674:	1012a940 	call	1012a94 <__muldf3>
 1011678:	1021883a 	mov	r16,r2
 101167c:	1823883a 	mov	r17,r3
 1011680:	94bffe04 	addi	r18,r18,-8
 1011684:	9d7fea1e 	bne	r19,r21,1011630 <__kernel_rem_pio2+0x710>
 1011688:	d9c09517 	ldw	r7,596(sp)
 101168c:	dd808d17 	ldw	r22,564(sp)
 1011690:	002b883a 	mov	r21,zero
 1011694:	382e403a 	cmpge	r23,r7,zero
 1011698:	b800aa26 	beq	r23,zero,1011944 <__kernel_rem_pio2+0xa24>
 101169c:	a800a916 	blt	r21,zero,1011944 <__kernel_rem_pio2+0xa24>
 10116a0:	b00690fa 	slli	r3,r22,3
 10116a4:	d8806404 	addi	r2,sp,400
 10116a8:	0021883a 	mov	r16,zero
 10116ac:	10e9883a 	add	r20,r2,r3
 10116b0:	0027883a 	mov	r19,zero
 10116b4:	0023883a 	mov	r17,zero
 10116b8:	048040f4 	movhi	r18,259
 10116bc:	94933304 	addi	r18,r18,19660
 10116c0:	00000106 	br	10116c8 <__kernel_rem_pio2+0x7a8>
 10116c4:	acc01116 	blt	r21,r19,101170c <__kernel_rem_pio2+0x7ec>
 10116c8:	91000017 	ldw	r4,0(r18)
 10116cc:	91400117 	ldw	r5,4(r18)
 10116d0:	a1800017 	ldw	r6,0(r20)
 10116d4:	a1c00117 	ldw	r7,4(r20)
 10116d8:	9cc00044 	addi	r19,r19,1
 10116dc:	94800204 	addi	r18,r18,8
 10116e0:	1012a940 	call	1012a94 <__muldf3>
 10116e4:	180f883a 	mov	r7,r3
 10116e8:	880b883a 	mov	r5,r17
 10116ec:	8009883a 	mov	r4,r16
 10116f0:	100d883a 	mov	r6,r2
 10116f4:	1012a200 	call	1012a20 <__adddf3>
 10116f8:	da809517 	ldw	r10,596(sp)
 10116fc:	a5000204 	addi	r20,r20,8
 1011700:	1021883a 	mov	r16,r2
 1011704:	1823883a 	mov	r17,r3
 1011708:	54ffee0e 	bge	r10,r19,10116c4 <__kernel_rem_pio2+0x7a4>
 101170c:	a80490fa 	slli	r2,r21,3
 1011710:	b5bfffc4 	addi	r22,r22,-1
 1011714:	ad400044 	addi	r21,r21,1
 1011718:	16c5883a 	add	r2,r2,sp
 101171c:	14403d15 	stw	r17,244(r2)
 1011720:	14003c15 	stw	r16,240(r2)
 1011724:	00bfffc4 	movi	r2,-1
 1011728:	b0bfdb1e 	bne	r22,r2,1011698 <__kernel_rem_pio2+0x778>
 101172c:	d8c0ad17 	ldw	r3,692(sp)
 1011730:	00800084 	movi	r2,2
 1011734:	10c09316 	blt	r2,r3,1011984 <__kernel_rem_pio2+0xa64>
 1011738:	00c1120e 	bge	zero,r3,1011b84 <__kernel_rem_pio2+0xc64>
 101173c:	d9808d17 	ldw	r6,564(sp)
 1011740:	30018d16 	blt	r6,zero,1011d78 <__kernel_rem_pio2+0xe58>
 1011744:	d8c08d17 	ldw	r3,564(sp)
 1011748:	0011883a 	mov	r8,zero
 101174c:	0013883a 	mov	r9,zero
 1011750:	180490fa 	slli	r2,r3,3
 1011754:	1823883a 	mov	r17,r3
 1011758:	04bfffc4 	movi	r18,-1
 101175c:	16e1883a 	add	r16,r2,sp
 1011760:	80803c17 	ldw	r2,240(r16)
 1011764:	80c03d17 	ldw	r3,244(r16)
 1011768:	480b883a 	mov	r5,r9
 101176c:	4009883a 	mov	r4,r8
 1011770:	180f883a 	mov	r7,r3
 1011774:	100d883a 	mov	r6,r2
 1011778:	1012a200 	call	1012a20 <__adddf3>
 101177c:	8c7fffc4 	addi	r17,r17,-1
 1011780:	843ffe04 	addi	r16,r16,-8
 1011784:	1011883a 	mov	r8,r2
 1011788:	1813883a 	mov	r9,r3
 101178c:	8cbff41e 	bne	r17,r18,1011760 <__kernel_rem_pio2+0x840>
 1011790:	d9009217 	ldw	r4,584(sp)
 1011794:	20015b1e 	bne	r4,zero,1011d04 <__kernel_rem_pio2+0xde4>
 1011798:	4009883a 	mov	r4,r8
 101179c:	480b883a 	mov	r5,r9
 10117a0:	d9809717 	ldw	r6,604(sp)
 10117a4:	d8803c17 	ldw	r2,240(sp)
 10117a8:	480f883a 	mov	r7,r9
 10117ac:	31400115 	stw	r5,4(r6)
 10117b0:	31000015 	stw	r4,0(r6)
 10117b4:	d8c03d17 	ldw	r3,244(sp)
 10117b8:	400d883a 	mov	r6,r8
 10117bc:	1009883a 	mov	r4,r2
 10117c0:	180b883a 	mov	r5,r3
 10117c4:	10129a00 	call	10129a0 <__subdf3>
 10117c8:	d9c08d17 	ldw	r7,564(sp)
 10117cc:	1011883a 	mov	r8,r2
 10117d0:	1813883a 	mov	r9,r3
 10117d4:	01c00d0e 	bge	zero,r7,101180c <__kernel_rem_pio2+0x8ec>
 10117d8:	0023883a 	mov	r17,zero
 10117dc:	dc003e04 	addi	r16,sp,248
 10117e0:	81800017 	ldw	r6,0(r16)
 10117e4:	81c00117 	ldw	r7,4(r16)
 10117e8:	480b883a 	mov	r5,r9
 10117ec:	4009883a 	mov	r4,r8
 10117f0:	1012a200 	call	1012a20 <__adddf3>
 10117f4:	da808d17 	ldw	r10,564(sp)
 10117f8:	8c400044 	addi	r17,r17,1
 10117fc:	1011883a 	mov	r8,r2
 1011800:	1813883a 	mov	r9,r3
 1011804:	84000204 	addi	r16,r16,8
 1011808:	8abff51e 	bne	r17,r10,10117e0 <__kernel_rem_pio2+0x8c0>
 101180c:	d8809217 	ldw	r2,584(sp)
 1011810:	10000226 	beq	r2,zero,101181c <__kernel_rem_pio2+0x8fc>
 1011814:	48e0003c 	xorhi	r3,r9,32768
 1011818:	1813883a 	mov	r9,r3
 101181c:	d8c09717 	ldw	r3,604(sp)
 1011820:	1a400315 	stw	r9,12(r3)
 1011824:	1a000215 	stw	r8,8(r3)
 1011828:	d8c09417 	ldw	r3,592(sp)
 101182c:	188001cc 	andi	r2,r3,7
 1011830:	dfc0ac17 	ldw	ra,688(sp)
 1011834:	df00ab17 	ldw	fp,684(sp)
 1011838:	ddc0aa17 	ldw	r23,680(sp)
 101183c:	dd80a917 	ldw	r22,676(sp)
 1011840:	dd40a817 	ldw	r21,672(sp)
 1011844:	dd00a717 	ldw	r20,668(sp)
 1011848:	dcc0a617 	ldw	r19,664(sp)
 101184c:	dc80a517 	ldw	r18,660(sp)
 1011850:	dc40a417 	ldw	r17,656(sp)
 1011854:	dc00a317 	ldw	r16,652(sp)
 1011858:	dec0ad04 	addi	sp,sp,692
 101185c:	f800283a 	ret
 1011860:	d8809317 	ldw	r2,588(sp)
 1011864:	10001f1e 	bne	r2,zero,10118e4 <__kernel_rem_pio2+0x9c4>
 1011868:	d8c08d17 	ldw	r3,564(sp)
 101186c:	18c5883a 	add	r2,r3,r3
 1011870:	1085883a 	add	r2,r2,r2
 1011874:	16c5883a 	add	r2,r2,sp
 1011878:	10ffff17 	ldw	r3,-4(r2)
 101187c:	1807d5fa 	srai	r3,r3,23
 1011880:	d8c09215 	stw	r3,584(sp)
 1011884:	003e8e06 	br	10112c0 <__kernel_rem_pio2+0x3a0>
 1011888:	d9008d17 	ldw	r4,564(sp)
 101188c:	d9409317 	ldw	r5,588(sp)
 1011890:	2145c83a 	sub	r2,r4,r5
 1011894:	1085883a 	add	r2,r2,r2
 1011898:	1085883a 	add	r2,r2,r2
 101189c:	16c5883a 	add	r2,r2,sp
 10118a0:	10c00017 	ldw	r3,0(r2)
 10118a4:	01002034 	movhi	r4,128
 10118a8:	213fffc4 	addi	r4,r4,-1
 10118ac:	1906703a 	and	r3,r3,r4
 10118b0:	10c00015 	stw	r3,0(r2)
 10118b4:	003ea806 	br	1011358 <__kernel_rem_pio2+0x438>
 10118b8:	d9808d17 	ldw	r6,564(sp)
 10118bc:	01001034 	movhi	r4,64
 10118c0:	213fffc4 	addi	r4,r4,-1
 10118c4:	30bfffc4 	addi	r2,r6,-1
 10118c8:	1085883a 	add	r2,r2,r2
 10118cc:	1085883a 	add	r2,r2,r2
 10118d0:	16c5883a 	add	r2,r2,sp
 10118d4:	10c00017 	ldw	r3,0(r2)
 10118d8:	1906703a 	and	r3,r3,r4
 10118dc:	10c00015 	stw	r3,0(r2)
 10118e0:	003e9d06 	br	1011358 <__kernel_rem_pio2+0x438>
 10118e4:	0005883a 	mov	r2,zero
 10118e8:	00cff834 	movhi	r3,16352
 10118ec:	300b883a 	mov	r5,r6
 10118f0:	180f883a 	mov	r7,r3
 10118f4:	8009883a 	mov	r4,r16
 10118f8:	100d883a 	mov	r6,r2
 10118fc:	10131c00 	call	10131c0 <__gedf2>
 1011900:	10001d0e 	bge	r2,zero,1011978 <__kernel_rem_pio2+0xa58>
 1011904:	d8009215 	stw	zero,584(sp)
 1011908:	003e9606 	br	1011364 <__kernel_rem_pio2+0x444>
 101190c:	d8c08d17 	ldw	r3,564(sp)
 1011910:	01000044 	movi	r4,1
 1011914:	192f883a 	add	r23,r3,r4
 1011918:	1f000044 	addi	fp,r3,1
 101191c:	bf3eb516 	blt	r23,fp,10113f4 <__kernel_rem_pio2+0x4d4>
 1011920:	003eb606 	br	10113fc <__kernel_rem_pio2+0x4dc>
 1011924:	0021883a 	mov	r16,zero
 1011928:	0023883a 	mov	r17,zero
 101192c:	a5000044 	addi	r20,r20,1
 1011930:	ac400115 	stw	r17,4(r21)
 1011934:	ac000015 	stw	r16,0(r21)
 1011938:	ad400204 	addi	r21,r21,8
 101193c:	a5fdba1e 	bne	r20,r23,1011028 <__kernel_rem_pio2+0x108>
 1011940:	003dd806 	br	10110a4 <__kernel_rem_pio2+0x184>
 1011944:	a80490fa 	slli	r2,r21,3
 1011948:	0021883a 	mov	r16,zero
 101194c:	0023883a 	mov	r17,zero
 1011950:	16c5883a 	add	r2,r2,sp
 1011954:	14403d15 	stw	r17,244(r2)
 1011958:	14003c15 	stw	r16,240(r2)
 101195c:	b5bfffc4 	addi	r22,r22,-1
 1011960:	00bfffc4 	movi	r2,-1
 1011964:	ad400044 	addi	r21,r21,1
 1011968:	b0bf4b1e 	bne	r22,r2,1011698 <__kernel_rem_pio2+0x778>
 101196c:	003f6f06 	br	101172c <__kernel_rem_pio2+0x80c>
 1011970:	002d883a 	mov	r22,zero
 1011974:	003e7106 	br	101133c <__kernel_rem_pio2+0x41c>
 1011978:	01000084 	movi	r4,2
 101197c:	d9009215 	stw	r4,584(sp)
 1011980:	003e5106 	br	10112c8 <__kernel_rem_pio2+0x3a8>
 1011984:	d900ad17 	ldw	r4,692(sp)
 1011988:	008000c4 	movi	r2,3
 101198c:	20bfa61e 	bne	r4,r2,1011828 <__kernel_rem_pio2+0x908>
 1011990:	d9c08d17 	ldw	r7,564(sp)
 1011994:	01c02c0e 	bge	zero,r7,1011a48 <__kernel_rem_pio2+0xb28>
 1011998:	3805883a 	mov	r2,r7
 101199c:	00000106 	br	10119a4 <__kernel_rem_pio2+0xa84>
 10119a0:	d8808e17 	ldw	r2,568(sp)
 10119a4:	113fffc4 	addi	r4,r2,-1
 10119a8:	100690fa 	slli	r3,r2,3
 10119ac:	200490fa 	slli	r2,r4,3
 10119b0:	d9008e15 	stw	r4,568(sp)
 10119b4:	1ef9883a 	add	fp,r3,sp
 10119b8:	16c5883a 	add	r2,r2,sp
 10119bc:	d8809a15 	stw	r2,616(sp)
 10119c0:	11403c04 	addi	r5,r2,240
 10119c4:	e1803c04 	addi	r6,fp,240
 10119c8:	14003c17 	ldw	r16,240(r2)
 10119cc:	e5003c17 	ldw	r20,240(fp)
 10119d0:	d9409b15 	stw	r5,620(sp)
 10119d4:	d9809c15 	stw	r6,624(sp)
 10119d8:	35400117 	ldw	r21,4(r6)
 10119dc:	2c400117 	ldw	r17,4(r5)
 10119e0:	8009883a 	mov	r4,r16
 10119e4:	a00d883a 	mov	r6,r20
 10119e8:	880b883a 	mov	r5,r17
 10119ec:	a80f883a 	mov	r7,r21
 10119f0:	1012a200 	call	1012a20 <__adddf3>
 10119f4:	100d883a 	mov	r6,r2
 10119f8:	880b883a 	mov	r5,r17
 10119fc:	8009883a 	mov	r4,r16
 1011a00:	180f883a 	mov	r7,r3
 1011a04:	1025883a 	mov	r18,r2
 1011a08:	1827883a 	mov	r19,r3
 1011a0c:	10129a00 	call	10129a0 <__subdf3>
 1011a10:	180f883a 	mov	r7,r3
 1011a14:	a80b883a 	mov	r5,r21
 1011a18:	a009883a 	mov	r4,r20
 1011a1c:	100d883a 	mov	r6,r2
 1011a20:	1012a200 	call	1012a20 <__adddf3>
 1011a24:	e0803c15 	stw	r2,240(fp)
 1011a28:	d9c09c17 	ldw	r7,624(sp)
 1011a2c:	38c00115 	stw	r3,4(r7)
 1011a30:	da809a17 	ldw	r10,616(sp)
 1011a34:	54803c15 	stw	r18,240(r10)
 1011a38:	d8809b17 	ldw	r2,620(sp)
 1011a3c:	14c00115 	stw	r19,4(r2)
 1011a40:	d8c08e17 	ldw	r3,568(sp)
 1011a44:	183fd61e 	bne	r3,zero,10119a0 <__kernel_rem_pio2+0xa80>
 1011a48:	d9008d17 	ldw	r4,564(sp)
 1011a4c:	00800044 	movi	r2,1
 1011a50:	1100cc0e 	bge	r2,r4,1011d84 <__kernel_rem_pio2+0xe64>
 1011a54:	d8808d17 	ldw	r2,564(sp)
 1011a58:	117fffc4 	addi	r5,r2,-1
 1011a5c:	100690fa 	slli	r3,r2,3
 1011a60:	280490fa 	slli	r2,r5,3
 1011a64:	d9408f15 	stw	r5,572(sp)
 1011a68:	1ef9883a 	add	fp,r3,sp
 1011a6c:	16c5883a 	add	r2,r2,sp
 1011a70:	d8809d15 	stw	r2,628(sp)
 1011a74:	11803c04 	addi	r6,r2,240
 1011a78:	e1c03c04 	addi	r7,fp,240
 1011a7c:	14003c17 	ldw	r16,240(r2)
 1011a80:	e5003c17 	ldw	r20,240(fp)
 1011a84:	d9809e15 	stw	r6,632(sp)
 1011a88:	d9c09f15 	stw	r7,636(sp)
 1011a8c:	34400117 	ldw	r17,4(r6)
 1011a90:	3d400117 	ldw	r21,4(r7)
 1011a94:	8009883a 	mov	r4,r16
 1011a98:	880b883a 	mov	r5,r17
 1011a9c:	a00d883a 	mov	r6,r20
 1011aa0:	a80f883a 	mov	r7,r21
 1011aa4:	1012a200 	call	1012a20 <__adddf3>
 1011aa8:	100d883a 	mov	r6,r2
 1011aac:	880b883a 	mov	r5,r17
 1011ab0:	8009883a 	mov	r4,r16
 1011ab4:	180f883a 	mov	r7,r3
 1011ab8:	1025883a 	mov	r18,r2
 1011abc:	1827883a 	mov	r19,r3
 1011ac0:	10129a00 	call	10129a0 <__subdf3>
 1011ac4:	180f883a 	mov	r7,r3
 1011ac8:	a80b883a 	mov	r5,r21
 1011acc:	a009883a 	mov	r4,r20
 1011ad0:	100d883a 	mov	r6,r2
 1011ad4:	1012a200 	call	1012a20 <__adddf3>
 1011ad8:	e0803c15 	stw	r2,240(fp)
 1011adc:	da809f17 	ldw	r10,636(sp)
 1011ae0:	50c00115 	stw	r3,4(r10)
 1011ae4:	d8c09d17 	ldw	r3,628(sp)
 1011ae8:	d8808f17 	ldw	r2,572(sp)
 1011aec:	1c803c15 	stw	r18,240(r3)
 1011af0:	d9009e17 	ldw	r4,632(sp)
 1011af4:	00c00044 	movi	r3,1
 1011af8:	24c00115 	stw	r19,4(r4)
 1011afc:	d9408f17 	ldw	r5,572(sp)
 1011b00:	28ffd51e 	bne	r5,r3,1011a58 <__kernel_rem_pio2+0xb38>
 1011b04:	dc008d17 	ldw	r16,564(sp)
 1011b08:	0011883a 	mov	r8,zero
 1011b0c:	1825883a 	mov	r18,r3
 1011b10:	800490fa 	slli	r2,r16,3
 1011b14:	0013883a 	mov	r9,zero
 1011b18:	16e3883a 	add	r17,r2,sp
 1011b1c:	88803c17 	ldw	r2,240(r17)
 1011b20:	88c03d17 	ldw	r3,244(r17)
 1011b24:	480b883a 	mov	r5,r9
 1011b28:	4009883a 	mov	r4,r8
 1011b2c:	180f883a 	mov	r7,r3
 1011b30:	100d883a 	mov	r6,r2
 1011b34:	1012a200 	call	1012a20 <__adddf3>
 1011b38:	843fffc4 	addi	r16,r16,-1
 1011b3c:	8c7ffe04 	addi	r17,r17,-8
 1011b40:	1011883a 	mov	r8,r2
 1011b44:	1813883a 	mov	r9,r3
 1011b48:	84bff41e 	bne	r16,r18,1011b1c <__kernel_rem_pio2+0xbfc>
 1011b4c:	d9809217 	ldw	r6,584(sp)
 1011b50:	30007a1e 	bne	r6,zero,1011d3c <__kernel_rem_pio2+0xe1c>
 1011b54:	d9c09717 	ldw	r7,604(sp)
 1011b58:	d8803c17 	ldw	r2,240(sp)
 1011b5c:	d9003e17 	ldw	r4,248(sp)
 1011b60:	3a400515 	stw	r9,20(r7)
 1011b64:	d8c03d17 	ldw	r3,244(sp)
 1011b68:	d9403f17 	ldw	r5,252(sp)
 1011b6c:	3a000415 	stw	r8,16(r7)
 1011b70:	38c00115 	stw	r3,4(r7)
 1011b74:	39400315 	stw	r5,12(r7)
 1011b78:	38800015 	stw	r2,0(r7)
 1011b7c:	39000215 	stw	r4,8(r7)
 1011b80:	003f2906 	br	1011828 <__kernel_rem_pio2+0x908>
 1011b84:	183f281e 	bne	r3,zero,1011828 <__kernel_rem_pio2+0x908>
 1011b88:	d9408d17 	ldw	r5,564(sp)
 1011b8c:	28008016 	blt	r5,zero,1011d90 <__kernel_rem_pio2+0xe70>
 1011b90:	dc008d17 	ldw	r16,564(sp)
 1011b94:	000d883a 	mov	r6,zero
 1011b98:	000f883a 	mov	r7,zero
 1011b9c:	800490fa 	slli	r2,r16,3
 1011ba0:	04bfffc4 	movi	r18,-1
 1011ba4:	16e3883a 	add	r17,r2,sp
 1011ba8:	88803c17 	ldw	r2,240(r17)
 1011bac:	88c03d17 	ldw	r3,244(r17)
 1011bb0:	380b883a 	mov	r5,r7
 1011bb4:	3009883a 	mov	r4,r6
 1011bb8:	180f883a 	mov	r7,r3
 1011bbc:	100d883a 	mov	r6,r2
 1011bc0:	1012a200 	call	1012a20 <__adddf3>
 1011bc4:	843fffc4 	addi	r16,r16,-1
 1011bc8:	8c7ffe04 	addi	r17,r17,-8
 1011bcc:	100d883a 	mov	r6,r2
 1011bd0:	180f883a 	mov	r7,r3
 1011bd4:	84bff41e 	bne	r16,r18,1011ba8 <__kernel_rem_pio2+0xc88>
 1011bd8:	da809217 	ldw	r10,584(sp)
 1011bdc:	50000226 	beq	r10,zero,1011be8 <__kernel_rem_pio2+0xcc8>
 1011be0:	38e0003c 	xorhi	r3,r7,32768
 1011be4:	180f883a 	mov	r7,r3
 1011be8:	d8809717 	ldw	r2,604(sp)
 1011bec:	11c00115 	stw	r7,4(r2)
 1011bf0:	11800015 	stw	r6,0(r2)
 1011bf4:	003f0c06 	br	1011828 <__kernel_rem_pio2+0x908>
 1011bf8:	d8008c15 	stw	zero,560(sp)
 1011bfc:	003ce606 	br	1010f98 <__kernel_rem_pio2+0x78>
 1011c00:	d9c09317 	ldw	r7,588(sp)
 1011c04:	880b883a 	mov	r5,r17
 1011c08:	8009883a 	mov	r4,r16
 1011c0c:	01cdc83a 	sub	r6,zero,r7
 1011c10:	10123380 	call	1012338 <scalbn>
 1011c14:	0011883a 	mov	r8,zero
 1011c18:	02505c34 	movhi	r9,16752
 1011c1c:	480f883a 	mov	r7,r9
 1011c20:	1009883a 	mov	r4,r2
 1011c24:	180b883a 	mov	r5,r3
 1011c28:	400d883a 	mov	r6,r8
 1011c2c:	102d883a 	mov	r22,r2
 1011c30:	182f883a 	mov	r23,r3
 1011c34:	10131c00 	call	10131c0 <__gedf2>
 1011c38:	10003716 	blt	r2,zero,1011d18 <__kernel_rem_pio2+0xdf8>
 1011c3c:	0005883a 	mov	r2,zero
 1011c40:	00cf9c34 	movhi	r3,15984
 1011c44:	180f883a 	mov	r7,r3
 1011c48:	100d883a 	mov	r6,r2
 1011c4c:	b009883a 	mov	r4,r22
 1011c50:	b80b883a 	mov	r5,r23
 1011c54:	1012a940 	call	1012a94 <__muldf3>
 1011c58:	180b883a 	mov	r5,r3
 1011c5c:	1009883a 	mov	r4,r2
 1011c60:	10133c80 	call	10133c8 <__fixdfsi>
 1011c64:	1009883a 	mov	r4,r2
 1011c68:	10132d00 	call	10132d0 <__floatsidf>
 1011c6c:	da808d17 	ldw	r10,564(sp)
 1011c70:	1023883a 	mov	r17,r2
 1011c74:	1825883a 	mov	r18,r3
 1011c78:	0005883a 	mov	r2,zero
 1011c7c:	00f05c34 	movhi	r3,49520
 1011c80:	180f883a 	mov	r7,r3
 1011c84:	8809883a 	mov	r4,r17
 1011c88:	900b883a 	mov	r5,r18
 1011c8c:	100d883a 	mov	r6,r2
 1011c90:	52ab883a 	add	r21,r10,r10
 1011c94:	1012a940 	call	1012a94 <__muldf3>
 1011c98:	180f883a 	mov	r7,r3
 1011c9c:	b80b883a 	mov	r5,r23
 1011ca0:	100d883a 	mov	r6,r2
 1011ca4:	b009883a 	mov	r4,r22
 1011ca8:	1012a200 	call	1012a20 <__adddf3>
 1011cac:	100d883a 	mov	r6,r2
 1011cb0:	d8808d17 	ldw	r2,564(sp)
 1011cb4:	180b883a 	mov	r5,r3
 1011cb8:	3009883a 	mov	r4,r6
 1011cbc:	10800044 	addi	r2,r2,1
 1011cc0:	ad6b883a 	add	r21,r21,r21
 1011cc4:	d8808d15 	stw	r2,564(sp)
 1011cc8:	10133c80 	call	10133c8 <__fixdfsi>
 1011ccc:	d8c08d17 	ldw	r3,564(sp)
 1011cd0:	aeeb883a 	add	r21,r21,sp
 1011cd4:	8809883a 	mov	r4,r17
 1011cd8:	900b883a 	mov	r5,r18
 1011cdc:	a8800015 	stw	r2,0(r21)
 1011ce0:	18e1883a 	add	r16,r3,r3
 1011ce4:	10133c80 	call	10133c8 <__fixdfsi>
 1011ce8:	d9009317 	ldw	r4,588(sp)
 1011cec:	8421883a 	add	r16,r16,r16
 1011cf0:	86e1883a 	add	r16,r16,sp
 1011cf4:	21000604 	addi	r4,r4,24
 1011cf8:	d9009315 	stw	r4,588(sp)
 1011cfc:	80800015 	stw	r2,0(r16)
 1011d00:	003e3a06 	br	10115ec <__kernel_rem_pio2+0x6cc>
 1011d04:	4009883a 	mov	r4,r8
 1011d08:	4960003c 	xorhi	r5,r9,32768
 1011d0c:	003ea406 	br	10117a0 <__kernel_rem_pio2+0x880>
 1011d10:	d9808d15 	stw	r6,564(sp)
 1011d14:	003e3506 	br	10115ec <__kernel_rem_pio2+0x6cc>
 1011d18:	d9408d17 	ldw	r5,564(sp)
 1011d1c:	b009883a 	mov	r4,r22
 1011d20:	2961883a 	add	r16,r5,r5
 1011d24:	8421883a 	add	r16,r16,r16
 1011d28:	b80b883a 	mov	r5,r23
 1011d2c:	86e1883a 	add	r16,r16,sp
 1011d30:	10133c80 	call	10133c8 <__fixdfsi>
 1011d34:	80800015 	stw	r2,0(r16)
 1011d38:	003e2c06 	br	10115ec <__kernel_rem_pio2+0x6cc>
 1011d3c:	d8c03d17 	ldw	r3,244(sp)
 1011d40:	d9403f17 	ldw	r5,252(sp)
 1011d44:	da809717 	ldw	r10,604(sp)
 1011d48:	d8803c17 	ldw	r2,240(sp)
 1011d4c:	d9003e17 	ldw	r4,248(sp)
 1011d50:	49e0003c 	xorhi	r7,r9,32768
 1011d54:	51c00515 	stw	r7,20(r10)
 1011d58:	19a0003c 	xorhi	r6,r3,32768
 1011d5c:	29e0003c 	xorhi	r7,r5,32768
 1011d60:	51800115 	stw	r6,4(r10)
 1011d64:	51c00315 	stw	r7,12(r10)
 1011d68:	50800015 	stw	r2,0(r10)
 1011d6c:	51000215 	stw	r4,8(r10)
 1011d70:	52000415 	stw	r8,16(r10)
 1011d74:	003eac06 	br	1011828 <__kernel_rem_pio2+0x908>
 1011d78:	0011883a 	mov	r8,zero
 1011d7c:	0013883a 	mov	r9,zero
 1011d80:	003e8306 	br	1011790 <__kernel_rem_pio2+0x870>
 1011d84:	0011883a 	mov	r8,zero
 1011d88:	0013883a 	mov	r9,zero
 1011d8c:	003f6f06 	br	1011b4c <__kernel_rem_pio2+0xc2c>
 1011d90:	000d883a 	mov	r6,zero
 1011d94:	000f883a 	mov	r7,zero
 1011d98:	003f8f06 	br	1011bd8 <__kernel_rem_pio2+0xcb8>

01011d9c <__kernel_sin>:
 1011d9c:	00a00034 	movhi	r2,32768
 1011da0:	10bfffc4 	addi	r2,r2,-1
 1011da4:	deffef04 	addi	sp,sp,-68
 1011da8:	1144703a 	and	r2,r2,r5
 1011dac:	00cf9034 	movhi	r3,15936
 1011db0:	18ffffc4 	addi	r3,r3,-1
 1011db4:	dd400d15 	stw	r21,52(sp)
 1011db8:	dd000c15 	stw	r20,48(sp)
 1011dbc:	dfc01015 	stw	ra,64(sp)
 1011dc0:	ddc00f15 	stw	r23,60(sp)
 1011dc4:	dd800e15 	stw	r22,56(sp)
 1011dc8:	dcc00b15 	stw	r19,44(sp)
 1011dcc:	dc800a15 	stw	r18,40(sp)
 1011dd0:	dc400915 	stw	r17,36(sp)
 1011dd4:	dc000815 	stw	r16,32(sp)
 1011dd8:	2029883a 	mov	r20,r4
 1011ddc:	282b883a 	mov	r21,r5
 1011de0:	d9800415 	stw	r6,16(sp)
 1011de4:	d9c00515 	stw	r7,20(sp)
 1011de8:	18800216 	blt	r3,r2,1011df4 <__kernel_sin+0x58>
 1011dec:	10133c80 	call	10133c8 <__fixdfsi>
 1011df0:	10008826 	beq	r2,zero,1012014 <__kernel_sin+0x278>
 1011df4:	a009883a 	mov	r4,r20
 1011df8:	a80b883a 	mov	r5,r21
 1011dfc:	a00d883a 	mov	r6,r20
 1011e00:	a80f883a 	mov	r7,r21
 1011e04:	1012a940 	call	1012a94 <__muldf3>
 1011e08:	102d883a 	mov	r22,r2
 1011e0c:	a009883a 	mov	r4,r20
 1011e10:	a80b883a 	mov	r5,r21
 1011e14:	b00d883a 	mov	r6,r22
 1011e18:	180f883a 	mov	r7,r3
 1011e1c:	182f883a 	mov	r23,r3
 1011e20:	d8800215 	stw	r2,8(sp)
 1011e24:	d8c00315 	stw	r3,12(sp)
 1011e28:	1012a940 	call	1012a94 <__muldf3>
 1011e2c:	d9000217 	ldw	r4,8(sp)
 1011e30:	0216b434 	movhi	r8,23248
 1011e34:	42355f04 	addi	r8,r8,-10884
 1011e38:	024f79b4 	movhi	r9,15846
 1011e3c:	4a764e84 	addi	r9,r9,-9926
 1011e40:	480f883a 	mov	r7,r9
 1011e44:	400d883a 	mov	r6,r8
 1011e48:	b80b883a 	mov	r5,r23
 1011e4c:	d8800615 	stw	r2,24(sp)
 1011e50:	d8c00715 	stw	r3,28(sp)
 1011e54:	1012a940 	call	1012a94 <__muldf3>
 1011e58:	02228b34 	movhi	r8,35372
 1011e5c:	42273ac4 	addi	r8,r8,-25365
 1011e60:	024f96f4 	movhi	r9,15963
 1011e64:	4a797984 	addi	r9,r9,-6682
 1011e68:	480f883a 	mov	r7,r9
 1011e6c:	400d883a 	mov	r6,r8
 1011e70:	180b883a 	mov	r5,r3
 1011e74:	1009883a 	mov	r4,r2
 1011e78:	10129a00 	call	10129a0 <__subdf3>
 1011e7c:	d9000217 	ldw	r4,8(sp)
 1011e80:	180f883a 	mov	r7,r3
 1011e84:	b80b883a 	mov	r5,r23
 1011e88:	100d883a 	mov	r6,r2
 1011e8c:	1012a940 	call	1012a94 <__muldf3>
 1011e90:	0215ecb4 	movhi	r8,22450
 1011e94:	423f9f44 	addi	r8,r8,-387
 1011e98:	024fb1f4 	movhi	r9,16071
 1011e9c:	4a4778c4 	addi	r9,r9,7651
 1011ea0:	480f883a 	mov	r7,r9
 1011ea4:	400d883a 	mov	r6,r8
 1011ea8:	180b883a 	mov	r5,r3
 1011eac:	1009883a 	mov	r4,r2
 1011eb0:	1012a200 	call	1012a20 <__adddf3>
 1011eb4:	d9000217 	ldw	r4,8(sp)
 1011eb8:	180f883a 	mov	r7,r3
 1011ebc:	b80b883a 	mov	r5,r23
 1011ec0:	100d883a 	mov	r6,r2
 1011ec4:	1012a940 	call	1012a94 <__muldf3>
 1011ec8:	02067074 	movhi	r8,6593
 1011ecc:	42187544 	addi	r8,r8,25045
 1011ed0:	024fcab4 	movhi	r9,16170
 1011ed4:	4a406804 	addi	r9,r9,416
 1011ed8:	480f883a 	mov	r7,r9
 1011edc:	400d883a 	mov	r6,r8
 1011ee0:	180b883a 	mov	r5,r3
 1011ee4:	1009883a 	mov	r4,r2
 1011ee8:	10129a00 	call	10129a0 <__subdf3>
 1011eec:	d9000217 	ldw	r4,8(sp)
 1011ef0:	180f883a 	mov	r7,r3
 1011ef4:	b80b883a 	mov	r5,r23
 1011ef8:	100d883a 	mov	r6,r2
 1011efc:	1012a940 	call	1012a94 <__muldf3>
 1011f00:	02044474 	movhi	r8,4369
 1011f04:	423e2984 	addi	r8,r8,-1882
 1011f08:	024fe074 	movhi	r9,16257
 1011f0c:	4a444444 	addi	r9,r9,4369
 1011f10:	180b883a 	mov	r5,r3
 1011f14:	480f883a 	mov	r7,r9
 1011f18:	1009883a 	mov	r4,r2
 1011f1c:	400d883a 	mov	r6,r8
 1011f20:	1012a200 	call	1012a20 <__adddf3>
 1011f24:	1021883a 	mov	r16,r2
 1011f28:	d8800617 	ldw	r2,24(sp)
 1011f2c:	1823883a 	mov	r17,r3
 1011f30:	d8800015 	stw	r2,0(sp)
 1011f34:	d8800717 	ldw	r2,28(sp)
 1011f38:	d8800115 	stw	r2,4(sp)
 1011f3c:	d8801117 	ldw	r2,68(sp)
 1011f40:	10004126 	beq	r2,zero,1012048 <__kernel_sin+0x2ac>
 1011f44:	d9000417 	ldw	r4,16(sp)
 1011f48:	d9400517 	ldw	r5,20(sp)
 1011f4c:	0005883a 	mov	r2,zero
 1011f50:	00cff834 	movhi	r3,16352
 1011f54:	180f883a 	mov	r7,r3
 1011f58:	100d883a 	mov	r6,r2
 1011f5c:	1012a940 	call	1012a94 <__muldf3>
 1011f60:	d9000017 	ldw	r4,0(sp)
 1011f64:	d9400717 	ldw	r5,28(sp)
 1011f68:	800d883a 	mov	r6,r16
 1011f6c:	880f883a 	mov	r7,r17
 1011f70:	1021883a 	mov	r16,r2
 1011f74:	1823883a 	mov	r17,r3
 1011f78:	1012a940 	call	1012a94 <__muldf3>
 1011f7c:	180f883a 	mov	r7,r3
 1011f80:	880b883a 	mov	r5,r17
 1011f84:	8009883a 	mov	r4,r16
 1011f88:	100d883a 	mov	r6,r2
 1011f8c:	10129a00 	call	10129a0 <__subdf3>
 1011f90:	d9000217 	ldw	r4,8(sp)
 1011f94:	b80b883a 	mov	r5,r23
 1011f98:	180f883a 	mov	r7,r3
 1011f9c:	100d883a 	mov	r6,r2
 1011fa0:	1012a940 	call	1012a94 <__muldf3>
 1011fa4:	d9c00517 	ldw	r7,20(sp)
 1011fa8:	d9800417 	ldw	r6,16(sp)
 1011fac:	180b883a 	mov	r5,r3
 1011fb0:	1009883a 	mov	r4,r2
 1011fb4:	10129a00 	call	10129a0 <__subdf3>
 1011fb8:	d9000017 	ldw	r4,0(sp)
 1011fbc:	d9400717 	ldw	r5,28(sp)
 1011fc0:	02155574 	movhi	r8,21845
 1011fc4:	42155244 	addi	r8,r8,21833
 1011fc8:	024ff174 	movhi	r9,16325
 1011fcc:	4a555544 	addi	r9,r9,21845
 1011fd0:	480f883a 	mov	r7,r9
 1011fd4:	400d883a 	mov	r6,r8
 1011fd8:	1021883a 	mov	r16,r2
 1011fdc:	1823883a 	mov	r17,r3
 1011fe0:	1012a940 	call	1012a94 <__muldf3>
 1011fe4:	180f883a 	mov	r7,r3
 1011fe8:	880b883a 	mov	r5,r17
 1011fec:	8009883a 	mov	r4,r16
 1011ff0:	100d883a 	mov	r6,r2
 1011ff4:	1012a200 	call	1012a20 <__adddf3>
 1011ff8:	180f883a 	mov	r7,r3
 1011ffc:	a80b883a 	mov	r5,r21
 1012000:	a009883a 	mov	r4,r20
 1012004:	100d883a 	mov	r6,r2
 1012008:	10129a00 	call	10129a0 <__subdf3>
 101200c:	1029883a 	mov	r20,r2
 1012010:	182b883a 	mov	r21,r3
 1012014:	a005883a 	mov	r2,r20
 1012018:	a807883a 	mov	r3,r21
 101201c:	dfc01017 	ldw	ra,64(sp)
 1012020:	ddc00f17 	ldw	r23,60(sp)
 1012024:	dd800e17 	ldw	r22,56(sp)
 1012028:	dd400d17 	ldw	r21,52(sp)
 101202c:	dd000c17 	ldw	r20,48(sp)
 1012030:	dcc00b17 	ldw	r19,44(sp)
 1012034:	dc800a17 	ldw	r18,40(sp)
 1012038:	dc400917 	ldw	r17,36(sp)
 101203c:	dc000817 	ldw	r16,32(sp)
 1012040:	dec01104 	addi	sp,sp,68
 1012044:	f800283a 	ret
 1012048:	d9000217 	ldw	r4,8(sp)
 101204c:	b80b883a 	mov	r5,r23
 1012050:	800d883a 	mov	r6,r16
 1012054:	180f883a 	mov	r7,r3
 1012058:	1012a940 	call	1012a94 <__muldf3>
 101205c:	02155574 	movhi	r8,21845
 1012060:	42155244 	addi	r8,r8,21833
 1012064:	024ff174 	movhi	r9,16325
 1012068:	4a555544 	addi	r9,r9,21845
 101206c:	480f883a 	mov	r7,r9
 1012070:	400d883a 	mov	r6,r8
 1012074:	180b883a 	mov	r5,r3
 1012078:	1009883a 	mov	r4,r2
 101207c:	10129a00 	call	10129a0 <__subdf3>
 1012080:	d9000017 	ldw	r4,0(sp)
 1012084:	d9400717 	ldw	r5,28(sp)
 1012088:	180f883a 	mov	r7,r3
 101208c:	100d883a 	mov	r6,r2
 1012090:	1012a940 	call	1012a94 <__muldf3>
 1012094:	180f883a 	mov	r7,r3
 1012098:	a80b883a 	mov	r5,r21
 101209c:	a009883a 	mov	r4,r20
 10120a0:	100d883a 	mov	r6,r2
 10120a4:	1012a200 	call	1012a20 <__adddf3>
 10120a8:	1029883a 	mov	r20,r2
 10120ac:	182b883a 	mov	r21,r3
 10120b0:	003fd806 	br	1012014 <__kernel_sin+0x278>

010120b4 <fabs>:
 10120b4:	01e00034 	movhi	r7,32768
 10120b8:	39ffffc4 	addi	r7,r7,-1
 10120bc:	394e703a 	and	r7,r7,r5
 10120c0:	2005883a 	mov	r2,r4
 10120c4:	3807883a 	mov	r3,r7
 10120c8:	f800283a 	ret

010120cc <floor>:
 10120cc:	2805d53a 	srai	r2,r5,20
 10120d0:	defff604 	addi	sp,sp,-40
 10120d4:	dd800615 	stw	r22,24(sp)
 10120d8:	10c1ffcc 	andi	r3,r2,2047
 10120dc:	1dbf0044 	addi	r22,r3,-1023
 10120e0:	008004c4 	movi	r2,19
 10120e4:	ddc00715 	stw	r23,28(sp)
 10120e8:	dc800215 	stw	r18,8(sp)
 10120ec:	dc400115 	stw	r17,4(sp)
 10120f0:	dc000015 	stw	r16,0(sp)
 10120f4:	dfc00915 	stw	ra,36(sp)
 10120f8:	df000815 	stw	fp,32(sp)
 10120fc:	dd400515 	stw	r21,20(sp)
 1012100:	dd000415 	stw	r20,16(sp)
 1012104:	dcc00315 	stw	r19,12(sp)
 1012108:	2021883a 	mov	r16,r4
 101210c:	2823883a 	mov	r17,r5
 1012110:	282f883a 	mov	r23,r5
 1012114:	2025883a 	mov	r18,r4
 1012118:	15802916 	blt	r2,r22,10121c0 <floor+0xf4>
 101211c:	b0004816 	blt	r22,zero,1012240 <floor+0x174>
 1012120:	00800434 	movhi	r2,16
 1012124:	10bfffc4 	addi	r2,r2,-1
 1012128:	15b9d83a 	sra	fp,r2,r22
 101212c:	282f883a 	mov	r23,r5
 1012130:	e144703a 	and	r2,fp,r5
 1012134:	1104b03a 	or	r2,r2,r4
 1012138:	10001326 	beq	r2,zero,1012188 <floor+0xbc>
 101213c:	00a20034 	movhi	r2,34816
 1012140:	109d6704 	addi	r2,r2,30108
 1012144:	00df8e34 	movhi	r3,32312
 1012148:	18f90f04 	addi	r3,r3,-7108
 101214c:	180f883a 	mov	r7,r3
 1012150:	100d883a 	mov	r6,r2
 1012154:	1012a200 	call	1012a20 <__adddf3>
 1012158:	180b883a 	mov	r5,r3
 101215c:	000d883a 	mov	r6,zero
 1012160:	000f883a 	mov	r7,zero
 1012164:	1009883a 	mov	r4,r2
 1012168:	10131380 	call	1013138 <__gtdf2>
 101216c:	0080040e 	bge	zero,r2,1012180 <floor+0xb4>
 1012170:	88004416 	blt	r17,zero,1012284 <floor+0x1b8>
 1012174:	0704303a 	nor	r2,zero,fp
 1012178:	b8ae703a 	and	r23,r23,r2
 101217c:	0025883a 	mov	r18,zero
 1012180:	9021883a 	mov	r16,r18
 1012184:	b823883a 	mov	r17,r23
 1012188:	8005883a 	mov	r2,r16
 101218c:	8807883a 	mov	r3,r17
 1012190:	dfc00917 	ldw	ra,36(sp)
 1012194:	df000817 	ldw	fp,32(sp)
 1012198:	ddc00717 	ldw	r23,28(sp)
 101219c:	dd800617 	ldw	r22,24(sp)
 10121a0:	dd400517 	ldw	r21,20(sp)
 10121a4:	dd000417 	ldw	r20,16(sp)
 10121a8:	dcc00317 	ldw	r19,12(sp)
 10121ac:	dc800217 	ldw	r18,8(sp)
 10121b0:	dc400117 	ldw	r17,4(sp)
 10121b4:	dc000017 	ldw	r16,0(sp)
 10121b8:	dec00a04 	addi	sp,sp,40
 10121bc:	f800283a 	ret
 10121c0:	00800cc4 	movi	r2,51
 10121c4:	15801616 	blt	r2,r22,1012220 <floor+0x154>
 10121c8:	18befb44 	addi	r2,r3,-1043
 10121cc:	00ffffc4 	movi	r3,-1
 10121d0:	18b8d83a 	srl	fp,r3,r2
 10121d4:	e104703a 	and	r2,fp,r4
 10121d8:	103feb26 	beq	r2,zero,1012188 <floor+0xbc>
 10121dc:	00a20034 	movhi	r2,34816
 10121e0:	109d6704 	addi	r2,r2,30108
 10121e4:	00df8e34 	movhi	r3,32312
 10121e8:	18f90f04 	addi	r3,r3,-7108
 10121ec:	180f883a 	mov	r7,r3
 10121f0:	100d883a 	mov	r6,r2
 10121f4:	1012a200 	call	1012a20 <__adddf3>
 10121f8:	180b883a 	mov	r5,r3
 10121fc:	000d883a 	mov	r6,zero
 1012200:	000f883a 	mov	r7,zero
 1012204:	1009883a 	mov	r4,r2
 1012208:	10131380 	call	1013138 <__gtdf2>
 101220c:	0080210e 	bge	zero,r2,1012294 <floor+0x1c8>
 1012210:	88002216 	blt	r17,zero,101229c <floor+0x1d0>
 1012214:	0704303a 	nor	r2,zero,fp
 1012218:	90a4703a 	and	r18,r18,r2
 101221c:	003fd806 	br	1012180 <floor+0xb4>
 1012220:	00810004 	movi	r2,1024
 1012224:	b0bfd81e 	bne	r22,r2,1012188 <floor+0xbc>
 1012228:	800d883a 	mov	r6,r16
 101222c:	280f883a 	mov	r7,r5
 1012230:	1012a200 	call	1012a20 <__adddf3>
 1012234:	1021883a 	mov	r16,r2
 1012238:	1823883a 	mov	r17,r3
 101223c:	003fd206 	br	1012188 <floor+0xbc>
 1012240:	00a20034 	movhi	r2,34816
 1012244:	109d6704 	addi	r2,r2,30108
 1012248:	00df8e34 	movhi	r3,32312
 101224c:	18f90f04 	addi	r3,r3,-7108
 1012250:	180f883a 	mov	r7,r3
 1012254:	100d883a 	mov	r6,r2
 1012258:	1012a200 	call	1012a20 <__adddf3>
 101225c:	180b883a 	mov	r5,r3
 1012260:	000d883a 	mov	r6,zero
 1012264:	000f883a 	mov	r7,zero
 1012268:	1009883a 	mov	r4,r2
 101226c:	10131380 	call	1013138 <__gtdf2>
 1012270:	00bfc30e 	bge	zero,r2,1012180 <floor+0xb4>
 1012274:	88001416 	blt	r17,zero,10122c8 <floor+0x1fc>
 1012278:	002f883a 	mov	r23,zero
 101227c:	0025883a 	mov	r18,zero
 1012280:	003fbf06 	br	1012180 <floor+0xb4>
 1012284:	00800434 	movhi	r2,16
 1012288:	1585d83a 	sra	r2,r2,r22
 101228c:	88af883a 	add	r23,r17,r2
 1012290:	003fb806 	br	1012174 <floor+0xa8>
 1012294:	882f883a 	mov	r23,r17
 1012298:	003fb906 	br	1012180 <floor+0xb4>
 101229c:	00800504 	movi	r2,20
 10122a0:	b0801126 	beq	r22,r2,10122e8 <floor+0x21c>
 10122a4:	00c00d04 	movi	r3,52
 10122a8:	1d87c83a 	sub	r3,r3,r22
 10122ac:	00800044 	movi	r2,1
 10122b0:	10c4983a 	sll	r2,r2,r3
 10122b4:	8085883a 	add	r2,r16,r2
 10122b8:	1400012e 	bgeu	r2,r16,10122c0 <floor+0x1f4>
 10122bc:	8dc00044 	addi	r23,r17,1
 10122c0:	1025883a 	mov	r18,r2
 10122c4:	003fd306 	br	1012214 <floor+0x148>
 10122c8:	00a00034 	movhi	r2,32768
 10122cc:	10bfffc4 	addi	r2,r2,-1
 10122d0:	8884703a 	and	r2,r17,r2
 10122d4:	8084b03a 	or	r2,r16,r2
 10122d8:	103fee26 	beq	r2,zero,1012294 <floor+0x1c8>
 10122dc:	05effc34 	movhi	r23,49136
 10122e0:	0025883a 	mov	r18,zero
 10122e4:	003fa606 	br	1012180 <floor+0xb4>
 10122e8:	8dc00044 	addi	r23,r17,1
 10122ec:	003fc906 	br	1012214 <floor+0x148>

010122f0 <__isnand>:
 10122f0:	200d883a 	mov	r6,r4
 10122f4:	0109c83a 	sub	r4,zero,r4
 10122f8:	2188b03a 	or	r4,r4,r6
 10122fc:	2008d7fa 	srli	r4,r4,31
 1012300:	00a00034 	movhi	r2,32768
 1012304:	10bfffc4 	addi	r2,r2,-1
 1012308:	1144703a 	and	r2,r2,r5
 101230c:	2088b03a 	or	r4,r4,r2
 1012310:	009ffc34 	movhi	r2,32752
 1012314:	1105c83a 	sub	r2,r2,r4
 1012318:	1004d7fa 	srli	r2,r2,31
 101231c:	f800283a 	ret

01012320 <matherr>:
 1012320:	0005883a 	mov	r2,zero
 1012324:	f800283a 	ret

01012328 <nan>:
 1012328:	015ffe34 	movhi	r5,32760
 101232c:	0005883a 	mov	r2,zero
 1012330:	2807883a 	mov	r3,r5
 1012334:	f800283a 	ret

01012338 <scalbn>:
 1012338:	2011883a 	mov	r8,r4
 101233c:	291ffc2c 	andhi	r4,r5,32752
 1012340:	2009d53a 	srai	r4,r4,20
 1012344:	defffd04 	addi	sp,sp,-12
 1012348:	dc000015 	stw	r16,0(sp)
 101234c:	dfc00215 	stw	ra,8(sp)
 1012350:	dc400115 	stw	r17,4(sp)
 1012354:	2813883a 	mov	r9,r5
 1012358:	2815883a 	mov	r10,r5
 101235c:	3021883a 	mov	r16,r6
 1012360:	2000281e 	bne	r4,zero,1012404 <scalbn+0xcc>
 1012364:	00a00034 	movhi	r2,32768
 1012368:	10bfffc4 	addi	r2,r2,-1
 101236c:	2884703a 	and	r2,r5,r2
 1012370:	4084b03a 	or	r2,r8,r2
 1012374:	10001826 	beq	r2,zero,10123d8 <scalbn+0xa0>
 1012378:	0005883a 	mov	r2,zero
 101237c:	00d0d434 	movhi	r3,17232
 1012380:	4009883a 	mov	r4,r8
 1012384:	100d883a 	mov	r6,r2
 1012388:	180f883a 	mov	r7,r3
 101238c:	1012a940 	call	1012a94 <__muldf3>
 1012390:	100b883a 	mov	r5,r2
 1012394:	1011883a 	mov	r8,r2
 1012398:	00bffff4 	movhi	r2,65535
 101239c:	108f2c04 	addi	r2,r2,15536
 10123a0:	180d883a 	mov	r6,r3
 10123a4:	1813883a 	mov	r9,r3
 10123a8:	8080120e 	bge	r16,r2,10123f4 <scalbn+0xbc>
 10123ac:	00b0be74 	movhi	r2,49913
 10123b0:	10bcd644 	addi	r2,r2,-3239
 10123b4:	00c06974 	movhi	r3,421
 10123b8:	18db87c4 	addi	r3,r3,28191
 10123bc:	2809883a 	mov	r4,r5
 10123c0:	180f883a 	mov	r7,r3
 10123c4:	300b883a 	mov	r5,r6
 10123c8:	100d883a 	mov	r6,r2
 10123cc:	1012a940 	call	1012a94 <__muldf3>
 10123d0:	1011883a 	mov	r8,r2
 10123d4:	1813883a 	mov	r9,r3
 10123d8:	4005883a 	mov	r2,r8
 10123dc:	4807883a 	mov	r3,r9
 10123e0:	dfc00217 	ldw	ra,8(sp)
 10123e4:	dc400117 	ldw	r17,4(sp)
 10123e8:	dc000017 	ldw	r16,0(sp)
 10123ec:	dec00304 	addi	sp,sp,12
 10123f0:	f800283a 	ret
 10123f4:	189ffc2c 	andhi	r2,r3,32752
 10123f8:	1005d53a 	srai	r2,r2,20
 10123fc:	1815883a 	mov	r10,r3
 1012400:	113ff284 	addi	r4,r2,-54
 1012404:	0081ffc4 	movi	r2,2047
 1012408:	20801126 	beq	r4,r2,1012450 <scalbn+0x118>
 101240c:	2409883a 	add	r4,r4,r16
 1012410:	0081ff84 	movi	r2,2046
 1012414:	11001c16 	blt	r2,r4,1012488 <scalbn+0x150>
 1012418:	0100290e 	bge	zero,r4,10124c0 <scalbn+0x188>
 101241c:	200a953a 	slli	r5,r4,20
 1012420:	01200434 	movhi	r4,32784
 1012424:	213fffc4 	addi	r4,r4,-1
 1012428:	5108703a 	and	r4,r10,r4
 101242c:	2148b03a 	or	r4,r4,r5
 1012430:	2013883a 	mov	r9,r4
 1012434:	4005883a 	mov	r2,r8
 1012438:	4807883a 	mov	r3,r9
 101243c:	dfc00217 	ldw	ra,8(sp)
 1012440:	dc400117 	ldw	r17,4(sp)
 1012444:	dc000017 	ldw	r16,0(sp)
 1012448:	dec00304 	addi	sp,sp,12
 101244c:	f800283a 	ret
 1012450:	480f883a 	mov	r7,r9
 1012454:	4009883a 	mov	r4,r8
 1012458:	480b883a 	mov	r5,r9
 101245c:	400d883a 	mov	r6,r8
 1012460:	1012a200 	call	1012a20 <__adddf3>
 1012464:	1011883a 	mov	r8,r2
 1012468:	1813883a 	mov	r9,r3
 101246c:	4005883a 	mov	r2,r8
 1012470:	4807883a 	mov	r3,r9
 1012474:	dfc00217 	ldw	ra,8(sp)
 1012478:	dc400117 	ldw	r17,4(sp)
 101247c:	dc000017 	ldw	r16,0(sp)
 1012480:	dec00304 	addi	sp,sp,12
 1012484:	f800283a 	ret
 1012488:	04220034 	movhi	r16,34816
 101248c:	841d6704 	addi	r16,r16,30108
 1012490:	045f8e34 	movhi	r17,32312
 1012494:	8c790f04 	addi	r17,r17,-7108
 1012498:	480f883a 	mov	r7,r9
 101249c:	400d883a 	mov	r6,r8
 10124a0:	8009883a 	mov	r4,r16
 10124a4:	880b883a 	mov	r5,r17
 10124a8:	10125180 	call	1012518 <copysign>
 10124ac:	180b883a 	mov	r5,r3
 10124b0:	800d883a 	mov	r6,r16
 10124b4:	880f883a 	mov	r7,r17
 10124b8:	1009883a 	mov	r4,r2
 10124bc:	003fc306 	br	10123cc <scalbn+0x94>
 10124c0:	00bff284 	movi	r2,-54
 10124c4:	11000716 	blt	r2,r4,10124e4 <scalbn+0x1ac>
 10124c8:	00b0d414 	movui	r2,50000
 10124cc:	143fee16 	blt	r2,r16,1012488 <scalbn+0x150>
 10124d0:	0430be74 	movhi	r16,49913
 10124d4:	843cd644 	addi	r16,r16,-3239
 10124d8:	04406974 	movhi	r17,421
 10124dc:	8c5b87c4 	addi	r17,r17,28191
 10124e0:	003fed06 	br	1012498 <scalbn+0x160>
 10124e4:	21000d84 	addi	r4,r4,54
 10124e8:	2008953a 	slli	r4,r4,20
 10124ec:	01e00434 	movhi	r7,32784
 10124f0:	39ffffc4 	addi	r7,r7,-1
 10124f4:	51ce703a 	and	r7,r10,r7
 10124f8:	390eb03a 	or	r7,r7,r4
 10124fc:	024f2434 	movhi	r9,15504
 1012500:	4009883a 	mov	r4,r8
 1012504:	0011883a 	mov	r8,zero
 1012508:	380b883a 	mov	r5,r7
 101250c:	400d883a 	mov	r6,r8
 1012510:	480f883a 	mov	r7,r9
 1012514:	003fad06 	br	10123cc <scalbn+0x94>

01012518 <copysign>:
 1012518:	3813883a 	mov	r9,r7
 101251c:	01e00034 	movhi	r7,32768
 1012520:	39ffffc4 	addi	r7,r7,-1
 1012524:	394e703a 	and	r7,r7,r5
 1012528:	4aa0002c 	andhi	r10,r9,32768
 101252c:	3a8eb03a 	or	r7,r7,r10
 1012530:	2005883a 	mov	r2,r4
 1012534:	3807883a 	mov	r3,r7
 1012538:	f800283a 	ret

0101253c <__extendsfdf2>:
 101253c:	defff904 	addi	sp,sp,-28
 1012540:	d9000115 	stw	r4,4(sp)
 1012544:	d9400204 	addi	r5,sp,8
 1012548:	d9000104 	addi	r4,sp,4
 101254c:	dfc00615 	stw	ra,24(sp)
 1012550:	101373c0 	call	101373c <__unpack_f>
 1012554:	d9c00517 	ldw	r7,20(sp)
 1012558:	0011883a 	mov	r8,zero
 101255c:	400697ba 	slli	r3,r8,30
 1012560:	3812d0ba 	srli	r9,r7,2
 1012564:	380497ba 	slli	r2,r7,30
 1012568:	d9000217 	ldw	r4,8(sp)
 101256c:	d9400317 	ldw	r5,12(sp)
 1012570:	d9800417 	ldw	r6,16(sp)
 1012574:	48c6b03a 	or	r3,r9,r3
 1012578:	100f883a 	mov	r7,r2
 101257c:	d8c00015 	stw	r3,0(sp)
 1012580:	10134a00 	call	10134a0 <__make_dp>
 1012584:	dfc00617 	ldw	ra,24(sp)
 1012588:	dec00704 	addi	sp,sp,28
 101258c:	f800283a 	ret

01012590 <_fpadd_parts>:
 1012590:	defff804 	addi	sp,sp,-32
 1012594:	dcc00315 	stw	r19,12(sp)
 1012598:	2027883a 	mov	r19,r4
 101259c:	21000017 	ldw	r4,0(r4)
 10125a0:	00c00044 	movi	r3,1
 10125a4:	dd400515 	stw	r21,20(sp)
 10125a8:	dd000415 	stw	r20,16(sp)
 10125ac:	ddc00715 	stw	r23,28(sp)
 10125b0:	dd800615 	stw	r22,24(sp)
 10125b4:	dc800215 	stw	r18,8(sp)
 10125b8:	dc400115 	stw	r17,4(sp)
 10125bc:	dc000015 	stw	r16,0(sp)
 10125c0:	282b883a 	mov	r21,r5
 10125c4:	3029883a 	mov	r20,r6
 10125c8:	1900632e 	bgeu	r3,r4,1012758 <_fpadd_parts+0x1c8>
 10125cc:	28800017 	ldw	r2,0(r5)
 10125d0:	1880812e 	bgeu	r3,r2,10127d8 <_fpadd_parts+0x248>
 10125d4:	00c00104 	movi	r3,4
 10125d8:	20c0dc26 	beq	r4,r3,101294c <_fpadd_parts+0x3bc>
 10125dc:	10c07e26 	beq	r2,r3,10127d8 <_fpadd_parts+0x248>
 10125e0:	00c00084 	movi	r3,2
 10125e4:	10c06726 	beq	r2,r3,1012784 <_fpadd_parts+0x1f4>
 10125e8:	20c07b26 	beq	r4,r3,10127d8 <_fpadd_parts+0x248>
 10125ec:	9dc00217 	ldw	r23,8(r19)
 10125f0:	28c00217 	ldw	r3,8(r5)
 10125f4:	9c400317 	ldw	r17,12(r19)
 10125f8:	2bc00317 	ldw	r15,12(r5)
 10125fc:	b8cdc83a 	sub	r6,r23,r3
 1012600:	9c800417 	ldw	r18,16(r19)
 1012604:	2c000417 	ldw	r16,16(r5)
 1012608:	3009883a 	mov	r4,r6
 101260c:	30009716 	blt	r6,zero,101286c <_fpadd_parts+0x2dc>
 1012610:	00800fc4 	movi	r2,63
 1012614:	11806b16 	blt	r2,r6,10127c4 <_fpadd_parts+0x234>
 1012618:	0100a40e 	bge	zero,r4,10128ac <_fpadd_parts+0x31c>
 101261c:	35bff804 	addi	r22,r6,-32
 1012620:	b000bc16 	blt	r22,zero,1012914 <_fpadd_parts+0x384>
 1012624:	8596d83a 	srl	r11,r16,r22
 1012628:	0019883a 	mov	r12,zero
 101262c:	0013883a 	mov	r9,zero
 1012630:	01000044 	movi	r4,1
 1012634:	0015883a 	mov	r10,zero
 1012638:	b000be16 	blt	r22,zero,1012934 <_fpadd_parts+0x3a4>
 101263c:	2590983a 	sll	r8,r4,r22
 1012640:	000f883a 	mov	r7,zero
 1012644:	00bfffc4 	movi	r2,-1
 1012648:	3889883a 	add	r4,r7,r2
 101264c:	408b883a 	add	r5,r8,r2
 1012650:	21cd803a 	cmpltu	r6,r4,r7
 1012654:	314b883a 	add	r5,r6,r5
 1012658:	7904703a 	and	r2,r15,r4
 101265c:	8146703a 	and	r3,r16,r5
 1012660:	10c4b03a 	or	r2,r2,r3
 1012664:	10000226 	beq	r2,zero,1012670 <_fpadd_parts+0xe0>
 1012668:	02400044 	movi	r9,1
 101266c:	0015883a 	mov	r10,zero
 1012670:	5a5eb03a 	or	r15,r11,r9
 1012674:	62a0b03a 	or	r16,r12,r10
 1012678:	99400117 	ldw	r5,4(r19)
 101267c:	a8800117 	ldw	r2,4(r21)
 1012680:	28806e26 	beq	r5,r2,101283c <_fpadd_parts+0x2ac>
 1012684:	28006626 	beq	r5,zero,1012820 <_fpadd_parts+0x290>
 1012688:	7c45c83a 	sub	r2,r15,r17
 101268c:	7889803a 	cmpltu	r4,r15,r2
 1012690:	8487c83a 	sub	r3,r16,r18
 1012694:	1909c83a 	sub	r4,r3,r4
 1012698:	100d883a 	mov	r6,r2
 101269c:	200f883a 	mov	r7,r4
 10126a0:	38007716 	blt	r7,zero,1012880 <_fpadd_parts+0x2f0>
 10126a4:	a5c00215 	stw	r23,8(r20)
 10126a8:	a1c00415 	stw	r7,16(r20)
 10126ac:	a0000115 	stw	zero,4(r20)
 10126b0:	a1800315 	stw	r6,12(r20)
 10126b4:	a2000317 	ldw	r8,12(r20)
 10126b8:	a2400417 	ldw	r9,16(r20)
 10126bc:	00bfffc4 	movi	r2,-1
 10126c0:	408b883a 	add	r5,r8,r2
 10126c4:	2a09803a 	cmpltu	r4,r5,r8
 10126c8:	488d883a 	add	r6,r9,r2
 10126cc:	01c40034 	movhi	r7,4096
 10126d0:	39ffffc4 	addi	r7,r7,-1
 10126d4:	218d883a 	add	r6,r4,r6
 10126d8:	39801736 	bltu	r7,r6,1012738 <_fpadd_parts+0x1a8>
 10126dc:	31c06526 	beq	r6,r7,1012874 <_fpadd_parts+0x2e4>
 10126e0:	a3000217 	ldw	r12,8(r20)
 10126e4:	4209883a 	add	r4,r8,r8
 10126e8:	00bfffc4 	movi	r2,-1
 10126ec:	220f803a 	cmpltu	r7,r4,r8
 10126f0:	4a4b883a 	add	r5,r9,r9
 10126f4:	394f883a 	add	r7,r7,r5
 10126f8:	2095883a 	add	r10,r4,r2
 10126fc:	3897883a 	add	r11,r7,r2
 1012700:	510d803a 	cmpltu	r6,r10,r4
 1012704:	6099883a 	add	r12,r12,r2
 1012708:	32d7883a 	add	r11,r6,r11
 101270c:	00840034 	movhi	r2,4096
 1012710:	10bfffc4 	addi	r2,r2,-1
 1012714:	2011883a 	mov	r8,r4
 1012718:	3813883a 	mov	r9,r7
 101271c:	a1000315 	stw	r4,12(r20)
 1012720:	a1c00415 	stw	r7,16(r20)
 1012724:	a3000215 	stw	r12,8(r20)
 1012728:	12c00336 	bltu	r2,r11,1012738 <_fpadd_parts+0x1a8>
 101272c:	58bfed1e 	bne	r11,r2,10126e4 <_fpadd_parts+0x154>
 1012730:	00bfff84 	movi	r2,-2
 1012734:	12bfeb2e 	bgeu	r2,r10,10126e4 <_fpadd_parts+0x154>
 1012738:	a2800417 	ldw	r10,16(r20)
 101273c:	008000c4 	movi	r2,3
 1012740:	00c80034 	movhi	r3,8192
 1012744:	18ffffc4 	addi	r3,r3,-1
 1012748:	a2400317 	ldw	r9,12(r20)
 101274c:	a0800015 	stw	r2,0(r20)
 1012750:	1a802336 	bltu	r3,r10,10127e0 <_fpadd_parts+0x250>
 1012754:	a027883a 	mov	r19,r20
 1012758:	9805883a 	mov	r2,r19
 101275c:	ddc00717 	ldw	r23,28(sp)
 1012760:	dd800617 	ldw	r22,24(sp)
 1012764:	dd400517 	ldw	r21,20(sp)
 1012768:	dd000417 	ldw	r20,16(sp)
 101276c:	dcc00317 	ldw	r19,12(sp)
 1012770:	dc800217 	ldw	r18,8(sp)
 1012774:	dc400117 	ldw	r17,4(sp)
 1012778:	dc000017 	ldw	r16,0(sp)
 101277c:	dec00804 	addi	sp,sp,32
 1012780:	f800283a 	ret
 1012784:	20fff41e 	bne	r4,r3,1012758 <_fpadd_parts+0x1c8>
 1012788:	31000015 	stw	r4,0(r6)
 101278c:	98800117 	ldw	r2,4(r19)
 1012790:	30800115 	stw	r2,4(r6)
 1012794:	98c00217 	ldw	r3,8(r19)
 1012798:	30c00215 	stw	r3,8(r6)
 101279c:	98800317 	ldw	r2,12(r19)
 10127a0:	30800315 	stw	r2,12(r6)
 10127a4:	98c00417 	ldw	r3,16(r19)
 10127a8:	30c00415 	stw	r3,16(r6)
 10127ac:	98800117 	ldw	r2,4(r19)
 10127b0:	28c00117 	ldw	r3,4(r5)
 10127b4:	3027883a 	mov	r19,r6
 10127b8:	10c4703a 	and	r2,r2,r3
 10127bc:	30800115 	stw	r2,4(r6)
 10127c0:	003fe506 	br	1012758 <_fpadd_parts+0x1c8>
 10127c4:	1dc02616 	blt	r3,r23,1012860 <_fpadd_parts+0x2d0>
 10127c8:	0023883a 	mov	r17,zero
 10127cc:	182f883a 	mov	r23,r3
 10127d0:	0025883a 	mov	r18,zero
 10127d4:	003fa806 	br	1012678 <_fpadd_parts+0xe8>
 10127d8:	a827883a 	mov	r19,r21
 10127dc:	003fde06 	br	1012758 <_fpadd_parts+0x1c8>
 10127e0:	01800044 	movi	r6,1
 10127e4:	500497fa 	slli	r2,r10,31
 10127e8:	4808d07a 	srli	r4,r9,1
 10127ec:	518ad83a 	srl	r5,r10,r6
 10127f0:	a2000217 	ldw	r8,8(r20)
 10127f4:	1108b03a 	or	r4,r2,r4
 10127f8:	0007883a 	mov	r3,zero
 10127fc:	4984703a 	and	r2,r9,r6
 1012800:	208cb03a 	or	r6,r4,r2
 1012804:	28ceb03a 	or	r7,r5,r3
 1012808:	42000044 	addi	r8,r8,1
 101280c:	a027883a 	mov	r19,r20
 1012810:	a1c00415 	stw	r7,16(r20)
 1012814:	a2000215 	stw	r8,8(r20)
 1012818:	a1800315 	stw	r6,12(r20)
 101281c:	003fce06 	br	1012758 <_fpadd_parts+0x1c8>
 1012820:	8bc5c83a 	sub	r2,r17,r15
 1012824:	8889803a 	cmpltu	r4,r17,r2
 1012828:	9407c83a 	sub	r3,r18,r16
 101282c:	1909c83a 	sub	r4,r3,r4
 1012830:	100d883a 	mov	r6,r2
 1012834:	200f883a 	mov	r7,r4
 1012838:	003f9906 	br	10126a0 <_fpadd_parts+0x110>
 101283c:	7c45883a 	add	r2,r15,r17
 1012840:	13c9803a 	cmpltu	r4,r2,r15
 1012844:	8487883a 	add	r3,r16,r18
 1012848:	20c9883a 	add	r4,r4,r3
 101284c:	a1400115 	stw	r5,4(r20)
 1012850:	a5c00215 	stw	r23,8(r20)
 1012854:	a0800315 	stw	r2,12(r20)
 1012858:	a1000415 	stw	r4,16(r20)
 101285c:	003fb606 	br	1012738 <_fpadd_parts+0x1a8>
 1012860:	001f883a 	mov	r15,zero
 1012864:	0021883a 	mov	r16,zero
 1012868:	003f8306 	br	1012678 <_fpadd_parts+0xe8>
 101286c:	018dc83a 	sub	r6,zero,r6
 1012870:	003f6706 	br	1012610 <_fpadd_parts+0x80>
 1012874:	00bfff84 	movi	r2,-2
 1012878:	117faf36 	bltu	r2,r5,1012738 <_fpadd_parts+0x1a8>
 101287c:	003f9806 	br	10126e0 <_fpadd_parts+0x150>
 1012880:	0005883a 	mov	r2,zero
 1012884:	1189c83a 	sub	r4,r2,r6
 1012888:	1105803a 	cmpltu	r2,r2,r4
 101288c:	01cbc83a 	sub	r5,zero,r7
 1012890:	2885c83a 	sub	r2,r5,r2
 1012894:	01800044 	movi	r6,1
 1012898:	a1800115 	stw	r6,4(r20)
 101289c:	a5c00215 	stw	r23,8(r20)
 10128a0:	a1000315 	stw	r4,12(r20)
 10128a4:	a0800415 	stw	r2,16(r20)
 10128a8:	003f8206 	br	10126b4 <_fpadd_parts+0x124>
 10128ac:	203f7226 	beq	r4,zero,1012678 <_fpadd_parts+0xe8>
 10128b0:	35bff804 	addi	r22,r6,-32
 10128b4:	b9af883a 	add	r23,r23,r6
 10128b8:	b0003116 	blt	r22,zero,1012980 <_fpadd_parts+0x3f0>
 10128bc:	959ad83a 	srl	r13,r18,r22
 10128c0:	001d883a 	mov	r14,zero
 10128c4:	000f883a 	mov	r7,zero
 10128c8:	01000044 	movi	r4,1
 10128cc:	0011883a 	mov	r8,zero
 10128d0:	b0002516 	blt	r22,zero,1012968 <_fpadd_parts+0x3d8>
 10128d4:	2594983a 	sll	r10,r4,r22
 10128d8:	0013883a 	mov	r9,zero
 10128dc:	00bfffc4 	movi	r2,-1
 10128e0:	4889883a 	add	r4,r9,r2
 10128e4:	508b883a 	add	r5,r10,r2
 10128e8:	224d803a 	cmpltu	r6,r4,r9
 10128ec:	314b883a 	add	r5,r6,r5
 10128f0:	8904703a 	and	r2,r17,r4
 10128f4:	9146703a 	and	r3,r18,r5
 10128f8:	10c4b03a 	or	r2,r2,r3
 10128fc:	10000226 	beq	r2,zero,1012908 <_fpadd_parts+0x378>
 1012900:	01c00044 	movi	r7,1
 1012904:	0011883a 	mov	r8,zero
 1012908:	69e2b03a 	or	r17,r13,r7
 101290c:	7224b03a 	or	r18,r14,r8
 1012910:	003f5906 	br	1012678 <_fpadd_parts+0xe8>
 1012914:	8407883a 	add	r3,r16,r16
 1012918:	008007c4 	movi	r2,31
 101291c:	1185c83a 	sub	r2,r2,r6
 1012920:	1886983a 	sll	r3,r3,r2
 1012924:	7996d83a 	srl	r11,r15,r6
 1012928:	8198d83a 	srl	r12,r16,r6
 101292c:	1ad6b03a 	or	r11,r3,r11
 1012930:	003f3e06 	br	101262c <_fpadd_parts+0x9c>
 1012934:	2006d07a 	srli	r3,r4,1
 1012938:	008007c4 	movi	r2,31
 101293c:	1185c83a 	sub	r2,r2,r6
 1012940:	1890d83a 	srl	r8,r3,r2
 1012944:	218e983a 	sll	r7,r4,r6
 1012948:	003f3e06 	br	1012644 <_fpadd_parts+0xb4>
 101294c:	113f821e 	bne	r2,r4,1012758 <_fpadd_parts+0x1c8>
 1012950:	28c00117 	ldw	r3,4(r5)
 1012954:	98800117 	ldw	r2,4(r19)
 1012958:	10ff7f26 	beq	r2,r3,1012758 <_fpadd_parts+0x1c8>
 101295c:	04c040f4 	movhi	r19,259
 1012960:	9cd34304 	addi	r19,r19,19724
 1012964:	003f7c06 	br	1012758 <_fpadd_parts+0x1c8>
 1012968:	2006d07a 	srli	r3,r4,1
 101296c:	008007c4 	movi	r2,31
 1012970:	1185c83a 	sub	r2,r2,r6
 1012974:	1894d83a 	srl	r10,r3,r2
 1012978:	2192983a 	sll	r9,r4,r6
 101297c:	003fd706 	br	10128dc <_fpadd_parts+0x34c>
 1012980:	9487883a 	add	r3,r18,r18
 1012984:	008007c4 	movi	r2,31
 1012988:	1185c83a 	sub	r2,r2,r6
 101298c:	1886983a 	sll	r3,r3,r2
 1012990:	899ad83a 	srl	r13,r17,r6
 1012994:	919cd83a 	srl	r14,r18,r6
 1012998:	1b5ab03a 	or	r13,r3,r13
 101299c:	003fc906 	br	10128c4 <_fpadd_parts+0x334>

010129a0 <__subdf3>:
 10129a0:	deffea04 	addi	sp,sp,-88
 10129a4:	dcc01415 	stw	r19,80(sp)
 10129a8:	dcc00404 	addi	r19,sp,16
 10129ac:	2011883a 	mov	r8,r4
 10129b0:	2813883a 	mov	r9,r5
 10129b4:	dc401315 	stw	r17,76(sp)
 10129b8:	d809883a 	mov	r4,sp
 10129bc:	980b883a 	mov	r5,r19
 10129c0:	dc400904 	addi	r17,sp,36
 10129c4:	dfc01515 	stw	ra,84(sp)
 10129c8:	da400115 	stw	r9,4(sp)
 10129cc:	d9c00315 	stw	r7,12(sp)
 10129d0:	da000015 	stw	r8,0(sp)
 10129d4:	d9800215 	stw	r6,8(sp)
 10129d8:	1013b180 	call	1013b18 <__unpack_d>
 10129dc:	d9000204 	addi	r4,sp,8
 10129e0:	880b883a 	mov	r5,r17
 10129e4:	1013b180 	call	1013b18 <__unpack_d>
 10129e8:	d8800a17 	ldw	r2,40(sp)
 10129ec:	880b883a 	mov	r5,r17
 10129f0:	9809883a 	mov	r4,r19
 10129f4:	d9800e04 	addi	r6,sp,56
 10129f8:	1080005c 	xori	r2,r2,1
 10129fc:	d8800a15 	stw	r2,40(sp)
 1012a00:	10125900 	call	1012590 <_fpadd_parts>
 1012a04:	1009883a 	mov	r4,r2
 1012a08:	10138040 	call	1013804 <__pack_d>
 1012a0c:	dfc01517 	ldw	ra,84(sp)
 1012a10:	dcc01417 	ldw	r19,80(sp)
 1012a14:	dc401317 	ldw	r17,76(sp)
 1012a18:	dec01604 	addi	sp,sp,88
 1012a1c:	f800283a 	ret

01012a20 <__adddf3>:
 1012a20:	deffea04 	addi	sp,sp,-88
 1012a24:	dcc01415 	stw	r19,80(sp)
 1012a28:	dcc00404 	addi	r19,sp,16
 1012a2c:	2011883a 	mov	r8,r4
 1012a30:	2813883a 	mov	r9,r5
 1012a34:	dc401315 	stw	r17,76(sp)
 1012a38:	d809883a 	mov	r4,sp
 1012a3c:	980b883a 	mov	r5,r19
 1012a40:	dc400904 	addi	r17,sp,36
 1012a44:	dfc01515 	stw	ra,84(sp)
 1012a48:	da400115 	stw	r9,4(sp)
 1012a4c:	d9c00315 	stw	r7,12(sp)
 1012a50:	da000015 	stw	r8,0(sp)
 1012a54:	d9800215 	stw	r6,8(sp)
 1012a58:	1013b180 	call	1013b18 <__unpack_d>
 1012a5c:	d9000204 	addi	r4,sp,8
 1012a60:	880b883a 	mov	r5,r17
 1012a64:	1013b180 	call	1013b18 <__unpack_d>
 1012a68:	d9800e04 	addi	r6,sp,56
 1012a6c:	9809883a 	mov	r4,r19
 1012a70:	880b883a 	mov	r5,r17
 1012a74:	10125900 	call	1012590 <_fpadd_parts>
 1012a78:	1009883a 	mov	r4,r2
 1012a7c:	10138040 	call	1013804 <__pack_d>
 1012a80:	dfc01517 	ldw	ra,84(sp)
 1012a84:	dcc01417 	ldw	r19,80(sp)
 1012a88:	dc401317 	ldw	r17,76(sp)
 1012a8c:	dec01604 	addi	sp,sp,88
 1012a90:	f800283a 	ret

01012a94 <__muldf3>:
 1012a94:	deffe004 	addi	sp,sp,-128
 1012a98:	dc401815 	stw	r17,96(sp)
 1012a9c:	dc400404 	addi	r17,sp,16
 1012aa0:	2011883a 	mov	r8,r4
 1012aa4:	2813883a 	mov	r9,r5
 1012aa8:	dc001715 	stw	r16,92(sp)
 1012aac:	d809883a 	mov	r4,sp
 1012ab0:	880b883a 	mov	r5,r17
 1012ab4:	dc000904 	addi	r16,sp,36
 1012ab8:	dfc01f15 	stw	ra,124(sp)
 1012abc:	da400115 	stw	r9,4(sp)
 1012ac0:	d9c00315 	stw	r7,12(sp)
 1012ac4:	da000015 	stw	r8,0(sp)
 1012ac8:	d9800215 	stw	r6,8(sp)
 1012acc:	ddc01e15 	stw	r23,120(sp)
 1012ad0:	dd801d15 	stw	r22,116(sp)
 1012ad4:	dd401c15 	stw	r21,112(sp)
 1012ad8:	dd001b15 	stw	r20,108(sp)
 1012adc:	dcc01a15 	stw	r19,104(sp)
 1012ae0:	dc801915 	stw	r18,100(sp)
 1012ae4:	1013b180 	call	1013b18 <__unpack_d>
 1012ae8:	d9000204 	addi	r4,sp,8
 1012aec:	800b883a 	mov	r5,r16
 1012af0:	1013b180 	call	1013b18 <__unpack_d>
 1012af4:	d9000417 	ldw	r4,16(sp)
 1012af8:	00800044 	movi	r2,1
 1012afc:	1100102e 	bgeu	r2,r4,1012b40 <__muldf3+0xac>
 1012b00:	d8c00917 	ldw	r3,36(sp)
 1012b04:	10c0062e 	bgeu	r2,r3,1012b20 <__muldf3+0x8c>
 1012b08:	00800104 	movi	r2,4
 1012b0c:	20800a26 	beq	r4,r2,1012b38 <__muldf3+0xa4>
 1012b10:	1880cc26 	beq	r3,r2,1012e44 <__muldf3+0x3b0>
 1012b14:	00800084 	movi	r2,2
 1012b18:	20800926 	beq	r4,r2,1012b40 <__muldf3+0xac>
 1012b1c:	1880191e 	bne	r3,r2,1012b84 <__muldf3+0xf0>
 1012b20:	d8c00a17 	ldw	r3,40(sp)
 1012b24:	d8800517 	ldw	r2,20(sp)
 1012b28:	8009883a 	mov	r4,r16
 1012b2c:	10c4c03a 	cmpne	r2,r2,r3
 1012b30:	d8800a15 	stw	r2,40(sp)
 1012b34:	00000706 	br	1012b54 <__muldf3+0xc0>
 1012b38:	00800084 	movi	r2,2
 1012b3c:	1880c326 	beq	r3,r2,1012e4c <__muldf3+0x3b8>
 1012b40:	d8800517 	ldw	r2,20(sp)
 1012b44:	d8c00a17 	ldw	r3,40(sp)
 1012b48:	8809883a 	mov	r4,r17
 1012b4c:	10c4c03a 	cmpne	r2,r2,r3
 1012b50:	d8800515 	stw	r2,20(sp)
 1012b54:	10138040 	call	1013804 <__pack_d>
 1012b58:	dfc01f17 	ldw	ra,124(sp)
 1012b5c:	ddc01e17 	ldw	r23,120(sp)
 1012b60:	dd801d17 	ldw	r22,116(sp)
 1012b64:	dd401c17 	ldw	r21,112(sp)
 1012b68:	dd001b17 	ldw	r20,108(sp)
 1012b6c:	dcc01a17 	ldw	r19,104(sp)
 1012b70:	dc801917 	ldw	r18,100(sp)
 1012b74:	dc401817 	ldw	r17,96(sp)
 1012b78:	dc001717 	ldw	r16,92(sp)
 1012b7c:	dec02004 	addi	sp,sp,128
 1012b80:	f800283a 	ret
 1012b84:	dd800717 	ldw	r22,28(sp)
 1012b88:	dc800c17 	ldw	r18,48(sp)
 1012b8c:	002b883a 	mov	r21,zero
 1012b90:	0023883a 	mov	r17,zero
 1012b94:	a80b883a 	mov	r5,r21
 1012b98:	b00d883a 	mov	r6,r22
 1012b9c:	880f883a 	mov	r7,r17
 1012ba0:	ddc00817 	ldw	r23,32(sp)
 1012ba4:	dcc00d17 	ldw	r19,52(sp)
 1012ba8:	9009883a 	mov	r4,r18
 1012bac:	10136240 	call	1013624 <__muldi3>
 1012bb0:	001b883a 	mov	r13,zero
 1012bb4:	680f883a 	mov	r7,r13
 1012bb8:	b009883a 	mov	r4,r22
 1012bbc:	000b883a 	mov	r5,zero
 1012bc0:	980d883a 	mov	r6,r19
 1012bc4:	b82d883a 	mov	r22,r23
 1012bc8:	002f883a 	mov	r23,zero
 1012bcc:	db401615 	stw	r13,88(sp)
 1012bd0:	d8801315 	stw	r2,76(sp)
 1012bd4:	d8c01415 	stw	r3,80(sp)
 1012bd8:	dcc01515 	stw	r19,84(sp)
 1012bdc:	10136240 	call	1013624 <__muldi3>
 1012be0:	b00d883a 	mov	r6,r22
 1012be4:	000b883a 	mov	r5,zero
 1012be8:	9009883a 	mov	r4,r18
 1012bec:	b80f883a 	mov	r7,r23
 1012bf0:	1021883a 	mov	r16,r2
 1012bf4:	1823883a 	mov	r17,r3
 1012bf8:	10136240 	call	1013624 <__muldi3>
 1012bfc:	8085883a 	add	r2,r16,r2
 1012c00:	140d803a 	cmpltu	r6,r2,r16
 1012c04:	88c7883a 	add	r3,r17,r3
 1012c08:	30cd883a 	add	r6,r6,r3
 1012c0c:	1029883a 	mov	r20,r2
 1012c10:	302b883a 	mov	r21,r6
 1012c14:	da801317 	ldw	r10,76(sp)
 1012c18:	dac01417 	ldw	r11,80(sp)
 1012c1c:	db001517 	ldw	r12,84(sp)
 1012c20:	db401617 	ldw	r13,88(sp)
 1012c24:	3440612e 	bgeu	r6,r17,1012dac <__muldf3+0x318>
 1012c28:	0009883a 	mov	r4,zero
 1012c2c:	5105883a 	add	r2,r10,r4
 1012c30:	128d803a 	cmpltu	r6,r2,r10
 1012c34:	5d07883a 	add	r3,r11,r20
 1012c38:	30cd883a 	add	r6,r6,r3
 1012c3c:	0021883a 	mov	r16,zero
 1012c40:	04400044 	movi	r17,1
 1012c44:	1025883a 	mov	r18,r2
 1012c48:	3027883a 	mov	r19,r6
 1012c4c:	32c06236 	bltu	r6,r11,1012dd8 <__muldf3+0x344>
 1012c50:	59807a26 	beq	r11,r6,1012e3c <__muldf3+0x3a8>
 1012c54:	680b883a 	mov	r5,r13
 1012c58:	b80f883a 	mov	r7,r23
 1012c5c:	6009883a 	mov	r4,r12
 1012c60:	b00d883a 	mov	r6,r22
 1012c64:	10136240 	call	1013624 <__muldi3>
 1012c68:	1009883a 	mov	r4,r2
 1012c6c:	000f883a 	mov	r7,zero
 1012c70:	1545883a 	add	r2,r2,r21
 1012c74:	1111803a 	cmpltu	r8,r2,r4
 1012c78:	19c7883a 	add	r3,r3,r7
 1012c7c:	40c7883a 	add	r3,r8,r3
 1012c80:	88cb883a 	add	r5,r17,r3
 1012c84:	d8c00617 	ldw	r3,24(sp)
 1012c88:	8089883a 	add	r4,r16,r2
 1012c8c:	d8800b17 	ldw	r2,44(sp)
 1012c90:	18c00104 	addi	r3,r3,4
 1012c94:	240d803a 	cmpltu	r6,r4,r16
 1012c98:	10c7883a 	add	r3,r2,r3
 1012c9c:	2013883a 	mov	r9,r4
 1012ca0:	d8800a17 	ldw	r2,40(sp)
 1012ca4:	d9000517 	ldw	r4,20(sp)
 1012ca8:	314d883a 	add	r6,r6,r5
 1012cac:	3015883a 	mov	r10,r6
 1012cb0:	2088c03a 	cmpne	r4,r4,r2
 1012cb4:	00880034 	movhi	r2,8192
 1012cb8:	10bfffc4 	addi	r2,r2,-1
 1012cbc:	d9000f15 	stw	r4,60(sp)
 1012cc0:	d8c01015 	stw	r3,64(sp)
 1012cc4:	1180162e 	bgeu	r2,r6,1012d20 <__muldf3+0x28c>
 1012cc8:	1811883a 	mov	r8,r3
 1012ccc:	101f883a 	mov	r15,r2
 1012cd0:	980497fa 	slli	r2,r19,31
 1012cd4:	9016d07a 	srli	r11,r18,1
 1012cd8:	500697fa 	slli	r3,r10,31
 1012cdc:	480cd07a 	srli	r6,r9,1
 1012ce0:	500ed07a 	srli	r7,r10,1
 1012ce4:	12d6b03a 	or	r11,r2,r11
 1012ce8:	00800044 	movi	r2,1
 1012cec:	198cb03a 	or	r6,r3,r6
 1012cf0:	4888703a 	and	r4,r9,r2
 1012cf4:	9818d07a 	srli	r12,r19,1
 1012cf8:	001b883a 	mov	r13,zero
 1012cfc:	03a00034 	movhi	r14,32768
 1012d00:	3013883a 	mov	r9,r6
 1012d04:	3815883a 	mov	r10,r7
 1012d08:	4091883a 	add	r8,r8,r2
 1012d0c:	20000226 	beq	r4,zero,1012d18 <__muldf3+0x284>
 1012d10:	5b64b03a 	or	r18,r11,r13
 1012d14:	63a6b03a 	or	r19,r12,r14
 1012d18:	7abfed36 	bltu	r15,r10,1012cd0 <__muldf3+0x23c>
 1012d1c:	da001015 	stw	r8,64(sp)
 1012d20:	00840034 	movhi	r2,4096
 1012d24:	10bfffc4 	addi	r2,r2,-1
 1012d28:	12801436 	bltu	r2,r10,1012d7c <__muldf3+0x2e8>
 1012d2c:	da001017 	ldw	r8,64(sp)
 1012d30:	101f883a 	mov	r15,r2
 1012d34:	4a45883a 	add	r2,r9,r9
 1012d38:	124d803a 	cmpltu	r6,r2,r9
 1012d3c:	5287883a 	add	r3,r10,r10
 1012d40:	9497883a 	add	r11,r18,r18
 1012d44:	5c8f803a 	cmpltu	r7,r11,r18
 1012d48:	9cd9883a 	add	r12,r19,r19
 1012d4c:	01000044 	movi	r4,1
 1012d50:	30cd883a 	add	r6,r6,r3
 1012d54:	3b0f883a 	add	r7,r7,r12
 1012d58:	423fffc4 	addi	r8,r8,-1
 1012d5c:	1013883a 	mov	r9,r2
 1012d60:	3015883a 	mov	r10,r6
 1012d64:	111ab03a 	or	r13,r2,r4
 1012d68:	98003016 	blt	r19,zero,1012e2c <__muldf3+0x398>
 1012d6c:	5825883a 	mov	r18,r11
 1012d70:	3827883a 	mov	r19,r7
 1012d74:	7abfef2e 	bgeu	r15,r10,1012d34 <__muldf3+0x2a0>
 1012d78:	da001015 	stw	r8,64(sp)
 1012d7c:	00803fc4 	movi	r2,255
 1012d80:	488e703a 	and	r7,r9,r2
 1012d84:	00802004 	movi	r2,128
 1012d88:	0007883a 	mov	r3,zero
 1012d8c:	0011883a 	mov	r8,zero
 1012d90:	38801826 	beq	r7,r2,1012df4 <__muldf3+0x360>
 1012d94:	008000c4 	movi	r2,3
 1012d98:	d9000e04 	addi	r4,sp,56
 1012d9c:	da801215 	stw	r10,72(sp)
 1012da0:	d8800e15 	stw	r2,56(sp)
 1012da4:	da401115 	stw	r9,68(sp)
 1012da8:	003f6a06 	br	1012b54 <__muldf3+0xc0>
 1012dac:	89802126 	beq	r17,r6,1012e34 <__muldf3+0x3a0>
 1012db0:	0009883a 	mov	r4,zero
 1012db4:	5105883a 	add	r2,r10,r4
 1012db8:	128d803a 	cmpltu	r6,r2,r10
 1012dbc:	5d07883a 	add	r3,r11,r20
 1012dc0:	30cd883a 	add	r6,r6,r3
 1012dc4:	0021883a 	mov	r16,zero
 1012dc8:	0023883a 	mov	r17,zero
 1012dcc:	1025883a 	mov	r18,r2
 1012dd0:	3027883a 	mov	r19,r6
 1012dd4:	32ff9e2e 	bgeu	r6,r11,1012c50 <__muldf3+0x1bc>
 1012dd8:	00800044 	movi	r2,1
 1012ddc:	8089883a 	add	r4,r16,r2
 1012de0:	240d803a 	cmpltu	r6,r4,r16
 1012de4:	344d883a 	add	r6,r6,r17
 1012de8:	2021883a 	mov	r16,r4
 1012dec:	3023883a 	mov	r17,r6
 1012df0:	003f9806 	br	1012c54 <__muldf3+0x1c0>
 1012df4:	403fe71e 	bne	r8,zero,1012d94 <__muldf3+0x300>
 1012df8:	01004004 	movi	r4,256
 1012dfc:	4904703a 	and	r2,r9,r4
 1012e00:	10c4b03a 	or	r2,r2,r3
 1012e04:	103fe31e 	bne	r2,zero,1012d94 <__muldf3+0x300>
 1012e08:	94c4b03a 	or	r2,r18,r19
 1012e0c:	103fe126 	beq	r2,zero,1012d94 <__muldf3+0x300>
 1012e10:	49c5883a 	add	r2,r9,r7
 1012e14:	1251803a 	cmpltu	r8,r2,r9
 1012e18:	4291883a 	add	r8,r8,r10
 1012e1c:	013fc004 	movi	r4,-256
 1012e20:	1112703a 	and	r9,r2,r4
 1012e24:	4015883a 	mov	r10,r8
 1012e28:	003fda06 	br	1012d94 <__muldf3+0x300>
 1012e2c:	6813883a 	mov	r9,r13
 1012e30:	003fce06 	br	1012d6c <__muldf3+0x2d8>
 1012e34:	143f7c36 	bltu	r2,r16,1012c28 <__muldf3+0x194>
 1012e38:	003fdd06 	br	1012db0 <__muldf3+0x31c>
 1012e3c:	12bf852e 	bgeu	r2,r10,1012c54 <__muldf3+0x1c0>
 1012e40:	003fe506 	br	1012dd8 <__muldf3+0x344>
 1012e44:	00800084 	movi	r2,2
 1012e48:	20bf351e 	bne	r4,r2,1012b20 <__muldf3+0x8c>
 1012e4c:	010040f4 	movhi	r4,259
 1012e50:	21134304 	addi	r4,r4,19724
 1012e54:	003f3f06 	br	1012b54 <__muldf3+0xc0>

01012e58 <__divdf3>:
 1012e58:	deffed04 	addi	sp,sp,-76
 1012e5c:	dcc01115 	stw	r19,68(sp)
 1012e60:	dcc00404 	addi	r19,sp,16
 1012e64:	2011883a 	mov	r8,r4
 1012e68:	2813883a 	mov	r9,r5
 1012e6c:	dc000e15 	stw	r16,56(sp)
 1012e70:	d809883a 	mov	r4,sp
 1012e74:	980b883a 	mov	r5,r19
 1012e78:	dc000904 	addi	r16,sp,36
 1012e7c:	dfc01215 	stw	ra,72(sp)
 1012e80:	da400115 	stw	r9,4(sp)
 1012e84:	d9c00315 	stw	r7,12(sp)
 1012e88:	da000015 	stw	r8,0(sp)
 1012e8c:	d9800215 	stw	r6,8(sp)
 1012e90:	dc801015 	stw	r18,64(sp)
 1012e94:	dc400f15 	stw	r17,60(sp)
 1012e98:	1013b180 	call	1013b18 <__unpack_d>
 1012e9c:	d9000204 	addi	r4,sp,8
 1012ea0:	800b883a 	mov	r5,r16
 1012ea4:	1013b180 	call	1013b18 <__unpack_d>
 1012ea8:	d9000417 	ldw	r4,16(sp)
 1012eac:	00800044 	movi	r2,1
 1012eb0:	11000b2e 	bgeu	r2,r4,1012ee0 <__divdf3+0x88>
 1012eb4:	d9400917 	ldw	r5,36(sp)
 1012eb8:	1140762e 	bgeu	r2,r5,1013094 <__divdf3+0x23c>
 1012ebc:	d8800517 	ldw	r2,20(sp)
 1012ec0:	d8c00a17 	ldw	r3,40(sp)
 1012ec4:	01800104 	movi	r6,4
 1012ec8:	10c4f03a 	xor	r2,r2,r3
 1012ecc:	d8800515 	stw	r2,20(sp)
 1012ed0:	21800226 	beq	r4,r6,1012edc <__divdf3+0x84>
 1012ed4:	00800084 	movi	r2,2
 1012ed8:	2080141e 	bne	r4,r2,1012f2c <__divdf3+0xd4>
 1012edc:	29000926 	beq	r5,r4,1012f04 <__divdf3+0xac>
 1012ee0:	9809883a 	mov	r4,r19
 1012ee4:	10138040 	call	1013804 <__pack_d>
 1012ee8:	dfc01217 	ldw	ra,72(sp)
 1012eec:	dcc01117 	ldw	r19,68(sp)
 1012ef0:	dc801017 	ldw	r18,64(sp)
 1012ef4:	dc400f17 	ldw	r17,60(sp)
 1012ef8:	dc000e17 	ldw	r16,56(sp)
 1012efc:	dec01304 	addi	sp,sp,76
 1012f00:	f800283a 	ret
 1012f04:	010040f4 	movhi	r4,259
 1012f08:	21134304 	addi	r4,r4,19724
 1012f0c:	10138040 	call	1013804 <__pack_d>
 1012f10:	dfc01217 	ldw	ra,72(sp)
 1012f14:	dcc01117 	ldw	r19,68(sp)
 1012f18:	dc801017 	ldw	r18,64(sp)
 1012f1c:	dc400f17 	ldw	r17,60(sp)
 1012f20:	dc000e17 	ldw	r16,56(sp)
 1012f24:	dec01304 	addi	sp,sp,76
 1012f28:	f800283a 	ret
 1012f2c:	29805b26 	beq	r5,r6,101309c <__divdf3+0x244>
 1012f30:	28802d26 	beq	r5,r2,1012fe8 <__divdf3+0x190>
 1012f34:	d8c00617 	ldw	r3,24(sp)
 1012f38:	d8800b17 	ldw	r2,44(sp)
 1012f3c:	d9c00817 	ldw	r7,32(sp)
 1012f40:	dc400d17 	ldw	r17,52(sp)
 1012f44:	188bc83a 	sub	r5,r3,r2
 1012f48:	d9800717 	ldw	r6,28(sp)
 1012f4c:	dc000c17 	ldw	r16,48(sp)
 1012f50:	d9400615 	stw	r5,24(sp)
 1012f54:	3c403836 	bltu	r7,r17,1013038 <__divdf3+0x1e0>
 1012f58:	89c03626 	beq	r17,r7,1013034 <__divdf3+0x1dc>
 1012f5c:	0015883a 	mov	r10,zero
 1012f60:	001d883a 	mov	r14,zero
 1012f64:	02c40034 	movhi	r11,4096
 1012f68:	001f883a 	mov	r15,zero
 1012f6c:	003f883a 	mov	ra,zero
 1012f70:	04800f44 	movi	r18,61
 1012f74:	00000f06 	br	1012fb4 <__divdf3+0x15c>
 1012f78:	601d883a 	mov	r14,r12
 1012f7c:	681f883a 	mov	r15,r13
 1012f80:	400d883a 	mov	r6,r8
 1012f84:	100f883a 	mov	r7,r2
 1012f88:	3191883a 	add	r8,r6,r6
 1012f8c:	5808d07a 	srli	r4,r11,1
 1012f90:	4185803a 	cmpltu	r2,r8,r6
 1012f94:	39d3883a 	add	r9,r7,r7
 1012f98:	28c6b03a 	or	r3,r5,r3
 1012f9c:	1245883a 	add	r2,r2,r9
 1012fa0:	1815883a 	mov	r10,r3
 1012fa4:	2017883a 	mov	r11,r4
 1012fa8:	400d883a 	mov	r6,r8
 1012fac:	100f883a 	mov	r7,r2
 1012fb0:	fc801726 	beq	ra,r18,1013010 <__divdf3+0x1b8>
 1012fb4:	580a97fa 	slli	r5,r11,31
 1012fb8:	5006d07a 	srli	r3,r10,1
 1012fbc:	ffc00044 	addi	ra,ra,1
 1012fc0:	3c7ff136 	bltu	r7,r17,1012f88 <__divdf3+0x130>
 1012fc4:	3411c83a 	sub	r8,r6,r16
 1012fc8:	3205803a 	cmpltu	r2,r6,r8
 1012fcc:	3c53c83a 	sub	r9,r7,r17
 1012fd0:	7298b03a 	or	r12,r14,r10
 1012fd4:	7adab03a 	or	r13,r15,r11
 1012fd8:	4885c83a 	sub	r2,r9,r2
 1012fdc:	89ffe61e 	bne	r17,r7,1012f78 <__divdf3+0x120>
 1012fe0:	343fe936 	bltu	r6,r16,1012f88 <__divdf3+0x130>
 1012fe4:	003fe406 	br	1012f78 <__divdf3+0x120>
 1012fe8:	9809883a 	mov	r4,r19
 1012fec:	d9800415 	stw	r6,16(sp)
 1012ff0:	10138040 	call	1013804 <__pack_d>
 1012ff4:	dfc01217 	ldw	ra,72(sp)
 1012ff8:	dcc01117 	ldw	r19,68(sp)
 1012ffc:	dc801017 	ldw	r18,64(sp)
 1013000:	dc400f17 	ldw	r17,60(sp)
 1013004:	dc000e17 	ldw	r16,56(sp)
 1013008:	dec01304 	addi	sp,sp,76
 101300c:	f800283a 	ret
 1013010:	00803fc4 	movi	r2,255
 1013014:	7090703a 	and	r8,r14,r2
 1013018:	00802004 	movi	r2,128
 101301c:	0007883a 	mov	r3,zero
 1013020:	0013883a 	mov	r9,zero
 1013024:	40800d26 	beq	r8,r2,101305c <__divdf3+0x204>
 1013028:	dbc00815 	stw	r15,32(sp)
 101302c:	db800715 	stw	r14,28(sp)
 1013030:	003fab06 	br	1012ee0 <__divdf3+0x88>
 1013034:	343fc92e 	bgeu	r6,r16,1012f5c <__divdf3+0x104>
 1013038:	3185883a 	add	r2,r6,r6
 101303c:	1189803a 	cmpltu	r4,r2,r6
 1013040:	39c7883a 	add	r3,r7,r7
 1013044:	20c9883a 	add	r4,r4,r3
 1013048:	297fffc4 	addi	r5,r5,-1
 101304c:	100d883a 	mov	r6,r2
 1013050:	200f883a 	mov	r7,r4
 1013054:	d9400615 	stw	r5,24(sp)
 1013058:	003fc006 	br	1012f5c <__divdf3+0x104>
 101305c:	483ff21e 	bne	r9,zero,1013028 <__divdf3+0x1d0>
 1013060:	01004004 	movi	r4,256
 1013064:	7104703a 	and	r2,r14,r4
 1013068:	10c4b03a 	or	r2,r2,r3
 101306c:	103fee1e 	bne	r2,zero,1013028 <__divdf3+0x1d0>
 1013070:	31c4b03a 	or	r2,r6,r7
 1013074:	103fec26 	beq	r2,zero,1013028 <__divdf3+0x1d0>
 1013078:	7205883a 	add	r2,r14,r8
 101307c:	1391803a 	cmpltu	r8,r2,r14
 1013080:	43d1883a 	add	r8,r8,r15
 1013084:	013fc004 	movi	r4,-256
 1013088:	111c703a 	and	r14,r2,r4
 101308c:	401f883a 	mov	r15,r8
 1013090:	003fe506 	br	1013028 <__divdf3+0x1d0>
 1013094:	8009883a 	mov	r4,r16
 1013098:	003f9206 	br	1012ee4 <__divdf3+0x8c>
 101309c:	9809883a 	mov	r4,r19
 10130a0:	d8000715 	stw	zero,28(sp)
 10130a4:	d8000815 	stw	zero,32(sp)
 10130a8:	d8000615 	stw	zero,24(sp)
 10130ac:	003f8d06 	br	1012ee4 <__divdf3+0x8c>

010130b0 <__eqdf2>:
 10130b0:	deffef04 	addi	sp,sp,-68
 10130b4:	dc400f15 	stw	r17,60(sp)
 10130b8:	dc400404 	addi	r17,sp,16
 10130bc:	2005883a 	mov	r2,r4
 10130c0:	2807883a 	mov	r3,r5
 10130c4:	dc000e15 	stw	r16,56(sp)
 10130c8:	d809883a 	mov	r4,sp
 10130cc:	880b883a 	mov	r5,r17
 10130d0:	dc000904 	addi	r16,sp,36
 10130d4:	d8c00115 	stw	r3,4(sp)
 10130d8:	d8800015 	stw	r2,0(sp)
 10130dc:	d9800215 	stw	r6,8(sp)
 10130e0:	dfc01015 	stw	ra,64(sp)
 10130e4:	d9c00315 	stw	r7,12(sp)
 10130e8:	1013b180 	call	1013b18 <__unpack_d>
 10130ec:	d9000204 	addi	r4,sp,8
 10130f0:	800b883a 	mov	r5,r16
 10130f4:	1013b180 	call	1013b18 <__unpack_d>
 10130f8:	d8800417 	ldw	r2,16(sp)
 10130fc:	00c00044 	movi	r3,1
 1013100:	180d883a 	mov	r6,r3
 1013104:	1880062e 	bgeu	r3,r2,1013120 <__eqdf2+0x70>
 1013108:	d8800917 	ldw	r2,36(sp)
 101310c:	8809883a 	mov	r4,r17
 1013110:	800b883a 	mov	r5,r16
 1013114:	1880022e 	bgeu	r3,r2,1013120 <__eqdf2+0x70>
 1013118:	1013c500 	call	1013c50 <__fpcmp_parts_d>
 101311c:	100d883a 	mov	r6,r2
 1013120:	3005883a 	mov	r2,r6
 1013124:	dfc01017 	ldw	ra,64(sp)
 1013128:	dc400f17 	ldw	r17,60(sp)
 101312c:	dc000e17 	ldw	r16,56(sp)
 1013130:	dec01104 	addi	sp,sp,68
 1013134:	f800283a 	ret

01013138 <__gtdf2>:
 1013138:	deffef04 	addi	sp,sp,-68
 101313c:	dc400f15 	stw	r17,60(sp)
 1013140:	dc400404 	addi	r17,sp,16
 1013144:	2005883a 	mov	r2,r4
 1013148:	2807883a 	mov	r3,r5
 101314c:	dc000e15 	stw	r16,56(sp)
 1013150:	d809883a 	mov	r4,sp
 1013154:	880b883a 	mov	r5,r17
 1013158:	dc000904 	addi	r16,sp,36
 101315c:	d8c00115 	stw	r3,4(sp)
 1013160:	d8800015 	stw	r2,0(sp)
 1013164:	d9800215 	stw	r6,8(sp)
 1013168:	dfc01015 	stw	ra,64(sp)
 101316c:	d9c00315 	stw	r7,12(sp)
 1013170:	1013b180 	call	1013b18 <__unpack_d>
 1013174:	d9000204 	addi	r4,sp,8
 1013178:	800b883a 	mov	r5,r16
 101317c:	1013b180 	call	1013b18 <__unpack_d>
 1013180:	d8800417 	ldw	r2,16(sp)
 1013184:	00c00044 	movi	r3,1
 1013188:	01bfffc4 	movi	r6,-1
 101318c:	1880062e 	bgeu	r3,r2,10131a8 <__gtdf2+0x70>
 1013190:	d8800917 	ldw	r2,36(sp)
 1013194:	8809883a 	mov	r4,r17
 1013198:	800b883a 	mov	r5,r16
 101319c:	1880022e 	bgeu	r3,r2,10131a8 <__gtdf2+0x70>
 10131a0:	1013c500 	call	1013c50 <__fpcmp_parts_d>
 10131a4:	100d883a 	mov	r6,r2
 10131a8:	3005883a 	mov	r2,r6
 10131ac:	dfc01017 	ldw	ra,64(sp)
 10131b0:	dc400f17 	ldw	r17,60(sp)
 10131b4:	dc000e17 	ldw	r16,56(sp)
 10131b8:	dec01104 	addi	sp,sp,68
 10131bc:	f800283a 	ret

010131c0 <__gedf2>:
 10131c0:	deffef04 	addi	sp,sp,-68
 10131c4:	dc400f15 	stw	r17,60(sp)
 10131c8:	dc400404 	addi	r17,sp,16
 10131cc:	2005883a 	mov	r2,r4
 10131d0:	2807883a 	mov	r3,r5
 10131d4:	dc000e15 	stw	r16,56(sp)
 10131d8:	d809883a 	mov	r4,sp
 10131dc:	880b883a 	mov	r5,r17
 10131e0:	dc000904 	addi	r16,sp,36
 10131e4:	d8c00115 	stw	r3,4(sp)
 10131e8:	d8800015 	stw	r2,0(sp)
 10131ec:	d9800215 	stw	r6,8(sp)
 10131f0:	dfc01015 	stw	ra,64(sp)
 10131f4:	d9c00315 	stw	r7,12(sp)
 10131f8:	1013b180 	call	1013b18 <__unpack_d>
 10131fc:	d9000204 	addi	r4,sp,8
 1013200:	800b883a 	mov	r5,r16
 1013204:	1013b180 	call	1013b18 <__unpack_d>
 1013208:	d8800417 	ldw	r2,16(sp)
 101320c:	00c00044 	movi	r3,1
 1013210:	01bfffc4 	movi	r6,-1
 1013214:	1880062e 	bgeu	r3,r2,1013230 <__gedf2+0x70>
 1013218:	d8800917 	ldw	r2,36(sp)
 101321c:	8809883a 	mov	r4,r17
 1013220:	800b883a 	mov	r5,r16
 1013224:	1880022e 	bgeu	r3,r2,1013230 <__gedf2+0x70>
 1013228:	1013c500 	call	1013c50 <__fpcmp_parts_d>
 101322c:	100d883a 	mov	r6,r2
 1013230:	3005883a 	mov	r2,r6
 1013234:	dfc01017 	ldw	ra,64(sp)
 1013238:	dc400f17 	ldw	r17,60(sp)
 101323c:	dc000e17 	ldw	r16,56(sp)
 1013240:	dec01104 	addi	sp,sp,68
 1013244:	f800283a 	ret

01013248 <__ltdf2>:
 1013248:	deffef04 	addi	sp,sp,-68
 101324c:	dc400f15 	stw	r17,60(sp)
 1013250:	dc400404 	addi	r17,sp,16
 1013254:	2005883a 	mov	r2,r4
 1013258:	2807883a 	mov	r3,r5
 101325c:	dc000e15 	stw	r16,56(sp)
 1013260:	d809883a 	mov	r4,sp
 1013264:	880b883a 	mov	r5,r17
 1013268:	dc000904 	addi	r16,sp,36
 101326c:	d8c00115 	stw	r3,4(sp)
 1013270:	d8800015 	stw	r2,0(sp)
 1013274:	d9800215 	stw	r6,8(sp)
 1013278:	dfc01015 	stw	ra,64(sp)
 101327c:	d9c00315 	stw	r7,12(sp)
 1013280:	1013b180 	call	1013b18 <__unpack_d>
 1013284:	d9000204 	addi	r4,sp,8
 1013288:	800b883a 	mov	r5,r16
 101328c:	1013b180 	call	1013b18 <__unpack_d>
 1013290:	d8800417 	ldw	r2,16(sp)
 1013294:	00c00044 	movi	r3,1
 1013298:	180d883a 	mov	r6,r3
 101329c:	1880062e 	bgeu	r3,r2,10132b8 <__ltdf2+0x70>
 10132a0:	d8800917 	ldw	r2,36(sp)
 10132a4:	8809883a 	mov	r4,r17
 10132a8:	800b883a 	mov	r5,r16
 10132ac:	1880022e 	bgeu	r3,r2,10132b8 <__ltdf2+0x70>
 10132b0:	1013c500 	call	1013c50 <__fpcmp_parts_d>
 10132b4:	100d883a 	mov	r6,r2
 10132b8:	3005883a 	mov	r2,r6
 10132bc:	dfc01017 	ldw	ra,64(sp)
 10132c0:	dc400f17 	ldw	r17,60(sp)
 10132c4:	dc000e17 	ldw	r16,56(sp)
 10132c8:	dec01104 	addi	sp,sp,68
 10132cc:	f800283a 	ret

010132d0 <__floatsidf>:
 10132d0:	2006d7fa 	srli	r3,r4,31
 10132d4:	defff604 	addi	sp,sp,-40
 10132d8:	008000c4 	movi	r2,3
 10132dc:	dfc00915 	stw	ra,36(sp)
 10132e0:	dcc00815 	stw	r19,32(sp)
 10132e4:	dc800715 	stw	r18,28(sp)
 10132e8:	dc400615 	stw	r17,24(sp)
 10132ec:	dc000515 	stw	r16,20(sp)
 10132f0:	d8800015 	stw	r2,0(sp)
 10132f4:	d8c00115 	stw	r3,4(sp)
 10132f8:	20000f1e 	bne	r4,zero,1013338 <__floatsidf+0x68>
 10132fc:	00800084 	movi	r2,2
 1013300:	d8800015 	stw	r2,0(sp)
 1013304:	d809883a 	mov	r4,sp
 1013308:	10138040 	call	1013804 <__pack_d>
 101330c:	1009883a 	mov	r4,r2
 1013310:	180b883a 	mov	r5,r3
 1013314:	2005883a 	mov	r2,r4
 1013318:	2807883a 	mov	r3,r5
 101331c:	dfc00917 	ldw	ra,36(sp)
 1013320:	dcc00817 	ldw	r19,32(sp)
 1013324:	dc800717 	ldw	r18,28(sp)
 1013328:	dc400617 	ldw	r17,24(sp)
 101332c:	dc000517 	ldw	r16,20(sp)
 1013330:	dec00a04 	addi	sp,sp,40
 1013334:	f800283a 	ret
 1013338:	00800f04 	movi	r2,60
 101333c:	1807003a 	cmpeq	r3,r3,zero
 1013340:	d8800215 	stw	r2,8(sp)
 1013344:	18001126 	beq	r3,zero,101338c <__floatsidf+0xbc>
 1013348:	0027883a 	mov	r19,zero
 101334c:	2025883a 	mov	r18,r4
 1013350:	d9000315 	stw	r4,12(sp)
 1013354:	dcc00415 	stw	r19,16(sp)
 1013358:	10136bc0 	call	10136bc <__clzsi2>
 101335c:	11000744 	addi	r4,r2,29
 1013360:	013fe80e 	bge	zero,r4,1013304 <__floatsidf+0x34>
 1013364:	10bfff44 	addi	r2,r2,-3
 1013368:	10000c16 	blt	r2,zero,101339c <__floatsidf+0xcc>
 101336c:	90a2983a 	sll	r17,r18,r2
 1013370:	0021883a 	mov	r16,zero
 1013374:	d8800217 	ldw	r2,8(sp)
 1013378:	dc400415 	stw	r17,16(sp)
 101337c:	dc000315 	stw	r16,12(sp)
 1013380:	1105c83a 	sub	r2,r2,r4
 1013384:	d8800215 	stw	r2,8(sp)
 1013388:	003fde06 	br	1013304 <__floatsidf+0x34>
 101338c:	00a00034 	movhi	r2,32768
 1013390:	20800a26 	beq	r4,r2,10133bc <__floatsidf+0xec>
 1013394:	0109c83a 	sub	r4,zero,r4
 1013398:	003feb06 	br	1013348 <__floatsidf+0x78>
 101339c:	9006d07a 	srli	r3,r18,1
 10133a0:	008007c4 	movi	r2,31
 10133a4:	1105c83a 	sub	r2,r2,r4
 10133a8:	1886d83a 	srl	r3,r3,r2
 10133ac:	9922983a 	sll	r17,r19,r4
 10133b0:	9120983a 	sll	r16,r18,r4
 10133b4:	1c62b03a 	or	r17,r3,r17
 10133b8:	003fee06 	br	1013374 <__floatsidf+0xa4>
 10133bc:	0009883a 	mov	r4,zero
 10133c0:	01707834 	movhi	r5,49632
 10133c4:	003fd306 	br	1013314 <__floatsidf+0x44>

010133c8 <__fixdfsi>:
 10133c8:	defff804 	addi	sp,sp,-32
 10133cc:	2005883a 	mov	r2,r4
 10133d0:	2807883a 	mov	r3,r5
 10133d4:	d809883a 	mov	r4,sp
 10133d8:	d9400204 	addi	r5,sp,8
 10133dc:	d8c00115 	stw	r3,4(sp)
 10133e0:	d8800015 	stw	r2,0(sp)
 10133e4:	dfc00715 	stw	ra,28(sp)
 10133e8:	1013b180 	call	1013b18 <__unpack_d>
 10133ec:	d8c00217 	ldw	r3,8(sp)
 10133f0:	00800084 	movi	r2,2
 10133f4:	1880051e 	bne	r3,r2,101340c <__fixdfsi+0x44>
 10133f8:	0007883a 	mov	r3,zero
 10133fc:	1805883a 	mov	r2,r3
 1013400:	dfc00717 	ldw	ra,28(sp)
 1013404:	dec00804 	addi	sp,sp,32
 1013408:	f800283a 	ret
 101340c:	00800044 	movi	r2,1
 1013410:	10fff92e 	bgeu	r2,r3,10133f8 <__fixdfsi+0x30>
 1013414:	00800104 	movi	r2,4
 1013418:	18800426 	beq	r3,r2,101342c <__fixdfsi+0x64>
 101341c:	d8c00417 	ldw	r3,16(sp)
 1013420:	183ff516 	blt	r3,zero,10133f8 <__fixdfsi+0x30>
 1013424:	00800784 	movi	r2,30
 1013428:	10c0080e 	bge	r2,r3,101344c <__fixdfsi+0x84>
 101342c:	d8800317 	ldw	r2,12(sp)
 1013430:	1000121e 	bne	r2,zero,101347c <__fixdfsi+0xb4>
 1013434:	00e00034 	movhi	r3,32768
 1013438:	18ffffc4 	addi	r3,r3,-1
 101343c:	1805883a 	mov	r2,r3
 1013440:	dfc00717 	ldw	ra,28(sp)
 1013444:	dec00804 	addi	sp,sp,32
 1013448:	f800283a 	ret
 101344c:	00800f04 	movi	r2,60
 1013450:	10d1c83a 	sub	r8,r2,r3
 1013454:	40bff804 	addi	r2,r8,-32
 1013458:	d9800517 	ldw	r6,20(sp)
 101345c:	d9c00617 	ldw	r7,24(sp)
 1013460:	10000816 	blt	r2,zero,1013484 <__fixdfsi+0xbc>
 1013464:	3888d83a 	srl	r4,r7,r2
 1013468:	d8800317 	ldw	r2,12(sp)
 101346c:	2007883a 	mov	r3,r4
 1013470:	103fe226 	beq	r2,zero,10133fc <__fixdfsi+0x34>
 1013474:	0107c83a 	sub	r3,zero,r4
 1013478:	003fe006 	br	10133fc <__fixdfsi+0x34>
 101347c:	00e00034 	movhi	r3,32768
 1013480:	003fde06 	br	10133fc <__fixdfsi+0x34>
 1013484:	39c7883a 	add	r3,r7,r7
 1013488:	008007c4 	movi	r2,31
 101348c:	1205c83a 	sub	r2,r2,r8
 1013490:	1886983a 	sll	r3,r3,r2
 1013494:	3208d83a 	srl	r4,r6,r8
 1013498:	1908b03a 	or	r4,r3,r4
 101349c:	003ff206 	br	1013468 <__fixdfsi+0xa0>

010134a0 <__make_dp>:
 10134a0:	defff904 	addi	sp,sp,-28
 10134a4:	d8c00717 	ldw	r3,28(sp)
 10134a8:	d9000015 	stw	r4,0(sp)
 10134ac:	d809883a 	mov	r4,sp
 10134b0:	dfc00515 	stw	ra,20(sp)
 10134b4:	d9c00615 	stw	r7,24(sp)
 10134b8:	d9400115 	stw	r5,4(sp)
 10134bc:	d9800215 	stw	r6,8(sp)
 10134c0:	d8c00415 	stw	r3,16(sp)
 10134c4:	d9c00315 	stw	r7,12(sp)
 10134c8:	10138040 	call	1013804 <__pack_d>
 10134cc:	dfc00517 	ldw	ra,20(sp)
 10134d0:	dec00704 	addi	sp,sp,28
 10134d4:	f800283a 	ret

010134d8 <udivmodsi4>:
 10134d8:	29001b2e 	bgeu	r5,r4,1013548 <udivmodsi4+0x70>
 10134dc:	28001a16 	blt	r5,zero,1013548 <udivmodsi4+0x70>
 10134e0:	00800044 	movi	r2,1
 10134e4:	0007883a 	mov	r3,zero
 10134e8:	01c007c4 	movi	r7,31
 10134ec:	00000306 	br	10134fc <udivmodsi4+0x24>
 10134f0:	19c01326 	beq	r3,r7,1013540 <udivmodsi4+0x68>
 10134f4:	18c00044 	addi	r3,r3,1
 10134f8:	28000416 	blt	r5,zero,101350c <udivmodsi4+0x34>
 10134fc:	294b883a 	add	r5,r5,r5
 1013500:	1085883a 	add	r2,r2,r2
 1013504:	293ffa36 	bltu	r5,r4,10134f0 <udivmodsi4+0x18>
 1013508:	10000d26 	beq	r2,zero,1013540 <udivmodsi4+0x68>
 101350c:	0007883a 	mov	r3,zero
 1013510:	21400236 	bltu	r4,r5,101351c <udivmodsi4+0x44>
 1013514:	2149c83a 	sub	r4,r4,r5
 1013518:	1886b03a 	or	r3,r3,r2
 101351c:	1004d07a 	srli	r2,r2,1
 1013520:	280ad07a 	srli	r5,r5,1
 1013524:	103ffa1e 	bne	r2,zero,1013510 <udivmodsi4+0x38>
 1013528:	30000226 	beq	r6,zero,1013534 <udivmodsi4+0x5c>
 101352c:	2005883a 	mov	r2,r4
 1013530:	f800283a 	ret
 1013534:	1809883a 	mov	r4,r3
 1013538:	2005883a 	mov	r2,r4
 101353c:	f800283a 	ret
 1013540:	0007883a 	mov	r3,zero
 1013544:	003ff806 	br	1013528 <udivmodsi4+0x50>
 1013548:	00800044 	movi	r2,1
 101354c:	0007883a 	mov	r3,zero
 1013550:	003fef06 	br	1013510 <udivmodsi4+0x38>

01013554 <__divsi3>:
 1013554:	defffe04 	addi	sp,sp,-8
 1013558:	dc000015 	stw	r16,0(sp)
 101355c:	dfc00115 	stw	ra,4(sp)
 1013560:	0021883a 	mov	r16,zero
 1013564:	20000c16 	blt	r4,zero,1013598 <__divsi3+0x44>
 1013568:	000d883a 	mov	r6,zero
 101356c:	28000e16 	blt	r5,zero,10135a8 <__divsi3+0x54>
 1013570:	10134d80 	call	10134d8 <udivmodsi4>
 1013574:	1007883a 	mov	r3,r2
 1013578:	8005003a 	cmpeq	r2,r16,zero
 101357c:	1000011e 	bne	r2,zero,1013584 <__divsi3+0x30>
 1013580:	00c7c83a 	sub	r3,zero,r3
 1013584:	1805883a 	mov	r2,r3
 1013588:	dfc00117 	ldw	ra,4(sp)
 101358c:	dc000017 	ldw	r16,0(sp)
 1013590:	dec00204 	addi	sp,sp,8
 1013594:	f800283a 	ret
 1013598:	0109c83a 	sub	r4,zero,r4
 101359c:	04000044 	movi	r16,1
 10135a0:	000d883a 	mov	r6,zero
 10135a4:	283ff20e 	bge	r5,zero,1013570 <__divsi3+0x1c>
 10135a8:	014bc83a 	sub	r5,zero,r5
 10135ac:	8021003a 	cmpeq	r16,r16,zero
 10135b0:	003fef06 	br	1013570 <__divsi3+0x1c>

010135b4 <__modsi3>:
 10135b4:	deffff04 	addi	sp,sp,-4
 10135b8:	dfc00015 	stw	ra,0(sp)
 10135bc:	01800044 	movi	r6,1
 10135c0:	2807883a 	mov	r3,r5
 10135c4:	20000416 	blt	r4,zero,10135d8 <__modsi3+0x24>
 10135c8:	28000c16 	blt	r5,zero,10135fc <__modsi3+0x48>
 10135cc:	dfc00017 	ldw	ra,0(sp)
 10135d0:	dec00104 	addi	sp,sp,4
 10135d4:	10134d81 	jmpi	10134d8 <udivmodsi4>
 10135d8:	0109c83a 	sub	r4,zero,r4
 10135dc:	28000b16 	blt	r5,zero,101360c <__modsi3+0x58>
 10135e0:	180b883a 	mov	r5,r3
 10135e4:	01800044 	movi	r6,1
 10135e8:	10134d80 	call	10134d8 <udivmodsi4>
 10135ec:	0085c83a 	sub	r2,zero,r2
 10135f0:	dfc00017 	ldw	ra,0(sp)
 10135f4:	dec00104 	addi	sp,sp,4
 10135f8:	f800283a 	ret
 10135fc:	014bc83a 	sub	r5,zero,r5
 1013600:	dfc00017 	ldw	ra,0(sp)
 1013604:	dec00104 	addi	sp,sp,4
 1013608:	10134d81 	jmpi	10134d8 <udivmodsi4>
 101360c:	0147c83a 	sub	r3,zero,r5
 1013610:	003ff306 	br	10135e0 <__modsi3+0x2c>

01013614 <__udivsi3>:
 1013614:	000d883a 	mov	r6,zero
 1013618:	10134d81 	jmpi	10134d8 <udivmodsi4>

0101361c <__umodsi3>:
 101361c:	01800044 	movi	r6,1
 1013620:	10134d81 	jmpi	10134d8 <udivmodsi4>

01013624 <__muldi3>:
 1013624:	2011883a 	mov	r8,r4
 1013628:	427fffcc 	andi	r9,r8,65535
 101362c:	4018d43a 	srli	r12,r8,16
 1013630:	32bfffcc 	andi	r10,r6,65535
 1013634:	3016d43a 	srli	r11,r6,16
 1013638:	4a85383a 	mul	r2,r9,r10
 101363c:	6295383a 	mul	r10,r12,r10
 1013640:	4ad3383a 	mul	r9,r9,r11
 1013644:	113fffcc 	andi	r4,r2,65535
 1013648:	1004d43a 	srli	r2,r2,16
 101364c:	4a93883a 	add	r9,r9,r10
 1013650:	3807883a 	mov	r3,r7
 1013654:	1245883a 	add	r2,r2,r9
 1013658:	280f883a 	mov	r7,r5
 101365c:	180b883a 	mov	r5,r3
 1013660:	1006943a 	slli	r3,r2,16
 1013664:	defffd04 	addi	sp,sp,-12
 1013668:	dc800215 	stw	r18,8(sp)
 101366c:	1907883a 	add	r3,r3,r4
 1013670:	dc400115 	stw	r17,4(sp)
 1013674:	dc000015 	stw	r16,0(sp)
 1013678:	4165383a 	mul	r18,r8,r5
 101367c:	31e3383a 	mul	r17,r6,r7
 1013680:	1012d43a 	srli	r9,r2,16
 1013684:	62d9383a 	mul	r12,r12,r11
 1013688:	181f883a 	mov	r15,r3
 101368c:	1280022e 	bgeu	r2,r10,1013698 <__muldi3+0x74>
 1013690:	00800074 	movhi	r2,1
 1013694:	6099883a 	add	r12,r12,r2
 1013698:	624d883a 	add	r6,r12,r9
 101369c:	9187883a 	add	r3,r18,r6
 10136a0:	88c7883a 	add	r3,r17,r3
 10136a4:	7805883a 	mov	r2,r15
 10136a8:	dc800217 	ldw	r18,8(sp)
 10136ac:	dc400117 	ldw	r17,4(sp)
 10136b0:	dc000017 	ldw	r16,0(sp)
 10136b4:	dec00304 	addi	sp,sp,12
 10136b8:	f800283a 	ret

010136bc <__clzsi2>:
 10136bc:	00bfffd4 	movui	r2,65535
 10136c0:	11000e36 	bltu	r2,r4,10136fc <__clzsi2+0x40>
 10136c4:	00803fc4 	movi	r2,255
 10136c8:	01400204 	movi	r5,8
 10136cc:	0007883a 	mov	r3,zero
 10136d0:	11001036 	bltu	r2,r4,1013714 <__clzsi2+0x58>
 10136d4:	000b883a 	mov	r5,zero
 10136d8:	20c6d83a 	srl	r3,r4,r3
 10136dc:	008040f4 	movhi	r2,259
 10136e0:	10934804 	addi	r2,r2,19744
 10136e4:	1887883a 	add	r3,r3,r2
 10136e8:	18800003 	ldbu	r2,0(r3)
 10136ec:	00c00804 	movi	r3,32
 10136f0:	2885883a 	add	r2,r5,r2
 10136f4:	1885c83a 	sub	r2,r3,r2
 10136f8:	f800283a 	ret
 10136fc:	01400404 	movi	r5,16
 1013700:	00804034 	movhi	r2,256
 1013704:	10bfffc4 	addi	r2,r2,-1
 1013708:	2807883a 	mov	r3,r5
 101370c:	113ff22e 	bgeu	r2,r4,10136d8 <__clzsi2+0x1c>
 1013710:	01400604 	movi	r5,24
 1013714:	2807883a 	mov	r3,r5
 1013718:	20c6d83a 	srl	r3,r4,r3
 101371c:	008040f4 	movhi	r2,259
 1013720:	10934804 	addi	r2,r2,19744
 1013724:	1887883a 	add	r3,r3,r2
 1013728:	18800003 	ldbu	r2,0(r3)
 101372c:	00c00804 	movi	r3,32
 1013730:	2885883a 	add	r2,r5,r2
 1013734:	1885c83a 	sub	r2,r3,r2
 1013738:	f800283a 	ret

0101373c <__unpack_f>:
 101373c:	21800017 	ldw	r6,0(r4)
 1013740:	00c02034 	movhi	r3,128
 1013744:	18ffffc4 	addi	r3,r3,-1
 1013748:	3004d5fa 	srli	r2,r6,23
 101374c:	3008d7fa 	srli	r4,r6,31
 1013750:	30ce703a 	and	r7,r6,r3
 1013754:	10c03fcc 	andi	r3,r2,255
 1013758:	29000115 	stw	r4,4(r5)
 101375c:	1800131e 	bne	r3,zero,10137ac <__unpack_f+0x70>
 1013760:	38000f26 	beq	r7,zero,10137a0 <__unpack_f+0x64>
 1013764:	380691fa 	slli	r3,r7,7
 1013768:	01bfe084 	movi	r6,-126
 101376c:	008000c4 	movi	r2,3
 1013770:	01100034 	movhi	r4,16384
 1013774:	213fffc4 	addi	r4,r4,-1
 1013778:	28800015 	stw	r2,0(r5)
 101377c:	29800215 	stw	r6,8(r5)
 1013780:	20c00536 	bltu	r4,r3,1013798 <__unpack_f+0x5c>
 1013784:	3005883a 	mov	r2,r6
 1013788:	18c7883a 	add	r3,r3,r3
 101378c:	10bfffc4 	addi	r2,r2,-1
 1013790:	20fffd2e 	bgeu	r4,r3,1013788 <__unpack_f+0x4c>
 1013794:	28800215 	stw	r2,8(r5)
 1013798:	28c00315 	stw	r3,12(r5)
 101379c:	f800283a 	ret
 10137a0:	00800084 	movi	r2,2
 10137a4:	28800015 	stw	r2,0(r5)
 10137a8:	f800283a 	ret
 10137ac:	00803fc4 	movi	r2,255
 10137b0:	18800826 	beq	r3,r2,10137d4 <__unpack_f+0x98>
 10137b4:	380491fa 	slli	r2,r7,7
 10137b8:	18ffe044 	addi	r3,r3,-127
 10137bc:	28c00215 	stw	r3,8(r5)
 10137c0:	10900034 	orhi	r2,r2,16384
 10137c4:	28800315 	stw	r2,12(r5)
 10137c8:	008000c4 	movi	r2,3
 10137cc:	28800015 	stw	r2,0(r5)
 10137d0:	f800283a 	ret
 10137d4:	3800031e 	bne	r7,zero,10137e4 <__unpack_f+0xa8>
 10137d8:	00800104 	movi	r2,4
 10137dc:	28800015 	stw	r2,0(r5)
 10137e0:	f800283a 	ret
 10137e4:	3080042c 	andhi	r2,r6,16
 10137e8:	10000426 	beq	r2,zero,10137fc <__unpack_f+0xc0>
 10137ec:	00800044 	movi	r2,1
 10137f0:	28800015 	stw	r2,0(r5)
 10137f4:	29c00315 	stw	r7,12(r5)
 10137f8:	f800283a 	ret
 10137fc:	28000015 	stw	zero,0(r5)
 1013800:	003ffc06 	br	10137f4 <__unpack_f+0xb8>

01013804 <__pack_d>:
 1013804:	20c00017 	ldw	r3,0(r4)
 1013808:	defffd04 	addi	sp,sp,-12
 101380c:	dc000015 	stw	r16,0(sp)
 1013810:	dc800215 	stw	r18,8(sp)
 1013814:	dc400115 	stw	r17,4(sp)
 1013818:	00800044 	movi	r2,1
 101381c:	22000317 	ldw	r8,12(r4)
 1013820:	001f883a 	mov	r15,zero
 1013824:	22400417 	ldw	r9,16(r4)
 1013828:	24000117 	ldw	r16,4(r4)
 101382c:	10c0552e 	bgeu	r2,r3,1013984 <__pack_d+0x180>
 1013830:	00800104 	movi	r2,4
 1013834:	18804f26 	beq	r3,r2,1013974 <__pack_d+0x170>
 1013838:	00800084 	movi	r2,2
 101383c:	18800226 	beq	r3,r2,1013848 <__pack_d+0x44>
 1013840:	4244b03a 	or	r2,r8,r9
 1013844:	10001a1e 	bne	r2,zero,10138b0 <__pack_d+0xac>
 1013848:	000d883a 	mov	r6,zero
 101384c:	000f883a 	mov	r7,zero
 1013850:	0011883a 	mov	r8,zero
 1013854:	00800434 	movhi	r2,16
 1013858:	10bfffc4 	addi	r2,r2,-1
 101385c:	301d883a 	mov	r14,r6
 1013860:	3884703a 	and	r2,r7,r2
 1013864:	400a953a 	slli	r5,r8,20
 1013868:	79bffc2c 	andhi	r6,r15,65520
 101386c:	308cb03a 	or	r6,r6,r2
 1013870:	00e00434 	movhi	r3,32784
 1013874:	18ffffc4 	addi	r3,r3,-1
 1013878:	800497fa 	slli	r2,r16,31
 101387c:	30c6703a 	and	r3,r6,r3
 1013880:	1946b03a 	or	r3,r3,r5
 1013884:	01600034 	movhi	r5,32768
 1013888:	297fffc4 	addi	r5,r5,-1
 101388c:	194a703a 	and	r5,r3,r5
 1013890:	288ab03a 	or	r5,r5,r2
 1013894:	2807883a 	mov	r3,r5
 1013898:	7005883a 	mov	r2,r14
 101389c:	dc800217 	ldw	r18,8(sp)
 10138a0:	dc400117 	ldw	r17,4(sp)
 10138a4:	dc000017 	ldw	r16,0(sp)
 10138a8:	dec00304 	addi	sp,sp,12
 10138ac:	f800283a 	ret
 10138b0:	21000217 	ldw	r4,8(r4)
 10138b4:	00bf0084 	movi	r2,-1022
 10138b8:	20803f16 	blt	r4,r2,10139b8 <__pack_d+0x1b4>
 10138bc:	0080ffc4 	movi	r2,1023
 10138c0:	11002c16 	blt	r2,r4,1013974 <__pack_d+0x170>
 10138c4:	00803fc4 	movi	r2,255
 10138c8:	408c703a 	and	r6,r8,r2
 10138cc:	00802004 	movi	r2,128
 10138d0:	0007883a 	mov	r3,zero
 10138d4:	000f883a 	mov	r7,zero
 10138d8:	2280ffc4 	addi	r10,r4,1023
 10138dc:	30801e26 	beq	r6,r2,1013958 <__pack_d+0x154>
 10138e0:	00801fc4 	movi	r2,127
 10138e4:	4089883a 	add	r4,r8,r2
 10138e8:	220d803a 	cmpltu	r6,r4,r8
 10138ec:	324d883a 	add	r6,r6,r9
 10138f0:	2011883a 	mov	r8,r4
 10138f4:	3013883a 	mov	r9,r6
 10138f8:	00880034 	movhi	r2,8192
 10138fc:	10bfffc4 	addi	r2,r2,-1
 1013900:	12400d36 	bltu	r2,r9,1013938 <__pack_d+0x134>
 1013904:	4804963a 	slli	r2,r9,24
 1013908:	400cd23a 	srli	r6,r8,8
 101390c:	480ed23a 	srli	r7,r9,8
 1013910:	013fffc4 	movi	r4,-1
 1013914:	118cb03a 	or	r6,r2,r6
 1013918:	01400434 	movhi	r5,16
 101391c:	297fffc4 	addi	r5,r5,-1
 1013920:	3104703a 	and	r2,r6,r4
 1013924:	3946703a 	and	r3,r7,r5
 1013928:	5201ffcc 	andi	r8,r10,2047
 101392c:	100d883a 	mov	r6,r2
 1013930:	180f883a 	mov	r7,r3
 1013934:	003fc706 	br	1013854 <__pack_d+0x50>
 1013938:	480897fa 	slli	r4,r9,31
 101393c:	4004d07a 	srli	r2,r8,1
 1013940:	4806d07a 	srli	r3,r9,1
 1013944:	52800044 	addi	r10,r10,1
 1013948:	2084b03a 	or	r2,r4,r2
 101394c:	1011883a 	mov	r8,r2
 1013950:	1813883a 	mov	r9,r3
 1013954:	003feb06 	br	1013904 <__pack_d+0x100>
 1013958:	383fe11e 	bne	r7,zero,10138e0 <__pack_d+0xdc>
 101395c:	01004004 	movi	r4,256
 1013960:	4104703a 	and	r2,r8,r4
 1013964:	10c4b03a 	or	r2,r2,r3
 1013968:	103fe326 	beq	r2,zero,10138f8 <__pack_d+0xf4>
 101396c:	3005883a 	mov	r2,r6
 1013970:	003fdc06 	br	10138e4 <__pack_d+0xe0>
 1013974:	000d883a 	mov	r6,zero
 1013978:	000f883a 	mov	r7,zero
 101397c:	0201ffc4 	movi	r8,2047
 1013980:	003fb406 	br	1013854 <__pack_d+0x50>
 1013984:	0005883a 	mov	r2,zero
 1013988:	00c00234 	movhi	r3,8
 101398c:	408cb03a 	or	r6,r8,r2
 1013990:	48ceb03a 	or	r7,r9,r3
 1013994:	013fffc4 	movi	r4,-1
 1013998:	01400434 	movhi	r5,16
 101399c:	297fffc4 	addi	r5,r5,-1
 10139a0:	3104703a 	and	r2,r6,r4
 10139a4:	3946703a 	and	r3,r7,r5
 10139a8:	100d883a 	mov	r6,r2
 10139ac:	180f883a 	mov	r7,r3
 10139b0:	0201ffc4 	movi	r8,2047
 10139b4:	003fa706 	br	1013854 <__pack_d+0x50>
 10139b8:	1109c83a 	sub	r4,r2,r4
 10139bc:	00800e04 	movi	r2,56
 10139c0:	11004316 	blt	r2,r4,1013ad0 <__pack_d+0x2cc>
 10139c4:	21fff804 	addi	r7,r4,-32
 10139c8:	38004516 	blt	r7,zero,1013ae0 <__pack_d+0x2dc>
 10139cc:	49d8d83a 	srl	r12,r9,r7
 10139d0:	001b883a 	mov	r13,zero
 10139d4:	0023883a 	mov	r17,zero
 10139d8:	01400044 	movi	r5,1
 10139dc:	0025883a 	mov	r18,zero
 10139e0:	38004716 	blt	r7,zero,1013b00 <__pack_d+0x2fc>
 10139e4:	29d6983a 	sll	r11,r5,r7
 10139e8:	0015883a 	mov	r10,zero
 10139ec:	00bfffc4 	movi	r2,-1
 10139f0:	5089883a 	add	r4,r10,r2
 10139f4:	588b883a 	add	r5,r11,r2
 10139f8:	228d803a 	cmpltu	r6,r4,r10
 10139fc:	314b883a 	add	r5,r6,r5
 1013a00:	4104703a 	and	r2,r8,r4
 1013a04:	4946703a 	and	r3,r9,r5
 1013a08:	10c4b03a 	or	r2,r2,r3
 1013a0c:	10000226 	beq	r2,zero,1013a18 <__pack_d+0x214>
 1013a10:	04400044 	movi	r17,1
 1013a14:	0025883a 	mov	r18,zero
 1013a18:	00803fc4 	movi	r2,255
 1013a1c:	644eb03a 	or	r7,r12,r17
 1013a20:	3892703a 	and	r9,r7,r2
 1013a24:	00802004 	movi	r2,128
 1013a28:	6c90b03a 	or	r8,r13,r18
 1013a2c:	0015883a 	mov	r10,zero
 1013a30:	48801626 	beq	r9,r2,1013a8c <__pack_d+0x288>
 1013a34:	01001fc4 	movi	r4,127
 1013a38:	3905883a 	add	r2,r7,r4
 1013a3c:	11cd803a 	cmpltu	r6,r2,r7
 1013a40:	320d883a 	add	r6,r6,r8
 1013a44:	100f883a 	mov	r7,r2
 1013a48:	00840034 	movhi	r2,4096
 1013a4c:	10bfffc4 	addi	r2,r2,-1
 1013a50:	3011883a 	mov	r8,r6
 1013a54:	0007883a 	mov	r3,zero
 1013a58:	11801b36 	bltu	r2,r6,1013ac8 <__pack_d+0x2c4>
 1013a5c:	4004963a 	slli	r2,r8,24
 1013a60:	3808d23a 	srli	r4,r7,8
 1013a64:	400ad23a 	srli	r5,r8,8
 1013a68:	1813883a 	mov	r9,r3
 1013a6c:	1108b03a 	or	r4,r2,r4
 1013a70:	00bfffc4 	movi	r2,-1
 1013a74:	00c00434 	movhi	r3,16
 1013a78:	18ffffc4 	addi	r3,r3,-1
 1013a7c:	208c703a 	and	r6,r4,r2
 1013a80:	28ce703a 	and	r7,r5,r3
 1013a84:	4a01ffcc 	andi	r8,r9,2047
 1013a88:	003f7206 	br	1013854 <__pack_d+0x50>
 1013a8c:	503fe91e 	bne	r10,zero,1013a34 <__pack_d+0x230>
 1013a90:	01004004 	movi	r4,256
 1013a94:	3904703a 	and	r2,r7,r4
 1013a98:	0007883a 	mov	r3,zero
 1013a9c:	10c4b03a 	or	r2,r2,r3
 1013aa0:	10000626 	beq	r2,zero,1013abc <__pack_d+0x2b8>
 1013aa4:	3a45883a 	add	r2,r7,r9
 1013aa8:	11cd803a 	cmpltu	r6,r2,r7
 1013aac:	320d883a 	add	r6,r6,r8
 1013ab0:	100f883a 	mov	r7,r2
 1013ab4:	3011883a 	mov	r8,r6
 1013ab8:	0007883a 	mov	r3,zero
 1013abc:	00840034 	movhi	r2,4096
 1013ac0:	10bfffc4 	addi	r2,r2,-1
 1013ac4:	123fe52e 	bgeu	r2,r8,1013a5c <__pack_d+0x258>
 1013ac8:	00c00044 	movi	r3,1
 1013acc:	003fe306 	br	1013a5c <__pack_d+0x258>
 1013ad0:	0009883a 	mov	r4,zero
 1013ad4:	0013883a 	mov	r9,zero
 1013ad8:	000b883a 	mov	r5,zero
 1013adc:	003fe406 	br	1013a70 <__pack_d+0x26c>
 1013ae0:	4a47883a 	add	r3,r9,r9
 1013ae4:	008007c4 	movi	r2,31
 1013ae8:	1105c83a 	sub	r2,r2,r4
 1013aec:	1886983a 	sll	r3,r3,r2
 1013af0:	4118d83a 	srl	r12,r8,r4
 1013af4:	491ad83a 	srl	r13,r9,r4
 1013af8:	1b18b03a 	or	r12,r3,r12
 1013afc:	003fb506 	br	10139d4 <__pack_d+0x1d0>
 1013b00:	2806d07a 	srli	r3,r5,1
 1013b04:	008007c4 	movi	r2,31
 1013b08:	1105c83a 	sub	r2,r2,r4
 1013b0c:	1896d83a 	srl	r11,r3,r2
 1013b10:	2914983a 	sll	r10,r5,r4
 1013b14:	003fb506 	br	10139ec <__pack_d+0x1e8>

01013b18 <__unpack_d>:
 1013b18:	20c00117 	ldw	r3,4(r4)
 1013b1c:	22400017 	ldw	r9,0(r4)
 1013b20:	00800434 	movhi	r2,16
 1013b24:	10bfffc4 	addi	r2,r2,-1
 1013b28:	1808d53a 	srli	r4,r3,20
 1013b2c:	180cd7fa 	srli	r6,r3,31
 1013b30:	1894703a 	and	r10,r3,r2
 1013b34:	2201ffcc 	andi	r8,r4,2047
 1013b38:	281b883a 	mov	r13,r5
 1013b3c:	4817883a 	mov	r11,r9
 1013b40:	29800115 	stw	r6,4(r5)
 1013b44:	5019883a 	mov	r12,r10
 1013b48:	40001e1e 	bne	r8,zero,1013bc4 <__unpack_d+0xac>
 1013b4c:	4a84b03a 	or	r2,r9,r10
 1013b50:	10001926 	beq	r2,zero,1013bb8 <__unpack_d+0xa0>
 1013b54:	4804d63a 	srli	r2,r9,24
 1013b58:	500c923a 	slli	r6,r10,8
 1013b5c:	013f0084 	movi	r4,-1022
 1013b60:	00c40034 	movhi	r3,4096
 1013b64:	18ffffc4 	addi	r3,r3,-1
 1013b68:	118cb03a 	or	r6,r2,r6
 1013b6c:	008000c4 	movi	r2,3
 1013b70:	480a923a 	slli	r5,r9,8
 1013b74:	68800015 	stw	r2,0(r13)
 1013b78:	69000215 	stw	r4,8(r13)
 1013b7c:	19800b36 	bltu	r3,r6,1013bac <__unpack_d+0x94>
 1013b80:	200f883a 	mov	r7,r4
 1013b84:	1811883a 	mov	r8,r3
 1013b88:	2945883a 	add	r2,r5,r5
 1013b8c:	1149803a 	cmpltu	r4,r2,r5
 1013b90:	3187883a 	add	r3,r6,r6
 1013b94:	20c9883a 	add	r4,r4,r3
 1013b98:	100b883a 	mov	r5,r2
 1013b9c:	200d883a 	mov	r6,r4
 1013ba0:	39ffffc4 	addi	r7,r7,-1
 1013ba4:	413ff82e 	bgeu	r8,r4,1013b88 <__unpack_d+0x70>
 1013ba8:	69c00215 	stw	r7,8(r13)
 1013bac:	69800415 	stw	r6,16(r13)
 1013bb0:	69400315 	stw	r5,12(r13)
 1013bb4:	f800283a 	ret
 1013bb8:	00800084 	movi	r2,2
 1013bbc:	28800015 	stw	r2,0(r5)
 1013bc0:	f800283a 	ret
 1013bc4:	0081ffc4 	movi	r2,2047
 1013bc8:	40800f26 	beq	r8,r2,1013c08 <__unpack_d+0xf0>
 1013bcc:	480cd63a 	srli	r6,r9,24
 1013bd0:	5006923a 	slli	r3,r10,8
 1013bd4:	4804923a 	slli	r2,r9,8
 1013bd8:	0009883a 	mov	r4,zero
 1013bdc:	30c6b03a 	or	r3,r6,r3
 1013be0:	01440034 	movhi	r5,4096
 1013be4:	110cb03a 	or	r6,r2,r4
 1013be8:	423f0044 	addi	r8,r8,-1023
 1013bec:	194eb03a 	or	r7,r3,r5
 1013bf0:	008000c4 	movi	r2,3
 1013bf4:	69c00415 	stw	r7,16(r13)
 1013bf8:	6a000215 	stw	r8,8(r13)
 1013bfc:	68800015 	stw	r2,0(r13)
 1013c00:	69800315 	stw	r6,12(r13)
 1013c04:	f800283a 	ret
 1013c08:	4a84b03a 	or	r2,r9,r10
 1013c0c:	1000031e 	bne	r2,zero,1013c1c <__unpack_d+0x104>
 1013c10:	00800104 	movi	r2,4
 1013c14:	28800015 	stw	r2,0(r5)
 1013c18:	f800283a 	ret
 1013c1c:	0009883a 	mov	r4,zero
 1013c20:	01400234 	movhi	r5,8
 1013c24:	4904703a 	and	r2,r9,r4
 1013c28:	5146703a 	and	r3,r10,r5
 1013c2c:	10c4b03a 	or	r2,r2,r3
 1013c30:	10000526 	beq	r2,zero,1013c48 <__unpack_d+0x130>
 1013c34:	00800044 	movi	r2,1
 1013c38:	68800015 	stw	r2,0(r13)
 1013c3c:	6b000415 	stw	r12,16(r13)
 1013c40:	6ac00315 	stw	r11,12(r13)
 1013c44:	f800283a 	ret
 1013c48:	68000015 	stw	zero,0(r13)
 1013c4c:	003ffb06 	br	1013c3c <__unpack_d+0x124>

01013c50 <__fpcmp_parts_d>:
 1013c50:	21800017 	ldw	r6,0(r4)
 1013c54:	00c00044 	movi	r3,1
 1013c58:	19800a2e 	bgeu	r3,r6,1013c84 <__fpcmp_parts_d+0x34>
 1013c5c:	28800017 	ldw	r2,0(r5)
 1013c60:	1880082e 	bgeu	r3,r2,1013c84 <__fpcmp_parts_d+0x34>
 1013c64:	00c00104 	movi	r3,4
 1013c68:	30c02626 	beq	r6,r3,1013d04 <__fpcmp_parts_d+0xb4>
 1013c6c:	10c02226 	beq	r2,r3,1013cf8 <__fpcmp_parts_d+0xa8>
 1013c70:	00c00084 	movi	r3,2
 1013c74:	30c00526 	beq	r6,r3,1013c8c <__fpcmp_parts_d+0x3c>
 1013c78:	10c0071e 	bne	r2,r3,1013c98 <__fpcmp_parts_d+0x48>
 1013c7c:	20800117 	ldw	r2,4(r4)
 1013c80:	1000091e 	bne	r2,zero,1013ca8 <__fpcmp_parts_d+0x58>
 1013c84:	00800044 	movi	r2,1
 1013c88:	f800283a 	ret
 1013c8c:	10c01a1e 	bne	r2,r3,1013cf8 <__fpcmp_parts_d+0xa8>
 1013c90:	0005883a 	mov	r2,zero
 1013c94:	f800283a 	ret
 1013c98:	22000117 	ldw	r8,4(r4)
 1013c9c:	28800117 	ldw	r2,4(r5)
 1013ca0:	40800326 	beq	r8,r2,1013cb0 <__fpcmp_parts_d+0x60>
 1013ca4:	403ff726 	beq	r8,zero,1013c84 <__fpcmp_parts_d+0x34>
 1013ca8:	00bfffc4 	movi	r2,-1
 1013cac:	f800283a 	ret
 1013cb0:	20c00217 	ldw	r3,8(r4)
 1013cb4:	28800217 	ldw	r2,8(r5)
 1013cb8:	10fffa16 	blt	r2,r3,1013ca4 <__fpcmp_parts_d+0x54>
 1013cbc:	18800916 	blt	r3,r2,1013ce4 <__fpcmp_parts_d+0x94>
 1013cc0:	21c00417 	ldw	r7,16(r4)
 1013cc4:	28c00417 	ldw	r3,16(r5)
 1013cc8:	21800317 	ldw	r6,12(r4)
 1013ccc:	28800317 	ldw	r2,12(r5)
 1013cd0:	19fff436 	bltu	r3,r7,1013ca4 <__fpcmp_parts_d+0x54>
 1013cd4:	38c00526 	beq	r7,r3,1013cec <__fpcmp_parts_d+0x9c>
 1013cd8:	38c00236 	bltu	r7,r3,1013ce4 <__fpcmp_parts_d+0x94>
 1013cdc:	19ffec1e 	bne	r3,r7,1013c90 <__fpcmp_parts_d+0x40>
 1013ce0:	30bfeb2e 	bgeu	r6,r2,1013c90 <__fpcmp_parts_d+0x40>
 1013ce4:	403fe71e 	bne	r8,zero,1013c84 <__fpcmp_parts_d+0x34>
 1013ce8:	003fef06 	br	1013ca8 <__fpcmp_parts_d+0x58>
 1013cec:	11bffa2e 	bgeu	r2,r6,1013cd8 <__fpcmp_parts_d+0x88>
 1013cf0:	403fe426 	beq	r8,zero,1013c84 <__fpcmp_parts_d+0x34>
 1013cf4:	003fec06 	br	1013ca8 <__fpcmp_parts_d+0x58>
 1013cf8:	28800117 	ldw	r2,4(r5)
 1013cfc:	103fe11e 	bne	r2,zero,1013c84 <__fpcmp_parts_d+0x34>
 1013d00:	003fe906 	br	1013ca8 <__fpcmp_parts_d+0x58>
 1013d04:	11bfdd1e 	bne	r2,r6,1013c7c <__fpcmp_parts_d+0x2c>
 1013d08:	28c00117 	ldw	r3,4(r5)
 1013d0c:	20800117 	ldw	r2,4(r4)
 1013d10:	1885c83a 	sub	r2,r3,r2
 1013d14:	f800283a 	ret

01013d18 <__assert_func>:
 1013d18:	008040f4 	movhi	r2,259
 1013d1c:	109bed04 	addi	r2,r2,28596
 1013d20:	10c00017 	ldw	r3,0(r2)
 1013d24:	defffc04 	addi	sp,sp,-16
 1013d28:	2011883a 	mov	r8,r4
 1013d2c:	dfc00315 	stw	ra,12(sp)
 1013d30:	3005883a 	mov	r2,r6
 1013d34:	2813883a 	mov	r9,r5
 1013d38:	19000317 	ldw	r4,12(r3)
 1013d3c:	30000b26 	beq	r6,zero,1013d6c <__assert_func+0x54>
 1013d40:	00c040f4 	movhi	r3,259
 1013d44:	18d39404 	addi	r3,r3,20048
 1013d48:	380d883a 	mov	r6,r7
 1013d4c:	014040f4 	movhi	r5,259
 1013d50:	29538804 	addi	r5,r5,20000
 1013d54:	400f883a 	mov	r7,r8
 1013d58:	da400015 	stw	r9,0(sp)
 1013d5c:	d8c00115 	stw	r3,4(sp)
 1013d60:	d8800215 	stw	r2,8(sp)
 1013d64:	10141a80 	call	10141a8 <fiprintf>
 1013d68:	1019bc00 	call	1019bc0 <abort>
 1013d6c:	008040f4 	movhi	r2,259
 1013d70:	10939704 	addi	r2,r2,20060
 1013d74:	1007883a 	mov	r3,r2
 1013d78:	003ff306 	br	1013d48 <__assert_func+0x30>

01013d7c <__assert>:
 1013d7c:	deffff04 	addi	sp,sp,-4
 1013d80:	300f883a 	mov	r7,r6
 1013d84:	000d883a 	mov	r6,zero
 1013d88:	dfc00015 	stw	ra,0(sp)
 1013d8c:	1013d180 	call	1013d18 <__assert_func>

01013d90 <atof>:
 1013d90:	000b883a 	mov	r5,zero
 1013d94:	101752c1 	jmpi	101752c <strtod>

01013d98 <_atoi_r>:
 1013d98:	000d883a 	mov	r6,zero
 1013d9c:	01c00284 	movi	r7,10
 1013da0:	101760c1 	jmpi	101760c <_strtol_r>

01013da4 <atoi>:
 1013da4:	000b883a 	mov	r5,zero
 1013da8:	01800284 	movi	r6,10
 1013dac:	10178501 	jmpi	1017850 <strtol>

01013db0 <__errno>:
 1013db0:	00c040f4 	movhi	r3,259
 1013db4:	18dbed04 	addi	r3,r3,28596
 1013db8:	18800017 	ldw	r2,0(r3)
 1013dbc:	f800283a 	ret

01013dc0 <fgetc>:
 1013dc0:	defffd04 	addi	sp,sp,-12
 1013dc4:	dc400115 	stw	r17,4(sp)
 1013dc8:	044040f4 	movhi	r17,259
 1013dcc:	8c5bed04 	addi	r17,r17,28596
 1013dd0:	88c00017 	ldw	r3,0(r17)
 1013dd4:	dc000015 	stw	r16,0(sp)
 1013dd8:	dfc00215 	stw	ra,8(sp)
 1013ddc:	2021883a 	mov	r16,r4
 1013de0:	18000326 	beq	r3,zero,1013df0 <fgetc+0x30>
 1013de4:	18800e17 	ldw	r2,56(r3)
 1013de8:	1809883a 	mov	r4,r3
 1013dec:	10000e26 	beq	r2,zero,1013e28 <fgetc+0x68>
 1013df0:	80800117 	ldw	r2,4(r16)
 1013df4:	800b883a 	mov	r5,r16
 1013df8:	10bfffc4 	addi	r2,r2,-1
 1013dfc:	80800115 	stw	r2,4(r16)
 1013e00:	10000f16 	blt	r2,zero,1013e40 <fgetc+0x80>
 1013e04:	80c00017 	ldw	r3,0(r16)
 1013e08:	18800003 	ldbu	r2,0(r3)
 1013e0c:	18c00044 	addi	r3,r3,1
 1013e10:	80c00015 	stw	r3,0(r16)
 1013e14:	dfc00217 	ldw	ra,8(sp)
 1013e18:	dc400117 	ldw	r17,4(sp)
 1013e1c:	dc000017 	ldw	r16,0(sp)
 1013e20:	dec00304 	addi	sp,sp,12
 1013e24:	f800283a 	ret
 1013e28:	1013f500 	call	1013f50 <__sinit>
 1013e2c:	80800117 	ldw	r2,4(r16)
 1013e30:	800b883a 	mov	r5,r16
 1013e34:	10bfffc4 	addi	r2,r2,-1
 1013e38:	80800115 	stw	r2,4(r16)
 1013e3c:	103ff10e 	bge	r2,zero,1013e04 <fgetc+0x44>
 1013e40:	89000017 	ldw	r4,0(r17)
 1013e44:	dfc00217 	ldw	ra,8(sp)
 1013e48:	dc400117 	ldw	r17,4(sp)
 1013e4c:	dc000017 	ldw	r16,0(sp)
 1013e50:	dec00304 	addi	sp,sp,12
 1013e54:	10158341 	jmpi	1015834 <__srget_r>

01013e58 <_fgetc_r>:
 1013e58:	defffd04 	addi	sp,sp,-12
 1013e5c:	dc400115 	stw	r17,4(sp)
 1013e60:	dc000015 	stw	r16,0(sp)
 1013e64:	dfc00215 	stw	ra,8(sp)
 1013e68:	2021883a 	mov	r16,r4
 1013e6c:	2823883a 	mov	r17,r5
 1013e70:	20000226 	beq	r4,zero,1013e7c <_fgetc_r+0x24>
 1013e74:	20800e17 	ldw	r2,56(r4)
 1013e78:	10000f26 	beq	r2,zero,1013eb8 <_fgetc_r+0x60>
 1013e7c:	88800117 	ldw	r2,4(r17)
 1013e80:	8009883a 	mov	r4,r16
 1013e84:	880b883a 	mov	r5,r17
 1013e88:	10bfffc4 	addi	r2,r2,-1
 1013e8c:	88800115 	stw	r2,4(r17)
 1013e90:	10001016 	blt	r2,zero,1013ed4 <_fgetc_r+0x7c>
 1013e94:	88c00017 	ldw	r3,0(r17)
 1013e98:	18800003 	ldbu	r2,0(r3)
 1013e9c:	18c00044 	addi	r3,r3,1
 1013ea0:	88c00015 	stw	r3,0(r17)
 1013ea4:	dfc00217 	ldw	ra,8(sp)
 1013ea8:	dc400117 	ldw	r17,4(sp)
 1013eac:	dc000017 	ldw	r16,0(sp)
 1013eb0:	dec00304 	addi	sp,sp,12
 1013eb4:	f800283a 	ret
 1013eb8:	1013f500 	call	1013f50 <__sinit>
 1013ebc:	88800117 	ldw	r2,4(r17)
 1013ec0:	8009883a 	mov	r4,r16
 1013ec4:	880b883a 	mov	r5,r17
 1013ec8:	10bfffc4 	addi	r2,r2,-1
 1013ecc:	88800115 	stw	r2,4(r17)
 1013ed0:	103ff00e 	bge	r2,zero,1013e94 <_fgetc_r+0x3c>
 1013ed4:	dfc00217 	ldw	ra,8(sp)
 1013ed8:	dc400117 	ldw	r17,4(sp)
 1013edc:	dc000017 	ldw	r16,0(sp)
 1013ee0:	dec00304 	addi	sp,sp,12
 1013ee4:	10158341 	jmpi	1015834 <__srget_r>

01013ee8 <std>:
 1013ee8:	00804074 	movhi	r2,257
 1013eec:	10967604 	addi	r2,r2,23000
 1013ef0:	20800b15 	stw	r2,44(r4)
 1013ef4:	00804074 	movhi	r2,257
 1013ef8:	1096b104 	addi	r2,r2,23236
 1013efc:	20800815 	stw	r2,32(r4)
 1013f00:	00c04074 	movhi	r3,257
 1013f04:	18d69204 	addi	r3,r3,23112
 1013f08:	00804074 	movhi	r2,257
 1013f0c:	10967804 	addi	r2,r2,23008
 1013f10:	2140030d 	sth	r5,12(r4)
 1013f14:	2180038d 	sth	r6,14(r4)
 1013f18:	20c00915 	stw	r3,36(r4)
 1013f1c:	20800a15 	stw	r2,40(r4)
 1013f20:	20000015 	stw	zero,0(r4)
 1013f24:	20000115 	stw	zero,4(r4)
 1013f28:	20000215 	stw	zero,8(r4)
 1013f2c:	20000415 	stw	zero,16(r4)
 1013f30:	20000515 	stw	zero,20(r4)
 1013f34:	20000615 	stw	zero,24(r4)
 1013f38:	21000715 	stw	r4,28(r4)
 1013f3c:	f800283a 	ret

01013f40 <__sfp_lock_acquire>:
 1013f40:	f800283a 	ret

01013f44 <__sfp_lock_release>:
 1013f44:	f800283a 	ret

01013f48 <__sinit_lock_acquire>:
 1013f48:	f800283a 	ret

01013f4c <__sinit_lock_release>:
 1013f4c:	f800283a 	ret

01013f50 <__sinit>:
 1013f50:	20800e17 	ldw	r2,56(r4)
 1013f54:	defffd04 	addi	sp,sp,-12
 1013f58:	dc400115 	stw	r17,4(sp)
 1013f5c:	dc000015 	stw	r16,0(sp)
 1013f60:	dfc00215 	stw	ra,8(sp)
 1013f64:	04400044 	movi	r17,1
 1013f68:	01400104 	movi	r5,4
 1013f6c:	000d883a 	mov	r6,zero
 1013f70:	2021883a 	mov	r16,r4
 1013f74:	2200bb04 	addi	r8,r4,748
 1013f78:	200f883a 	mov	r7,r4
 1013f7c:	10000526 	beq	r2,zero,1013f94 <__sinit+0x44>
 1013f80:	dfc00217 	ldw	ra,8(sp)
 1013f84:	dc400117 	ldw	r17,4(sp)
 1013f88:	dc000017 	ldw	r16,0(sp)
 1013f8c:	dec00304 	addi	sp,sp,12
 1013f90:	f800283a 	ret
 1013f94:	21000117 	ldw	r4,4(r4)
 1013f98:	00804074 	movhi	r2,257
 1013f9c:	10900d04 	addi	r2,r2,16436
 1013fa0:	00c000c4 	movi	r3,3
 1013fa4:	80800f15 	stw	r2,60(r16)
 1013fa8:	80c0b915 	stw	r3,740(r16)
 1013fac:	8200ba15 	stw	r8,744(r16)
 1013fb0:	84400e15 	stw	r17,56(r16)
 1013fb4:	8000b815 	stw	zero,736(r16)
 1013fb8:	1013ee80 	call	1013ee8 <std>
 1013fbc:	81000217 	ldw	r4,8(r16)
 1013fc0:	880d883a 	mov	r6,r17
 1013fc4:	800f883a 	mov	r7,r16
 1013fc8:	01400284 	movi	r5,10
 1013fcc:	1013ee80 	call	1013ee8 <std>
 1013fd0:	81000317 	ldw	r4,12(r16)
 1013fd4:	800f883a 	mov	r7,r16
 1013fd8:	01400484 	movi	r5,18
 1013fdc:	01800084 	movi	r6,2
 1013fe0:	dfc00217 	ldw	ra,8(sp)
 1013fe4:	dc400117 	ldw	r17,4(sp)
 1013fe8:	dc000017 	ldw	r16,0(sp)
 1013fec:	dec00304 	addi	sp,sp,12
 1013ff0:	1013ee81 	jmpi	1013ee8 <std>

01013ff4 <__fp_lock>:
 1013ff4:	0005883a 	mov	r2,zero
 1013ff8:	f800283a 	ret

01013ffc <__fp_unlock>:
 1013ffc:	0005883a 	mov	r2,zero
 1014000:	f800283a 	ret

01014004 <__fp_unlock_all>:
 1014004:	008040f4 	movhi	r2,259
 1014008:	109bed04 	addi	r2,r2,28596
 101400c:	11000017 	ldw	r4,0(r2)
 1014010:	01404074 	movhi	r5,257
 1014014:	294fff04 	addi	r5,r5,16380
 1014018:	10148c01 	jmpi	10148c0 <_fwalk>

0101401c <__fp_lock_all>:
 101401c:	008040f4 	movhi	r2,259
 1014020:	109bed04 	addi	r2,r2,28596
 1014024:	11000017 	ldw	r4,0(r2)
 1014028:	01404074 	movhi	r5,257
 101402c:	294ffd04 	addi	r5,r5,16372
 1014030:	10148c01 	jmpi	10148c0 <_fwalk>

01014034 <_cleanup_r>:
 1014034:	014040b4 	movhi	r5,258
 1014038:	296d4904 	addi	r5,r5,-19164
 101403c:	10148c01 	jmpi	10148c0 <_fwalk>

01014040 <_cleanup>:
 1014040:	008040f4 	movhi	r2,259
 1014044:	109bee04 	addi	r2,r2,28600
 1014048:	11000017 	ldw	r4,0(r2)
 101404c:	10140341 	jmpi	1014034 <_cleanup_r>

01014050 <__sfmoreglue>:
 1014050:	defffc04 	addi	sp,sp,-16
 1014054:	dc400115 	stw	r17,4(sp)
 1014058:	2c401724 	muli	r17,r5,92
 101405c:	dc800215 	stw	r18,8(sp)
 1014060:	2825883a 	mov	r18,r5
 1014064:	89400304 	addi	r5,r17,12
 1014068:	dc000015 	stw	r16,0(sp)
 101406c:	dfc00315 	stw	ra,12(sp)
 1014070:	1014b340 	call	1014b34 <_malloc_r>
 1014074:	0021883a 	mov	r16,zero
 1014078:	880d883a 	mov	r6,r17
 101407c:	000b883a 	mov	r5,zero
 1014080:	10000626 	beq	r2,zero,101409c <__sfmoreglue+0x4c>
 1014084:	11000304 	addi	r4,r2,12
 1014088:	14800115 	stw	r18,4(r2)
 101408c:	10000015 	stw	zero,0(r2)
 1014090:	11000215 	stw	r4,8(r2)
 1014094:	1021883a 	mov	r16,r2
 1014098:	10153f40 	call	10153f4 <memset>
 101409c:	8005883a 	mov	r2,r16
 10140a0:	dfc00317 	ldw	ra,12(sp)
 10140a4:	dc800217 	ldw	r18,8(sp)
 10140a8:	dc400117 	ldw	r17,4(sp)
 10140ac:	dc000017 	ldw	r16,0(sp)
 10140b0:	dec00404 	addi	sp,sp,16
 10140b4:	f800283a 	ret

010140b8 <__sfp>:
 10140b8:	defffd04 	addi	sp,sp,-12
 10140bc:	008040f4 	movhi	r2,259
 10140c0:	109bee04 	addi	r2,r2,28600
 10140c4:	dc000015 	stw	r16,0(sp)
 10140c8:	14000017 	ldw	r16,0(r2)
 10140cc:	dc400115 	stw	r17,4(sp)
 10140d0:	dfc00215 	stw	ra,8(sp)
 10140d4:	80800e17 	ldw	r2,56(r16)
 10140d8:	2023883a 	mov	r17,r4
 10140dc:	10002626 	beq	r2,zero,1014178 <__sfp+0xc0>
 10140e0:	8400b804 	addi	r16,r16,736
 10140e4:	80800117 	ldw	r2,4(r16)
 10140e8:	81000217 	ldw	r4,8(r16)
 10140ec:	10ffffc4 	addi	r3,r2,-1
 10140f0:	18000916 	blt	r3,zero,1014118 <__sfp+0x60>
 10140f4:	2080030f 	ldh	r2,12(r4)
 10140f8:	10000b26 	beq	r2,zero,1014128 <__sfp+0x70>
 10140fc:	017fffc4 	movi	r5,-1
 1014100:	00000206 	br	101410c <__sfp+0x54>
 1014104:	2080030f 	ldh	r2,12(r4)
 1014108:	10000726 	beq	r2,zero,1014128 <__sfp+0x70>
 101410c:	18ffffc4 	addi	r3,r3,-1
 1014110:	21001704 	addi	r4,r4,92
 1014114:	197ffb1e 	bne	r3,r5,1014104 <__sfp+0x4c>
 1014118:	80800017 	ldw	r2,0(r16)
 101411c:	10001926 	beq	r2,zero,1014184 <__sfp+0xcc>
 1014120:	1021883a 	mov	r16,r2
 1014124:	003fef06 	br	10140e4 <__sfp+0x2c>
 1014128:	00bfffc4 	movi	r2,-1
 101412c:	00c00044 	movi	r3,1
 1014130:	2080038d 	sth	r2,14(r4)
 1014134:	20c0030d 	sth	r3,12(r4)
 1014138:	20000015 	stw	zero,0(r4)
 101413c:	20000215 	stw	zero,8(r4)
 1014140:	20000115 	stw	zero,4(r4)
 1014144:	20000415 	stw	zero,16(r4)
 1014148:	20000515 	stw	zero,20(r4)
 101414c:	20000615 	stw	zero,24(r4)
 1014150:	20000c15 	stw	zero,48(r4)
 1014154:	20000d15 	stw	zero,52(r4)
 1014158:	20001115 	stw	zero,68(r4)
 101415c:	20001215 	stw	zero,72(r4)
 1014160:	2005883a 	mov	r2,r4
 1014164:	dfc00217 	ldw	ra,8(sp)
 1014168:	dc400117 	ldw	r17,4(sp)
 101416c:	dc000017 	ldw	r16,0(sp)
 1014170:	dec00304 	addi	sp,sp,12
 1014174:	f800283a 	ret
 1014178:	8009883a 	mov	r4,r16
 101417c:	1013f500 	call	1013f50 <__sinit>
 1014180:	003fd706 	br	10140e0 <__sfp+0x28>
 1014184:	8809883a 	mov	r4,r17
 1014188:	01400104 	movi	r5,4
 101418c:	10140500 	call	1014050 <__sfmoreglue>
 1014190:	80800015 	stw	r2,0(r16)
 1014194:	103fe21e 	bne	r2,zero,1014120 <__sfp+0x68>
 1014198:	00800304 	movi	r2,12
 101419c:	0009883a 	mov	r4,zero
 10141a0:	88800015 	stw	r2,0(r17)
 10141a4:	003fee06 	br	1014160 <__sfp+0xa8>

010141a8 <fiprintf>:
 10141a8:	defffc04 	addi	sp,sp,-16
 10141ac:	2007883a 	mov	r3,r4
 10141b0:	dfc00115 	stw	ra,4(sp)
 10141b4:	d9800215 	stw	r6,8(sp)
 10141b8:	d9c00315 	stw	r7,12(sp)
 10141bc:	018040f4 	movhi	r6,259
 10141c0:	319bed04 	addi	r6,r6,28596
 10141c4:	31000017 	ldw	r4,0(r6)
 10141c8:	d8800204 	addi	r2,sp,8
 10141cc:	280d883a 	mov	r6,r5
 10141d0:	100f883a 	mov	r7,r2
 10141d4:	180b883a 	mov	r5,r3
 10141d8:	d8800015 	stw	r2,0(sp)
 10141dc:	1017ac80 	call	1017ac8 <_vfiprintf_r>
 10141e0:	dfc00117 	ldw	ra,4(sp)
 10141e4:	dec00404 	addi	sp,sp,16
 10141e8:	f800283a 	ret

010141ec <_fiprintf_r>:
 10141ec:	defffd04 	addi	sp,sp,-12
 10141f0:	dfc00115 	stw	ra,4(sp)
 10141f4:	d9c00215 	stw	r7,8(sp)
 10141f8:	d8800204 	addi	r2,sp,8
 10141fc:	100f883a 	mov	r7,r2
 1014200:	d8800015 	stw	r2,0(sp)
 1014204:	1017ac80 	call	1017ac8 <_vfiprintf_r>
 1014208:	dfc00117 	ldw	ra,4(sp)
 101420c:	dec00304 	addi	sp,sp,12
 1014210:	f800283a 	ret

01014214 <_fopen_r>:
 1014214:	defffa04 	addi	sp,sp,-24
 1014218:	dcc00415 	stw	r19,16(sp)
 101421c:	2827883a 	mov	r19,r5
 1014220:	300b883a 	mov	r5,r6
 1014224:	d80d883a 	mov	r6,sp
 1014228:	dc800315 	stw	r18,12(sp)
 101422c:	dc400215 	stw	r17,8(sp)
 1014230:	dc000115 	stw	r16,4(sp)
 1014234:	dfc00515 	stw	ra,20(sp)
 1014238:	2021883a 	mov	r16,r4
 101423c:	101b7680 	call	101b768 <__sflags>
 1014240:	1025883a 	mov	r18,r2
 1014244:	8009883a 	mov	r4,r16
 1014248:	0023883a 	mov	r17,zero
 101424c:	1000081e 	bne	r2,zero,1014270 <_fopen_r+0x5c>
 1014250:	8805883a 	mov	r2,r17
 1014254:	dfc00517 	ldw	ra,20(sp)
 1014258:	dcc00417 	ldw	r19,16(sp)
 101425c:	dc800317 	ldw	r18,12(sp)
 1014260:	dc400217 	ldw	r17,8(sp)
 1014264:	dc000117 	ldw	r16,4(sp)
 1014268:	dec00604 	addi	sp,sp,24
 101426c:	f800283a 	ret
 1014270:	10140b80 	call	10140b8 <__sfp>
 1014274:	1023883a 	mov	r17,r2
 1014278:	980b883a 	mov	r5,r19
 101427c:	8009883a 	mov	r4,r16
 1014280:	01c06d84 	movi	r7,438
 1014284:	103ff226 	beq	r2,zero,1014250 <_fopen_r+0x3c>
 1014288:	d9800017 	ldw	r6,0(sp)
 101428c:	101548c0 	call	101548c <_open_r>
 1014290:	10001816 	blt	r2,zero,10142f4 <_fopen_r+0xe0>
 1014294:	00c04074 	movhi	r3,257
 1014298:	18d69204 	addi	r3,r3,23112
 101429c:	923fffcc 	andi	r8,r18,65535
 10142a0:	8880038d 	sth	r2,14(r17)
 10142a4:	00804074 	movhi	r2,257
 10142a8:	1096b104 	addi	r2,r2,23236
 10142ac:	88800815 	stw	r2,32(r17)
 10142b0:	88c00915 	stw	r3,36(r17)
 10142b4:	00804074 	movhi	r2,257
 10142b8:	10967804 	addi	r2,r2,23008
 10142bc:	00c04074 	movhi	r3,257
 10142c0:	18d67604 	addi	r3,r3,23000
 10142c4:	4200400c 	andi	r8,r8,256
 10142c8:	8c80030d 	sth	r18,12(r17)
 10142cc:	8009883a 	mov	r4,r16
 10142d0:	880b883a 	mov	r5,r17
 10142d4:	000d883a 	mov	r6,zero
 10142d8:	01c00084 	movi	r7,2
 10142dc:	88800a15 	stw	r2,40(r17)
 10142e0:	88c00b15 	stw	r3,44(r17)
 10142e4:	8c400715 	stw	r17,28(r17)
 10142e8:	403fd926 	beq	r8,zero,1014250 <_fopen_r+0x3c>
 10142ec:	10143240 	call	1014324 <_fseek_r>
 10142f0:	003fd706 	br	1014250 <_fopen_r+0x3c>
 10142f4:	1013f400 	call	1013f40 <__sfp_lock_acquire>
 10142f8:	8800030d 	sth	zero,12(r17)
 10142fc:	1013f440 	call	1013f44 <__sfp_lock_release>
 1014300:	0023883a 	mov	r17,zero
 1014304:	003fd206 	br	1014250 <_fopen_r+0x3c>

01014308 <fopen>:
 1014308:	018040f4 	movhi	r6,259
 101430c:	319bed04 	addi	r6,r6,28596
 1014310:	2007883a 	mov	r3,r4
 1014314:	31000017 	ldw	r4,0(r6)
 1014318:	280d883a 	mov	r6,r5
 101431c:	180b883a 	mov	r5,r3
 1014320:	10142141 	jmpi	1014214 <_fopen_r>

01014324 <_fseek_r>:
 1014324:	deffe804 	addi	sp,sp,-96
 1014328:	dd801515 	stw	r22,84(sp)
 101432c:	dcc01215 	stw	r19,72(sp)
 1014330:	dc801115 	stw	r18,68(sp)
 1014334:	dc000f15 	stw	r16,60(sp)
 1014338:	dfc01715 	stw	ra,92(sp)
 101433c:	ddc01615 	stw	r23,88(sp)
 1014340:	dd401415 	stw	r21,80(sp)
 1014344:	dd001315 	stw	r20,76(sp)
 1014348:	dc401015 	stw	r17,64(sp)
 101434c:	2025883a 	mov	r18,r4
 1014350:	2821883a 	mov	r16,r5
 1014354:	302d883a 	mov	r22,r6
 1014358:	3827883a 	mov	r19,r7
 101435c:	20000226 	beq	r4,zero,1014368 <_fseek_r+0x44>
 1014360:	20800e17 	ldw	r2,56(r4)
 1014364:	10007826 	beq	r2,zero,1014548 <_fseek_r+0x224>
 1014368:	8080030b 	ldhu	r2,12(r16)
 101436c:	00c04204 	movi	r3,264
 1014370:	1080420c 	andi	r2,r2,264
 1014374:	10c07926 	beq	r2,r3,101455c <_fseek_r+0x238>
 1014378:	85400a17 	ldw	r21,40(r16)
 101437c:	a800ea26 	beq	r21,zero,1014728 <_fseek_r+0x404>
 1014380:	00800044 	movi	r2,1
 1014384:	98805f26 	beq	r19,r2,1014504 <_fseek_r+0x1e0>
 1014388:	00800084 	movi	r2,2
 101438c:	98801026 	beq	r19,r2,10143d0 <_fseek_r+0xac>
 1014390:	98000f26 	beq	r19,zero,10143d0 <_fseek_r+0xac>
 1014394:	00800584 	movi	r2,22
 1014398:	013fffc4 	movi	r4,-1
 101439c:	90800015 	stw	r2,0(r18)
 10143a0:	2005883a 	mov	r2,r4
 10143a4:	dfc01717 	ldw	ra,92(sp)
 10143a8:	ddc01617 	ldw	r23,88(sp)
 10143ac:	dd801517 	ldw	r22,84(sp)
 10143b0:	dd401417 	ldw	r21,80(sp)
 10143b4:	dd001317 	ldw	r20,76(sp)
 10143b8:	dcc01217 	ldw	r19,72(sp)
 10143bc:	dc801117 	ldw	r18,68(sp)
 10143c0:	dc401017 	ldw	r17,64(sp)
 10143c4:	dc000f17 	ldw	r16,60(sp)
 10143c8:	dec01804 	addi	sp,sp,96
 10143cc:	f800283a 	ret
 10143d0:	81800417 	ldw	r6,16(r16)
 10143d4:	0023883a 	mov	r17,zero
 10143d8:	002f883a 	mov	r23,zero
 10143dc:	3000a626 	beq	r6,zero,1014678 <_fseek_r+0x354>
 10143e0:	8100030b 	ldhu	r4,12(r16)
 10143e4:	2082068c 	andi	r2,r4,2074
 10143e8:	1000081e 	bne	r2,zero,101440c <_fseek_r+0xe8>
 10143ec:	2081000c 	andi	r2,r4,1024
 10143f0:	10001b1e 	bne	r2,zero,1014460 <_fseek_r+0x13c>
 10143f4:	00804074 	movhi	r2,257
 10143f8:	10967804 	addi	r2,r2,23008
 10143fc:	a8800926 	beq	r21,r2,1014424 <_fseek_r+0x100>
 1014400:	8080030b 	ldhu	r2,12(r16)
 1014404:	10820014 	ori	r2,r2,2048
 1014408:	8080030d 	sth	r2,12(r16)
 101440c:	9009883a 	mov	r4,r18
 1014410:	800b883a 	mov	r5,r16
 1014414:	101b5380 	call	101b538 <_fflush_r>
 1014418:	1000a326 	beq	r2,zero,10146a8 <_fseek_r+0x384>
 101441c:	013fffc4 	movi	r4,-1
 1014420:	003fdf06 	br	10143a0 <_fseek_r+0x7c>
 1014424:	8140038f 	ldh	r5,14(r16)
 1014428:	283ff516 	blt	r5,zero,1014400 <_fseek_r+0xdc>
 101442c:	9009883a 	mov	r4,r18
 1014430:	d80d883a 	mov	r6,sp
 1014434:	10147840 	call	1014784 <_fstat_r>
 1014438:	103ff11e 	bne	r2,zero,1014400 <_fseek_r+0xdc>
 101443c:	d8800117 	ldw	r2,4(sp)
 1014440:	00e00014 	movui	r3,32768
 1014444:	10bc000c 	andi	r2,r2,61440
 1014448:	10ffed1e 	bne	r2,r3,1014400 <_fseek_r+0xdc>
 101444c:	80c0030b 	ldhu	r3,12(r16)
 1014450:	00810004 	movi	r2,1024
 1014454:	80801315 	stw	r2,76(r16)
 1014458:	1886b03a 	or	r3,r3,r2
 101445c:	80c0030d 	sth	r3,12(r16)
 1014460:	9800701e 	bne	r19,zero,1014624 <_fseek_r+0x300>
 1014464:	b029883a 	mov	r20,r22
 1014468:	b804c03a 	cmpne	r2,r23,zero
 101446c:	10003f1e 	bne	r2,zero,101456c <_fseek_r+0x248>
 1014470:	8100030b 	ldhu	r4,12(r16)
 1014474:	2084000c 	andi	r2,r4,4096
 1014478:	1000a126 	beq	r2,zero,1014700 <_fseek_r+0x3dc>
 101447c:	81801417 	ldw	r6,80(r16)
 1014480:	80c00117 	ldw	r3,4(r16)
 1014484:	81400c17 	ldw	r5,48(r16)
 1014488:	30e3c83a 	sub	r17,r6,r3
 101448c:	28008026 	beq	r5,zero,1014690 <_fseek_r+0x36c>
 1014490:	81c00f17 	ldw	r7,60(r16)
 1014494:	89e3c83a 	sub	r17,r17,r7
 1014498:	80800e17 	ldw	r2,56(r16)
 101449c:	81800417 	ldw	r6,16(r16)
 10144a0:	88c7883a 	add	r3,r17,r3
 10144a4:	1185c83a 	sub	r2,r2,r6
 10144a8:	11cf883a 	add	r7,r2,r7
 10144ac:	1887c83a 	sub	r3,r3,r2
 10144b0:	2088000c 	andi	r2,r4,8192
 10144b4:	10003e1e 	bne	r2,zero,10145b0 <_fseek_r+0x28c>
 10144b8:	a0c03d16 	blt	r20,r3,10145b0 <_fseek_r+0x28c>
 10144bc:	38c5883a 	add	r2,r7,r3
 10144c0:	a0803b2e 	bgeu	r20,r2,10145b0 <_fseek_r+0x28c>
 10144c4:	a0c5c83a 	sub	r2,r20,r3
 10144c8:	3887c83a 	sub	r3,r7,r2
 10144cc:	3085883a 	add	r2,r6,r2
 10144d0:	80800015 	stw	r2,0(r16)
 10144d4:	80c00115 	stw	r3,4(r16)
 10144d8:	28000526 	beq	r5,zero,10144f0 <_fseek_r+0x1cc>
 10144dc:	80801004 	addi	r2,r16,64
 10144e0:	28800226 	beq	r5,r2,10144ec <_fseek_r+0x1c8>
 10144e4:	9009883a 	mov	r4,r18
 10144e8:	101b9340 	call	101b934 <_free_r>
 10144ec:	80000c15 	stw	zero,48(r16)
 10144f0:	8080030b 	ldhu	r2,12(r16)
 10144f4:	0009883a 	mov	r4,zero
 10144f8:	10bff7cc 	andi	r2,r2,65503
 10144fc:	8080030d 	sth	r2,12(r16)
 1014500:	003fa706 	br	10143a0 <_fseek_r+0x7c>
 1014504:	9009883a 	mov	r4,r18
 1014508:	800b883a 	mov	r5,r16
 101450c:	101b5380 	call	101b538 <_fflush_r>
 1014510:	8100030b 	ldhu	r4,12(r16)
 1014514:	2084000c 	andi	r2,r4,4096
 1014518:	10008726 	beq	r2,zero,1014738 <_fseek_r+0x414>
 101451c:	84401417 	ldw	r17,80(r16)
 1014520:	2080010c 	andi	r2,r4,4
 1014524:	1000171e 	bne	r2,zero,1014584 <_fseek_r+0x260>
 1014528:	2080020c 	andi	r2,r4,8
 101452c:	10003b26 	beq	r2,zero,101461c <_fseek_r+0x2f8>
 1014530:	80800017 	ldw	r2,0(r16)
 1014534:	10003926 	beq	r2,zero,101461c <_fseek_r+0x2f8>
 1014538:	81800417 	ldw	r6,16(r16)
 101453c:	1185c83a 	sub	r2,r2,r6
 1014540:	88a3883a 	add	r17,r17,r2
 1014544:	00001606 	br	10145a0 <_fseek_r+0x27c>
 1014548:	1013f500 	call	1013f50 <__sinit>
 101454c:	8080030b 	ldhu	r2,12(r16)
 1014550:	00c04204 	movi	r3,264
 1014554:	1080420c 	andi	r2,r2,264
 1014558:	10ff871e 	bne	r2,r3,1014378 <_fseek_r+0x54>
 101455c:	9009883a 	mov	r4,r18
 1014560:	800b883a 	mov	r5,r16
 1014564:	101b5380 	call	101b538 <_fflush_r>
 1014568:	003f8306 	br	1014378 <_fseek_r+0x54>
 101456c:	81400c17 	ldw	r5,48(r16)
 1014570:	28004526 	beq	r5,zero,1014688 <_fseek_r+0x364>
 1014574:	8100030b 	ldhu	r4,12(r16)
 1014578:	80c00117 	ldw	r3,4(r16)
 101457c:	81c00f17 	ldw	r7,60(r16)
 1014580:	003fc506 	br	1014498 <_fseek_r+0x174>
 1014584:	80c00117 	ldw	r3,4(r16)
 1014588:	80800c17 	ldw	r2,48(r16)
 101458c:	88e3c83a 	sub	r17,r17,r3
 1014590:	10002226 	beq	r2,zero,101461c <_fseek_r+0x2f8>
 1014594:	81c00f17 	ldw	r7,60(r16)
 1014598:	81800417 	ldw	r6,16(r16)
 101459c:	89e3c83a 	sub	r17,r17,r7
 10145a0:	b46d883a 	add	r22,r22,r17
 10145a4:	0027883a 	mov	r19,zero
 10145a8:	05c00044 	movi	r23,1
 10145ac:	003f8b06 	br	10143dc <_fseek_r+0xb8>
 10145b0:	80801317 	ldw	r2,76(r16)
 10145b4:	81400717 	ldw	r5,28(r16)
 10145b8:	9009883a 	mov	r4,r18
 10145bc:	0085c83a 	sub	r2,zero,r2
 10145c0:	a0a2703a 	and	r17,r20,r2
 10145c4:	880d883a 	mov	r6,r17
 10145c8:	000f883a 	mov	r7,zero
 10145cc:	a83ee83a 	callr	r21
 10145d0:	00ffffc4 	movi	r3,-1
 10145d4:	10ff8d26 	beq	r2,r3,101440c <_fseek_r+0xe8>
 10145d8:	80800417 	ldw	r2,16(r16)
 10145dc:	81400c17 	ldw	r5,48(r16)
 10145e0:	80000115 	stw	zero,4(r16)
 10145e4:	80800015 	stw	r2,0(r16)
 10145e8:	28000526 	beq	r5,zero,1014600 <_fseek_r+0x2dc>
 10145ec:	80801004 	addi	r2,r16,64
 10145f0:	28800226 	beq	r5,r2,10145fc <_fseek_r+0x2d8>
 10145f4:	9009883a 	mov	r4,r18
 10145f8:	101b9340 	call	101b934 <_free_r>
 10145fc:	80000c15 	stw	zero,48(r16)
 1014600:	8080030b 	ldhu	r2,12(r16)
 1014604:	a463c83a 	sub	r17,r20,r17
 1014608:	10bff7cc 	andi	r2,r2,65503
 101460c:	8080030d 	sth	r2,12(r16)
 1014610:	88000c1e 	bne	r17,zero,1014644 <_fseek_r+0x320>
 1014614:	0009883a 	mov	r4,zero
 1014618:	003f6106 	br	10143a0 <_fseek_r+0x7c>
 101461c:	81800417 	ldw	r6,16(r16)
 1014620:	003fdf06 	br	10145a0 <_fseek_r+0x27c>
 1014624:	8140038f 	ldh	r5,14(r16)
 1014628:	9009883a 	mov	r4,r18
 101462c:	d80d883a 	mov	r6,sp
 1014630:	10147840 	call	1014784 <_fstat_r>
 1014634:	103f751e 	bne	r2,zero,101440c <_fseek_r+0xe8>
 1014638:	d8800417 	ldw	r2,16(sp)
 101463c:	b0a9883a 	add	r20,r22,r2
 1014640:	003f8906 	br	1014468 <_fseek_r+0x144>
 1014644:	9009883a 	mov	r4,r18
 1014648:	800b883a 	mov	r5,r16
 101464c:	10156540 	call	1015654 <__srefill_r>
 1014650:	103f6e1e 	bne	r2,zero,101440c <_fseek_r+0xe8>
 1014654:	80c00117 	ldw	r3,4(r16)
 1014658:	1c7f6c36 	bltu	r3,r17,101440c <_fseek_r+0xe8>
 101465c:	80800017 	ldw	r2,0(r16)
 1014660:	1c47c83a 	sub	r3,r3,r17
 1014664:	0009883a 	mov	r4,zero
 1014668:	1445883a 	add	r2,r2,r17
 101466c:	80c00115 	stw	r3,4(r16)
 1014670:	80800015 	stw	r2,0(r16)
 1014674:	003f4a06 	br	10143a0 <_fseek_r+0x7c>
 1014678:	9009883a 	mov	r4,r18
 101467c:	800b883a 	mov	r5,r16
 1014680:	10149780 	call	1014978 <__smakebuf_r>
 1014684:	003f5606 	br	10143e0 <_fseek_r+0xbc>
 1014688:	8100030b 	ldhu	r4,12(r16)
 101468c:	80c00117 	ldw	r3,4(r16)
 1014690:	80800017 	ldw	r2,0(r16)
 1014694:	81800417 	ldw	r6,16(r16)
 1014698:	1185c83a 	sub	r2,r2,r6
 101469c:	10cf883a 	add	r7,r2,r3
 10146a0:	8887c83a 	sub	r3,r17,r2
 10146a4:	003f8206 	br	10144b0 <_fseek_r+0x18c>
 10146a8:	81400717 	ldw	r5,28(r16)
 10146ac:	b00d883a 	mov	r6,r22
 10146b0:	980f883a 	mov	r7,r19
 10146b4:	9009883a 	mov	r4,r18
 10146b8:	a83ee83a 	callr	r21
 10146bc:	00ffffc4 	movi	r3,-1
 10146c0:	10ff5626 	beq	r2,r3,101441c <_fseek_r+0xf8>
 10146c4:	81400c17 	ldw	r5,48(r16)
 10146c8:	28000526 	beq	r5,zero,10146e0 <_fseek_r+0x3bc>
 10146cc:	80801004 	addi	r2,r16,64
 10146d0:	28800226 	beq	r5,r2,10146dc <_fseek_r+0x3b8>
 10146d4:	9009883a 	mov	r4,r18
 10146d8:	101b9340 	call	101b934 <_free_r>
 10146dc:	80000c15 	stw	zero,48(r16)
 10146e0:	8080030b 	ldhu	r2,12(r16)
 10146e4:	80c00417 	ldw	r3,16(r16)
 10146e8:	0009883a 	mov	r4,zero
 10146ec:	10bdf7cc 	andi	r2,r2,63455
 10146f0:	8080030d 	sth	r2,12(r16)
 10146f4:	80c00015 	stw	r3,0(r16)
 10146f8:	80000115 	stw	zero,4(r16)
 10146fc:	003f2806 	br	10143a0 <_fseek_r+0x7c>
 1014700:	81400717 	ldw	r5,28(r16)
 1014704:	000d883a 	mov	r6,zero
 1014708:	9009883a 	mov	r4,r18
 101470c:	01c00044 	movi	r7,1
 1014710:	a83ee83a 	callr	r21
 1014714:	100d883a 	mov	r6,r2
 1014718:	00bfffc4 	movi	r2,-1
 101471c:	30bf3b26 	beq	r6,r2,101440c <_fseek_r+0xe8>
 1014720:	8100030b 	ldhu	r4,12(r16)
 1014724:	003f5606 	br	1014480 <_fseek_r+0x15c>
 1014728:	00800744 	movi	r2,29
 101472c:	013fffc4 	movi	r4,-1
 1014730:	90800015 	stw	r2,0(r18)
 1014734:	003f1a06 	br	10143a0 <_fseek_r+0x7c>
 1014738:	81400717 	ldw	r5,28(r16)
 101473c:	980f883a 	mov	r7,r19
 1014740:	9009883a 	mov	r4,r18
 1014744:	000d883a 	mov	r6,zero
 1014748:	a83ee83a 	callr	r21
 101474c:	1023883a 	mov	r17,r2
 1014750:	00bfffc4 	movi	r2,-1
 1014754:	88bf3126 	beq	r17,r2,101441c <_fseek_r+0xf8>
 1014758:	8100030b 	ldhu	r4,12(r16)
 101475c:	003f7006 	br	1014520 <_fseek_r+0x1fc>

01014760 <fseek>:
 1014760:	008040f4 	movhi	r2,259
 1014764:	109bed04 	addi	r2,r2,28596
 1014768:	2013883a 	mov	r9,r4
 101476c:	11000017 	ldw	r4,0(r2)
 1014770:	2805883a 	mov	r2,r5
 1014774:	300f883a 	mov	r7,r6
 1014778:	480b883a 	mov	r5,r9
 101477c:	100d883a 	mov	r6,r2
 1014780:	10143241 	jmpi	1014324 <_fseek_r>

01014784 <_fstat_r>:
 1014784:	defffd04 	addi	sp,sp,-12
 1014788:	dc000015 	stw	r16,0(sp)
 101478c:	04004134 	movhi	r16,260
 1014790:	84230104 	addi	r16,r16,-29692
 1014794:	dc400115 	stw	r17,4(sp)
 1014798:	80000015 	stw	zero,0(r16)
 101479c:	2023883a 	mov	r17,r4
 10147a0:	2809883a 	mov	r4,r5
 10147a4:	300b883a 	mov	r5,r6
 10147a8:	dfc00215 	stw	ra,8(sp)
 10147ac:	10212c40 	call	10212c4 <fstat>
 10147b0:	1007883a 	mov	r3,r2
 10147b4:	00bfffc4 	movi	r2,-1
 10147b8:	18800626 	beq	r3,r2,10147d4 <_fstat_r+0x50>
 10147bc:	1805883a 	mov	r2,r3
 10147c0:	dfc00217 	ldw	ra,8(sp)
 10147c4:	dc400117 	ldw	r17,4(sp)
 10147c8:	dc000017 	ldw	r16,0(sp)
 10147cc:	dec00304 	addi	sp,sp,12
 10147d0:	f800283a 	ret
 10147d4:	80800017 	ldw	r2,0(r16)
 10147d8:	103ff826 	beq	r2,zero,10147bc <_fstat_r+0x38>
 10147dc:	88800015 	stw	r2,0(r17)
 10147e0:	1805883a 	mov	r2,r3
 10147e4:	dfc00217 	ldw	ra,8(sp)
 10147e8:	dc400117 	ldw	r17,4(sp)
 10147ec:	dc000017 	ldw	r16,0(sp)
 10147f0:	dec00304 	addi	sp,sp,12
 10147f4:	f800283a 	ret

010147f8 <_fwalk_reent>:
 10147f8:	defff704 	addi	sp,sp,-36
 10147fc:	dcc00315 	stw	r19,12(sp)
 1014800:	24c0b804 	addi	r19,r4,736
 1014804:	dd800615 	stw	r22,24(sp)
 1014808:	dd400515 	stw	r21,20(sp)
 101480c:	dfc00815 	stw	ra,32(sp)
 1014810:	ddc00715 	stw	r23,28(sp)
 1014814:	dd000415 	stw	r20,16(sp)
 1014818:	dc800215 	stw	r18,8(sp)
 101481c:	dc400115 	stw	r17,4(sp)
 1014820:	dc000015 	stw	r16,0(sp)
 1014824:	202b883a 	mov	r21,r4
 1014828:	282d883a 	mov	r22,r5
 101482c:	1013f400 	call	1013f40 <__sfp_lock_acquire>
 1014830:	98002126 	beq	r19,zero,10148b8 <_fwalk_reent+0xc0>
 1014834:	002f883a 	mov	r23,zero
 1014838:	9c800117 	ldw	r18,4(r19)
 101483c:	9c000217 	ldw	r16,8(r19)
 1014840:	90bfffc4 	addi	r2,r18,-1
 1014844:	10000d16 	blt	r2,zero,101487c <_fwalk_reent+0x84>
 1014848:	0023883a 	mov	r17,zero
 101484c:	053fffc4 	movi	r20,-1
 1014850:	8080030f 	ldh	r2,12(r16)
 1014854:	8c400044 	addi	r17,r17,1
 1014858:	10000626 	beq	r2,zero,1014874 <_fwalk_reent+0x7c>
 101485c:	8080038f 	ldh	r2,14(r16)
 1014860:	800b883a 	mov	r5,r16
 1014864:	a809883a 	mov	r4,r21
 1014868:	15000226 	beq	r2,r20,1014874 <_fwalk_reent+0x7c>
 101486c:	b03ee83a 	callr	r22
 1014870:	b8aeb03a 	or	r23,r23,r2
 1014874:	84001704 	addi	r16,r16,92
 1014878:	947ff51e 	bne	r18,r17,1014850 <_fwalk_reent+0x58>
 101487c:	9cc00017 	ldw	r19,0(r19)
 1014880:	983fed1e 	bne	r19,zero,1014838 <_fwalk_reent+0x40>
 1014884:	1013f440 	call	1013f44 <__sfp_lock_release>
 1014888:	b805883a 	mov	r2,r23
 101488c:	dfc00817 	ldw	ra,32(sp)
 1014890:	ddc00717 	ldw	r23,28(sp)
 1014894:	dd800617 	ldw	r22,24(sp)
 1014898:	dd400517 	ldw	r21,20(sp)
 101489c:	dd000417 	ldw	r20,16(sp)
 10148a0:	dcc00317 	ldw	r19,12(sp)
 10148a4:	dc800217 	ldw	r18,8(sp)
 10148a8:	dc400117 	ldw	r17,4(sp)
 10148ac:	dc000017 	ldw	r16,0(sp)
 10148b0:	dec00904 	addi	sp,sp,36
 10148b4:	f800283a 	ret
 10148b8:	002f883a 	mov	r23,zero
 10148bc:	003ff106 	br	1014884 <_fwalk_reent+0x8c>

010148c0 <_fwalk>:
 10148c0:	defff804 	addi	sp,sp,-32
 10148c4:	dcc00315 	stw	r19,12(sp)
 10148c8:	24c0b804 	addi	r19,r4,736
 10148cc:	dd400515 	stw	r21,20(sp)
 10148d0:	dfc00715 	stw	ra,28(sp)
 10148d4:	dd800615 	stw	r22,24(sp)
 10148d8:	dd000415 	stw	r20,16(sp)
 10148dc:	dc800215 	stw	r18,8(sp)
 10148e0:	dc400115 	stw	r17,4(sp)
 10148e4:	dc000015 	stw	r16,0(sp)
 10148e8:	282b883a 	mov	r21,r5
 10148ec:	1013f400 	call	1013f40 <__sfp_lock_acquire>
 10148f0:	98001f26 	beq	r19,zero,1014970 <_fwalk+0xb0>
 10148f4:	002d883a 	mov	r22,zero
 10148f8:	9c800117 	ldw	r18,4(r19)
 10148fc:	9c000217 	ldw	r16,8(r19)
 1014900:	90bfffc4 	addi	r2,r18,-1
 1014904:	10000c16 	blt	r2,zero,1014938 <_fwalk+0x78>
 1014908:	0023883a 	mov	r17,zero
 101490c:	053fffc4 	movi	r20,-1
 1014910:	8080030f 	ldh	r2,12(r16)
 1014914:	8c400044 	addi	r17,r17,1
 1014918:	10000526 	beq	r2,zero,1014930 <_fwalk+0x70>
 101491c:	8080038f 	ldh	r2,14(r16)
 1014920:	8009883a 	mov	r4,r16
 1014924:	15000226 	beq	r2,r20,1014930 <_fwalk+0x70>
 1014928:	a83ee83a 	callr	r21
 101492c:	b0acb03a 	or	r22,r22,r2
 1014930:	84001704 	addi	r16,r16,92
 1014934:	947ff61e 	bne	r18,r17,1014910 <_fwalk+0x50>
 1014938:	9cc00017 	ldw	r19,0(r19)
 101493c:	983fee1e 	bne	r19,zero,10148f8 <_fwalk+0x38>
 1014940:	1013f440 	call	1013f44 <__sfp_lock_release>
 1014944:	b005883a 	mov	r2,r22
 1014948:	dfc00717 	ldw	ra,28(sp)
 101494c:	dd800617 	ldw	r22,24(sp)
 1014950:	dd400517 	ldw	r21,20(sp)
 1014954:	dd000417 	ldw	r20,16(sp)
 1014958:	dcc00317 	ldw	r19,12(sp)
 101495c:	dc800217 	ldw	r18,8(sp)
 1014960:	dc400117 	ldw	r17,4(sp)
 1014964:	dc000017 	ldw	r16,0(sp)
 1014968:	dec00804 	addi	sp,sp,32
 101496c:	f800283a 	ret
 1014970:	002d883a 	mov	r22,zero
 1014974:	003ff206 	br	1014940 <_fwalk+0x80>

01014978 <__smakebuf_r>:
 1014978:	2880030b 	ldhu	r2,12(r5)
 101497c:	deffed04 	addi	sp,sp,-76
 1014980:	dc401015 	stw	r17,64(sp)
 1014984:	1080008c 	andi	r2,r2,2
 1014988:	dc000f15 	stw	r16,60(sp)
 101498c:	dfc01215 	stw	ra,72(sp)
 1014990:	dc801115 	stw	r18,68(sp)
 1014994:	2821883a 	mov	r16,r5
 1014998:	2023883a 	mov	r17,r4
 101499c:	10000b26 	beq	r2,zero,10149cc <__smakebuf_r+0x54>
 10149a0:	28c010c4 	addi	r3,r5,67
 10149a4:	00800044 	movi	r2,1
 10149a8:	28800515 	stw	r2,20(r5)
 10149ac:	28c00415 	stw	r3,16(r5)
 10149b0:	28c00015 	stw	r3,0(r5)
 10149b4:	dfc01217 	ldw	ra,72(sp)
 10149b8:	dc801117 	ldw	r18,68(sp)
 10149bc:	dc401017 	ldw	r17,64(sp)
 10149c0:	dc000f17 	ldw	r16,60(sp)
 10149c4:	dec01304 	addi	sp,sp,76
 10149c8:	f800283a 	ret
 10149cc:	2940038f 	ldh	r5,14(r5)
 10149d0:	28002116 	blt	r5,zero,1014a58 <__smakebuf_r+0xe0>
 10149d4:	d80d883a 	mov	r6,sp
 10149d8:	10147840 	call	1014784 <_fstat_r>
 10149dc:	10001e16 	blt	r2,zero,1014a58 <__smakebuf_r+0xe0>
 10149e0:	d8800117 	ldw	r2,4(sp)
 10149e4:	00e00014 	movui	r3,32768
 10149e8:	113c000c 	andi	r4,r2,61440
 10149ec:	20c03126 	beq	r4,r3,1014ab4 <__smakebuf_r+0x13c>
 10149f0:	8080030b 	ldhu	r2,12(r16)
 10149f4:	00c80004 	movi	r3,8192
 10149f8:	10820014 	ori	r2,r2,2048
 10149fc:	8080030d 	sth	r2,12(r16)
 1014a00:	20c01e26 	beq	r4,r3,1014a7c <__smakebuf_r+0x104>
 1014a04:	04810004 	movi	r18,1024
 1014a08:	8809883a 	mov	r4,r17
 1014a0c:	900b883a 	mov	r5,r18
 1014a10:	1014b340 	call	1014b34 <_malloc_r>
 1014a14:	1009883a 	mov	r4,r2
 1014a18:	10003126 	beq	r2,zero,1014ae0 <__smakebuf_r+0x168>
 1014a1c:	80c0030b 	ldhu	r3,12(r16)
 1014a20:	00804074 	movhi	r2,257
 1014a24:	10900d04 	addi	r2,r2,16436
 1014a28:	88800f15 	stw	r2,60(r17)
 1014a2c:	18c02014 	ori	r3,r3,128
 1014a30:	84800515 	stw	r18,20(r16)
 1014a34:	80c0030d 	sth	r3,12(r16)
 1014a38:	81000415 	stw	r4,16(r16)
 1014a3c:	81000015 	stw	r4,0(r16)
 1014a40:	dfc01217 	ldw	ra,72(sp)
 1014a44:	dc801117 	ldw	r18,68(sp)
 1014a48:	dc401017 	ldw	r17,64(sp)
 1014a4c:	dc000f17 	ldw	r16,60(sp)
 1014a50:	dec01304 	addi	sp,sp,76
 1014a54:	f800283a 	ret
 1014a58:	80c0030b 	ldhu	r3,12(r16)
 1014a5c:	1880200c 	andi	r2,r3,128
 1014a60:	10000426 	beq	r2,zero,1014a74 <__smakebuf_r+0xfc>
 1014a64:	04801004 	movi	r18,64
 1014a68:	18820014 	ori	r2,r3,2048
 1014a6c:	8080030d 	sth	r2,12(r16)
 1014a70:	003fe506 	br	1014a08 <__smakebuf_r+0x90>
 1014a74:	04810004 	movi	r18,1024
 1014a78:	003ffb06 	br	1014a68 <__smakebuf_r+0xf0>
 1014a7c:	8140038f 	ldh	r5,14(r16)
 1014a80:	8809883a 	mov	r4,r17
 1014a84:	101cc6c0 	call	101cc6c <_isatty_r>
 1014a88:	103fde26 	beq	r2,zero,1014a04 <__smakebuf_r+0x8c>
 1014a8c:	8080030b 	ldhu	r2,12(r16)
 1014a90:	80c010c4 	addi	r3,r16,67
 1014a94:	04810004 	movi	r18,1024
 1014a98:	10800054 	ori	r2,r2,1
 1014a9c:	8080030d 	sth	r2,12(r16)
 1014aa0:	00800044 	movi	r2,1
 1014aa4:	80c00415 	stw	r3,16(r16)
 1014aa8:	80800515 	stw	r2,20(r16)
 1014aac:	80c00015 	stw	r3,0(r16)
 1014ab0:	003fd506 	br	1014a08 <__smakebuf_r+0x90>
 1014ab4:	80c00a17 	ldw	r3,40(r16)
 1014ab8:	00804074 	movhi	r2,257
 1014abc:	10967804 	addi	r2,r2,23008
 1014ac0:	18bfcb1e 	bne	r3,r2,10149f0 <__smakebuf_r+0x78>
 1014ac4:	8080030b 	ldhu	r2,12(r16)
 1014ac8:	00c10004 	movi	r3,1024
 1014acc:	1825883a 	mov	r18,r3
 1014ad0:	10c4b03a 	or	r2,r2,r3
 1014ad4:	8080030d 	sth	r2,12(r16)
 1014ad8:	80c01315 	stw	r3,76(r16)
 1014adc:	003fca06 	br	1014a08 <__smakebuf_r+0x90>
 1014ae0:	8100030b 	ldhu	r4,12(r16)
 1014ae4:	2080800c 	andi	r2,r4,512
 1014ae8:	103fb21e 	bne	r2,zero,10149b4 <__smakebuf_r+0x3c>
 1014aec:	80c010c4 	addi	r3,r16,67
 1014af0:	21000094 	ori	r4,r4,2
 1014af4:	00800044 	movi	r2,1
 1014af8:	80800515 	stw	r2,20(r16)
 1014afc:	8100030d 	sth	r4,12(r16)
 1014b00:	80c00415 	stw	r3,16(r16)
 1014b04:	80c00015 	stw	r3,0(r16)
 1014b08:	003faa06 	br	10149b4 <__smakebuf_r+0x3c>

01014b0c <free>:
 1014b0c:	008040f4 	movhi	r2,259
 1014b10:	109bed04 	addi	r2,r2,28596
 1014b14:	200b883a 	mov	r5,r4
 1014b18:	11000017 	ldw	r4,0(r2)
 1014b1c:	101b9341 	jmpi	101b934 <_free_r>

01014b20 <malloc>:
 1014b20:	008040f4 	movhi	r2,259
 1014b24:	109bed04 	addi	r2,r2,28596
 1014b28:	200b883a 	mov	r5,r4
 1014b2c:	11000017 	ldw	r4,0(r2)
 1014b30:	1014b341 	jmpi	1014b34 <_malloc_r>

01014b34 <_malloc_r>:
 1014b34:	defff604 	addi	sp,sp,-40
 1014b38:	28c002c4 	addi	r3,r5,11
 1014b3c:	00800584 	movi	r2,22
 1014b40:	dc800215 	stw	r18,8(sp)
 1014b44:	dfc00915 	stw	ra,36(sp)
 1014b48:	df000815 	stw	fp,32(sp)
 1014b4c:	ddc00715 	stw	r23,28(sp)
 1014b50:	dd800615 	stw	r22,24(sp)
 1014b54:	dd400515 	stw	r21,20(sp)
 1014b58:	dd000415 	stw	r20,16(sp)
 1014b5c:	dcc00315 	stw	r19,12(sp)
 1014b60:	dc400115 	stw	r17,4(sp)
 1014b64:	dc000015 	stw	r16,0(sp)
 1014b68:	2025883a 	mov	r18,r4
 1014b6c:	10c01236 	bltu	r2,r3,1014bb8 <_malloc_r+0x84>
 1014b70:	04400404 	movi	r17,16
 1014b74:	8940142e 	bgeu	r17,r5,1014bc8 <_malloc_r+0x94>
 1014b78:	00800304 	movi	r2,12
 1014b7c:	0007883a 	mov	r3,zero
 1014b80:	90800015 	stw	r2,0(r18)
 1014b84:	1805883a 	mov	r2,r3
 1014b88:	dfc00917 	ldw	ra,36(sp)
 1014b8c:	df000817 	ldw	fp,32(sp)
 1014b90:	ddc00717 	ldw	r23,28(sp)
 1014b94:	dd800617 	ldw	r22,24(sp)
 1014b98:	dd400517 	ldw	r21,20(sp)
 1014b9c:	dd000417 	ldw	r20,16(sp)
 1014ba0:	dcc00317 	ldw	r19,12(sp)
 1014ba4:	dc800217 	ldw	r18,8(sp)
 1014ba8:	dc400117 	ldw	r17,4(sp)
 1014bac:	dc000017 	ldw	r16,0(sp)
 1014bb0:	dec00a04 	addi	sp,sp,40
 1014bb4:	f800283a 	ret
 1014bb8:	00bffe04 	movi	r2,-8
 1014bbc:	18a2703a 	and	r17,r3,r2
 1014bc0:	883fed16 	blt	r17,zero,1014b78 <_malloc_r+0x44>
 1014bc4:	897fec36 	bltu	r17,r5,1014b78 <_malloc_r+0x44>
 1014bc8:	9009883a 	mov	r4,r18
 1014bcc:	10219800 	call	1021980 <__malloc_lock>
 1014bd0:	00807dc4 	movi	r2,503
 1014bd4:	14402b2e 	bgeu	r2,r17,1014c84 <_malloc_r+0x150>
 1014bd8:	8806d27a 	srli	r3,r17,9
 1014bdc:	18003f1e 	bne	r3,zero,1014cdc <_malloc_r+0x1a8>
 1014be0:	880cd0fa 	srli	r6,r17,3
 1014be4:	300490fa 	slli	r2,r6,3
 1014be8:	02c040f4 	movhi	r11,259
 1014bec:	5ad63804 	addi	r11,r11,22752
 1014bf0:	12cb883a 	add	r5,r2,r11
 1014bf4:	2c000317 	ldw	r16,12(r5)
 1014bf8:	580f883a 	mov	r7,r11
 1014bfc:	2c00041e 	bne	r5,r16,1014c10 <_malloc_r+0xdc>
 1014c00:	00000a06 	br	1014c2c <_malloc_r+0xf8>
 1014c04:	1800860e 	bge	r3,zero,1014e20 <_malloc_r+0x2ec>
 1014c08:	84000317 	ldw	r16,12(r16)
 1014c0c:	2c000726 	beq	r5,r16,1014c2c <_malloc_r+0xf8>
 1014c10:	80800117 	ldw	r2,4(r16)
 1014c14:	00ffff04 	movi	r3,-4
 1014c18:	10c8703a 	and	r4,r2,r3
 1014c1c:	2447c83a 	sub	r3,r4,r17
 1014c20:	008003c4 	movi	r2,15
 1014c24:	10fff70e 	bge	r2,r3,1014c04 <_malloc_r+0xd0>
 1014c28:	31bfffc4 	addi	r6,r6,-1
 1014c2c:	32400044 	addi	r9,r6,1
 1014c30:	028040f4 	movhi	r10,259
 1014c34:	52963a04 	addi	r10,r10,22760
 1014c38:	54000217 	ldw	r16,8(r10)
 1014c3c:	8280a026 	beq	r16,r10,1014ec0 <_malloc_r+0x38c>
 1014c40:	80800117 	ldw	r2,4(r16)
 1014c44:	00ffff04 	movi	r3,-4
 1014c48:	10ca703a 	and	r5,r2,r3
 1014c4c:	2c4dc83a 	sub	r6,r5,r17
 1014c50:	008003c4 	movi	r2,15
 1014c54:	11808316 	blt	r2,r6,1014e64 <_malloc_r+0x330>
 1014c58:	52800315 	stw	r10,12(r10)
 1014c5c:	52800215 	stw	r10,8(r10)
 1014c60:	30002916 	blt	r6,zero,1014d08 <_malloc_r+0x1d4>
 1014c64:	8147883a 	add	r3,r16,r5
 1014c68:	18800117 	ldw	r2,4(r3)
 1014c6c:	9009883a 	mov	r4,r18
 1014c70:	10800054 	ori	r2,r2,1
 1014c74:	18800115 	stw	r2,4(r3)
 1014c78:	10219a00 	call	10219a0 <__malloc_unlock>
 1014c7c:	80c00204 	addi	r3,r16,8
 1014c80:	003fc006 	br	1014b84 <_malloc_r+0x50>
 1014c84:	02c040f4 	movhi	r11,259
 1014c88:	5ad63804 	addi	r11,r11,22752
 1014c8c:	8ac5883a 	add	r2,r17,r11
 1014c90:	14000317 	ldw	r16,12(r2)
 1014c94:	580f883a 	mov	r7,r11
 1014c98:	8806d0fa 	srli	r3,r17,3
 1014c9c:	14006c26 	beq	r2,r16,1014e50 <_malloc_r+0x31c>
 1014ca0:	80c00117 	ldw	r3,4(r16)
 1014ca4:	00bfff04 	movi	r2,-4
 1014ca8:	81800317 	ldw	r6,12(r16)
 1014cac:	1886703a 	and	r3,r3,r2
 1014cb0:	80c7883a 	add	r3,r16,r3
 1014cb4:	18800117 	ldw	r2,4(r3)
 1014cb8:	81400217 	ldw	r5,8(r16)
 1014cbc:	9009883a 	mov	r4,r18
 1014cc0:	10800054 	ori	r2,r2,1
 1014cc4:	18800115 	stw	r2,4(r3)
 1014cc8:	31400215 	stw	r5,8(r6)
 1014ccc:	29800315 	stw	r6,12(r5)
 1014cd0:	10219a00 	call	10219a0 <__malloc_unlock>
 1014cd4:	80c00204 	addi	r3,r16,8
 1014cd8:	003faa06 	br	1014b84 <_malloc_r+0x50>
 1014cdc:	00800104 	movi	r2,4
 1014ce0:	10c0052e 	bgeu	r2,r3,1014cf8 <_malloc_r+0x1c4>
 1014ce4:	00800504 	movi	r2,20
 1014ce8:	10c07836 	bltu	r2,r3,1014ecc <_malloc_r+0x398>
 1014cec:	198016c4 	addi	r6,r3,91
 1014cf0:	300490fa 	slli	r2,r6,3
 1014cf4:	003fbc06 	br	1014be8 <_malloc_r+0xb4>
 1014cf8:	8804d1ba 	srli	r2,r17,6
 1014cfc:	11800e04 	addi	r6,r2,56
 1014d00:	300490fa 	slli	r2,r6,3
 1014d04:	003fb806 	br	1014be8 <_malloc_r+0xb4>
 1014d08:	00807fc4 	movi	r2,511
 1014d0c:	1140bb36 	bltu	r2,r5,1014ffc <_malloc_r+0x4c8>
 1014d10:	2806d0fa 	srli	r3,r5,3
 1014d14:	573ffe04 	addi	fp,r10,-8
 1014d18:	00800044 	movi	r2,1
 1014d1c:	180890fa 	slli	r4,r3,3
 1014d20:	1807d0ba 	srai	r3,r3,2
 1014d24:	e1c00117 	ldw	r7,4(fp)
 1014d28:	5909883a 	add	r4,r11,r4
 1014d2c:	21400217 	ldw	r5,8(r4)
 1014d30:	10c4983a 	sll	r2,r2,r3
 1014d34:	81000315 	stw	r4,12(r16)
 1014d38:	81400215 	stw	r5,8(r16)
 1014d3c:	388eb03a 	or	r7,r7,r2
 1014d40:	2c000315 	stw	r16,12(r5)
 1014d44:	24000215 	stw	r16,8(r4)
 1014d48:	e1c00115 	stw	r7,4(fp)
 1014d4c:	4807883a 	mov	r3,r9
 1014d50:	4800cd16 	blt	r9,zero,1015088 <_malloc_r+0x554>
 1014d54:	1807d0ba 	srai	r3,r3,2
 1014d58:	00800044 	movi	r2,1
 1014d5c:	10c8983a 	sll	r4,r2,r3
 1014d60:	39004436 	bltu	r7,r4,1014e74 <_malloc_r+0x340>
 1014d64:	21c4703a 	and	r2,r4,r7
 1014d68:	10000a1e 	bne	r2,zero,1014d94 <_malloc_r+0x260>
 1014d6c:	2109883a 	add	r4,r4,r4
 1014d70:	00bfff04 	movi	r2,-4
 1014d74:	4884703a 	and	r2,r9,r2
 1014d78:	3906703a 	and	r3,r7,r4
 1014d7c:	12400104 	addi	r9,r2,4
 1014d80:	1800041e 	bne	r3,zero,1014d94 <_malloc_r+0x260>
 1014d84:	2109883a 	add	r4,r4,r4
 1014d88:	3904703a 	and	r2,r7,r4
 1014d8c:	4a400104 	addi	r9,r9,4
 1014d90:	103ffc26 	beq	r2,zero,1014d84 <_malloc_r+0x250>
 1014d94:	480490fa 	slli	r2,r9,3
 1014d98:	4819883a 	mov	r12,r9
 1014d9c:	023fff04 	movi	r8,-4
 1014da0:	589b883a 	add	r13,r11,r2
 1014da4:	6807883a 	mov	r3,r13
 1014da8:	014003c4 	movi	r5,15
 1014dac:	1c000317 	ldw	r16,12(r3)
 1014db0:	1c00041e 	bne	r3,r16,1014dc4 <_malloc_r+0x290>
 1014db4:	0000a706 	br	1015054 <_malloc_r+0x520>
 1014db8:	3000ab0e 	bge	r6,zero,1015068 <_malloc_r+0x534>
 1014dbc:	84000317 	ldw	r16,12(r16)
 1014dc0:	1c00a426 	beq	r3,r16,1015054 <_malloc_r+0x520>
 1014dc4:	80800117 	ldw	r2,4(r16)
 1014dc8:	1204703a 	and	r2,r2,r8
 1014dcc:	144dc83a 	sub	r6,r2,r17
 1014dd0:	29bff90e 	bge	r5,r6,1014db8 <_malloc_r+0x284>
 1014dd4:	81000317 	ldw	r4,12(r16)
 1014dd8:	80c00217 	ldw	r3,8(r16)
 1014ddc:	89400054 	ori	r5,r17,1
 1014de0:	8445883a 	add	r2,r16,r17
 1014de4:	20c00215 	stw	r3,8(r4)
 1014de8:	19000315 	stw	r4,12(r3)
 1014dec:	81400115 	stw	r5,4(r16)
 1014df0:	1187883a 	add	r3,r2,r6
 1014df4:	31000054 	ori	r4,r6,1
 1014df8:	50800315 	stw	r2,12(r10)
 1014dfc:	50800215 	stw	r2,8(r10)
 1014e00:	19800015 	stw	r6,0(r3)
 1014e04:	11000115 	stw	r4,4(r2)
 1014e08:	12800215 	stw	r10,8(r2)
 1014e0c:	12800315 	stw	r10,12(r2)
 1014e10:	9009883a 	mov	r4,r18
 1014e14:	10219a00 	call	10219a0 <__malloc_unlock>
 1014e18:	80c00204 	addi	r3,r16,8
 1014e1c:	003f5906 	br	1014b84 <_malloc_r+0x50>
 1014e20:	8109883a 	add	r4,r16,r4
 1014e24:	20800117 	ldw	r2,4(r4)
 1014e28:	80c00217 	ldw	r3,8(r16)
 1014e2c:	81400317 	ldw	r5,12(r16)
 1014e30:	10800054 	ori	r2,r2,1
 1014e34:	20800115 	stw	r2,4(r4)
 1014e38:	28c00215 	stw	r3,8(r5)
 1014e3c:	19400315 	stw	r5,12(r3)
 1014e40:	9009883a 	mov	r4,r18
 1014e44:	10219a00 	call	10219a0 <__malloc_unlock>
 1014e48:	80c00204 	addi	r3,r16,8
 1014e4c:	003f4d06 	br	1014b84 <_malloc_r+0x50>
 1014e50:	80800204 	addi	r2,r16,8
 1014e54:	14000317 	ldw	r16,12(r2)
 1014e58:	143f911e 	bne	r2,r16,1014ca0 <_malloc_r+0x16c>
 1014e5c:	1a400084 	addi	r9,r3,2
 1014e60:	003f7306 	br	1014c30 <_malloc_r+0xfc>
 1014e64:	88c00054 	ori	r3,r17,1
 1014e68:	8445883a 	add	r2,r16,r17
 1014e6c:	80c00115 	stw	r3,4(r16)
 1014e70:	003fdf06 	br	1014df0 <_malloc_r+0x2bc>
 1014e74:	e4000217 	ldw	r16,8(fp)
 1014e78:	00bfff04 	movi	r2,-4
 1014e7c:	80c00117 	ldw	r3,4(r16)
 1014e80:	802d883a 	mov	r22,r16
 1014e84:	18aa703a 	and	r21,r3,r2
 1014e88:	ac401636 	bltu	r21,r17,1014ee4 <_malloc_r+0x3b0>
 1014e8c:	ac49c83a 	sub	r4,r21,r17
 1014e90:	008003c4 	movi	r2,15
 1014e94:	1100130e 	bge	r2,r4,1014ee4 <_malloc_r+0x3b0>
 1014e98:	88800054 	ori	r2,r17,1
 1014e9c:	8447883a 	add	r3,r16,r17
 1014ea0:	80800115 	stw	r2,4(r16)
 1014ea4:	20800054 	ori	r2,r4,1
 1014ea8:	18800115 	stw	r2,4(r3)
 1014eac:	e0c00215 	stw	r3,8(fp)
 1014eb0:	9009883a 	mov	r4,r18
 1014eb4:	10219a00 	call	10219a0 <__malloc_unlock>
 1014eb8:	80c00204 	addi	r3,r16,8
 1014ebc:	003f3106 	br	1014b84 <_malloc_r+0x50>
 1014ec0:	39c00117 	ldw	r7,4(r7)
 1014ec4:	573ffe04 	addi	fp,r10,-8
 1014ec8:	003fa006 	br	1014d4c <_malloc_r+0x218>
 1014ecc:	00801504 	movi	r2,84
 1014ed0:	10c06736 	bltu	r2,r3,1015070 <_malloc_r+0x53c>
 1014ed4:	8804d33a 	srli	r2,r17,12
 1014ed8:	11801b84 	addi	r6,r2,110
 1014edc:	300490fa 	slli	r2,r6,3
 1014ee0:	003f4106 	br	1014be8 <_malloc_r+0xb4>
 1014ee4:	d0a71817 	ldw	r2,-25504(gp)
 1014ee8:	d0e00617 	ldw	r3,-32744(gp)
 1014eec:	053fffc4 	movi	r20,-1
 1014ef0:	10800404 	addi	r2,r2,16
 1014ef4:	88a7883a 	add	r19,r17,r2
 1014ef8:	1d000326 	beq	r3,r20,1014f08 <_malloc_r+0x3d4>
 1014efc:	98c3ffc4 	addi	r3,r19,4095
 1014f00:	00bc0004 	movi	r2,-4096
 1014f04:	18a6703a 	and	r19,r3,r2
 1014f08:	9009883a 	mov	r4,r18
 1014f0c:	980b883a 	mov	r5,r19
 1014f10:	10158940 	call	1015894 <_sbrk_r>
 1014f14:	1009883a 	mov	r4,r2
 1014f18:	15000426 	beq	r2,r20,1014f2c <_malloc_r+0x3f8>
 1014f1c:	854b883a 	add	r5,r16,r21
 1014f20:	1029883a 	mov	r20,r2
 1014f24:	11405a2e 	bgeu	r2,r5,1015090 <_malloc_r+0x55c>
 1014f28:	87000c26 	beq	r16,fp,1014f5c <_malloc_r+0x428>
 1014f2c:	e4000217 	ldw	r16,8(fp)
 1014f30:	80c00117 	ldw	r3,4(r16)
 1014f34:	00bfff04 	movi	r2,-4
 1014f38:	1884703a 	and	r2,r3,r2
 1014f3c:	14400336 	bltu	r2,r17,1014f4c <_malloc_r+0x418>
 1014f40:	1449c83a 	sub	r4,r2,r17
 1014f44:	008003c4 	movi	r2,15
 1014f48:	113fd316 	blt	r2,r4,1014e98 <_malloc_r+0x364>
 1014f4c:	9009883a 	mov	r4,r18
 1014f50:	10219a00 	call	10219a0 <__malloc_unlock>
 1014f54:	0007883a 	mov	r3,zero
 1014f58:	003f0a06 	br	1014b84 <_malloc_r+0x50>
 1014f5c:	05c04134 	movhi	r23,260
 1014f60:	bde34f04 	addi	r23,r23,-29380
 1014f64:	b8800017 	ldw	r2,0(r23)
 1014f68:	988d883a 	add	r6,r19,r2
 1014f6c:	b9800015 	stw	r6,0(r23)
 1014f70:	d0e00617 	ldw	r3,-32744(gp)
 1014f74:	00bfffc4 	movi	r2,-1
 1014f78:	18808e26 	beq	r3,r2,10151b4 <_malloc_r+0x680>
 1014f7c:	2145c83a 	sub	r2,r4,r5
 1014f80:	3085883a 	add	r2,r6,r2
 1014f84:	b8800015 	stw	r2,0(r23)
 1014f88:	20c001cc 	andi	r3,r4,7
 1014f8c:	18005f1e 	bne	r3,zero,101510c <_malloc_r+0x5d8>
 1014f90:	000b883a 	mov	r5,zero
 1014f94:	a4c5883a 	add	r2,r20,r19
 1014f98:	1083ffcc 	andi	r2,r2,4095
 1014f9c:	00c40004 	movi	r3,4096
 1014fa0:	1887c83a 	sub	r3,r3,r2
 1014fa4:	28e7883a 	add	r19,r5,r3
 1014fa8:	9009883a 	mov	r4,r18
 1014fac:	980b883a 	mov	r5,r19
 1014fb0:	10158940 	call	1015894 <_sbrk_r>
 1014fb4:	1007883a 	mov	r3,r2
 1014fb8:	00bfffc4 	movi	r2,-1
 1014fbc:	18807a26 	beq	r3,r2,10151a8 <_malloc_r+0x674>
 1014fc0:	1d05c83a 	sub	r2,r3,r20
 1014fc4:	9885883a 	add	r2,r19,r2
 1014fc8:	10c00054 	ori	r3,r2,1
 1014fcc:	b8800017 	ldw	r2,0(r23)
 1014fd0:	a021883a 	mov	r16,r20
 1014fd4:	a0c00115 	stw	r3,4(r20)
 1014fd8:	9885883a 	add	r2,r19,r2
 1014fdc:	b8800015 	stw	r2,0(r23)
 1014fe0:	e5000215 	stw	r20,8(fp)
 1014fe4:	b7003626 	beq	r22,fp,10150c0 <_malloc_r+0x58c>
 1014fe8:	018003c4 	movi	r6,15
 1014fec:	35404b36 	bltu	r6,r21,101511c <_malloc_r+0x5e8>
 1014ff0:	00800044 	movi	r2,1
 1014ff4:	a0800115 	stw	r2,4(r20)
 1014ff8:	003fcd06 	br	1014f30 <_malloc_r+0x3fc>
 1014ffc:	2808d27a 	srli	r4,r5,9
 1015000:	2000371e 	bne	r4,zero,10150e0 <_malloc_r+0x5ac>
 1015004:	2808d0fa 	srli	r4,r5,3
 1015008:	200690fa 	slli	r3,r4,3
 101500c:	1ad1883a 	add	r8,r3,r11
 1015010:	41800217 	ldw	r6,8(r8)
 1015014:	41805b26 	beq	r8,r6,1015184 <_malloc_r+0x650>
 1015018:	30800117 	ldw	r2,4(r6)
 101501c:	00ffff04 	movi	r3,-4
 1015020:	10c4703a 	and	r2,r2,r3
 1015024:	2880022e 	bgeu	r5,r2,1015030 <_malloc_r+0x4fc>
 1015028:	31800217 	ldw	r6,8(r6)
 101502c:	41bffa1e 	bne	r8,r6,1015018 <_malloc_r+0x4e4>
 1015030:	32000317 	ldw	r8,12(r6)
 1015034:	39c00117 	ldw	r7,4(r7)
 1015038:	82000315 	stw	r8,12(r16)
 101503c:	81800215 	stw	r6,8(r16)
 1015040:	070040f4 	movhi	fp,259
 1015044:	e7163804 	addi	fp,fp,22752
 1015048:	34000315 	stw	r16,12(r6)
 101504c:	44000215 	stw	r16,8(r8)
 1015050:	003f3e06 	br	1014d4c <_malloc_r+0x218>
 1015054:	63000044 	addi	r12,r12,1
 1015058:	608000cc 	andi	r2,r12,3
 101505c:	10005d26 	beq	r2,zero,10151d4 <_malloc_r+0x6a0>
 1015060:	18c00204 	addi	r3,r3,8
 1015064:	003f5106 	br	1014dac <_malloc_r+0x278>
 1015068:	8089883a 	add	r4,r16,r2
 101506c:	003f6d06 	br	1014e24 <_malloc_r+0x2f0>
 1015070:	00805504 	movi	r2,340
 1015074:	10c02036 	bltu	r2,r3,10150f8 <_malloc_r+0x5c4>
 1015078:	8804d3fa 	srli	r2,r17,15
 101507c:	11801dc4 	addi	r6,r2,119
 1015080:	300490fa 	slli	r2,r6,3
 1015084:	003ed806 	br	1014be8 <_malloc_r+0xb4>
 1015088:	48c000c4 	addi	r3,r9,3
 101508c:	003f3106 	br	1014d54 <_malloc_r+0x220>
 1015090:	05c04134 	movhi	r23,260
 1015094:	bde34f04 	addi	r23,r23,-29380
 1015098:	b8800017 	ldw	r2,0(r23)
 101509c:	988d883a 	add	r6,r19,r2
 10150a0:	b9800015 	stw	r6,0(r23)
 10150a4:	293fb21e 	bne	r5,r4,1014f70 <_malloc_r+0x43c>
 10150a8:	2083ffcc 	andi	r2,r4,4095
 10150ac:	103fb01e 	bne	r2,zero,1014f70 <_malloc_r+0x43c>
 10150b0:	e4000217 	ldw	r16,8(fp)
 10150b4:	9d45883a 	add	r2,r19,r21
 10150b8:	10800054 	ori	r2,r2,1
 10150bc:	80800115 	stw	r2,4(r16)
 10150c0:	b8c00017 	ldw	r3,0(r23)
 10150c4:	d0a71917 	ldw	r2,-25500(gp)
 10150c8:	10c0012e 	bgeu	r2,r3,10150d0 <_malloc_r+0x59c>
 10150cc:	d0e71915 	stw	r3,-25500(gp)
 10150d0:	d0a71a17 	ldw	r2,-25496(gp)
 10150d4:	10ff962e 	bgeu	r2,r3,1014f30 <_malloc_r+0x3fc>
 10150d8:	d0e71a15 	stw	r3,-25496(gp)
 10150dc:	003f9406 	br	1014f30 <_malloc_r+0x3fc>
 10150e0:	00800104 	movi	r2,4
 10150e4:	11001e36 	bltu	r2,r4,1015160 <_malloc_r+0x62c>
 10150e8:	2804d1ba 	srli	r2,r5,6
 10150ec:	11000e04 	addi	r4,r2,56
 10150f0:	200690fa 	slli	r3,r4,3
 10150f4:	003fc506 	br	101500c <_malloc_r+0x4d8>
 10150f8:	00815504 	movi	r2,1364
 10150fc:	10c01d2e 	bgeu	r2,r3,1015174 <_malloc_r+0x640>
 1015100:	01801f84 	movi	r6,126
 1015104:	0080fc04 	movi	r2,1008
 1015108:	003eb706 	br	1014be8 <_malloc_r+0xb4>
 101510c:	00800204 	movi	r2,8
 1015110:	10cbc83a 	sub	r5,r2,r3
 1015114:	2169883a 	add	r20,r4,r5
 1015118:	003f9e06 	br	1014f94 <_malloc_r+0x460>
 101511c:	00bffe04 	movi	r2,-8
 1015120:	a93ffd04 	addi	r4,r21,-12
 1015124:	2088703a 	and	r4,r4,r2
 1015128:	b10b883a 	add	r5,r22,r4
 101512c:	00c00144 	movi	r3,5
 1015130:	28c00215 	stw	r3,8(r5)
 1015134:	28c00115 	stw	r3,4(r5)
 1015138:	b0800117 	ldw	r2,4(r22)
 101513c:	1080004c 	andi	r2,r2,1
 1015140:	2084b03a 	or	r2,r4,r2
 1015144:	b0800115 	stw	r2,4(r22)
 1015148:	313fdd2e 	bgeu	r6,r4,10150c0 <_malloc_r+0x58c>
 101514c:	b1400204 	addi	r5,r22,8
 1015150:	9009883a 	mov	r4,r18
 1015154:	101b9340 	call	101b934 <_free_r>
 1015158:	e4000217 	ldw	r16,8(fp)
 101515c:	003fd806 	br	10150c0 <_malloc_r+0x58c>
 1015160:	00800504 	movi	r2,20
 1015164:	11001536 	bltu	r2,r4,10151bc <_malloc_r+0x688>
 1015168:	210016c4 	addi	r4,r4,91
 101516c:	200690fa 	slli	r3,r4,3
 1015170:	003fa606 	br	101500c <_malloc_r+0x4d8>
 1015174:	8804d4ba 	srli	r2,r17,18
 1015178:	11801f04 	addi	r6,r2,124
 101517c:	300490fa 	slli	r2,r6,3
 1015180:	003e9906 	br	1014be8 <_malloc_r+0xb4>
 1015184:	2009d0ba 	srai	r4,r4,2
 1015188:	014040f4 	movhi	r5,259
 101518c:	29563804 	addi	r5,r5,22752
 1015190:	00c00044 	movi	r3,1
 1015194:	28800117 	ldw	r2,4(r5)
 1015198:	1906983a 	sll	r3,r3,r4
 101519c:	10c4b03a 	or	r2,r2,r3
 10151a0:	28800115 	stw	r2,4(r5)
 10151a4:	003fa306 	br	1015034 <_malloc_r+0x500>
 10151a8:	0027883a 	mov	r19,zero
 10151ac:	00c00044 	movi	r3,1
 10151b0:	003f8606 	br	1014fcc <_malloc_r+0x498>
 10151b4:	d1200615 	stw	r4,-32744(gp)
 10151b8:	003f7306 	br	1014f88 <_malloc_r+0x454>
 10151bc:	00801504 	movi	r2,84
 10151c0:	11001936 	bltu	r2,r4,1015228 <_malloc_r+0x6f4>
 10151c4:	2804d33a 	srli	r2,r5,12
 10151c8:	11001b84 	addi	r4,r2,110
 10151cc:	200690fa 	slli	r3,r4,3
 10151d0:	003f8e06 	br	101500c <_malloc_r+0x4d8>
 10151d4:	480b883a 	mov	r5,r9
 10151d8:	6807883a 	mov	r3,r13
 10151dc:	288000cc 	andi	r2,r5,3
 10151e0:	18fffe04 	addi	r3,r3,-8
 10151e4:	297fffc4 	addi	r5,r5,-1
 10151e8:	10001526 	beq	r2,zero,1015240 <_malloc_r+0x70c>
 10151ec:	18800217 	ldw	r2,8(r3)
 10151f0:	10fffa26 	beq	r2,r3,10151dc <_malloc_r+0x6a8>
 10151f4:	2109883a 	add	r4,r4,r4
 10151f8:	393f1e36 	bltu	r7,r4,1014e74 <_malloc_r+0x340>
 10151fc:	203f1d26 	beq	r4,zero,1014e74 <_malloc_r+0x340>
 1015200:	21c4703a 	and	r2,r4,r7
 1015204:	10000226 	beq	r2,zero,1015210 <_malloc_r+0x6dc>
 1015208:	6013883a 	mov	r9,r12
 101520c:	003ee106 	br	1014d94 <_malloc_r+0x260>
 1015210:	2109883a 	add	r4,r4,r4
 1015214:	3904703a 	and	r2,r7,r4
 1015218:	63000104 	addi	r12,r12,4
 101521c:	103ffc26 	beq	r2,zero,1015210 <_malloc_r+0x6dc>
 1015220:	6013883a 	mov	r9,r12
 1015224:	003edb06 	br	1014d94 <_malloc_r+0x260>
 1015228:	00805504 	movi	r2,340
 101522c:	11000836 	bltu	r2,r4,1015250 <_malloc_r+0x71c>
 1015230:	2804d3fa 	srli	r2,r5,15
 1015234:	11001dc4 	addi	r4,r2,119
 1015238:	200690fa 	slli	r3,r4,3
 101523c:	003f7306 	br	101500c <_malloc_r+0x4d8>
 1015240:	0104303a 	nor	r2,zero,r4
 1015244:	388e703a 	and	r7,r7,r2
 1015248:	e1c00115 	stw	r7,4(fp)
 101524c:	003fe906 	br	10151f4 <_malloc_r+0x6c0>
 1015250:	00815504 	movi	r2,1364
 1015254:	1100032e 	bgeu	r2,r4,1015264 <_malloc_r+0x730>
 1015258:	01001f84 	movi	r4,126
 101525c:	00c0fc04 	movi	r3,1008
 1015260:	003f6a06 	br	101500c <_malloc_r+0x4d8>
 1015264:	2804d4ba 	srli	r2,r5,18
 1015268:	11001f04 	addi	r4,r2,124
 101526c:	200690fa 	slli	r3,r4,3
 1015270:	003f6606 	br	101500c <_malloc_r+0x4d8>

01015274 <memcpy>:
 1015274:	01c003c4 	movi	r7,15
 1015278:	2007883a 	mov	r3,r4
 101527c:	3980032e 	bgeu	r7,r6,101528c <memcpy+0x18>
 1015280:	2904b03a 	or	r2,r5,r4
 1015284:	108000cc 	andi	r2,r2,3
 1015288:	10000926 	beq	r2,zero,10152b0 <memcpy+0x3c>
 101528c:	30000626 	beq	r6,zero,10152a8 <memcpy+0x34>
 1015290:	30cd883a 	add	r6,r6,r3
 1015294:	28800003 	ldbu	r2,0(r5)
 1015298:	29400044 	addi	r5,r5,1
 101529c:	18800005 	stb	r2,0(r3)
 10152a0:	18c00044 	addi	r3,r3,1
 10152a4:	30fffb1e 	bne	r6,r3,1015294 <memcpy+0x20>
 10152a8:	2005883a 	mov	r2,r4
 10152ac:	f800283a 	ret
 10152b0:	3811883a 	mov	r8,r7
 10152b4:	200f883a 	mov	r7,r4
 10152b8:	28c00017 	ldw	r3,0(r5)
 10152bc:	31bffc04 	addi	r6,r6,-16
 10152c0:	38c00015 	stw	r3,0(r7)
 10152c4:	28800117 	ldw	r2,4(r5)
 10152c8:	38800115 	stw	r2,4(r7)
 10152cc:	28c00217 	ldw	r3,8(r5)
 10152d0:	38c00215 	stw	r3,8(r7)
 10152d4:	28800317 	ldw	r2,12(r5)
 10152d8:	29400404 	addi	r5,r5,16
 10152dc:	38800315 	stw	r2,12(r7)
 10152e0:	39c00404 	addi	r7,r7,16
 10152e4:	41bff436 	bltu	r8,r6,10152b8 <memcpy+0x44>
 10152e8:	008000c4 	movi	r2,3
 10152ec:	1180072e 	bgeu	r2,r6,101530c <memcpy+0x98>
 10152f0:	1007883a 	mov	r3,r2
 10152f4:	28800017 	ldw	r2,0(r5)
 10152f8:	31bfff04 	addi	r6,r6,-4
 10152fc:	29400104 	addi	r5,r5,4
 1015300:	38800015 	stw	r2,0(r7)
 1015304:	39c00104 	addi	r7,r7,4
 1015308:	19bffa36 	bltu	r3,r6,10152f4 <memcpy+0x80>
 101530c:	3807883a 	mov	r3,r7
 1015310:	003fde06 	br	101528c <memcpy+0x18>

01015314 <memmove>:
 1015314:	2807883a 	mov	r3,r5
 1015318:	2011883a 	mov	r8,r4
 101531c:	29000c2e 	bgeu	r5,r4,1015350 <memmove+0x3c>
 1015320:	298f883a 	add	r7,r5,r6
 1015324:	21c00a2e 	bgeu	r4,r7,1015350 <memmove+0x3c>
 1015328:	30000726 	beq	r6,zero,1015348 <memmove+0x34>
 101532c:	2187883a 	add	r3,r4,r6
 1015330:	198dc83a 	sub	r6,r3,r6
 1015334:	39ffffc4 	addi	r7,r7,-1
 1015338:	38800003 	ldbu	r2,0(r7)
 101533c:	18ffffc4 	addi	r3,r3,-1
 1015340:	18800005 	stb	r2,0(r3)
 1015344:	19bffb1e 	bne	r3,r6,1015334 <memmove+0x20>
 1015348:	2005883a 	mov	r2,r4
 101534c:	f800283a 	ret
 1015350:	01c003c4 	movi	r7,15
 1015354:	39800a36 	bltu	r7,r6,1015380 <memmove+0x6c>
 1015358:	303ffb26 	beq	r6,zero,1015348 <memmove+0x34>
 101535c:	400f883a 	mov	r7,r8
 1015360:	320d883a 	add	r6,r6,r8
 1015364:	28800003 	ldbu	r2,0(r5)
 1015368:	29400044 	addi	r5,r5,1
 101536c:	38800005 	stb	r2,0(r7)
 1015370:	39c00044 	addi	r7,r7,1
 1015374:	39bffb1e 	bne	r7,r6,1015364 <memmove+0x50>
 1015378:	2005883a 	mov	r2,r4
 101537c:	f800283a 	ret
 1015380:	1904b03a 	or	r2,r3,r4
 1015384:	108000cc 	andi	r2,r2,3
 1015388:	103ff31e 	bne	r2,zero,1015358 <memmove+0x44>
 101538c:	3811883a 	mov	r8,r7
 1015390:	180b883a 	mov	r5,r3
 1015394:	200f883a 	mov	r7,r4
 1015398:	28c00017 	ldw	r3,0(r5)
 101539c:	31bffc04 	addi	r6,r6,-16
 10153a0:	38c00015 	stw	r3,0(r7)
 10153a4:	28800117 	ldw	r2,4(r5)
 10153a8:	38800115 	stw	r2,4(r7)
 10153ac:	28c00217 	ldw	r3,8(r5)
 10153b0:	38c00215 	stw	r3,8(r7)
 10153b4:	28800317 	ldw	r2,12(r5)
 10153b8:	29400404 	addi	r5,r5,16
 10153bc:	38800315 	stw	r2,12(r7)
 10153c0:	39c00404 	addi	r7,r7,16
 10153c4:	41bff436 	bltu	r8,r6,1015398 <memmove+0x84>
 10153c8:	008000c4 	movi	r2,3
 10153cc:	1180072e 	bgeu	r2,r6,10153ec <memmove+0xd8>
 10153d0:	1007883a 	mov	r3,r2
 10153d4:	28800017 	ldw	r2,0(r5)
 10153d8:	31bfff04 	addi	r6,r6,-4
 10153dc:	29400104 	addi	r5,r5,4
 10153e0:	38800015 	stw	r2,0(r7)
 10153e4:	39c00104 	addi	r7,r7,4
 10153e8:	19bffa36 	bltu	r3,r6,10153d4 <memmove+0xc0>
 10153ec:	3811883a 	mov	r8,r7
 10153f0:	003fd906 	br	1015358 <memmove+0x44>

010153f4 <memset>:
 10153f4:	008000c4 	movi	r2,3
 10153f8:	29403fcc 	andi	r5,r5,255
 10153fc:	2007883a 	mov	r3,r4
 1015400:	1180022e 	bgeu	r2,r6,101540c <memset+0x18>
 1015404:	2084703a 	and	r2,r4,r2
 1015408:	10000826 	beq	r2,zero,101542c <memset+0x38>
 101540c:	30000526 	beq	r6,zero,1015424 <memset+0x30>
 1015410:	2805883a 	mov	r2,r5
 1015414:	30cd883a 	add	r6,r6,r3
 1015418:	18800005 	stb	r2,0(r3)
 101541c:	18c00044 	addi	r3,r3,1
 1015420:	19bffd1e 	bne	r3,r6,1015418 <memset+0x24>
 1015424:	2005883a 	mov	r2,r4
 1015428:	f800283a 	ret
 101542c:	2804923a 	slli	r2,r5,8
 1015430:	020003c4 	movi	r8,15
 1015434:	200f883a 	mov	r7,r4
 1015438:	2884b03a 	or	r2,r5,r2
 101543c:	1006943a 	slli	r3,r2,16
 1015440:	10c6b03a 	or	r3,r2,r3
 1015444:	41800a2e 	bgeu	r8,r6,1015470 <memset+0x7c>
 1015448:	4005883a 	mov	r2,r8
 101544c:	31bffc04 	addi	r6,r6,-16
 1015450:	38c00015 	stw	r3,0(r7)
 1015454:	38c00115 	stw	r3,4(r7)
 1015458:	38c00215 	stw	r3,8(r7)
 101545c:	38c00315 	stw	r3,12(r7)
 1015460:	39c00404 	addi	r7,r7,16
 1015464:	11bff936 	bltu	r2,r6,101544c <memset+0x58>
 1015468:	008000c4 	movi	r2,3
 101546c:	1180052e 	bgeu	r2,r6,1015484 <memset+0x90>
 1015470:	31bfff04 	addi	r6,r6,-4
 1015474:	008000c4 	movi	r2,3
 1015478:	38c00015 	stw	r3,0(r7)
 101547c:	39c00104 	addi	r7,r7,4
 1015480:	11bffb36 	bltu	r2,r6,1015470 <memset+0x7c>
 1015484:	3807883a 	mov	r3,r7
 1015488:	003fe006 	br	101540c <memset+0x18>

0101548c <_open_r>:
 101548c:	defffd04 	addi	sp,sp,-12
 1015490:	dc000015 	stw	r16,0(sp)
 1015494:	04004134 	movhi	r16,260
 1015498:	84230104 	addi	r16,r16,-29692
 101549c:	dc400115 	stw	r17,4(sp)
 10154a0:	80000015 	stw	zero,0(r16)
 10154a4:	2023883a 	mov	r17,r4
 10154a8:	2809883a 	mov	r4,r5
 10154ac:	300b883a 	mov	r5,r6
 10154b0:	380d883a 	mov	r6,r7
 10154b4:	dfc00215 	stw	ra,8(sp)
 10154b8:	1021a9c0 	call	1021a9c <open>
 10154bc:	1007883a 	mov	r3,r2
 10154c0:	00bfffc4 	movi	r2,-1
 10154c4:	18800626 	beq	r3,r2,10154e0 <_open_r+0x54>
 10154c8:	1805883a 	mov	r2,r3
 10154cc:	dfc00217 	ldw	ra,8(sp)
 10154d0:	dc400117 	ldw	r17,4(sp)
 10154d4:	dc000017 	ldw	r16,0(sp)
 10154d8:	dec00304 	addi	sp,sp,12
 10154dc:	f800283a 	ret
 10154e0:	80800017 	ldw	r2,0(r16)
 10154e4:	103ff826 	beq	r2,zero,10154c8 <_open_r+0x3c>
 10154e8:	88800015 	stw	r2,0(r17)
 10154ec:	1805883a 	mov	r2,r3
 10154f0:	dfc00217 	ldw	ra,8(sp)
 10154f4:	dc400117 	ldw	r17,4(sp)
 10154f8:	dc000017 	ldw	r16,0(sp)
 10154fc:	dec00304 	addi	sp,sp,12
 1015500:	f800283a 	ret

01015504 <printf>:
 1015504:	defffb04 	addi	sp,sp,-20
 1015508:	dfc00115 	stw	ra,4(sp)
 101550c:	d9400215 	stw	r5,8(sp)
 1015510:	d9800315 	stw	r6,12(sp)
 1015514:	d9c00415 	stw	r7,16(sp)
 1015518:	008040f4 	movhi	r2,259
 101551c:	109bed04 	addi	r2,r2,28596
 1015520:	10c00017 	ldw	r3,0(r2)
 1015524:	200b883a 	mov	r5,r4
 1015528:	d8800204 	addi	r2,sp,8
 101552c:	19000217 	ldw	r4,8(r3)
 1015530:	100d883a 	mov	r6,r2
 1015534:	d8800015 	stw	r2,0(sp)
 1015538:	10199e80 	call	10199e8 <__vfprintf_internal>
 101553c:	dfc00117 	ldw	ra,4(sp)
 1015540:	dec00504 	addi	sp,sp,20
 1015544:	f800283a 	ret

01015548 <_printf_r>:
 1015548:	defffc04 	addi	sp,sp,-16
 101554c:	dfc00115 	stw	ra,4(sp)
 1015550:	d9800215 	stw	r6,8(sp)
 1015554:	d9c00315 	stw	r7,12(sp)
 1015558:	280d883a 	mov	r6,r5
 101555c:	21400217 	ldw	r5,8(r4)
 1015560:	d8c00204 	addi	r3,sp,8
 1015564:	180f883a 	mov	r7,r3
 1015568:	d8c00015 	stw	r3,0(sp)
 101556c:	1017b3c0 	call	1017b3c <___vfprintf_internal_r>
 1015570:	dfc00117 	ldw	ra,4(sp)
 1015574:	dec00404 	addi	sp,sp,16
 1015578:	f800283a 	ret

0101557c <putchar>:
 101557c:	008040f4 	movhi	r2,259
 1015580:	109bed04 	addi	r2,r2,28596
 1015584:	11800017 	ldw	r6,0(r2)
 1015588:	200b883a 	mov	r5,r4
 101558c:	3009883a 	mov	r4,r6
 1015590:	31800217 	ldw	r6,8(r6)
 1015594:	101dff41 	jmpi	101dff4 <_putc_r>

01015598 <_putchar_r>:
 1015598:	21800217 	ldw	r6,8(r4)
 101559c:	101dff41 	jmpi	101dff4 <_putc_r>

010155a0 <_puts_r>:
 10155a0:	defff604 	addi	sp,sp,-40
 10155a4:	dc400715 	stw	r17,28(sp)
 10155a8:	2023883a 	mov	r17,r4
 10155ac:	2809883a 	mov	r4,r5
 10155b0:	dfc00915 	stw	ra,36(sp)
 10155b4:	dcc00815 	stw	r19,32(sp)
 10155b8:	2827883a 	mov	r19,r5
 10155bc:	1015cfc0 	call	1015cfc <strlen>
 10155c0:	89400217 	ldw	r5,8(r17)
 10155c4:	00c040f4 	movhi	r3,259
 10155c8:	18d39904 	addi	r3,r3,20068
 10155cc:	01c00044 	movi	r7,1
 10155d0:	12000044 	addi	r8,r2,1
 10155d4:	d8c00515 	stw	r3,20(sp)
 10155d8:	d9c00615 	stw	r7,24(sp)
 10155dc:	d8c00304 	addi	r3,sp,12
 10155e0:	01c00084 	movi	r7,2
 10155e4:	8809883a 	mov	r4,r17
 10155e8:	d80d883a 	mov	r6,sp
 10155ec:	d8c00015 	stw	r3,0(sp)
 10155f0:	dcc00315 	stw	r19,12(sp)
 10155f4:	da000215 	stw	r8,8(sp)
 10155f8:	d9c00115 	stw	r7,4(sp)
 10155fc:	d8800415 	stw	r2,16(sp)
 1015600:	101bc480 	call	101bc48 <__sfvwrite_r>
 1015604:	00ffffc4 	movi	r3,-1
 1015608:	10000626 	beq	r2,zero,1015624 <_puts_r+0x84>
 101560c:	1805883a 	mov	r2,r3
 1015610:	dfc00917 	ldw	ra,36(sp)
 1015614:	dcc00817 	ldw	r19,32(sp)
 1015618:	dc400717 	ldw	r17,28(sp)
 101561c:	dec00a04 	addi	sp,sp,40
 1015620:	f800283a 	ret
 1015624:	00c00284 	movi	r3,10
 1015628:	1805883a 	mov	r2,r3
 101562c:	dfc00917 	ldw	ra,36(sp)
 1015630:	dcc00817 	ldw	r19,32(sp)
 1015634:	dc400717 	ldw	r17,28(sp)
 1015638:	dec00a04 	addi	sp,sp,40
 101563c:	f800283a 	ret

01015640 <puts>:
 1015640:	008040f4 	movhi	r2,259
 1015644:	109bed04 	addi	r2,r2,28596
 1015648:	200b883a 	mov	r5,r4
 101564c:	11000017 	ldw	r4,0(r2)
 1015650:	10155a01 	jmpi	10155a0 <_puts_r>

01015654 <__srefill_r>:
 1015654:	defffd04 	addi	sp,sp,-12
 1015658:	dc400115 	stw	r17,4(sp)
 101565c:	dc000015 	stw	r16,0(sp)
 1015660:	dfc00215 	stw	ra,8(sp)
 1015664:	2023883a 	mov	r17,r4
 1015668:	2821883a 	mov	r16,r5
 101566c:	20000226 	beq	r4,zero,1015678 <__srefill_r+0x24>
 1015670:	20800e17 	ldw	r2,56(r4)
 1015674:	10004126 	beq	r2,zero,101577c <__srefill_r+0x128>
 1015678:	80c0030b 	ldhu	r3,12(r16)
 101567c:	80000115 	stw	zero,4(r16)
 1015680:	1880080c 	andi	r2,r3,32
 1015684:	1000361e 	bne	r2,zero,1015760 <__srefill_r+0x10c>
 1015688:	1880010c 	andi	r2,r3,4
 101568c:	1000211e 	bne	r2,zero,1015714 <__srefill_r+0xc0>
 1015690:	1880040c 	andi	r2,r3,16
 1015694:	10005026 	beq	r2,zero,10157d8 <__srefill_r+0x184>
 1015698:	1880020c 	andi	r2,r3,8
 101569c:	1000541e 	bne	r2,zero,10157f0 <__srefill_r+0x19c>
 10156a0:	8080030b 	ldhu	r2,12(r16)
 10156a4:	10800114 	ori	r2,r2,4
 10156a8:	8080030d 	sth	r2,12(r16)
 10156ac:	80800417 	ldw	r2,16(r16)
 10156b0:	10004526 	beq	r2,zero,10157c8 <__srefill_r+0x174>
 10156b4:	8080030b 	ldhu	r2,12(r16)
 10156b8:	108000cc 	andi	r2,r2,3
 10156bc:	1000361e 	bne	r2,zero,1015798 <__srefill_r+0x144>
 10156c0:	81800417 	ldw	r6,16(r16)
 10156c4:	80c00817 	ldw	r3,32(r16)
 10156c8:	81400717 	ldw	r5,28(r16)
 10156cc:	81c00517 	ldw	r7,20(r16)
 10156d0:	8809883a 	mov	r4,r17
 10156d4:	81800015 	stw	r6,0(r16)
 10156d8:	183ee83a 	callr	r3
 10156dc:	80c0030b 	ldhu	r3,12(r16)
 10156e0:	1009883a 	mov	r4,r2
 10156e4:	80800115 	stw	r2,4(r16)
 10156e8:	00b7ffc4 	movi	r2,-8193
 10156ec:	1884703a 	and	r2,r3,r2
 10156f0:	8080030d 	sth	r2,12(r16)
 10156f4:	0100230e 	bge	zero,r4,1015784 <__srefill_r+0x130>
 10156f8:	0009883a 	mov	r4,zero
 10156fc:	2005883a 	mov	r2,r4
 1015700:	dfc00217 	ldw	ra,8(sp)
 1015704:	dc400117 	ldw	r17,4(sp)
 1015708:	dc000017 	ldw	r16,0(sp)
 101570c:	dec00304 	addi	sp,sp,12
 1015710:	f800283a 	ret
 1015714:	81400c17 	ldw	r5,48(r16)
 1015718:	283fe426 	beq	r5,zero,10156ac <__srefill_r+0x58>
 101571c:	80801004 	addi	r2,r16,64
 1015720:	28800226 	beq	r5,r2,101572c <__srefill_r+0xd8>
 1015724:	8809883a 	mov	r4,r17
 1015728:	101b9340 	call	101b934 <_free_r>
 101572c:	80800f17 	ldw	r2,60(r16)
 1015730:	80000c15 	stw	zero,48(r16)
 1015734:	80800115 	stw	r2,4(r16)
 1015738:	103fdc26 	beq	r2,zero,10156ac <__srefill_r+0x58>
 101573c:	80800e17 	ldw	r2,56(r16)
 1015740:	0009883a 	mov	r4,zero
 1015744:	80800015 	stw	r2,0(r16)
 1015748:	2005883a 	mov	r2,r4
 101574c:	dfc00217 	ldw	ra,8(sp)
 1015750:	dc400117 	ldw	r17,4(sp)
 1015754:	dc000017 	ldw	r16,0(sp)
 1015758:	dec00304 	addi	sp,sp,12
 101575c:	f800283a 	ret
 1015760:	013fffc4 	movi	r4,-1
 1015764:	2005883a 	mov	r2,r4
 1015768:	dfc00217 	ldw	ra,8(sp)
 101576c:	dc400117 	ldw	r17,4(sp)
 1015770:	dc000017 	ldw	r16,0(sp)
 1015774:	dec00304 	addi	sp,sp,12
 1015778:	f800283a 	ret
 101577c:	1013f500 	call	1013f50 <__sinit>
 1015780:	003fbd06 	br	1015678 <__srefill_r+0x24>
 1015784:	20000b1e 	bne	r4,zero,10157b4 <__srefill_r+0x160>
 1015788:	10800814 	ori	r2,r2,32
 101578c:	013fffc4 	movi	r4,-1
 1015790:	8080030d 	sth	r2,12(r16)
 1015794:	003fd906 	br	10156fc <__srefill_r+0xa8>
 1015798:	008040f4 	movhi	r2,259
 101579c:	109bee04 	addi	r2,r2,28600
 10157a0:	11000017 	ldw	r4,0(r2)
 10157a4:	01404074 	movhi	r5,257
 10157a8:	29560604 	addi	r5,r5,22552
 10157ac:	10148c00 	call	10148c0 <_fwalk>
 10157b0:	003fc306 	br	10156c0 <__srefill_r+0x6c>
 10157b4:	10801014 	ori	r2,r2,64
 10157b8:	013fffc4 	movi	r4,-1
 10157bc:	8080030d 	sth	r2,12(r16)
 10157c0:	80000115 	stw	zero,4(r16)
 10157c4:	003fcd06 	br	10156fc <__srefill_r+0xa8>
 10157c8:	8809883a 	mov	r4,r17
 10157cc:	800b883a 	mov	r5,r16
 10157d0:	10149780 	call	1014978 <__smakebuf_r>
 10157d4:	003fb706 	br	10156b4 <__srefill_r+0x60>
 10157d8:	18c01014 	ori	r3,r3,64
 10157dc:	00800244 	movi	r2,9
 10157e0:	013fffc4 	movi	r4,-1
 10157e4:	88800015 	stw	r2,0(r17)
 10157e8:	80c0030d 	sth	r3,12(r16)
 10157ec:	003fc306 	br	10156fc <__srefill_r+0xa8>
 10157f0:	8809883a 	mov	r4,r17
 10157f4:	800b883a 	mov	r5,r16
 10157f8:	101b5380 	call	101b538 <_fflush_r>
 10157fc:	103fd81e 	bne	r2,zero,1015760 <__srefill_r+0x10c>
 1015800:	8080030b 	ldhu	r2,12(r16)
 1015804:	80000215 	stw	zero,8(r16)
 1015808:	80000615 	stw	zero,24(r16)
 101580c:	10bffdcc 	andi	r2,r2,65527
 1015810:	8080030d 	sth	r2,12(r16)
 1015814:	003fa206 	br	10156a0 <__srefill_r+0x4c>

01015818 <lflush>:
 1015818:	20c0030b 	ldhu	r3,12(r4)
 101581c:	01400244 	movi	r5,9
 1015820:	0005883a 	mov	r2,zero
 1015824:	18c0024c 	andi	r3,r3,9
 1015828:	19400126 	beq	r3,r5,1015830 <lflush+0x18>
 101582c:	f800283a 	ret
 1015830:	101b7341 	jmpi	101b734 <fflush>

01015834 <__srget_r>:
 1015834:	defffe04 	addi	sp,sp,-8
 1015838:	dc000015 	stw	r16,0(sp)
 101583c:	dfc00115 	stw	ra,4(sp)
 1015840:	2821883a 	mov	r16,r5
 1015844:	10156540 	call	1015654 <__srefill_r>
 1015848:	013fffc4 	movi	r4,-1
 101584c:	1000071e 	bne	r2,zero,101586c <__srget_r+0x38>
 1015850:	80800117 	ldw	r2,4(r16)
 1015854:	81000017 	ldw	r4,0(r16)
 1015858:	10bfffc4 	addi	r2,r2,-1
 101585c:	20c00044 	addi	r3,r4,1
 1015860:	80800115 	stw	r2,4(r16)
 1015864:	21000003 	ldbu	r4,0(r4)
 1015868:	80c00015 	stw	r3,0(r16)
 101586c:	2005883a 	mov	r2,r4
 1015870:	dfc00117 	ldw	ra,4(sp)
 1015874:	dc000017 	ldw	r16,0(sp)
 1015878:	dec00204 	addi	sp,sp,8
 101587c:	f800283a 	ret

01015880 <__srget>:
 1015880:	008040f4 	movhi	r2,259
 1015884:	109bed04 	addi	r2,r2,28596
 1015888:	200b883a 	mov	r5,r4
 101588c:	11000017 	ldw	r4,0(r2)
 1015890:	10158341 	jmpi	1015834 <__srget_r>

01015894 <_sbrk_r>:
 1015894:	defffd04 	addi	sp,sp,-12
 1015898:	dc000015 	stw	r16,0(sp)
 101589c:	04004134 	movhi	r16,260
 10158a0:	84230104 	addi	r16,r16,-29692
 10158a4:	dc400115 	stw	r17,4(sp)
 10158a8:	80000015 	stw	zero,0(r16)
 10158ac:	2023883a 	mov	r17,r4
 10158b0:	2809883a 	mov	r4,r5
 10158b4:	dfc00215 	stw	ra,8(sp)
 10158b8:	10220fc0 	call	10220fc <sbrk>
 10158bc:	1007883a 	mov	r3,r2
 10158c0:	00bfffc4 	movi	r2,-1
 10158c4:	18800626 	beq	r3,r2,10158e0 <_sbrk_r+0x4c>
 10158c8:	1805883a 	mov	r2,r3
 10158cc:	dfc00217 	ldw	ra,8(sp)
 10158d0:	dc400117 	ldw	r17,4(sp)
 10158d4:	dc000017 	ldw	r16,0(sp)
 10158d8:	dec00304 	addi	sp,sp,12
 10158dc:	f800283a 	ret
 10158e0:	80800017 	ldw	r2,0(r16)
 10158e4:	103ff826 	beq	r2,zero,10158c8 <_sbrk_r+0x34>
 10158e8:	88800015 	stw	r2,0(r17)
 10158ec:	1805883a 	mov	r2,r3
 10158f0:	dfc00217 	ldw	ra,8(sp)
 10158f4:	dc400117 	ldw	r17,4(sp)
 10158f8:	dc000017 	ldw	r16,0(sp)
 10158fc:	dec00304 	addi	sp,sp,12
 1015900:	f800283a 	ret

01015904 <sprintf>:
 1015904:	deffe504 	addi	sp,sp,-108
 1015908:	2013883a 	mov	r9,r4
 101590c:	dfc01815 	stw	ra,96(sp)
 1015910:	d9801915 	stw	r6,100(sp)
 1015914:	d9c01a15 	stw	r7,104(sp)
 1015918:	d8801904 	addi	r2,sp,100
 101591c:	d8800015 	stw	r2,0(sp)
 1015920:	008040f4 	movhi	r2,259
 1015924:	109bed04 	addi	r2,r2,28596
 1015928:	11000017 	ldw	r4,0(r2)
 101592c:	d9c00017 	ldw	r7,0(sp)
 1015930:	00808204 	movi	r2,520
 1015934:	00e00034 	movhi	r3,32768
 1015938:	18ffffc4 	addi	r3,r3,-1
 101593c:	280d883a 	mov	r6,r5
 1015940:	d880040d 	sth	r2,16(sp)
 1015944:	d9400104 	addi	r5,sp,4
 1015948:	00bfffc4 	movi	r2,-1
 101594c:	d8c00615 	stw	r3,24(sp)
 1015950:	d8c00315 	stw	r3,12(sp)
 1015954:	da400515 	stw	r9,20(sp)
 1015958:	d880048d 	sth	r2,18(sp)
 101595c:	da400115 	stw	r9,4(sp)
 1015960:	1017b3c0 	call	1017b3c <___vfprintf_internal_r>
 1015964:	d8c00117 	ldw	r3,4(sp)
 1015968:	18000005 	stb	zero,0(r3)
 101596c:	dfc01817 	ldw	ra,96(sp)
 1015970:	dec01b04 	addi	sp,sp,108
 1015974:	f800283a 	ret

01015978 <_sprintf_r>:
 1015978:	deffe604 	addi	sp,sp,-104
 101597c:	2813883a 	mov	r9,r5
 1015980:	dfc01815 	stw	ra,96(sp)
 1015984:	d9c01915 	stw	r7,100(sp)
 1015988:	d8801904 	addi	r2,sp,100
 101598c:	d8800015 	stw	r2,0(sp)
 1015990:	100f883a 	mov	r7,r2
 1015994:	00808204 	movi	r2,520
 1015998:	00e00034 	movhi	r3,32768
 101599c:	18ffffc4 	addi	r3,r3,-1
 10159a0:	d880040d 	sth	r2,16(sp)
 10159a4:	d9400104 	addi	r5,sp,4
 10159a8:	00bfffc4 	movi	r2,-1
 10159ac:	d8c00615 	stw	r3,24(sp)
 10159b0:	d8c00315 	stw	r3,12(sp)
 10159b4:	da400515 	stw	r9,20(sp)
 10159b8:	d880048d 	sth	r2,18(sp)
 10159bc:	da400115 	stw	r9,4(sp)
 10159c0:	1017b3c0 	call	1017b3c <___vfprintf_internal_r>
 10159c4:	d8c00117 	ldw	r3,4(sp)
 10159c8:	18000005 	stb	zero,0(r3)
 10159cc:	dfc01817 	ldw	ra,96(sp)
 10159d0:	dec01a04 	addi	sp,sp,104
 10159d4:	f800283a 	ret

010159d8 <__sclose>:
 10159d8:	2940038f 	ldh	r5,14(r5)
 10159dc:	1019bd81 	jmpi	1019bd8 <_close_r>

010159e0 <__sseek>:
 10159e0:	defffe04 	addi	sp,sp,-8
 10159e4:	dc000015 	stw	r16,0(sp)
 10159e8:	2821883a 	mov	r16,r5
 10159ec:	2940038f 	ldh	r5,14(r5)
 10159f0:	dfc00115 	stw	ra,4(sp)
 10159f4:	101cda00 	call	101cda0 <_lseek_r>
 10159f8:	1007883a 	mov	r3,r2
 10159fc:	00bfffc4 	movi	r2,-1
 1015a00:	18800926 	beq	r3,r2,1015a28 <__sseek+0x48>
 1015a04:	8080030b 	ldhu	r2,12(r16)
 1015a08:	80c01415 	stw	r3,80(r16)
 1015a0c:	10840014 	ori	r2,r2,4096
 1015a10:	8080030d 	sth	r2,12(r16)
 1015a14:	1805883a 	mov	r2,r3
 1015a18:	dfc00117 	ldw	ra,4(sp)
 1015a1c:	dc000017 	ldw	r16,0(sp)
 1015a20:	dec00204 	addi	sp,sp,8
 1015a24:	f800283a 	ret
 1015a28:	8080030b 	ldhu	r2,12(r16)
 1015a2c:	10bbffcc 	andi	r2,r2,61439
 1015a30:	8080030d 	sth	r2,12(r16)
 1015a34:	1805883a 	mov	r2,r3
 1015a38:	dfc00117 	ldw	ra,4(sp)
 1015a3c:	dc000017 	ldw	r16,0(sp)
 1015a40:	dec00204 	addi	sp,sp,8
 1015a44:	f800283a 	ret

01015a48 <__swrite>:
 1015a48:	2880030b 	ldhu	r2,12(r5)
 1015a4c:	defffb04 	addi	sp,sp,-20
 1015a50:	dcc00315 	stw	r19,12(sp)
 1015a54:	1080400c 	andi	r2,r2,256
 1015a58:	dc800215 	stw	r18,8(sp)
 1015a5c:	dc400115 	stw	r17,4(sp)
 1015a60:	dc000015 	stw	r16,0(sp)
 1015a64:	3027883a 	mov	r19,r6
 1015a68:	3825883a 	mov	r18,r7
 1015a6c:	dfc00415 	stw	ra,16(sp)
 1015a70:	2821883a 	mov	r16,r5
 1015a74:	000d883a 	mov	r6,zero
 1015a78:	01c00084 	movi	r7,2
 1015a7c:	2023883a 	mov	r17,r4
 1015a80:	10000226 	beq	r2,zero,1015a8c <__swrite+0x44>
 1015a84:	2940038f 	ldh	r5,14(r5)
 1015a88:	101cda00 	call	101cda0 <_lseek_r>
 1015a8c:	8080030b 	ldhu	r2,12(r16)
 1015a90:	8140038f 	ldh	r5,14(r16)
 1015a94:	8809883a 	mov	r4,r17
 1015a98:	10bbffcc 	andi	r2,r2,61439
 1015a9c:	980d883a 	mov	r6,r19
 1015aa0:	900f883a 	mov	r7,r18
 1015aa4:	8080030d 	sth	r2,12(r16)
 1015aa8:	dfc00417 	ldw	ra,16(sp)
 1015aac:	dcc00317 	ldw	r19,12(sp)
 1015ab0:	dc800217 	ldw	r18,8(sp)
 1015ab4:	dc400117 	ldw	r17,4(sp)
 1015ab8:	dc000017 	ldw	r16,0(sp)
 1015abc:	dec00504 	addi	sp,sp,20
 1015ac0:	1019a0c1 	jmpi	1019a0c <_write_r>

01015ac4 <__sread>:
 1015ac4:	defffe04 	addi	sp,sp,-8
 1015ac8:	dc000015 	stw	r16,0(sp)
 1015acc:	2821883a 	mov	r16,r5
 1015ad0:	2940038f 	ldh	r5,14(r5)
 1015ad4:	dfc00115 	stw	ra,4(sp)
 1015ad8:	101e0dc0 	call	101e0dc <_read_r>
 1015adc:	1007883a 	mov	r3,r2
 1015ae0:	10000816 	blt	r2,zero,1015b04 <__sread+0x40>
 1015ae4:	80801417 	ldw	r2,80(r16)
 1015ae8:	10c5883a 	add	r2,r2,r3
 1015aec:	80801415 	stw	r2,80(r16)
 1015af0:	1805883a 	mov	r2,r3
 1015af4:	dfc00117 	ldw	ra,4(sp)
 1015af8:	dc000017 	ldw	r16,0(sp)
 1015afc:	dec00204 	addi	sp,sp,8
 1015b00:	f800283a 	ret
 1015b04:	8080030b 	ldhu	r2,12(r16)
 1015b08:	10bbffcc 	andi	r2,r2,61439
 1015b0c:	8080030d 	sth	r2,12(r16)
 1015b10:	1805883a 	mov	r2,r3
 1015b14:	dfc00117 	ldw	ra,4(sp)
 1015b18:	dc000017 	ldw	r16,0(sp)
 1015b1c:	dec00204 	addi	sp,sp,8
 1015b20:	f800283a 	ret

01015b24 <strcat>:
 1015b24:	defffe04 	addi	sp,sp,-8
 1015b28:	208000cc 	andi	r2,r4,3
 1015b2c:	dc000015 	stw	r16,0(sp)
 1015b30:	dfc00115 	stw	ra,4(sp)
 1015b34:	2021883a 	mov	r16,r4
 1015b38:	1000161e 	bne	r2,zero,1015b94 <strcat+0x70>
 1015b3c:	20c00017 	ldw	r3,0(r4)
 1015b40:	01bfbff4 	movhi	r6,65279
 1015b44:	31bfbfc4 	addi	r6,r6,-257
 1015b48:	02202074 	movhi	r8,32897
 1015b4c:	42202004 	addi	r8,r8,-32640
 1015b50:	1985883a 	add	r2,r3,r6
 1015b54:	1204703a 	and	r2,r2,r8
 1015b58:	00c6303a 	nor	r3,zero,r3
 1015b5c:	1886703a 	and	r3,r3,r2
 1015b60:	18000c1e 	bne	r3,zero,1015b94 <strcat+0x70>
 1015b64:	300f883a 	mov	r7,r6
 1015b68:	400d883a 	mov	r6,r8
 1015b6c:	21000104 	addi	r4,r4,4
 1015b70:	20800017 	ldw	r2,0(r4)
 1015b74:	11c7883a 	add	r3,r2,r7
 1015b78:	1986703a 	and	r3,r3,r6
 1015b7c:	0084303a 	nor	r2,zero,r2
 1015b80:	10c4703a 	and	r2,r2,r3
 1015b84:	103ff926 	beq	r2,zero,1015b6c <strcat+0x48>
 1015b88:	20800007 	ldb	r2,0(r4)
 1015b8c:	10000326 	beq	r2,zero,1015b9c <strcat+0x78>
 1015b90:	21000044 	addi	r4,r4,1
 1015b94:	20800007 	ldb	r2,0(r4)
 1015b98:	103ffd1e 	bne	r2,zero,1015b90 <strcat+0x6c>
 1015b9c:	1015c700 	call	1015c70 <strcpy>
 1015ba0:	8005883a 	mov	r2,r16
 1015ba4:	dfc00117 	ldw	ra,4(sp)
 1015ba8:	dc000017 	ldw	r16,0(sp)
 1015bac:	dec00204 	addi	sp,sp,8
 1015bb0:	f800283a 	ret

01015bb4 <strcmp>:
 1015bb4:	2144b03a 	or	r2,r4,r5
 1015bb8:	108000cc 	andi	r2,r2,3
 1015bbc:	10001d1e 	bne	r2,zero,1015c34 <strcmp+0x80>
 1015bc0:	200f883a 	mov	r7,r4
 1015bc4:	28800017 	ldw	r2,0(r5)
 1015bc8:	21000017 	ldw	r4,0(r4)
 1015bcc:	280d883a 	mov	r6,r5
 1015bd0:	2080161e 	bne	r4,r2,1015c2c <strcmp+0x78>
 1015bd4:	023fbff4 	movhi	r8,65279
 1015bd8:	423fbfc4 	addi	r8,r8,-257
 1015bdc:	2207883a 	add	r3,r4,r8
 1015be0:	01602074 	movhi	r5,32897
 1015be4:	29602004 	addi	r5,r5,-32640
 1015be8:	1946703a 	and	r3,r3,r5
 1015bec:	0104303a 	nor	r2,zero,r4
 1015bf0:	10c4703a 	and	r2,r2,r3
 1015bf4:	10001c1e 	bne	r2,zero,1015c68 <strcmp+0xb4>
 1015bf8:	4013883a 	mov	r9,r8
 1015bfc:	2811883a 	mov	r8,r5
 1015c00:	00000106 	br	1015c08 <strcmp+0x54>
 1015c04:	1800181e 	bne	r3,zero,1015c68 <strcmp+0xb4>
 1015c08:	39c00104 	addi	r7,r7,4
 1015c0c:	39000017 	ldw	r4,0(r7)
 1015c10:	31800104 	addi	r6,r6,4
 1015c14:	31400017 	ldw	r5,0(r6)
 1015c18:	2245883a 	add	r2,r4,r9
 1015c1c:	1204703a 	and	r2,r2,r8
 1015c20:	0106303a 	nor	r3,zero,r4
 1015c24:	1886703a 	and	r3,r3,r2
 1015c28:	217ff626 	beq	r4,r5,1015c04 <strcmp+0x50>
 1015c2c:	3809883a 	mov	r4,r7
 1015c30:	300b883a 	mov	r5,r6
 1015c34:	20c00007 	ldb	r3,0(r4)
 1015c38:	1800051e 	bne	r3,zero,1015c50 <strcmp+0x9c>
 1015c3c:	00000606 	br	1015c58 <strcmp+0xa4>
 1015c40:	21000044 	addi	r4,r4,1
 1015c44:	20c00007 	ldb	r3,0(r4)
 1015c48:	29400044 	addi	r5,r5,1
 1015c4c:	18000226 	beq	r3,zero,1015c58 <strcmp+0xa4>
 1015c50:	28800007 	ldb	r2,0(r5)
 1015c54:	18bffa26 	beq	r3,r2,1015c40 <strcmp+0x8c>
 1015c58:	20c00003 	ldbu	r3,0(r4)
 1015c5c:	28800003 	ldbu	r2,0(r5)
 1015c60:	1885c83a 	sub	r2,r3,r2
 1015c64:	f800283a 	ret
 1015c68:	0005883a 	mov	r2,zero
 1015c6c:	f800283a 	ret

01015c70 <strcpy>:
 1015c70:	2904b03a 	or	r2,r5,r4
 1015c74:	108000cc 	andi	r2,r2,3
 1015c78:	10000826 	beq	r2,zero,1015c9c <strcpy+0x2c>
 1015c7c:	2007883a 	mov	r3,r4
 1015c80:	28800003 	ldbu	r2,0(r5)
 1015c84:	29400044 	addi	r5,r5,1
 1015c88:	18800005 	stb	r2,0(r3)
 1015c8c:	18c00044 	addi	r3,r3,1
 1015c90:	103ffb1e 	bne	r2,zero,1015c80 <strcpy+0x10>
 1015c94:	2005883a 	mov	r2,r4
 1015c98:	f800283a 	ret
 1015c9c:	29800017 	ldw	r6,0(r5)
 1015ca0:	023fbff4 	movhi	r8,65279
 1015ca4:	423fbfc4 	addi	r8,r8,-257
 1015ca8:	02a02074 	movhi	r10,32897
 1015cac:	52a02004 	addi	r10,r10,-32640
 1015cb0:	3205883a 	add	r2,r6,r8
 1015cb4:	0186303a 	nor	r3,zero,r6
 1015cb8:	10c4703a 	and	r2,r2,r3
 1015cbc:	1284703a 	and	r2,r2,r10
 1015cc0:	200f883a 	mov	r7,r4
 1015cc4:	10000b1e 	bne	r2,zero,1015cf4 <strcpy+0x84>
 1015cc8:	4013883a 	mov	r9,r8
 1015ccc:	5011883a 	mov	r8,r10
 1015cd0:	39800015 	stw	r6,0(r7)
 1015cd4:	29400104 	addi	r5,r5,4
 1015cd8:	29800017 	ldw	r6,0(r5)
 1015cdc:	39c00104 	addi	r7,r7,4
 1015ce0:	3245883a 	add	r2,r6,r9
 1015ce4:	0186303a 	nor	r3,zero,r6
 1015ce8:	10c4703a 	and	r2,r2,r3
 1015cec:	1204703a 	and	r2,r2,r8
 1015cf0:	103ff726 	beq	r2,zero,1015cd0 <strcpy+0x60>
 1015cf4:	3807883a 	mov	r3,r7
 1015cf8:	003fe106 	br	1015c80 <strcpy+0x10>

01015cfc <strlen>:
 1015cfc:	208000cc 	andi	r2,r4,3
 1015d00:	2011883a 	mov	r8,r4
 1015d04:	1000161e 	bne	r2,zero,1015d60 <strlen+0x64>
 1015d08:	20c00017 	ldw	r3,0(r4)
 1015d0c:	017fbff4 	movhi	r5,65279
 1015d10:	297fbfc4 	addi	r5,r5,-257
 1015d14:	01e02074 	movhi	r7,32897
 1015d18:	39e02004 	addi	r7,r7,-32640
 1015d1c:	1945883a 	add	r2,r3,r5
 1015d20:	11c4703a 	and	r2,r2,r7
 1015d24:	00c6303a 	nor	r3,zero,r3
 1015d28:	1886703a 	and	r3,r3,r2
 1015d2c:	18000c1e 	bne	r3,zero,1015d60 <strlen+0x64>
 1015d30:	280d883a 	mov	r6,r5
 1015d34:	380b883a 	mov	r5,r7
 1015d38:	21000104 	addi	r4,r4,4
 1015d3c:	20800017 	ldw	r2,0(r4)
 1015d40:	1187883a 	add	r3,r2,r6
 1015d44:	1946703a 	and	r3,r3,r5
 1015d48:	0084303a 	nor	r2,zero,r2
 1015d4c:	10c4703a 	and	r2,r2,r3
 1015d50:	103ff926 	beq	r2,zero,1015d38 <strlen+0x3c>
 1015d54:	20800007 	ldb	r2,0(r4)
 1015d58:	10000326 	beq	r2,zero,1015d68 <strlen+0x6c>
 1015d5c:	21000044 	addi	r4,r4,1
 1015d60:	20800007 	ldb	r2,0(r4)
 1015d64:	103ffd1e 	bne	r2,zero,1015d5c <strlen+0x60>
 1015d68:	2205c83a 	sub	r2,r4,r8
 1015d6c:	f800283a 	ret

01015d70 <strncat>:
 1015d70:	208000cc 	andi	r2,r4,3
 1015d74:	10001426 	beq	r2,zero,1015dc8 <strncat+0x58>
 1015d78:	2007883a 	mov	r3,r4
 1015d7c:	00000106 	br	1015d84 <strncat+0x14>
 1015d80:	18c00044 	addi	r3,r3,1
 1015d84:	18800007 	ldb	r2,0(r3)
 1015d88:	103ffd1e 	bne	r2,zero,1015d80 <strncat+0x10>
 1015d8c:	31bfffc4 	addi	r6,r6,-1
 1015d90:	00bfffc4 	movi	r2,-1
 1015d94:	30800a26 	beq	r6,r2,1015dc0 <strncat+0x50>
 1015d98:	28800003 	ldbu	r2,0(r5)
 1015d9c:	29400044 	addi	r5,r5,1
 1015da0:	18800005 	stb	r2,0(r3)
 1015da4:	10000626 	beq	r2,zero,1015dc0 <strncat+0x50>
 1015da8:	18c00044 	addi	r3,r3,1
 1015dac:	303ff71e 	bne	r6,zero,1015d8c <strncat+0x1c>
 1015db0:	31bfffc4 	addi	r6,r6,-1
 1015db4:	00bfffc4 	movi	r2,-1
 1015db8:	18000005 	stb	zero,0(r3)
 1015dbc:	30bff61e 	bne	r6,r2,1015d98 <strncat+0x28>
 1015dc0:	2005883a 	mov	r2,r4
 1015dc4:	f800283a 	ret
 1015dc8:	20c00017 	ldw	r3,0(r4)
 1015dcc:	023fbff4 	movhi	r8,65279
 1015dd0:	423fbfc4 	addi	r8,r8,-257
 1015dd4:	02a02074 	movhi	r10,32897
 1015dd8:	52a02004 	addi	r10,r10,-32640
 1015ddc:	1a05883a 	add	r2,r3,r8
 1015de0:	1284703a 	and	r2,r2,r10
 1015de4:	00c6303a 	nor	r3,zero,r3
 1015de8:	1886703a 	and	r3,r3,r2
 1015dec:	200f883a 	mov	r7,r4
 1015df0:	1800091e 	bne	r3,zero,1015e18 <strncat+0xa8>
 1015df4:	4013883a 	mov	r9,r8
 1015df8:	5011883a 	mov	r8,r10
 1015dfc:	39c00104 	addi	r7,r7,4
 1015e00:	38800017 	ldw	r2,0(r7)
 1015e04:	1247883a 	add	r3,r2,r9
 1015e08:	1a06703a 	and	r3,r3,r8
 1015e0c:	0084303a 	nor	r2,zero,r2
 1015e10:	10c4703a 	and	r2,r2,r3
 1015e14:	103ff926 	beq	r2,zero,1015dfc <strncat+0x8c>
 1015e18:	3807883a 	mov	r3,r7
 1015e1c:	003fd906 	br	1015d84 <strncat+0x14>

01015e20 <strncpy>:
 1015e20:	2904b03a 	or	r2,r5,r4
 1015e24:	108000cc 	andi	r2,r2,3
 1015e28:	00c000c4 	movi	r3,3
 1015e2c:	1000291e 	bne	r2,zero,1015ed4 <strncpy+0xb4>
 1015e30:	1980282e 	bgeu	r3,r6,1015ed4 <strncpy+0xb4>
 1015e34:	1817883a 	mov	r11,r3
 1015e38:	2011883a 	mov	r8,r4
 1015e3c:	02bfbff4 	movhi	r10,65279
 1015e40:	52bfbfc4 	addi	r10,r10,-257
 1015e44:	02602074 	movhi	r9,32897
 1015e48:	4a602004 	addi	r9,r9,-32640
 1015e4c:	29c00017 	ldw	r7,0(r5)
 1015e50:	3a85883a 	add	r2,r7,r10
 1015e54:	01c6303a 	nor	r3,zero,r7
 1015e58:	10c4703a 	and	r2,r2,r3
 1015e5c:	1244703a 	and	r2,r2,r9
 1015e60:	1000051e 	bne	r2,zero,1015e78 <strncpy+0x58>
 1015e64:	31bfff04 	addi	r6,r6,-4
 1015e68:	41c00015 	stw	r7,0(r8)
 1015e6c:	29400104 	addi	r5,r5,4
 1015e70:	42000104 	addi	r8,r8,4
 1015e74:	59bff536 	bltu	r11,r6,1015e4c <strncpy+0x2c>
 1015e78:	400f883a 	mov	r7,r8
 1015e7c:	30001326 	beq	r6,zero,1015ecc <strncpy+0xac>
 1015e80:	28800003 	ldbu	r2,0(r5)
 1015e84:	31bfffc4 	addi	r6,r6,-1
 1015e88:	38c00044 	addi	r3,r7,1
 1015e8c:	38800005 	stb	r2,0(r7)
 1015e90:	10000826 	beq	r2,zero,1015eb4 <strncpy+0x94>
 1015e94:	29400044 	addi	r5,r5,1
 1015e98:	30000c26 	beq	r6,zero,1015ecc <strncpy+0xac>
 1015e9c:	28800003 	ldbu	r2,0(r5)
 1015ea0:	31bfffc4 	addi	r6,r6,-1
 1015ea4:	29400044 	addi	r5,r5,1
 1015ea8:	18800005 	stb	r2,0(r3)
 1015eac:	18c00044 	addi	r3,r3,1
 1015eb0:	103ff91e 	bne	r2,zero,1015e98 <strncpy+0x78>
 1015eb4:	30000526 	beq	r6,zero,1015ecc <strncpy+0xac>
 1015eb8:	1805883a 	mov	r2,r3
 1015ebc:	30cd883a 	add	r6,r6,r3
 1015ec0:	10000005 	stb	zero,0(r2)
 1015ec4:	10800044 	addi	r2,r2,1
 1015ec8:	30bffd1e 	bne	r6,r2,1015ec0 <strncpy+0xa0>
 1015ecc:	2005883a 	mov	r2,r4
 1015ed0:	f800283a 	ret
 1015ed4:	200f883a 	mov	r7,r4
 1015ed8:	003fe806 	br	1015e7c <strncpy+0x5c>

01015edc <match>:
 1015edc:	21800017 	ldw	r6,0(r4)
 1015ee0:	01c01004 	movi	r7,64
 1015ee4:	02001684 	movi	r8,90
 1015ee8:	28800007 	ldb	r2,0(r5)
 1015eec:	29400044 	addi	r5,r5,1
 1015ef0:	10000826 	beq	r2,zero,1015f14 <match+0x38>
 1015ef4:	31800044 	addi	r6,r6,1
 1015ef8:	30c00007 	ldb	r3,0(r6)
 1015efc:	38c0020e 	bge	r7,r3,1015f08 <match+0x2c>
 1015f00:	40c00116 	blt	r8,r3,1015f08 <match+0x2c>
 1015f04:	18c00804 	addi	r3,r3,32
 1015f08:	18bff726 	beq	r3,r2,1015ee8 <match+0xc>
 1015f0c:	0005883a 	mov	r2,zero
 1015f10:	f800283a 	ret
 1015f14:	30800044 	addi	r2,r6,1
 1015f18:	20800015 	stw	r2,0(r4)
 1015f1c:	00800044 	movi	r2,1
 1015f20:	f800283a 	ret

01015f24 <_strtod_r>:
 1015f24:	deffde04 	addi	sp,sp,-136
 1015f28:	df002015 	stw	fp,128(sp)
 1015f2c:	dd401d15 	stw	r21,116(sp)
 1015f30:	dc401915 	stw	r17,100(sp)
 1015f34:	dfc02115 	stw	ra,132(sp)
 1015f38:	ddc01f15 	stw	r23,124(sp)
 1015f3c:	dd801e15 	stw	r22,120(sp)
 1015f40:	dd001c15 	stw	r20,112(sp)
 1015f44:	dcc01b15 	stw	r19,108(sp)
 1015f48:	dc801a15 	stw	r18,104(sp)
 1015f4c:	dc001815 	stw	r16,96(sp)
 1015f50:	2823883a 	mov	r17,r5
 1015f54:	202b883a 	mov	r21,r4
 1015f58:	d9801515 	stw	r6,84(sp)
 1015f5c:	d8000915 	stw	zero,36(sp)
 1015f60:	d8000a15 	stw	zero,40(sp)
 1015f64:	d9400415 	stw	r5,16(sp)
 1015f68:	df000904 	addi	fp,sp,36
 1015f6c:	da000417 	ldw	r8,16(sp)
 1015f70:	00800b44 	movi	r2,45
 1015f74:	40c00003 	ldbu	r3,0(r8)
 1015f78:	10c03536 	bltu	r2,r3,1016050 <_strtod_r+0x12c>
 1015f7c:	18c5883a 	add	r2,r3,r3
 1015f80:	1085883a 	add	r2,r2,r2
 1015f84:	00c04074 	movhi	r3,257
 1015f88:	18d7e604 	addi	r3,r3,24472
 1015f8c:	10c5883a 	add	r2,r2,r3
 1015f90:	11000017 	ldw	r4,0(r2)
 1015f94:	2000683a 	jmp	r4
 1015f98:	0101618c 	andi	r4,zero,1414
 1015f9c:	01016050 	cmplti	r4,zero,1409
 1015fa0:	01016050 	cmplti	r4,zero,1409
 1015fa4:	01016050 	cmplti	r4,zero,1409
 1015fa8:	01016050 	cmplti	r4,zero,1409
 1015fac:	01016050 	cmplti	r4,zero,1409
 1015fb0:	01016050 	cmplti	r4,zero,1409
 1015fb4:	01016050 	cmplti	r4,zero,1409
 1015fb8:	01016050 	cmplti	r4,zero,1409
 1015fbc:	010164a4 	muli	r4,zero,1426
 1015fc0:	010164a4 	muli	r4,zero,1426
 1015fc4:	010164a4 	muli	r4,zero,1426
 1015fc8:	010164a4 	muli	r4,zero,1426
 1015fcc:	010164a4 	muli	r4,zero,1426
 1015fd0:	01016050 	cmplti	r4,zero,1409
 1015fd4:	01016050 	cmplti	r4,zero,1409
 1015fd8:	01016050 	cmplti	r4,zero,1409
 1015fdc:	01016050 	cmplti	r4,zero,1409
 1015fe0:	01016050 	cmplti	r4,zero,1409
 1015fe4:	01016050 	cmplti	r4,zero,1409
 1015fe8:	01016050 	cmplti	r4,zero,1409
 1015fec:	01016050 	cmplti	r4,zero,1409
 1015ff0:	01016050 	cmplti	r4,zero,1409
 1015ff4:	01016050 	cmplti	r4,zero,1409
 1015ff8:	01016050 	cmplti	r4,zero,1409
 1015ffc:	01016050 	cmplti	r4,zero,1409
 1016000:	01016050 	cmplti	r4,zero,1409
 1016004:	01016050 	cmplti	r4,zero,1409
 1016008:	01016050 	cmplti	r4,zero,1409
 101600c:	01016050 	cmplti	r4,zero,1409
 1016010:	01016050 	cmplti	r4,zero,1409
 1016014:	01016050 	cmplti	r4,zero,1409
 1016018:	010164a4 	muli	r4,zero,1426
 101601c:	01016050 	cmplti	r4,zero,1409
 1016020:	01016050 	cmplti	r4,zero,1409
 1016024:	01016050 	cmplti	r4,zero,1409
 1016028:	01016050 	cmplti	r4,zero,1409
 101602c:	01016050 	cmplti	r4,zero,1409
 1016030:	01016050 	cmplti	r4,zero,1409
 1016034:	01016050 	cmplti	r4,zero,1409
 1016038:	01016050 	cmplti	r4,zero,1409
 101603c:	01016050 	cmplti	r4,zero,1409
 1016040:	01016050 	cmplti	r4,zero,1409
 1016044:	01016484 	movi	r4,1426
 1016048:	01016050 	cmplti	r4,zero,1409
 101604c:	010164b0 	cmpltui	r4,zero,1426
 1016050:	d8001115 	stw	zero,68(sp)
 1016054:	40c00007 	ldb	r3,0(r8)
 1016058:	00800c04 	movi	r2,48
 101605c:	1880d026 	beq	r3,r2,10163a0 <_strtod_r+0x47c>
 1016060:	001f883a 	mov	r15,zero
 1016064:	41000007 	ldb	r4,0(r8)
 1016068:	00c00bc4 	movi	r3,47
 101606c:	402d883a 	mov	r22,r8
 1016070:	1903470e 	bge	r3,r4,1016d90 <_strtod_r+0xe6c>
 1016074:	00800e44 	movi	r2,57
 1016078:	11034516 	blt	r2,r4,1016d90 <_strtod_r+0xe6c>
 101607c:	180f883a 	mov	r7,r3
 1016080:	1013883a 	mov	r9,r2
 1016084:	4007883a 	mov	r3,r8
 1016088:	000d883a 	mov	r6,zero
 101608c:	0029883a 	mov	r20,zero
 1016090:	0021883a 	mov	r16,zero
 1016094:	01400204 	movi	r5,8
 1016098:	028003c4 	movi	r10,15
 101609c:	29803116 	blt	r5,r6,1016164 <_strtod_r+0x240>
 10160a0:	a08002a4 	muli	r2,r20,10
 10160a4:	1105883a 	add	r2,r2,r4
 10160a8:	153ff404 	addi	r20,r2,-48
 10160ac:	1a000044 	addi	r8,r3,1
 10160b0:	da000415 	stw	r8,16(sp)
 10160b4:	41000007 	ldb	r4,0(r8)
 10160b8:	31800044 	addi	r6,r6,1
 10160bc:	4007883a 	mov	r3,r8
 10160c0:	3900010e 	bge	r7,r4,10160c8 <_strtod_r+0x1a4>
 10160c4:	493ff50e 	bge	r9,r4,101609c <_strtod_r+0x178>
 10160c8:	00800b84 	movi	r2,46
 10160cc:	2080c126 	beq	r4,r2,10163d4 <_strtod_r+0x4b0>
 10160d0:	3027883a 	mov	r19,r6
 10160d4:	0025883a 	mov	r18,zero
 10160d8:	0015883a 	mov	r10,zero
 10160dc:	000f883a 	mov	r7,zero
 10160e0:	00801944 	movi	r2,101
 10160e4:	20802426 	beq	r4,r2,1016178 <_strtod_r+0x254>
 10160e8:	00801144 	movi	r2,69
 10160ec:	20802226 	beq	r4,r2,1016178 <_strtod_r+0x254>
 10160f0:	9816c03a 	cmpne	r11,r19,zero
 10160f4:	000b883a 	mov	r5,zero
 10160f8:	5800631e 	bne	r11,zero,1016288 <_strtod_r+0x364>
 10160fc:	3800c126 	beq	r7,zero,1016404 <_strtod_r+0x4e0>
 1016100:	d8c01517 	ldw	r3,84(sp)
 1016104:	18000226 	beq	r3,zero,1016110 <_strtod_r+0x1ec>
 1016108:	d8800417 	ldw	r2,16(sp)
 101610c:	18800015 	stw	r2,0(r3)
 1016110:	d9001117 	ldw	r4,68(sp)
 1016114:	2005003a 	cmpeq	r2,r4,zero
 1016118:	10001f1e 	bne	r2,zero,1016198 <_strtod_r+0x274>
 101611c:	e0800017 	ldw	r2,0(fp)
 1016120:	e0c00117 	ldw	r3,4(fp)
 1016124:	1009883a 	mov	r4,r2
 1016128:	1960003c 	xorhi	r5,r3,32768
 101612c:	2005883a 	mov	r2,r4
 1016130:	2807883a 	mov	r3,r5
 1016134:	dfc02117 	ldw	ra,132(sp)
 1016138:	df002017 	ldw	fp,128(sp)
 101613c:	ddc01f17 	ldw	r23,124(sp)
 1016140:	dd801e17 	ldw	r22,120(sp)
 1016144:	dd401d17 	ldw	r21,116(sp)
 1016148:	dd001c17 	ldw	r20,112(sp)
 101614c:	dcc01b17 	ldw	r19,108(sp)
 1016150:	dc801a17 	ldw	r18,104(sp)
 1016154:	dc401917 	ldw	r17,100(sp)
 1016158:	dc001817 	ldw	r16,96(sp)
 101615c:	dec02204 	addi	sp,sp,136
 1016160:	f800283a 	ret
 1016164:	51bfd116 	blt	r10,r6,10160ac <_strtod_r+0x188>
 1016168:	808002a4 	muli	r2,r16,10
 101616c:	1105883a 	add	r2,r2,r4
 1016170:	143ff404 	addi	r16,r2,-48
 1016174:	003fcd06 	br	10160ac <_strtod_r+0x188>
 1016178:	9816c03a 	cmpne	r11,r19,zero
 101617c:	5800091e 	bne	r11,zero,10161a4 <_strtod_r+0x280>
 1016180:	3800081e 	bne	r7,zero,10161a4 <_strtod_r+0x280>
 1016184:	7805003a 	cmpeq	r2,r15,zero
 1016188:	10000626 	beq	r2,zero,10161a4 <_strtod_r+0x280>
 101618c:	d8001115 	stw	zero,68(sp)
 1016190:	dc400415 	stw	r17,16(sp)
 1016194:	003fda06 	br	1016100 <_strtod_r+0x1dc>
 1016198:	e1000017 	ldw	r4,0(fp)
 101619c:	e1400117 	ldw	r5,4(fp)
 10161a0:	003fe206 	br	101612c <_strtod_r+0x208>
 10161a4:	dc400417 	ldw	r17,16(sp)
 10161a8:	00800ac4 	movi	r2,43
 10161ac:	8a000044 	addi	r8,r17,1
 10161b0:	da000415 	stw	r8,16(sp)
 10161b4:	88c00047 	ldb	r3,1(r17)
 10161b8:	4009883a 	mov	r4,r8
 10161bc:	1880bf26 	beq	r3,r2,10164bc <_strtod_r+0x598>
 10161c0:	00800b44 	movi	r2,45
 10161c4:	18834526 	beq	r3,r2,1016edc <_strtod_r+0xfb8>
 10161c8:	1809883a 	mov	r4,r3
 10161cc:	20fff404 	addi	r3,r4,-48
 10161d0:	00800244 	movi	r2,9
 10161d4:	001d883a 	mov	r14,zero
 10161d8:	10c0bf36 	bltu	r2,r3,10164d8 <_strtod_r+0x5b4>
 10161dc:	00800c04 	movi	r2,48
 10161e0:	2080061e 	bne	r4,r2,10161fc <_strtod_r+0x2d8>
 10161e4:	da000417 	ldw	r8,16(sp)
 10161e8:	2005883a 	mov	r2,r4
 10161ec:	42000044 	addi	r8,r8,1
 10161f0:	da000415 	stw	r8,16(sp)
 10161f4:	41000007 	ldb	r4,0(r8)
 10161f8:	20bffc26 	beq	r4,r2,10161ec <_strtod_r+0x2c8>
 10161fc:	20fff3c4 	addi	r3,r4,-49
 1016200:	00800204 	movi	r2,8
 1016204:	10ffbb36 	bltu	r2,r3,10160f4 <_strtod_r+0x1d0>
 1016208:	da000417 	ldw	r8,16(sp)
 101620c:	227ff404 	addi	r9,r4,-48
 1016210:	03000bc4 	movi	r12,47
 1016214:	4007883a 	mov	r3,r8
 1016218:	42000044 	addi	r8,r8,1
 101621c:	da000415 	stw	r8,16(sp)
 1016220:	41000007 	ldb	r4,0(r8)
 1016224:	61000d0e 	bge	r12,r4,101625c <_strtod_r+0x338>
 1016228:	00800e44 	movi	r2,57
 101622c:	11000b16 	blt	r2,r4,101625c <_strtod_r+0x338>
 1016230:	601b883a 	mov	r13,r12
 1016234:	1019883a 	mov	r12,r2
 1016238:	00000106 	br	1016240 <_strtod_r+0x31c>
 101623c:	61000716 	blt	r12,r4,101625c <_strtod_r+0x338>
 1016240:	488002a4 	muli	r2,r9,10
 1016244:	42000044 	addi	r8,r8,1
 1016248:	da000415 	stw	r8,16(sp)
 101624c:	2085883a 	add	r2,r4,r2
 1016250:	41000007 	ldb	r4,0(r8)
 1016254:	127ff404 	addi	r9,r2,-48
 1016258:	693ff816 	blt	r13,r4,101623c <_strtod_r+0x318>
 101625c:	40c7c83a 	sub	r3,r8,r3
 1016260:	00800204 	movi	r2,8
 1016264:	10c2e416 	blt	r2,r3,1016df8 <_strtod_r+0xed4>
 1016268:	009387c4 	movi	r2,19999
 101626c:	480b883a 	mov	r5,r9
 1016270:	1240010e 	bge	r2,r9,1016278 <_strtod_r+0x354>
 1016274:	100b883a 	mov	r5,r2
 1016278:	7005003a 	cmpeq	r2,r14,zero
 101627c:	103f9e1e 	bne	r2,zero,10160f8 <_strtod_r+0x1d4>
 1016280:	014bc83a 	sub	r5,zero,r5
 1016284:	583f9d26 	beq	r11,zero,10160fc <_strtod_r+0x1d8>
 1016288:	2a8bc83a 	sub	r5,r5,r10
 101628c:	d9400f15 	stw	r5,60(sp)
 1016290:	30007a1e 	bne	r6,zero,101647c <_strtod_r+0x558>
 1016294:	dcc01215 	stw	r19,72(sp)
 1016298:	00800404 	movi	r2,16
 101629c:	9825883a 	mov	r18,r19
 10162a0:	14c0010e 	bge	r2,r19,10162a8 <_strtod_r+0x384>
 10162a4:	1025883a 	mov	r18,r2
 10162a8:	a009883a 	mov	r4,r20
 10162ac:	1020d140 	call	1020d14 <__floatunsidf>
 10162b0:	100f883a 	mov	r7,r2
 10162b4:	e0800015 	stw	r2,0(fp)
 10162b8:	00800244 	movi	r2,9
 10162bc:	e0c00115 	stw	r3,4(fp)
 10162c0:	1480160e 	bge	r2,r18,101631c <_strtod_r+0x3f8>
 10162c4:	900c90fa 	slli	r6,r18,3
 10162c8:	010040f4 	movhi	r4,259
 10162cc:	21148304 	addi	r4,r4,21004
 10162d0:	180b883a 	mov	r5,r3
 10162d4:	310d883a 	add	r6,r6,r4
 10162d8:	30ffef17 	ldw	r3,-68(r6)
 10162dc:	30bfee17 	ldw	r2,-72(r6)
 10162e0:	3809883a 	mov	r4,r7
 10162e4:	180f883a 	mov	r7,r3
 10162e8:	100d883a 	mov	r6,r2
 10162ec:	1012a940 	call	1012a94 <__muldf3>
 10162f0:	8009883a 	mov	r4,r16
 10162f4:	1823883a 	mov	r17,r3
 10162f8:	1021883a 	mov	r16,r2
 10162fc:	1020d140 	call	1020d14 <__floatunsidf>
 1016300:	880b883a 	mov	r5,r17
 1016304:	180f883a 	mov	r7,r3
 1016308:	8009883a 	mov	r4,r16
 101630c:	100d883a 	mov	r6,r2
 1016310:	1012a200 	call	1012a20 <__adddf3>
 1016314:	e0c00115 	stw	r3,4(fp)
 1016318:	e0800015 	stw	r2,0(fp)
 101631c:	010003c4 	movi	r4,15
 1016320:	24c09816 	blt	r4,r19,1016584 <_strtod_r+0x660>
 1016324:	d9800f17 	ldw	r6,60(sp)
 1016328:	303f7526 	beq	r6,zero,1016100 <_strtod_r+0x1dc>
 101632c:	0183be0e 	bge	zero,r6,1017228 <_strtod_r+0x1304>
 1016330:	00800584 	movi	r2,22
 1016334:	1182b20e 	bge	r2,r6,1016e00 <_strtod_r+0xedc>
 1016338:	d8c00f17 	ldw	r3,60(sp)
 101633c:	24e3c83a 	sub	r17,r4,r19
 1016340:	88800584 	addi	r2,r17,22
 1016344:	10c08f16 	blt	r2,r3,1016584 <_strtod_r+0x660>
 1016348:	880890fa 	slli	r4,r17,3
 101634c:	040040f4 	movhi	r16,259
 1016350:	84148304 	addi	r16,r16,21004
 1016354:	e0800017 	ldw	r2,0(fp)
 1016358:	2409883a 	add	r4,r4,r16
 101635c:	22000017 	ldw	r8,0(r4)
 1016360:	22400117 	ldw	r9,4(r4)
 1016364:	e0c00117 	ldw	r3,4(fp)
 1016368:	1009883a 	mov	r4,r2
 101636c:	480f883a 	mov	r7,r9
 1016370:	180b883a 	mov	r5,r3
 1016374:	400d883a 	mov	r6,r8
 1016378:	1012a940 	call	1012a94 <__muldf3>
 101637c:	d9000f17 	ldw	r4,60(sp)
 1016380:	180b883a 	mov	r5,r3
 1016384:	2455c83a 	sub	r10,r4,r17
 1016388:	501490fa 	slli	r10,r10,3
 101638c:	1009883a 	mov	r4,r2
 1016390:	5415883a 	add	r10,r10,r16
 1016394:	52000017 	ldw	r8,0(r10)
 1016398:	52400117 	ldw	r9,4(r10)
 101639c:	0002a206 	br	1016e28 <_strtod_r+0xf04>
 10163a0:	40c00047 	ldb	r3,1(r8)
 10163a4:	00801604 	movi	r2,88
 10163a8:	18804e26 	beq	r3,r2,10164e4 <_strtod_r+0x5c0>
 10163ac:	00801e04 	movi	r2,120
 10163b0:	18804c26 	beq	r3,r2,10164e4 <_strtod_r+0x5c0>
 10163b4:	42000044 	addi	r8,r8,1
 10163b8:	da000415 	stw	r8,16(sp)
 10163bc:	40c00007 	ldb	r3,0(r8)
 10163c0:	00800c04 	movi	r2,48
 10163c4:	18bffb26 	beq	r3,r2,10163b4 <_strtod_r+0x490>
 10163c8:	183f4d26 	beq	r3,zero,1016100 <_strtod_r+0x1dc>
 10163cc:	03c00044 	movi	r15,1
 10163d0:	003f2406 	br	1016064 <_strtod_r+0x140>
 10163d4:	42000044 	addi	r8,r8,1
 10163d8:	da000415 	stw	r8,16(sp)
 10163dc:	19000047 	ldb	r4,1(r3)
 10163e0:	3000b726 	beq	r6,zero,10166c0 <_strtod_r+0x79c>
 10163e4:	3027883a 	mov	r19,r6
 10163e8:	0015883a 	mov	r10,zero
 10163ec:	000f883a 	mov	r7,zero
 10163f0:	227ff404 	addi	r9,r4,-48
 10163f4:	00800244 	movi	r2,9
 10163f8:	1242592e 	bgeu	r2,r9,1016d60 <_strtod_r+0xe3c>
 10163fc:	04800044 	movi	r18,1
 1016400:	003f3706 	br	10160e0 <_strtod_r+0x1bc>
 1016404:	7804c03a 	cmpne	r2,r15,zero
 1016408:	103f3d1e 	bne	r2,zero,1016100 <_strtod_r+0x1dc>
 101640c:	9004c03a 	cmpne	r2,r18,zero
 1016410:	103f5e1e 	bne	r2,zero,101618c <_strtod_r+0x268>
 1016414:	00801384 	movi	r2,78
 1016418:	2083a226 	beq	r4,r2,10172a4 <_strtod_r+0x1380>
 101641c:	11039d16 	blt	r2,r4,1017294 <_strtod_r+0x1370>
 1016420:	00801244 	movi	r2,73
 1016424:	20bf591e 	bne	r4,r2,101618c <_strtod_r+0x268>
 1016428:	dc000404 	addi	r16,sp,16
 101642c:	8009883a 	mov	r4,r16
 1016430:	014040f4 	movhi	r5,259
 1016434:	29539a04 	addi	r5,r5,20072
 1016438:	1015edc0 	call	1015edc <match>
 101643c:	103f5326 	beq	r2,zero,101618c <_strtod_r+0x268>
 1016440:	d8800417 	ldw	r2,16(sp)
 1016444:	8009883a 	mov	r4,r16
 1016448:	014040f4 	movhi	r5,259
 101644c:	29539b04 	addi	r5,r5,20076
 1016450:	123fffc4 	addi	r8,r2,-1
 1016454:	da000415 	stw	r8,16(sp)
 1016458:	1015edc0 	call	1015edc <match>
 101645c:	1000031e 	bne	r2,zero,101646c <_strtod_r+0x548>
 1016460:	d8800417 	ldw	r2,16(sp)
 1016464:	12000044 	addi	r8,r2,1
 1016468:	da000415 	stw	r8,16(sp)
 101646c:	019ffc34 	movhi	r6,32752
 1016470:	e1800115 	stw	r6,4(fp)
 1016474:	e0000015 	stw	zero,0(fp)
 1016478:	003f2106 	br	1016100 <_strtod_r+0x1dc>
 101647c:	d9801215 	stw	r6,72(sp)
 1016480:	003f8506 	br	1016298 <_strtod_r+0x374>
 1016484:	d8001115 	stw	zero,68(sp)
 1016488:	42000044 	addi	r8,r8,1
 101648c:	da000415 	stw	r8,16(sp)
 1016490:	40800007 	ldb	r2,0(r8)
 1016494:	103eef1e 	bne	r2,zero,1016054 <_strtod_r+0x130>
 1016498:	d8001115 	stw	zero,68(sp)
 101649c:	dc400415 	stw	r17,16(sp)
 10164a0:	003f1706 	br	1016100 <_strtod_r+0x1dc>
 10164a4:	42000044 	addi	r8,r8,1
 10164a8:	da000415 	stw	r8,16(sp)
 10164ac:	003eaf06 	br	1015f6c <_strtod_r+0x48>
 10164b0:	00800044 	movi	r2,1
 10164b4:	d8801115 	stw	r2,68(sp)
 10164b8:	003ff306 	br	1016488 <_strtod_r+0x564>
 10164bc:	001d883a 	mov	r14,zero
 10164c0:	42000044 	addi	r8,r8,1
 10164c4:	da000415 	stw	r8,16(sp)
 10164c8:	21000047 	ldb	r4,1(r4)
 10164cc:	00800244 	movi	r2,9
 10164d0:	20fff404 	addi	r3,r4,-48
 10164d4:	10ff412e 	bgeu	r2,r3,10161dc <_strtod_r+0x2b8>
 10164d8:	000b883a 	mov	r5,zero
 10164dc:	dc400415 	stw	r17,16(sp)
 10164e0:	003f0506 	br	10160f8 <_strtod_r+0x1d4>
 10164e4:	d8c01117 	ldw	r3,68(sp)
 10164e8:	048040f4 	movhi	r18,259
 10164ec:	94973f04 	addi	r18,r18,23804
 10164f0:	d8800504 	addi	r2,sp,20
 10164f4:	a809883a 	mov	r4,r21
 10164f8:	d9400404 	addi	r5,sp,16
 10164fc:	900d883a 	mov	r6,r18
 1016500:	d9c00604 	addi	r7,sp,24
 1016504:	d8800015 	stw	r2,0(sp)
 1016508:	d8c00115 	stw	r3,4(sp)
 101650c:	101c2200 	call	101c220 <__gethex>
 1016510:	140001cc 	andi	r16,r2,7
 1016514:	1027883a 	mov	r19,r2
 1016518:	803ef926 	beq	r16,zero,1016100 <_strtod_r+0x1dc>
 101651c:	05000184 	movi	r20,6
 1016520:	853f1a26 	beq	r16,r20,101618c <_strtod_r+0x268>
 1016524:	d9800517 	ldw	r6,20(sp)
 1016528:	30000626 	beq	r6,zero,1016544 <_strtod_r+0x620>
 101652c:	91400017 	ldw	r5,0(r18)
 1016530:	d9000d04 	addi	r4,sp,52
 1016534:	101d39c0 	call	101d39c <__copybits>
 1016538:	d9400517 	ldw	r5,20(sp)
 101653c:	a809883a 	mov	r4,r21
 1016540:	101cefc0 	call	101cefc <_Bfree>
 1016544:	d9400617 	ldw	r5,24(sp)
 1016548:	a4024136 	bltu	r20,r16,1016e50 <_strtod_r+0xf2c>
 101654c:	8405883a 	add	r2,r16,r16
 1016550:	1085883a 	add	r2,r2,r2
 1016554:	00c04074 	movhi	r3,257
 1016558:	18d95a04 	addi	r3,r3,25960
 101655c:	10c5883a 	add	r2,r2,r3
 1016560:	11000017 	ldw	r4,0(r2)
 1016564:	2000683a 	jmp	r4
 1016568:	01016e90 	cmplti	r4,zero,1466
 101656c:	01016e9c 	xori	r4,zero,1466
 1016570:	01016e40 	call	1016e4 <__alt_mem_onchip_memory2_0+0x1016e4>
 1016574:	01016e68 	cmpgeui	r4,zero,1465
 1016578:	01016e78 	rdprs	r4,zero,1465
 101657c:	01016e9c 	xori	r4,zero,1466
 1016580:	01016e90 	cmplti	r4,zero,1466
 1016584:	d8c00f17 	ldw	r3,60(sp)
 1016588:	9c85c83a 	sub	r2,r19,r18
 101658c:	18a1883a 	add	r16,r3,r2
 1016590:	0402d00e 	bge	zero,r16,10170d4 <_strtod_r+0x11b0>
 1016594:	814003cc 	andi	r5,r16,15
 1016598:	28000f26 	beq	r5,zero,10165d8 <_strtod_r+0x6b4>
 101659c:	280a90fa 	slli	r5,r5,3
 10165a0:	010040f4 	movhi	r4,259
 10165a4:	21148304 	addi	r4,r4,21004
 10165a8:	e0800017 	ldw	r2,0(fp)
 10165ac:	290b883a 	add	r5,r5,r4
 10165b0:	2a000017 	ldw	r8,0(r5)
 10165b4:	e0c00117 	ldw	r3,4(fp)
 10165b8:	2a400117 	ldw	r9,4(r5)
 10165bc:	1009883a 	mov	r4,r2
 10165c0:	180b883a 	mov	r5,r3
 10165c4:	480f883a 	mov	r7,r9
 10165c8:	400d883a 	mov	r6,r8
 10165cc:	1012a940 	call	1012a94 <__muldf3>
 10165d0:	e0c00115 	stw	r3,4(fp)
 10165d4:	e0800015 	stw	r2,0(fp)
 10165d8:	00bffc04 	movi	r2,-16
 10165dc:	808c703a 	and	r6,r16,r2
 10165e0:	30005b26 	beq	r6,zero,1016750 <_strtod_r+0x82c>
 10165e4:	00804d04 	movi	r2,308
 10165e8:	1181fd16 	blt	r2,r6,1016de0 <_strtod_r+0xebc>
 10165ec:	3021d13a 	srai	r16,r6,4
 10165f0:	00800044 	movi	r2,1
 10165f4:	1403610e 	bge	r2,r16,101737c <_strtod_r+0x1458>
 10165f8:	102f883a 	mov	r23,r2
 10165fc:	0025883a 	mov	r18,zero
 1016600:	044040f4 	movhi	r17,259
 1016604:	8c54b504 	addi	r17,r17,21204
 1016608:	8080004c 	andi	r2,r16,1
 101660c:	1005003a 	cmpeq	r2,r2,zero
 1016610:	1000091e 	bne	r2,zero,1016638 <_strtod_r+0x714>
 1016614:	e0800017 	ldw	r2,0(fp)
 1016618:	e0c00117 	ldw	r3,4(fp)
 101661c:	89800017 	ldw	r6,0(r17)
 1016620:	89c00117 	ldw	r7,4(r17)
 1016624:	180b883a 	mov	r5,r3
 1016628:	1009883a 	mov	r4,r2
 101662c:	1012a940 	call	1012a94 <__muldf3>
 1016630:	e0c00115 	stw	r3,4(fp)
 1016634:	e0800015 	stw	r2,0(fp)
 1016638:	8021d07a 	srai	r16,r16,1
 101663c:	94800044 	addi	r18,r18,1
 1016640:	8c400204 	addi	r17,r17,8
 1016644:	bc3ff016 	blt	r23,r16,1016608 <_strtod_r+0x6e4>
 1016648:	900e90fa 	slli	r7,r18,3
 101664c:	018040f4 	movhi	r6,259
 1016650:	3194b504 	addi	r6,r6,21204
 1016654:	e2000117 	ldw	r8,4(fp)
 1016658:	398f883a 	add	r7,r7,r6
 101665c:	38800017 	ldw	r2,0(r7)
 1016660:	38c00117 	ldw	r3,4(r7)
 1016664:	e1000017 	ldw	r4,0(fp)
 1016668:	01bf2c34 	movhi	r6,64688
 101666c:	418d883a 	add	r6,r8,r6
 1016670:	300b883a 	mov	r5,r6
 1016674:	180f883a 	mov	r7,r3
 1016678:	100d883a 	mov	r6,r2
 101667c:	1012a940 	call	1012a94 <__muldf3>
 1016680:	1009883a 	mov	r4,r2
 1016684:	180b883a 	mov	r5,r3
 1016688:	199ffc2c 	andhi	r6,r3,32752
 101668c:	009f2834 	movhi	r2,31904
 1016690:	e1000015 	stw	r4,0(fp)
 1016694:	e1400115 	stw	r5,4(fp)
 1016698:	1181d136 	bltu	r2,r6,1016de0 <_strtod_r+0xebc>
 101669c:	009f2434 	movhi	r2,31888
 10166a0:	1183202e 	bgeu	r2,r6,1017324 <_strtod_r+0x1400>
 10166a4:	d8001415 	stw	zero,80(sp)
 10166a8:	019ffc34 	movhi	r6,32752
 10166ac:	31bfffc4 	addi	r6,r6,-1
 10166b0:	01ffffc4 	movi	r7,-1
 10166b4:	e1800115 	stw	r6,4(fp)
 10166b8:	e1c00015 	stw	r7,0(fp)
 10166bc:	00002506 	br	1016754 <_strtod_r+0x830>
 10166c0:	00800c04 	movi	r2,48
 10166c4:	2083151e 	bne	r4,r2,101731c <_strtod_r+0x13f8>
 10166c8:	2005883a 	mov	r2,r4
 10166cc:	000f883a 	mov	r7,zero
 10166d0:	42000044 	addi	r8,r8,1
 10166d4:	da000415 	stw	r8,16(sp)
 10166d8:	41000007 	ldb	r4,0(r8)
 10166dc:	39c00044 	addi	r7,r7,1
 10166e0:	20bffb26 	beq	r4,r2,10166d0 <_strtod_r+0x7ac>
 10166e4:	20fff3c4 	addi	r3,r4,-49
 10166e8:	00800204 	movi	r2,8
 10166ec:	10c1b836 	bltu	r2,r3,1016dd0 <_strtod_r+0xeac>
 10166f0:	dd800417 	ldw	r22,16(sp)
 10166f4:	3815883a 	mov	r10,r7
 10166f8:	227ff404 	addi	r9,r4,-48
 10166fc:	b011883a 	mov	r8,r22
 1016700:	0027883a 	mov	r19,zero
 1016704:	01c00044 	movi	r7,1
 1016708:	4801fe26 	beq	r9,zero,1016f04 <_strtod_r+0xfe0>
 101670c:	00800044 	movi	r2,1
 1016710:	51d5883a 	add	r10,r10,r7
 1016714:	11c31f0e 	bge	r2,r7,1017394 <_strtod_r+0x1470>
 1016718:	1009883a 	mov	r4,r2
 101671c:	9807883a 	mov	r3,r19
 1016720:	02c00204 	movi	r11,8
 1016724:	03000404 	movi	r12,16
 1016728:	00000306 	br	1016738 <_strtod_r+0x814>
 101672c:	a50002a4 	muli	r20,r20,10
 1016730:	21000044 	addi	r4,r4,1
 1016734:	21c1eb26 	beq	r4,r7,1016ee4 <_strtod_r+0xfc0>
 1016738:	18c00044 	addi	r3,r3,1
 101673c:	18bfffc4 	addi	r2,r3,-1
 1016740:	58bffa0e 	bge	r11,r2,101672c <_strtod_r+0x808>
 1016744:	60fffa16 	blt	r12,r3,1016730 <_strtod_r+0x80c>
 1016748:	840002a4 	muli	r16,r16,10
 101674c:	003ff806 	br	1016730 <_strtod_r+0x80c>
 1016750:	d8001415 	stw	zero,80(sp)
 1016754:	d9801217 	ldw	r6,72(sp)
 1016758:	a809883a 	mov	r4,r21
 101675c:	b00b883a 	mov	r5,r22
 1016760:	980f883a 	mov	r7,r19
 1016764:	dd000015 	stw	r20,0(sp)
 1016768:	101ddd00 	call	101ddd0 <__s2b>
 101676c:	d9800f17 	ldw	r6,60(sp)
 1016770:	11000304 	addi	r4,r2,12
 1016774:	d8801015 	stw	r2,64(sp)
 1016778:	300c803a 	cmplt	r6,r6,zero
 101677c:	d9001715 	stw	r4,92(sp)
 1016780:	d9801615 	stw	r6,88(sp)
 1016784:	d8801017 	ldw	r2,64(sp)
 1016788:	a809883a 	mov	r4,r21
 101678c:	11400117 	ldw	r5,4(r2)
 1016790:	101d47c0 	call	101d47c <_Balloc>
 1016794:	d8c01017 	ldw	r3,64(sp)
 1016798:	d9401717 	ldw	r5,92(sp)
 101679c:	11000304 	addi	r4,r2,12
 10167a0:	19800417 	ldw	r6,16(r3)
 10167a4:	102f883a 	mov	r23,r2
 10167a8:	318d883a 	add	r6,r6,r6
 10167ac:	318d883a 	add	r6,r6,r6
 10167b0:	31800204 	addi	r6,r6,8
 10167b4:	10152740 	call	1015274 <memcpy>
 10167b8:	e2000017 	ldw	r8,0(fp)
 10167bc:	e2400117 	ldw	r9,4(fp)
 10167c0:	d9800304 	addi	r6,sp,12
 10167c4:	400b883a 	mov	r5,r8
 10167c8:	a809883a 	mov	r4,r21
 10167cc:	d9c00204 	addi	r7,sp,8
 10167d0:	d9800015 	stw	r6,0(sp)
 10167d4:	480d883a 	mov	r6,r9
 10167d8:	101d5380 	call	101d538 <__d2b>
 10167dc:	a809883a 	mov	r4,r21
 10167e0:	01400044 	movi	r5,1
 10167e4:	d8800515 	stw	r2,20(sp)
 10167e8:	101db740 	call	101db74 <__i2b>
 10167ec:	102d883a 	mov	r22,r2
 10167f0:	d8801617 	ldw	r2,88(sp)
 10167f4:	1001051e 	bne	r2,zero,1016c0c <_strtod_r+0xce8>
 10167f8:	dd000f17 	ldw	r20,60(sp)
 10167fc:	000f883a 	mov	r7,zero
 1016800:	0013883a 	mov	r9,zero
 1016804:	a011883a 	mov	r8,r20
 1016808:	d8800217 	ldw	r2,8(sp)
 101680c:	1000fd16 	blt	r2,zero,1016c04 <_strtod_r+0xce0>
 1016810:	388f883a 	add	r7,r7,r2
 1016814:	d9801417 	ldw	r6,80(sp)
 1016818:	d9400317 	ldw	r5,12(sp)
 101681c:	00ff0084 	movi	r3,-1022
 1016820:	1189c83a 	sub	r4,r2,r6
 1016824:	2145883a 	add	r2,r4,r5
 1016828:	10bfffc4 	addi	r2,r2,-1
 101682c:	10c09f0e 	bge	r2,r3,1016aac <_strtod_r+0xb88>
 1016830:	21810cc4 	addi	r6,r4,1075
 1016834:	d8c01417 	ldw	r3,80(sp)
 1016838:	4185883a 	add	r2,r8,r6
 101683c:	39a1883a 	add	r16,r7,r6
 1016840:	18a5883a 	add	r18,r3,r2
 1016844:	3807883a 	mov	r3,r7
 1016848:	81c0010e 	bge	r16,r7,1016850 <_strtod_r+0x92c>
 101684c:	8007883a 	mov	r3,r16
 1016850:	9005883a 	mov	r2,r18
 1016854:	1c80010e 	bge	r3,r18,101685c <_strtod_r+0x938>
 1016858:	1805883a 	mov	r2,r3
 101685c:	0080e70e 	bge	zero,r2,1016bfc <_strtod_r+0xcd8>
 1016860:	38a7c83a 	sub	r19,r7,r2
 1016864:	80a1c83a 	sub	r16,r16,r2
 1016868:	90a5c83a 	sub	r18,r18,r2
 101686c:	02400e0e 	bge	zero,r9,10168a8 <_strtod_r+0x984>
 1016870:	480d883a 	mov	r6,r9
 1016874:	b00b883a 	mov	r5,r22
 1016878:	a809883a 	mov	r4,r21
 101687c:	101dcb00 	call	101dcb0 <__pow5mult>
 1016880:	d9800517 	ldw	r6,20(sp)
 1016884:	a809883a 	mov	r4,r21
 1016888:	100b883a 	mov	r5,r2
 101688c:	102d883a 	mov	r22,r2
 1016890:	101d98c0 	call	101d98c <__multiply>
 1016894:	d9400517 	ldw	r5,20(sp)
 1016898:	1023883a 	mov	r17,r2
 101689c:	a809883a 	mov	r4,r21
 10168a0:	101cefc0 	call	101cefc <_Bfree>
 10168a4:	dc400515 	stw	r17,20(sp)
 10168a8:	0400050e 	bge	zero,r16,10168c0 <_strtod_r+0x99c>
 10168ac:	d9400517 	ldw	r5,20(sp)
 10168b0:	800d883a 	mov	r6,r16
 10168b4:	a809883a 	mov	r4,r21
 10168b8:	101d8400 	call	101d840 <__lshift>
 10168bc:	d8800515 	stw	r2,20(sp)
 10168c0:	a000741e 	bne	r20,zero,1016a94 <_strtod_r+0xb70>
 10168c4:	0480050e 	bge	zero,r18,10168dc <_strtod_r+0x9b8>
 10168c8:	b80b883a 	mov	r5,r23
 10168cc:	900d883a 	mov	r6,r18
 10168d0:	a809883a 	mov	r4,r21
 10168d4:	101d8400 	call	101d840 <__lshift>
 10168d8:	102f883a 	mov	r23,r2
 10168dc:	04c0050e 	bge	zero,r19,10168f4 <_strtod_r+0x9d0>
 10168e0:	b00b883a 	mov	r5,r22
 10168e4:	980d883a 	mov	r6,r19
 10168e8:	a809883a 	mov	r4,r21
 10168ec:	101d8400 	call	101d840 <__lshift>
 10168f0:	102d883a 	mov	r22,r2
 10168f4:	d9400517 	ldw	r5,20(sp)
 10168f8:	a809883a 	mov	r4,r21
 10168fc:	b80d883a 	mov	r6,r23
 1016900:	101d6b40 	call	101d6b4 <__mdiff>
 1016904:	11000317 	ldw	r4,12(r2)
 1016908:	b00b883a 	mov	r5,r22
 101690c:	10000315 	stw	zero,12(r2)
 1016910:	d9001315 	stw	r4,76(sp)
 1016914:	1009883a 	mov	r4,r2
 1016918:	1029883a 	mov	r20,r2
 101691c:	101d0580 	call	101d058 <__mcmp>
 1016920:	10017c16 	blt	r2,zero,1016f14 <_strtod_r+0xff0>
 1016924:	1001af26 	beq	r2,zero,1016fe4 <_strtod_r+0x10c0>
 1016928:	a009883a 	mov	r4,r20
 101692c:	b00b883a 	mov	r5,r22
 1016930:	101d2580 	call	101d258 <__ratio>
 1016934:	0011883a 	mov	r8,zero
 1016938:	02500034 	movhi	r9,16384
 101693c:	480f883a 	mov	r7,r9
 1016940:	1009883a 	mov	r4,r2
 1016944:	180b883a 	mov	r5,r3
 1016948:	400d883a 	mov	r6,r8
 101694c:	1021883a 	mov	r16,r2
 1016950:	1823883a 	mov	r17,r3
 1016954:	1020c180 	call	1020c18 <__ledf2>
 1016958:	00805716 	blt	zero,r2,1016ab8 <_strtod_r+0xb94>
 101695c:	d9801317 	ldw	r6,76(sp)
 1016960:	3025003a 	cmpeq	r18,r6,zero
 1016964:	90008b1e 	bne	r18,zero,1016b94 <_strtod_r+0xc70>
 1016968:	008ffc34 	movhi	r2,16368
 101696c:	0021883a 	mov	r16,zero
 1016970:	1023883a 	mov	r17,r2
 1016974:	d8000715 	stw	zero,28(sp)
 1016978:	d8800815 	stw	r2,32(sp)
 101697c:	e1c00117 	ldw	r7,4(fp)
 1016980:	009ff834 	movhi	r2,32736
 1016984:	3cdffc2c 	andhi	r19,r7,32752
 1016988:	98805e26 	beq	r19,r2,1016b04 <_strtod_r+0xbe0>
 101698c:	d8801417 	ldw	r2,80(sp)
 1016990:	10001b26 	beq	r2,zero,1016a00 <_strtod_r+0xadc>
 1016994:	0081a834 	movhi	r2,1696
 1016998:	14c01936 	bltu	r2,r19,1016a00 <_strtod_r+0xadc>
 101699c:	00bff034 	movhi	r2,65472
 10169a0:	00d07834 	movhi	r3,16864
 10169a4:	18ffffc4 	addi	r3,r3,-1
 10169a8:	180f883a 	mov	r7,r3
 10169ac:	8009883a 	mov	r4,r16
 10169b0:	880b883a 	mov	r5,r17
 10169b4:	100d883a 	mov	r6,r2
 10169b8:	1020c180 	call	1020c18 <__ledf2>
 10169bc:	00800b16 	blt	zero,r2,10169ec <_strtod_r+0xac8>
 10169c0:	880b883a 	mov	r5,r17
 10169c4:	8009883a 	mov	r4,r16
 10169c8:	101fdf80 	call	101fdf8 <__fixunsdfsi>
 10169cc:	1000df1e 	bne	r2,zero,1016d4c <_strtod_r+0xe28>
 10169d0:	0021883a 	mov	r16,zero
 10169d4:	044ffc34 	movhi	r17,16368
 10169d8:	9000d91e 	bne	r18,zero,1016d40 <_strtod_r+0xe1c>
 10169dc:	8005883a 	mov	r2,r16
 10169e0:	8807883a 	mov	r3,r17
 10169e4:	d8c00815 	stw	r3,32(sp)
 10169e8:	d8800715 	stw	r2,28(sp)
 10169ec:	d8800817 	ldw	r2,32(sp)
 10169f0:	00c1ac34 	movhi	r3,1712
 10169f4:	14c5c83a 	sub	r2,r2,r19
 10169f8:	10c5883a 	add	r2,r2,r3
 10169fc:	d8800815 	stw	r2,32(sp)
 1016a00:	e0800017 	ldw	r2,0(fp)
 1016a04:	e0c00117 	ldw	r3,4(fp)
 1016a08:	1009883a 	mov	r4,r2
 1016a0c:	180b883a 	mov	r5,r3
 1016a10:	101d0b80 	call	101d0b8 <__ulp>
 1016a14:	d9800717 	ldw	r6,28(sp)
 1016a18:	d9c00817 	ldw	r7,32(sp)
 1016a1c:	180b883a 	mov	r5,r3
 1016a20:	1009883a 	mov	r4,r2
 1016a24:	1012a940 	call	1012a94 <__muldf3>
 1016a28:	e2000017 	ldw	r8,0(fp)
 1016a2c:	e2400117 	ldw	r9,4(fp)
 1016a30:	180b883a 	mov	r5,r3
 1016a34:	1009883a 	mov	r4,r2
 1016a38:	480f883a 	mov	r7,r9
 1016a3c:	400d883a 	mov	r6,r8
 1016a40:	1012a200 	call	1012a20 <__adddf3>
 1016a44:	e0c00115 	stw	r3,4(fp)
 1016a48:	e0800015 	stw	r2,0(fp)
 1016a4c:	d8c01417 	ldw	r3,80(sp)
 1016a50:	e4800117 	ldw	r18,4(fp)
 1016a54:	1800021e 	bne	r3,zero,1016a60 <_strtod_r+0xb3c>
 1016a58:	909ffc2c 	andhi	r2,r18,32752
 1016a5c:	98807b26 	beq	r19,r2,1016c4c <_strtod_r+0xd28>
 1016a60:	d9400517 	ldw	r5,20(sp)
 1016a64:	a809883a 	mov	r4,r21
 1016a68:	101cefc0 	call	101cefc <_Bfree>
 1016a6c:	a809883a 	mov	r4,r21
 1016a70:	b80b883a 	mov	r5,r23
 1016a74:	101cefc0 	call	101cefc <_Bfree>
 1016a78:	a809883a 	mov	r4,r21
 1016a7c:	b00b883a 	mov	r5,r22
 1016a80:	101cefc0 	call	101cefc <_Bfree>
 1016a84:	a809883a 	mov	r4,r21
 1016a88:	a00b883a 	mov	r5,r20
 1016a8c:	101cefc0 	call	101cefc <_Bfree>
 1016a90:	003f3c06 	br	1016784 <_strtod_r+0x860>
 1016a94:	b80b883a 	mov	r5,r23
 1016a98:	a00d883a 	mov	r6,r20
 1016a9c:	a809883a 	mov	r4,r21
 1016aa0:	101dcb00 	call	101dcb0 <__pow5mult>
 1016aa4:	102f883a 	mov	r23,r2
 1016aa8:	003f8606 	br	10168c4 <_strtod_r+0x9a0>
 1016aac:	00800d84 	movi	r2,54
 1016ab0:	114dc83a 	sub	r6,r2,r5
 1016ab4:	003f5f06 	br	1016834 <_strtod_r+0x910>
 1016ab8:	0005883a 	mov	r2,zero
 1016abc:	00cff834 	movhi	r3,16352
 1016ac0:	880b883a 	mov	r5,r17
 1016ac4:	8009883a 	mov	r4,r16
 1016ac8:	100d883a 	mov	r6,r2
 1016acc:	180f883a 	mov	r7,r3
 1016ad0:	1012a940 	call	1012a94 <__muldf3>
 1016ad4:	d9801317 	ldw	r6,76(sp)
 1016ad8:	1021883a 	mov	r16,r2
 1016adc:	1823883a 	mov	r17,r3
 1016ae0:	3025003a 	cmpeq	r18,r6,zero
 1016ae4:	90000126 	beq	r18,zero,1016aec <_strtod_r+0xbc8>
 1016ae8:	18e0003c 	xorhi	r3,r3,32768
 1016aec:	d8800715 	stw	r2,28(sp)
 1016af0:	d8c00815 	stw	r3,32(sp)
 1016af4:	e1c00117 	ldw	r7,4(fp)
 1016af8:	009ff834 	movhi	r2,32736
 1016afc:	3cdffc2c 	andhi	r19,r7,32752
 1016b00:	98bfa21e 	bne	r19,r2,101698c <_strtod_r+0xa68>
 1016b04:	e1000017 	ldw	r4,0(fp)
 1016b08:	01bf2c34 	movhi	r6,64688
 1016b0c:	398d883a 	add	r6,r7,r6
 1016b10:	d9000b15 	stw	r4,44(sp)
 1016b14:	d9c00c15 	stw	r7,48(sp)
 1016b18:	300b883a 	mov	r5,r6
 1016b1c:	e1800115 	stw	r6,4(fp)
 1016b20:	101d0b80 	call	101d0b8 <__ulp>
 1016b24:	d9800717 	ldw	r6,28(sp)
 1016b28:	d9c00817 	ldw	r7,32(sp)
 1016b2c:	180b883a 	mov	r5,r3
 1016b30:	1009883a 	mov	r4,r2
 1016b34:	1012a940 	call	1012a94 <__muldf3>
 1016b38:	e2000017 	ldw	r8,0(fp)
 1016b3c:	e2400117 	ldw	r9,4(fp)
 1016b40:	180b883a 	mov	r5,r3
 1016b44:	1009883a 	mov	r4,r2
 1016b48:	480f883a 	mov	r7,r9
 1016b4c:	400d883a 	mov	r6,r8
 1016b50:	1012a200 	call	1012a20 <__adddf3>
 1016b54:	1009883a 	mov	r4,r2
 1016b58:	180b883a 	mov	r5,r3
 1016b5c:	009f2834 	movhi	r2,31904
 1016b60:	10bfffc4 	addi	r2,r2,-1
 1016b64:	18dffc2c 	andhi	r3,r3,32752
 1016b68:	e1000015 	stw	r4,0(fp)
 1016b6c:	e1400115 	stw	r5,4(fp)
 1016b70:	10c06f2e 	bgeu	r2,r3,1016d30 <_strtod_r+0xe0c>
 1016b74:	d8800c17 	ldw	r2,48(sp)
 1016b78:	011ffc34 	movhi	r4,32752
 1016b7c:	213fffc4 	addi	r4,r4,-1
 1016b80:	11007a26 	beq	r2,r4,1016d6c <_strtod_r+0xe48>
 1016b84:	01ffffc4 	movi	r7,-1
 1016b88:	e1000115 	stw	r4,4(fp)
 1016b8c:	e1c00015 	stw	r7,0(fp)
 1016b90:	003fb306 	br	1016a60 <_strtod_r+0xb3c>
 1016b94:	e0c00017 	ldw	r3,0(fp)
 1016b98:	1800221e 	bne	r3,zero,1016c24 <_strtod_r+0xd00>
 1016b9c:	e0800117 	ldw	r2,4(fp)
 1016ba0:	00c00434 	movhi	r3,16
 1016ba4:	18ffffc4 	addi	r3,r3,-1
 1016ba8:	10c4703a 	and	r2,r2,r3
 1016bac:	1000211e 	bne	r2,zero,1016c34 <_strtod_r+0xd10>
 1016bb0:	0005883a 	mov	r2,zero
 1016bb4:	00cffc34 	movhi	r3,16368
 1016bb8:	180f883a 	mov	r7,r3
 1016bbc:	8009883a 	mov	r4,r16
 1016bc0:	880b883a 	mov	r5,r17
 1016bc4:	100d883a 	mov	r6,r2
 1016bc8:	10132480 	call	1013248 <__ltdf2>
 1016bcc:	10013c16 	blt	r2,zero,10170c0 <_strtod_r+0x119c>
 1016bd0:	0005883a 	mov	r2,zero
 1016bd4:	00cff834 	movhi	r3,16352
 1016bd8:	880b883a 	mov	r5,r17
 1016bdc:	8009883a 	mov	r4,r16
 1016be0:	180f883a 	mov	r7,r3
 1016be4:	100d883a 	mov	r6,r2
 1016be8:	1012a940 	call	1012a94 <__muldf3>
 1016bec:	1823883a 	mov	r17,r3
 1016bf0:	1021883a 	mov	r16,r2
 1016bf4:	18e0003c 	xorhi	r3,r3,32768
 1016bf8:	003fbc06 	br	1016aec <_strtod_r+0xbc8>
 1016bfc:	3827883a 	mov	r19,r7
 1016c00:	003f1a06 	br	101686c <_strtod_r+0x948>
 1016c04:	4091c83a 	sub	r8,r8,r2
 1016c08:	003f0206 	br	1016814 <_strtod_r+0x8f0>
 1016c0c:	d8c00f17 	ldw	r3,60(sp)
 1016c10:	0011883a 	mov	r8,zero
 1016c14:	0029883a 	mov	r20,zero
 1016c18:	00d3c83a 	sub	r9,zero,r3
 1016c1c:	480f883a 	mov	r7,r9
 1016c20:	003ef906 	br	1016808 <_strtod_r+0x8e4>
 1016c24:	00800044 	movi	r2,1
 1016c28:	1880021e 	bne	r3,r2,1016c34 <_strtod_r+0xd10>
 1016c2c:	e0800117 	ldw	r2,4(fp)
 1016c30:	1000a526 	beq	r2,zero,1016ec8 <_strtod_r+0xfa4>
 1016c34:	00affc34 	movhi	r2,49136
 1016c38:	0021883a 	mov	r16,zero
 1016c3c:	044ffc34 	movhi	r17,16368
 1016c40:	d8800815 	stw	r2,32(sp)
 1016c44:	d8000715 	stw	zero,28(sp)
 1016c48:	003f4c06 	br	101697c <_strtod_r+0xa58>
 1016c4c:	880b883a 	mov	r5,r17
 1016c50:	8009883a 	mov	r4,r16
 1016c54:	10133c80 	call	10133c8 <__fixdfsi>
 1016c58:	1009883a 	mov	r4,r2
 1016c5c:	10132d00 	call	10132d0 <__floatsidf>
 1016c60:	880b883a 	mov	r5,r17
 1016c64:	8009883a 	mov	r4,r16
 1016c68:	100d883a 	mov	r6,r2
 1016c6c:	180f883a 	mov	r7,r3
 1016c70:	10129a00 	call	10129a0 <__subdf3>
 1016c74:	d9001317 	ldw	r4,76(sp)
 1016c78:	100b883a 	mov	r5,r2
 1016c7c:	180d883a 	mov	r6,r3
 1016c80:	1021883a 	mov	r16,r2
 1016c84:	1823883a 	mov	r17,r3
 1016c88:	2000061e 	bne	r4,zero,1016ca4 <_strtod_r+0xd80>
 1016c8c:	e0800017 	ldw	r2,0(fp)
 1016c90:	1000041e 	bne	r2,zero,1016ca4 <_strtod_r+0xd80>
 1016c94:	00c00434 	movhi	r3,16
 1016c98:	18ffffc4 	addi	r3,r3,-1
 1016c9c:	90c4703a 	and	r2,r18,r3
 1016ca0:	10004026 	beq	r2,zero,1016da4 <_strtod_r+0xe80>
 1016ca4:	00a52834 	movhi	r2,38048
 1016ca8:	108d6544 	addi	r2,r2,13717
 1016cac:	00cff834 	movhi	r3,16352
 1016cb0:	18ffffc4 	addi	r3,r3,-1
 1016cb4:	180f883a 	mov	r7,r3
 1016cb8:	8009883a 	mov	r4,r16
 1016cbc:	880b883a 	mov	r5,r17
 1016cc0:	100d883a 	mov	r6,r2
 1016cc4:	10132480 	call	1013248 <__ltdf2>
 1016cc8:	10000916 	blt	r2,zero,1016cf0 <_strtod_r+0xdcc>
 1016ccc:	008d6c34 	movhi	r2,13744
 1016cd0:	10b94d44 	addi	r2,r2,-6859
 1016cd4:	00cff834 	movhi	r3,16352
 1016cd8:	880b883a 	mov	r5,r17
 1016cdc:	180f883a 	mov	r7,r3
 1016ce0:	8009883a 	mov	r4,r16
 1016ce4:	100d883a 	mov	r6,r2
 1016ce8:	10131380 	call	1013138 <__gtdf2>
 1016cec:	00bf5c0e 	bge	zero,r2,1016a60 <_strtod_r+0xb3c>
 1016cf0:	d9400517 	ldw	r5,20(sp)
 1016cf4:	a809883a 	mov	r4,r21
 1016cf8:	101cefc0 	call	101cefc <_Bfree>
 1016cfc:	a809883a 	mov	r4,r21
 1016d00:	b80b883a 	mov	r5,r23
 1016d04:	101cefc0 	call	101cefc <_Bfree>
 1016d08:	a809883a 	mov	r4,r21
 1016d0c:	b00b883a 	mov	r5,r22
 1016d10:	101cefc0 	call	101cefc <_Bfree>
 1016d14:	d9401017 	ldw	r5,64(sp)
 1016d18:	a809883a 	mov	r4,r21
 1016d1c:	101cefc0 	call	101cefc <_Bfree>
 1016d20:	a809883a 	mov	r4,r21
 1016d24:	a00b883a 	mov	r5,r20
 1016d28:	101cefc0 	call	101cefc <_Bfree>
 1016d2c:	003cf406 	br	1016100 <_strtod_r+0x1dc>
 1016d30:	0080d434 	movhi	r2,848
 1016d34:	288d883a 	add	r6,r5,r2
 1016d38:	e1800115 	stw	r6,4(fp)
 1016d3c:	003f4306 	br	1016a4c <_strtod_r+0xb28>
 1016d40:	8005883a 	mov	r2,r16
 1016d44:	88e0003c 	xorhi	r3,r17,32768
 1016d48:	003f2606 	br	10169e4 <_strtod_r+0xac0>
 1016d4c:	1009883a 	mov	r4,r2
 1016d50:	1020d140 	call	1020d14 <__floatunsidf>
 1016d54:	1021883a 	mov	r16,r2
 1016d58:	1823883a 	mov	r17,r3
 1016d5c:	003f1e06 	br	10169d8 <_strtod_r+0xab4>
 1016d60:	da000417 	ldw	r8,16(sp)
 1016d64:	39c00044 	addi	r7,r7,1
 1016d68:	003e6706 	br	1016708 <_strtod_r+0x7e4>
 1016d6c:	d8c00b17 	ldw	r3,44(sp)
 1016d70:	00bfffc4 	movi	r2,-1
 1016d74:	18bf831e 	bne	r3,r2,1016b84 <_strtod_r+0xc60>
 1016d78:	00c00884 	movi	r3,34
 1016d7c:	a8c00015 	stw	r3,0(r21)
 1016d80:	009ffc34 	movhi	r2,32752
 1016d84:	e0800115 	stw	r2,4(fp)
 1016d88:	e0000015 	stw	zero,0(fp)
 1016d8c:	003fd806 	br	1016cf0 <_strtod_r+0xdcc>
 1016d90:	4007883a 	mov	r3,r8
 1016d94:	000d883a 	mov	r6,zero
 1016d98:	0029883a 	mov	r20,zero
 1016d9c:	0021883a 	mov	r16,zero
 1016da0:	003cc906 	br	10160c8 <_strtod_r+0x1a4>
 1016da4:	00a52834 	movhi	r2,38048
 1016da8:	108d6544 	addi	r2,r2,13717
 1016dac:	00cff434 	movhi	r3,16336
 1016db0:	18ffffc4 	addi	r3,r3,-1
 1016db4:	2809883a 	mov	r4,r5
 1016db8:	180f883a 	mov	r7,r3
 1016dbc:	300b883a 	mov	r5,r6
 1016dc0:	100d883a 	mov	r6,r2
 1016dc4:	10132480 	call	1013248 <__ltdf2>
 1016dc8:	103f250e 	bge	r2,zero,1016a60 <_strtod_r+0xb3c>
 1016dcc:	003fc806 	br	1016cf0 <_strtod_r+0xdcc>
 1016dd0:	0027883a 	mov	r19,zero
 1016dd4:	04800044 	movi	r18,1
 1016dd8:	0015883a 	mov	r10,zero
 1016ddc:	003cc006 	br	10160e0 <_strtod_r+0x1bc>
 1016de0:	00800884 	movi	r2,34
 1016de4:	a8800015 	stw	r2,0(r21)
 1016de8:	019ffc34 	movhi	r6,32752
 1016dec:	e1800115 	stw	r6,4(fp)
 1016df0:	e0000015 	stw	zero,0(fp)
 1016df4:	003cc206 	br	1016100 <_strtod_r+0x1dc>
 1016df8:	015387c4 	movi	r5,19999
 1016dfc:	003d1e06 	br	1016278 <_strtod_r+0x354>
 1016e00:	300a90fa 	slli	r5,r6,3
 1016e04:	e0800017 	ldw	r2,0(fp)
 1016e08:	e0c00117 	ldw	r3,4(fp)
 1016e0c:	010040f4 	movhi	r4,259
 1016e10:	21148304 	addi	r4,r4,21004
 1016e14:	290b883a 	add	r5,r5,r4
 1016e18:	2a000017 	ldw	r8,0(r5)
 1016e1c:	2a400117 	ldw	r9,4(r5)
 1016e20:	1009883a 	mov	r4,r2
 1016e24:	180b883a 	mov	r5,r3
 1016e28:	480f883a 	mov	r7,r9
 1016e2c:	400d883a 	mov	r6,r8
 1016e30:	1012a940 	call	1012a94 <__muldf3>
 1016e34:	e0c00115 	stw	r3,4(fp)
 1016e38:	e0800015 	stw	r2,0(fp)
 1016e3c:	003cb006 	br	1016100 <_strtod_r+0x1dc>
 1016e40:	d8800d17 	ldw	r2,52(sp)
 1016e44:	e0800015 	stw	r2,0(fp)
 1016e48:	d8c00e17 	ldw	r3,56(sp)
 1016e4c:	e0c00115 	stw	r3,4(fp)
 1016e50:	9880020c 	andi	r2,r19,8
 1016e54:	103caa26 	beq	r2,zero,1016100 <_strtod_r+0x1dc>
 1016e58:	e0800117 	ldw	r2,4(fp)
 1016e5c:	10a00034 	orhi	r2,r2,32768
 1016e60:	e0800115 	stw	r2,4(fp)
 1016e64:	003ca606 	br	1016100 <_strtod_r+0x1dc>
 1016e68:	009ffc34 	movhi	r2,32752
 1016e6c:	e0800115 	stw	r2,4(fp)
 1016e70:	e0000015 	stw	zero,0(fp)
 1016e74:	003ff606 	br	1016e50 <_strtod_r+0xf2c>
 1016e78:	00a00034 	movhi	r2,32768
 1016e7c:	10bfffc4 	addi	r2,r2,-1
 1016e80:	00ffffc4 	movi	r3,-1
 1016e84:	e0800115 	stw	r2,4(fp)
 1016e88:	e0c00015 	stw	r3,0(fp)
 1016e8c:	003ff006 	br	1016e50 <_strtod_r+0xf2c>
 1016e90:	e0000115 	stw	zero,4(fp)
 1016e94:	e0000015 	stw	zero,0(fp)
 1016e98:	003fed06 	br	1016e50 <_strtod_r+0xf2c>
 1016e9c:	d8800e17 	ldw	r2,56(sp)
 1016ea0:	29010cc4 	addi	r4,r5,1075
 1016ea4:	00fffc34 	movhi	r3,65520
 1016ea8:	18ffffc4 	addi	r3,r3,-1
 1016eac:	2008953a 	slli	r4,r4,20
 1016eb0:	10c4703a 	and	r2,r2,r3
 1016eb4:	d8c00d17 	ldw	r3,52(sp)
 1016eb8:	1104b03a 	or	r2,r2,r4
 1016ebc:	e0800115 	stw	r2,4(fp)
 1016ec0:	e0c00015 	stw	r3,0(fp)
 1016ec4:	003fe206 	br	1016e50 <_strtod_r+0xf2c>
 1016ec8:	00800884 	movi	r2,34
 1016ecc:	a8800015 	stw	r2,0(r21)
 1016ed0:	e0000015 	stw	zero,0(fp)
 1016ed4:	e0000115 	stw	zero,4(fp)
 1016ed8:	003f8506 	br	1016cf0 <_strtod_r+0xdcc>
 1016edc:	03800044 	movi	r14,1
 1016ee0:	003d7706 	br	10164c0 <_strtod_r+0x59c>
 1016ee4:	99c5883a 	add	r2,r19,r7
 1016ee8:	11ffffc4 	addi	r7,r2,-1
 1016eec:	00800204 	movi	r2,8
 1016ef0:	3cc00044 	addi	r19,r7,1
 1016ef4:	11c0df16 	blt	r2,r7,1017274 <_strtod_r+0x1350>
 1016ef8:	a08002a4 	muli	r2,r20,10
 1016efc:	000f883a 	mov	r7,zero
 1016f00:	1269883a 	add	r20,r2,r9
 1016f04:	42000044 	addi	r8,r8,1
 1016f08:	da000415 	stw	r8,16(sp)
 1016f0c:	41000007 	ldb	r4,0(r8)
 1016f10:	003d3706 	br	10163f0 <_strtod_r+0x4cc>
 1016f14:	d9801317 	ldw	r6,76(sp)
 1016f18:	3000511e 	bne	r6,zero,1017060 <_strtod_r+0x113c>
 1016f1c:	e0800017 	ldw	r2,0(fp)
 1016f20:	1000d81e 	bne	r2,zero,1017284 <_strtod_r+0x1360>
 1016f24:	e0c00117 	ldw	r3,4(fp)
 1016f28:	01000434 	movhi	r4,16
 1016f2c:	213fffc4 	addi	r4,r4,-1
 1016f30:	1904703a 	and	r2,r3,r4
 1016f34:	1000b01e 	bne	r2,zero,10171f8 <_strtod_r+0x12d4>
 1016f38:	18dffc2c 	andhi	r3,r3,32752
 1016f3c:	0081ac34 	movhi	r2,1712
 1016f40:	10c1102e 	bgeu	r2,r3,1017384 <_strtod_r+0x1460>
 1016f44:	a0800517 	ldw	r2,20(r20)
 1016f48:	1000031e 	bne	r2,zero,1016f58 <_strtod_r+0x1034>
 1016f4c:	a0c00417 	ldw	r3,16(r20)
 1016f50:	00800044 	movi	r2,1
 1016f54:	10c0420e 	bge	r2,r3,1017060 <_strtod_r+0x113c>
 1016f58:	a00b883a 	mov	r5,r20
 1016f5c:	a809883a 	mov	r4,r21
 1016f60:	01800044 	movi	r6,1
 1016f64:	101d8400 	call	101d840 <__lshift>
 1016f68:	1009883a 	mov	r4,r2
 1016f6c:	b00b883a 	mov	r5,r22
 1016f70:	1029883a 	mov	r20,r2
 1016f74:	101d0580 	call	101d058 <__mcmp>
 1016f78:	0080c20e 	bge	zero,r2,1017284 <_strtod_r+0x1360>
 1016f7c:	e1800117 	ldw	r6,4(fp)
 1016f80:	d9001417 	ldw	r4,80(sp)
 1016f84:	2013003a 	cmpeq	r9,r4,zero
 1016f88:	4800ef1e 	bne	r9,zero,1017348 <_strtod_r+0x1424>
 1016f8c:	30dffc2c 	andhi	r3,r6,32752
 1016f90:	0081ac34 	movhi	r2,1712
 1016f94:	10c0ec36 	bltu	r2,r3,1017348 <_strtod_r+0x1424>
 1016f98:	0080dc34 	movhi	r2,880
 1016f9c:	10ffca2e 	bgeu	r2,r3,1016ec8 <_strtod_r+0xfa4>
 1016fa0:	e0800017 	ldw	r2,0(fp)
 1016fa4:	e0c00117 	ldw	r3,4(fp)
 1016fa8:	020e5434 	movhi	r8,14672
 1016fac:	000d883a 	mov	r6,zero
 1016fb0:	400f883a 	mov	r7,r8
 1016fb4:	180b883a 	mov	r5,r3
 1016fb8:	1009883a 	mov	r4,r2
 1016fbc:	da000c15 	stw	r8,48(sp)
 1016fc0:	d8000b15 	stw	zero,44(sp)
 1016fc4:	1012a940 	call	1012a94 <__muldf3>
 1016fc8:	e0800015 	stw	r2,0(fp)
 1016fcc:	e0c00115 	stw	r3,4(fp)
 1016fd0:	183f471e 	bne	r3,zero,1016cf0 <_strtod_r+0xdcc>
 1016fd4:	103f461e 	bne	r2,zero,1016cf0 <_strtod_r+0xdcc>
 1016fd8:	00800884 	movi	r2,34
 1016fdc:	a8800015 	stw	r2,0(r21)
 1016fe0:	003f4306 	br	1016cf0 <_strtod_r+0xdcc>
 1016fe4:	d8801317 	ldw	r2,76(sp)
 1016fe8:	1025003a 	cmpeq	r18,r2,zero
 1016fec:	9000861e 	bne	r18,zero,1017208 <_strtod_r+0x12e4>
 1016ff0:	e1400117 	ldw	r5,4(fp)
 1016ff4:	00c00434 	movhi	r3,16
 1016ff8:	18ffffc4 	addi	r3,r3,-1
 1016ffc:	28c4703a 	and	r2,r5,r3
 1017000:	10c01b26 	beq	r2,r3,1017070 <_strtod_r+0x114c>
 1017004:	e1c00017 	ldw	r7,0(fp)
 1017008:	3880004c 	andi	r2,r7,1
 101700c:	1005003a 	cmpeq	r2,r2,zero
 1017010:	1000791e 	bne	r2,zero,10171f8 <_strtod_r+0x12d4>
 1017014:	9000b126 	beq	r18,zero,10172dc <_strtod_r+0x13b8>
 1017018:	e4400117 	ldw	r17,4(fp)
 101701c:	3809883a 	mov	r4,r7
 1017020:	3821883a 	mov	r16,r7
 1017024:	880b883a 	mov	r5,r17
 1017028:	101d0b80 	call	101d0b8 <__ulp>
 101702c:	180f883a 	mov	r7,r3
 1017030:	880b883a 	mov	r5,r17
 1017034:	8009883a 	mov	r4,r16
 1017038:	100d883a 	mov	r6,r2
 101703c:	10129a00 	call	10129a0 <__subdf3>
 1017040:	1009883a 	mov	r4,r2
 1017044:	000d883a 	mov	r6,zero
 1017048:	000f883a 	mov	r7,zero
 101704c:	180b883a 	mov	r5,r3
 1017050:	e0800015 	stw	r2,0(fp)
 1017054:	e0c00115 	stw	r3,4(fp)
 1017058:	1020b900 	call	1020b90 <__nedf2>
 101705c:	103f9a26 	beq	r2,zero,1016ec8 <_strtod_r+0xfa4>
 1017060:	d9001417 	ldw	r4,80(sp)
 1017064:	2013003a 	cmpeq	r9,r4,zero
 1017068:	483f211e 	bne	r9,zero,1016cf0 <_strtod_r+0xdcc>
 101706c:	003fcc06 	br	1016fa0 <_strtod_r+0x107c>
 1017070:	d9001417 	ldw	r4,80(sp)
 1017074:	e1c00017 	ldw	r7,0(fp)
 1017078:	2013003a 	cmpeq	r9,r4,zero
 101707c:	4800bd1e 	bne	r9,zero,1017374 <_strtod_r+0x1450>
 1017080:	28dffc2c 	andhi	r3,r5,32752
 1017084:	0081a834 	movhi	r2,1696
 1017088:	10c0ba36 	bltu	r2,r3,1017374 <_strtod_r+0x1450>
 101708c:	1804d53a 	srli	r2,r3,20
 1017090:	00c01ac4 	movi	r3,107
 1017094:	013fffc4 	movi	r4,-1
 1017098:	1887c83a 	sub	r3,r3,r2
 101709c:	20c4983a 	sll	r2,r4,r3
 10170a0:	11ffd91e 	bne	r2,r7,1017008 <_strtod_r+0x10e4>
 10170a4:	28dffc2c 	andhi	r3,r5,32752
 10170a8:	00800434 	movhi	r2,16
 10170ac:	188d883a 	add	r6,r3,r2
 10170b0:	e1800115 	stw	r6,4(fp)
 10170b4:	e0000015 	stw	zero,0(fp)
 10170b8:	483f0d1e 	bne	r9,zero,1016cf0 <_strtod_r+0xdcc>
 10170bc:	003fb806 	br	1016fa0 <_strtod_r+0x107c>
 10170c0:	0021883a 	mov	r16,zero
 10170c4:	0005883a 	mov	r2,zero
 10170c8:	044ff834 	movhi	r17,16352
 10170cc:	00eff834 	movhi	r3,49120
 10170d0:	003e8606 	br	1016aec <_strtod_r+0xbc8>
 10170d4:	803d9e26 	beq	r16,zero,1016750 <_strtod_r+0x82c>
 10170d8:	0421c83a 	sub	r16,zero,r16
 10170dc:	814003cc 	andi	r5,r16,15
 10170e0:	28000f26 	beq	r5,zero,1017120 <_strtod_r+0x11fc>
 10170e4:	280a90fa 	slli	r5,r5,3
 10170e8:	010040f4 	movhi	r4,259
 10170ec:	21148304 	addi	r4,r4,21004
 10170f0:	e0800017 	ldw	r2,0(fp)
 10170f4:	290b883a 	add	r5,r5,r4
 10170f8:	2a000017 	ldw	r8,0(r5)
 10170fc:	e0c00117 	ldw	r3,4(fp)
 1017100:	2a400117 	ldw	r9,4(r5)
 1017104:	1009883a 	mov	r4,r2
 1017108:	180b883a 	mov	r5,r3
 101710c:	480f883a 	mov	r7,r9
 1017110:	400d883a 	mov	r6,r8
 1017114:	1012e580 	call	1012e58 <__divdf3>
 1017118:	e0c00115 	stw	r3,4(fp)
 101711c:	e0800015 	stw	r2,0(fp)
 1017120:	8021d13a 	srai	r16,r16,4
 1017124:	803d8a26 	beq	r16,zero,1016750 <_strtod_r+0x82c>
 1017128:	008007c4 	movi	r2,31
 101712c:	14002d16 	blt	r2,r16,10171e4 <_strtod_r+0x12c0>
 1017130:	8080040c 	andi	r2,r16,16
 1017134:	10009926 	beq	r2,zero,101739c <_strtod_r+0x1478>
 1017138:	00801a84 	movi	r2,106
 101713c:	d8801415 	stw	r2,80(sp)
 1017140:	0400110e 	bge	zero,r16,1017188 <_strtod_r+0x1264>
 1017144:	044040f4 	movhi	r17,259
 1017148:	8c539e04 	addi	r17,r17,20088
 101714c:	8080004c 	andi	r2,r16,1
 1017150:	1005003a 	cmpeq	r2,r2,zero
 1017154:	1000091e 	bne	r2,zero,101717c <_strtod_r+0x1258>
 1017158:	e0800017 	ldw	r2,0(fp)
 101715c:	e0c00117 	ldw	r3,4(fp)
 1017160:	89800017 	ldw	r6,0(r17)
 1017164:	89c00117 	ldw	r7,4(r17)
 1017168:	180b883a 	mov	r5,r3
 101716c:	1009883a 	mov	r4,r2
 1017170:	1012a940 	call	1012a94 <__muldf3>
 1017174:	e0c00115 	stw	r3,4(fp)
 1017178:	e0800015 	stw	r2,0(fp)
 101717c:	8021d07a 	srai	r16,r16,1
 1017180:	8c400204 	addi	r17,r17,8
 1017184:	043ff116 	blt	zero,r16,101714c <_strtod_r+0x1228>
 1017188:	d8c01417 	ldw	r3,80(sp)
 101718c:	18000d26 	beq	r3,zero,10171c4 <_strtod_r+0x12a0>
 1017190:	e1000117 	ldw	r4,4(fp)
 1017194:	00c01ac4 	movi	r3,107
 1017198:	209ffc2c 	andhi	r2,r4,32752
 101719c:	1004d53a 	srli	r2,r2,20
 10171a0:	1887c83a 	sub	r3,r3,r2
 10171a4:	00c0070e 	bge	zero,r3,10171c4 <_strtod_r+0x12a0>
 10171a8:	008007c4 	movi	r2,31
 10171ac:	10c0900e 	bge	r2,r3,10173f0 <_strtod_r+0x14cc>
 10171b0:	00800d04 	movi	r2,52
 10171b4:	e0000015 	stw	zero,0(fp)
 10171b8:	10c0870e 	bge	r2,r3,10173d8 <_strtod_r+0x14b4>
 10171bc:	0180dc34 	movhi	r6,880
 10171c0:	e1800115 	stw	r6,4(fp)
 10171c4:	e0800017 	ldw	r2,0(fp)
 10171c8:	e0c00117 	ldw	r3,4(fp)
 10171cc:	000d883a 	mov	r6,zero
 10171d0:	000f883a 	mov	r7,zero
 10171d4:	180b883a 	mov	r5,r3
 10171d8:	1009883a 	mov	r4,r2
 10171dc:	1020b900 	call	1020b90 <__nedf2>
 10171e0:	103d5c1e 	bne	r2,zero,1016754 <_strtod_r+0x830>
 10171e4:	00800884 	movi	r2,34
 10171e8:	a8800015 	stw	r2,0(r21)
 10171ec:	e0000015 	stw	zero,0(fp)
 10171f0:	e0000115 	stw	zero,4(fp)
 10171f4:	003bc206 	br	1016100 <_strtod_r+0x1dc>
 10171f8:	d8801417 	ldw	r2,80(sp)
 10171fc:	1013003a 	cmpeq	r9,r2,zero
 1017200:	483ebb1e 	bne	r9,zero,1016cf0 <_strtod_r+0xdcc>
 1017204:	003f6606 	br	1016fa0 <_strtod_r+0x107c>
 1017208:	e1800117 	ldw	r6,4(fp)
 101720c:	00c00434 	movhi	r3,16
 1017210:	18ffffc4 	addi	r3,r3,-1
 1017214:	30c4703a 	and	r2,r6,r3
 1017218:	103f7a1e 	bne	r2,zero,1017004 <_strtod_r+0x10e0>
 101721c:	e1c00017 	ldw	r7,0(fp)
 1017220:	383f791e 	bne	r7,zero,1017008 <_strtod_r+0x10e4>
 1017224:	003f5606 	br	1016f80 <_strtod_r+0x105c>
 1017228:	d9800f17 	ldw	r6,60(sp)
 101722c:	00bffa84 	movi	r2,-22
 1017230:	30bcd416 	blt	r6,r2,1016584 <_strtod_r+0x660>
 1017234:	317ffe24 	muli	r5,r6,-8
 1017238:	010040f4 	movhi	r4,259
 101723c:	21148304 	addi	r4,r4,21004
 1017240:	e0800017 	ldw	r2,0(fp)
 1017244:	290b883a 	add	r5,r5,r4
 1017248:	2a000017 	ldw	r8,0(r5)
 101724c:	e0c00117 	ldw	r3,4(fp)
 1017250:	2a400117 	ldw	r9,4(r5)
 1017254:	1009883a 	mov	r4,r2
 1017258:	180b883a 	mov	r5,r3
 101725c:	480f883a 	mov	r7,r9
 1017260:	400d883a 	mov	r6,r8
 1017264:	1012e580 	call	1012e58 <__divdf3>
 1017268:	e0c00115 	stw	r3,4(fp)
 101726c:	e0800015 	stw	r2,0(fp)
 1017270:	003ba306 	br	1016100 <_strtod_r+0x1dc>
 1017274:	00800404 	movi	r2,16
 1017278:	14c02f0e 	bge	r2,r19,1017338 <_strtod_r+0x1414>
 101727c:	000f883a 	mov	r7,zero
 1017280:	003f2006 	br	1016f04 <_strtod_r+0xfe0>
 1017284:	d9801417 	ldw	r6,80(sp)
 1017288:	3013003a 	cmpeq	r9,r6,zero
 101728c:	483e981e 	bne	r9,zero,1016cf0 <_strtod_r+0xdcc>
 1017290:	003f4306 	br	1016fa0 <_strtod_r+0x107c>
 1017294:	00801a44 	movi	r2,105
 1017298:	20bc6326 	beq	r4,r2,1016428 <_strtod_r+0x504>
 101729c:	00801b84 	movi	r2,110
 10172a0:	20bbba1e 	bne	r4,r2,101618c <_strtod_r+0x268>
 10172a4:	dc000404 	addi	r16,sp,16
 10172a8:	8009883a 	mov	r4,r16
 10172ac:	014040f4 	movhi	r5,259
 10172b0:	29539d04 	addi	r5,r5,20084
 10172b4:	1015edc0 	call	1015edc <match>
 10172b8:	103bb426 	beq	r2,zero,101618c <_strtod_r+0x268>
 10172bc:	d8800417 	ldw	r2,16(sp)
 10172c0:	00c00a04 	movi	r3,40
 10172c4:	11000007 	ldb	r4,0(r2)
 10172c8:	20c03626 	beq	r4,r3,10173a4 <_strtod_r+0x1480>
 10172cc:	01bffe34 	movhi	r6,65528
 10172d0:	e1800115 	stw	r6,4(fp)
 10172d4:	e0000015 	stw	zero,0(fp)
 10172d8:	003b8906 	br	1016100 <_strtod_r+0x1dc>
 10172dc:	e4400117 	ldw	r17,4(fp)
 10172e0:	3809883a 	mov	r4,r7
 10172e4:	3821883a 	mov	r16,r7
 10172e8:	880b883a 	mov	r5,r17
 10172ec:	101d0b80 	call	101d0b8 <__ulp>
 10172f0:	100d883a 	mov	r6,r2
 10172f4:	880b883a 	mov	r5,r17
 10172f8:	180f883a 	mov	r7,r3
 10172fc:	8009883a 	mov	r4,r16
 1017300:	1012a200 	call	1012a20 <__adddf3>
 1017304:	d9801417 	ldw	r6,80(sp)
 1017308:	e0c00115 	stw	r3,4(fp)
 101730c:	e0800015 	stw	r2,0(fp)
 1017310:	3013003a 	cmpeq	r9,r6,zero
 1017314:	483e761e 	bne	r9,zero,1016cf0 <_strtod_r+0xdcc>
 1017318:	003f2106 	br	1016fa0 <_strtod_r+0x107c>
 101731c:	000f883a 	mov	r7,zero
 1017320:	003cf006 	br	10166e4 <_strtod_r+0x7c0>
 1017324:	0080d434 	movhi	r2,848
 1017328:	188d883a 	add	r6,r3,r2
 101732c:	d8001415 	stw	zero,80(sp)
 1017330:	e1800115 	stw	r6,4(fp)
 1017334:	003d0706 	br	1016754 <_strtod_r+0x830>
 1017338:	808002a4 	muli	r2,r16,10
 101733c:	000f883a 	mov	r7,zero
 1017340:	1261883a 	add	r16,r2,r9
 1017344:	003eef06 	br	1016f04 <_strtod_r+0xfe0>
 1017348:	309ffc2c 	andhi	r2,r6,32752
 101734c:	00fffc34 	movhi	r3,65520
 1017350:	10c5883a 	add	r2,r2,r3
 1017354:	00c00434 	movhi	r3,16
 1017358:	18ffffc4 	addi	r3,r3,-1
 101735c:	10ccb03a 	or	r6,r2,r3
 1017360:	01ffffc4 	movi	r7,-1
 1017364:	e1800115 	stw	r6,4(fp)
 1017368:	e1c00015 	stw	r7,0(fp)
 101736c:	483e601e 	bne	r9,zero,1016cf0 <_strtod_r+0xdcc>
 1017370:	003f0b06 	br	1016fa0 <_strtod_r+0x107c>
 1017374:	00bfffc4 	movi	r2,-1
 1017378:	003f4906 	br	10170a0 <_strtod_r+0x117c>
 101737c:	0025883a 	mov	r18,zero
 1017380:	003cb106 	br	1016648 <_strtod_r+0x724>
 1017384:	d8c01417 	ldw	r3,80(sp)
 1017388:	1813003a 	cmpeq	r9,r3,zero
 101738c:	483e581e 	bne	r9,zero,1016cf0 <_strtod_r+0xdcc>
 1017390:	003f0306 	br	1016fa0 <_strtod_r+0x107c>
 1017394:	980f883a 	mov	r7,r19
 1017398:	003ed406 	br	1016eec <_strtod_r+0xfc8>
 101739c:	d8001415 	stw	zero,80(sp)
 10173a0:	003f6706 	br	1017140 <_strtod_r+0x121c>
 10173a4:	8009883a 	mov	r4,r16
 10173a8:	014040f4 	movhi	r5,259
 10173ac:	29573a04 	addi	r5,r5,23784
 10173b0:	d9800d04 	addi	r6,sp,52
 10173b4:	101ca240 	call	101ca24 <__hexnan>
 10173b8:	00c00144 	movi	r3,5
 10173bc:	10ffc31e 	bne	r2,r3,10172cc <_strtod_r+0x13a8>
 10173c0:	d8800e17 	ldw	r2,56(sp)
 10173c4:	d9c00d17 	ldw	r7,52(sp)
 10173c8:	119ffc34 	orhi	r6,r2,32752
 10173cc:	e1800115 	stw	r6,4(fp)
 10173d0:	e1c00015 	stw	r7,0(fp)
 10173d4:	003b4a06 	br	1016100 <_strtod_r+0x1dc>
 10173d8:	18fff804 	addi	r3,r3,-32
 10173dc:	00bfffc4 	movi	r2,-1
 10173e0:	10c4983a 	sll	r2,r2,r3
 10173e4:	208c703a 	and	r6,r4,r2
 10173e8:	e1800115 	stw	r6,4(fp)
 10173ec:	003f7506 	br	10171c4 <_strtod_r+0x12a0>
 10173f0:	00bfffc4 	movi	r2,-1
 10173f4:	10c4983a 	sll	r2,r2,r3
 10173f8:	e0c00017 	ldw	r3,0(fp)
 10173fc:	188e703a 	and	r7,r3,r2
 1017400:	e1c00015 	stw	r7,0(fp)
 1017404:	003f6f06 	br	10171c4 <_strtod_r+0x12a0>

01017408 <strtof>:
 1017408:	defffa04 	addi	sp,sp,-24
 101740c:	dd000415 	stw	r20,16(sp)
 1017410:	050040f4 	movhi	r20,259
 1017414:	a51bed04 	addi	r20,r20,28596
 1017418:	2007883a 	mov	r3,r4
 101741c:	a1000017 	ldw	r4,0(r20)
 1017420:	280d883a 	mov	r6,r5
 1017424:	180b883a 	mov	r5,r3
 1017428:	dfc00515 	stw	ra,20(sp)
 101742c:	dcc00315 	stw	r19,12(sp)
 1017430:	dc800215 	stw	r18,8(sp)
 1017434:	dc400115 	stw	r17,4(sp)
 1017438:	dc000015 	stw	r16,0(sp)
 101743c:	1015f240 	call	1015f24 <_strtod_r>
 1017440:	180b883a 	mov	r5,r3
 1017444:	1009883a 	mov	r4,r2
 1017448:	1823883a 	mov	r17,r3
 101744c:	1021883a 	mov	r16,r2
 1017450:	1020ca00 	call	1020ca0 <__truncdfsf2>
 1017454:	1009883a 	mov	r4,r2
 1017458:	000b883a 	mov	r5,zero
 101745c:	1025883a 	mov	r18,r2
 1017460:	1027883a 	mov	r19,r2
 1017464:	1020a280 	call	1020a28 <__nesf2>
 1017468:	000d883a 	mov	r6,zero
 101746c:	000f883a 	mov	r7,zero
 1017470:	8009883a 	mov	r4,r16
 1017474:	880b883a 	mov	r5,r17
 1017478:	10000e1e 	bne	r2,zero,10174b4 <strtof+0xac>
 101747c:	1020b900 	call	1020b90 <__nedf2>
 1017480:	10000c26 	beq	r2,zero,10174b4 <strtof+0xac>
 1017484:	a0c00017 	ldw	r3,0(r20)
 1017488:	00800884 	movi	r2,34
 101748c:	18800015 	stw	r2,0(r3)
 1017490:	9805883a 	mov	r2,r19
 1017494:	dfc00517 	ldw	ra,20(sp)
 1017498:	dd000417 	ldw	r20,16(sp)
 101749c:	dcc00317 	ldw	r19,12(sp)
 10174a0:	dc800217 	ldw	r18,8(sp)
 10174a4:	dc400117 	ldw	r17,4(sp)
 10174a8:	dc000017 	ldw	r16,0(sp)
 10174ac:	dec00604 	addi	sp,sp,24
 10174b0:	f800283a 	ret
 10174b4:	9009883a 	mov	r4,r18
 10174b8:	015fe034 	movhi	r5,32640
 10174bc:	297fffc4 	addi	r5,r5,-1
 10174c0:	1020aa00 	call	1020aa0 <__gtsf2>
 10174c4:	00ffffc4 	movi	r3,-1
 10174c8:	011ffc34 	movhi	r4,32752
 10174cc:	213fffc4 	addi	r4,r4,-1
 10174d0:	200f883a 	mov	r7,r4
 10174d4:	180d883a 	mov	r6,r3
 10174d8:	8009883a 	mov	r4,r16
 10174dc:	880b883a 	mov	r5,r17
 10174e0:	00800f16 	blt	zero,r2,1017520 <strtof+0x118>
 10174e4:	9009883a 	mov	r4,r18
 10174e8:	017fe034 	movhi	r5,65408
 10174ec:	297fffc4 	addi	r5,r5,-1
 10174f0:	1020b180 	call	1020b18 <__ltsf2>
 10174f4:	023fffc4 	movi	r8,-1
 10174f8:	027ffc34 	movhi	r9,65520
 10174fc:	4a7fffc4 	addi	r9,r9,-1
 1017500:	880b883a 	mov	r5,r17
 1017504:	480f883a 	mov	r7,r9
 1017508:	8009883a 	mov	r4,r16
 101750c:	400d883a 	mov	r6,r8
 1017510:	103fdf0e 	bge	r2,zero,1017490 <strtof+0x88>
 1017514:	10132480 	call	1013248 <__ltdf2>
 1017518:	103fda0e 	bge	r2,zero,1017484 <strtof+0x7c>
 101751c:	003fdc06 	br	1017490 <strtof+0x88>
 1017520:	10131380 	call	1013138 <__gtdf2>
 1017524:	00bfd70e 	bge	zero,r2,1017484 <strtof+0x7c>
 1017528:	003fee06 	br	10174e4 <strtof+0xdc>

0101752c <strtod>:
 101752c:	018040f4 	movhi	r6,259
 1017530:	319bed04 	addi	r6,r6,28596
 1017534:	2007883a 	mov	r3,r4
 1017538:	31000017 	ldw	r4,0(r6)
 101753c:	280d883a 	mov	r6,r5
 1017540:	180b883a 	mov	r5,r3
 1017544:	1015f241 	jmpi	1015f24 <_strtod_r>

01017548 <strtok>:
 1017548:	008040f4 	movhi	r2,259
 101754c:	109bed04 	addi	r2,r2,28596
 1017550:	11800017 	ldw	r6,0(r2)
 1017554:	01c00044 	movi	r7,1
 1017558:	31801704 	addi	r6,r6,92
 101755c:	10175601 	jmpi	1017560 <__strtok_r>

01017560 <__strtok_r>:
 1017560:	20002426 	beq	r4,zero,10175f4 <__strtok_r+0x94>
 1017564:	22000007 	ldb	r8,0(r4)
 1017568:	21000044 	addi	r4,r4,1
 101756c:	2807883a 	mov	r3,r5
 1017570:	3812c03a 	cmpne	r9,r7,zero
 1017574:	22bfffc4 	addi	r10,r4,-1
 1017578:	18800007 	ldb	r2,0(r3)
 101757c:	18c00044 	addi	r3,r3,1
 1017580:	10000626 	beq	r2,zero,101759c <__strtok_r+0x3c>
 1017584:	40bffc1e 	bne	r8,r2,1017578 <__strtok_r+0x18>
 1017588:	483ff61e 	bne	r9,zero,1017564 <__strtok_r+0x4>
 101758c:	31000015 	stw	r4,0(r6)
 1017590:	5005883a 	mov	r2,r10
 1017594:	203fffc5 	stb	zero,-1(r4)
 1017598:	f800283a 	ret
 101759c:	2013883a 	mov	r9,r4
 10175a0:	40001226 	beq	r8,zero,10175ec <__strtok_r+0x8c>
 10175a4:	21c00007 	ldb	r7,0(r4)
 10175a8:	2807883a 	mov	r3,r5
 10175ac:	21000044 	addi	r4,r4,1
 10175b0:	4a3fffc4 	addi	r8,r9,-1
 10175b4:	00000106 	br	10175bc <__strtok_r+0x5c>
 10175b8:	103ffa26 	beq	r2,zero,10175a4 <__strtok_r+0x44>
 10175bc:	18800007 	ldb	r2,0(r3)
 10175c0:	18c00044 	addi	r3,r3,1
 10175c4:	38bffc1e 	bne	r7,r2,10175b8 <__strtok_r+0x58>
 10175c8:	1000041e 	bne	r2,zero,10175dc <__strtok_r+0x7c>
 10175cc:	0009883a 	mov	r4,zero
 10175d0:	4005883a 	mov	r2,r8
 10175d4:	31000015 	stw	r4,0(r6)
 10175d8:	f800283a 	ret
 10175dc:	203fffc5 	stb	zero,-1(r4)
 10175e0:	4005883a 	mov	r2,r8
 10175e4:	31000015 	stw	r4,0(r6)
 10175e8:	f800283a 	ret
 10175ec:	30000015 	stw	zero,0(r6)
 10175f0:	f800283a 	ret
 10175f4:	31000017 	ldw	r4,0(r6)
 10175f8:	203fda1e 	bne	r4,zero,1017564 <__strtok_r+0x4>
 10175fc:	0005883a 	mov	r2,zero
 1017600:	f800283a 	ret

01017604 <strtok_r>:
 1017604:	01c00044 	movi	r7,1
 1017608:	10175601 	jmpi	1017560 <__strtok_r>

0101760c <_strtol_r>:
 101760c:	defff304 	addi	sp,sp,-52
 1017610:	008040f4 	movhi	r2,259
 1017614:	109bf104 	addi	r2,r2,28612
 1017618:	dcc00615 	stw	r19,24(sp)
 101761c:	14c00017 	ldw	r19,0(r2)
 1017620:	ddc00a15 	stw	r23,40(sp)
 1017624:	dc000315 	stw	r16,12(sp)
 1017628:	dfc00c15 	stw	ra,48(sp)
 101762c:	df000b15 	stw	fp,44(sp)
 1017630:	dd800915 	stw	r22,36(sp)
 1017634:	dd400815 	stw	r21,32(sp)
 1017638:	dd000715 	stw	r20,28(sp)
 101763c:	dc800515 	stw	r18,20(sp)
 1017640:	dc400415 	stw	r17,16(sp)
 1017644:	282f883a 	mov	r23,r5
 1017648:	d9000015 	stw	r4,0(sp)
 101764c:	d9800115 	stw	r6,4(sp)
 1017650:	2821883a 	mov	r16,r5
 1017654:	84400007 	ldb	r17,0(r16)
 1017658:	84000044 	addi	r16,r16,1
 101765c:	9c47883a 	add	r3,r19,r17
 1017660:	18800003 	ldbu	r2,0(r3)
 1017664:	1080020c 	andi	r2,r2,8
 1017668:	103ffa1e 	bne	r2,zero,1017654 <_strtol_r+0x48>
 101766c:	00800b44 	movi	r2,45
 1017670:	88805c26 	beq	r17,r2,10177e4 <_strtol_r+0x1d8>
 1017674:	00800ac4 	movi	r2,43
 1017678:	88805726 	beq	r17,r2,10177d8 <_strtol_r+0x1cc>
 101767c:	0039883a 	mov	fp,zero
 1017680:	3807003a 	cmpeq	r3,r7,zero
 1017684:	1800431e 	bne	r3,zero,1017794 <_strtol_r+0x188>
 1017688:	00800404 	movi	r2,16
 101768c:	38804126 	beq	r7,r2,1017794 <_strtol_r+0x188>
 1017690:	3829883a 	mov	r20,r7
 1017694:	e02cc03a 	cmpne	r22,fp,zero
 1017698:	b0004b1e 	bne	r22,zero,10177c8 <_strtol_r+0x1bc>
 101769c:	04a00034 	movhi	r18,32768
 10176a0:	94bfffc4 	addi	r18,r18,-1
 10176a4:	9009883a 	mov	r4,r18
 10176a8:	a00b883a 	mov	r5,r20
 10176ac:	d9c00215 	stw	r7,8(sp)
 10176b0:	101361c0 	call	101361c <__umodsi3>
 10176b4:	9009883a 	mov	r4,r18
 10176b8:	a00b883a 	mov	r5,r20
 10176bc:	102b883a 	mov	r21,r2
 10176c0:	10136140 	call	1013614 <__udivsi3>
 10176c4:	1011883a 	mov	r8,r2
 10176c8:	9c45883a 	add	r2,r19,r17
 10176cc:	11000003 	ldbu	r4,0(r2)
 10176d0:	000b883a 	mov	r5,zero
 10176d4:	000d883a 	mov	r6,zero
 10176d8:	20c0010c 	andi	r3,r4,4
 10176dc:	d9c00217 	ldw	r7,8(sp)
 10176e0:	18000e26 	beq	r3,zero,101771c <_strtol_r+0x110>
 10176e4:	88fff404 	addi	r3,r17,-48
 10176e8:	19c0140e 	bge	r3,r7,101773c <_strtol_r+0x130>
 10176ec:	30003116 	blt	r6,zero,10177b4 <_strtol_r+0x1a8>
 10176f0:	41403036 	bltu	r8,r5,10177b4 <_strtol_r+0x1a8>
 10176f4:	2a002e26 	beq	r5,r8,10177b0 <_strtol_r+0x1a4>
 10176f8:	2d05383a 	mul	r2,r5,r20
 10176fc:	01800044 	movi	r6,1
 1017700:	10cb883a 	add	r5,r2,r3
 1017704:	84400007 	ldb	r17,0(r16)
 1017708:	84000044 	addi	r16,r16,1
 101770c:	9c45883a 	add	r2,r19,r17
 1017710:	11000003 	ldbu	r4,0(r2)
 1017714:	20c0010c 	andi	r3,r4,4
 1017718:	183ff21e 	bne	r3,zero,10176e4 <_strtol_r+0xd8>
 101771c:	208000cc 	andi	r2,r4,3
 1017720:	10000626 	beq	r2,zero,101773c <_strtol_r+0x130>
 1017724:	2080004c 	andi	r2,r4,1
 1017728:	1005003a 	cmpeq	r2,r2,zero
 101772c:	1000231e 	bne	r2,zero,10177bc <_strtol_r+0x1b0>
 1017730:	00800dc4 	movi	r2,55
 1017734:	8887c83a 	sub	r3,r17,r2
 1017738:	19ffec16 	blt	r3,r7,10176ec <_strtol_r+0xe0>
 101773c:	30002d16 	blt	r6,zero,10177f4 <_strtol_r+0x1e8>
 1017740:	b000231e 	bne	r22,zero,10177d0 <_strtol_r+0x1c4>
 1017744:	2807883a 	mov	r3,r5
 1017748:	d8800117 	ldw	r2,4(sp)
 101774c:	10000426 	beq	r2,zero,1017760 <_strtol_r+0x154>
 1017750:	30000126 	beq	r6,zero,1017758 <_strtol_r+0x14c>
 1017754:	85ffffc4 	addi	r23,r16,-1
 1017758:	d9000117 	ldw	r4,4(sp)
 101775c:	25c00015 	stw	r23,0(r4)
 1017760:	1805883a 	mov	r2,r3
 1017764:	dfc00c17 	ldw	ra,48(sp)
 1017768:	df000b17 	ldw	fp,44(sp)
 101776c:	ddc00a17 	ldw	r23,40(sp)
 1017770:	dd800917 	ldw	r22,36(sp)
 1017774:	dd400817 	ldw	r21,32(sp)
 1017778:	dd000717 	ldw	r20,28(sp)
 101777c:	dcc00617 	ldw	r19,24(sp)
 1017780:	dc800517 	ldw	r18,20(sp)
 1017784:	dc400417 	ldw	r17,16(sp)
 1017788:	dc000317 	ldw	r16,12(sp)
 101778c:	dec00d04 	addi	sp,sp,52
 1017790:	f800283a 	ret
 1017794:	00800c04 	movi	r2,48
 1017798:	88801d26 	beq	r17,r2,1017810 <_strtol_r+0x204>
 101779c:	183fbc26 	beq	r3,zero,1017690 <_strtol_r+0x84>
 10177a0:	00800c04 	movi	r2,48
 10177a4:	88802726 	beq	r17,r2,1017844 <_strtol_r+0x238>
 10177a8:	01c00284 	movi	r7,10
 10177ac:	003fb806 	br	1017690 <_strtol_r+0x84>
 10177b0:	a8ffd10e 	bge	r21,r3,10176f8 <_strtol_r+0xec>
 10177b4:	01bfffc4 	movi	r6,-1
 10177b8:	003fd206 	br	1017704 <_strtol_r+0xf8>
 10177bc:	008015c4 	movi	r2,87
 10177c0:	8887c83a 	sub	r3,r17,r2
 10177c4:	003fdc06 	br	1017738 <_strtol_r+0x12c>
 10177c8:	04a00034 	movhi	r18,32768
 10177cc:	003fb506 	br	10176a4 <_strtol_r+0x98>
 10177d0:	0147c83a 	sub	r3,zero,r5
 10177d4:	003fdc06 	br	1017748 <_strtol_r+0x13c>
 10177d8:	84400007 	ldb	r17,0(r16)
 10177dc:	84000044 	addi	r16,r16,1
 10177e0:	003fa606 	br	101767c <_strtol_r+0x70>
 10177e4:	84400007 	ldb	r17,0(r16)
 10177e8:	07000044 	movi	fp,1
 10177ec:	84000044 	addi	r16,r16,1
 10177f0:	003fa306 	br	1017680 <_strtol_r+0x74>
 10177f4:	e005003a 	cmpeq	r2,fp,zero
 10177f8:	10000f1e 	bne	r2,zero,1017838 <_strtol_r+0x22c>
 10177fc:	00e00034 	movhi	r3,32768
 1017800:	d9000017 	ldw	r4,0(sp)
 1017804:	00800884 	movi	r2,34
 1017808:	20800015 	stw	r2,0(r4)
 101780c:	003fce06 	br	1017748 <_strtol_r+0x13c>
 1017810:	81000007 	ldb	r4,0(r16)
 1017814:	00801e04 	movi	r2,120
 1017818:	20800226 	beq	r4,r2,1017824 <_strtol_r+0x218>
 101781c:	00801604 	movi	r2,88
 1017820:	20bfde1e 	bne	r4,r2,101779c <_strtol_r+0x190>
 1017824:	84400047 	ldb	r17,1(r16)
 1017828:	01c00404 	movi	r7,16
 101782c:	84000084 	addi	r16,r16,2
 1017830:	3829883a 	mov	r20,r7
 1017834:	003f9706 	br	1017694 <_strtol_r+0x88>
 1017838:	00e00034 	movhi	r3,32768
 101783c:	18ffffc4 	addi	r3,r3,-1
 1017840:	003fef06 	br	1017800 <_strtol_r+0x1f4>
 1017844:	01c00204 	movi	r7,8
 1017848:	3829883a 	mov	r20,r7
 101784c:	003f9106 	br	1017694 <_strtol_r+0x88>

01017850 <strtol>:
 1017850:	008040f4 	movhi	r2,259
 1017854:	109bed04 	addi	r2,r2,28596
 1017858:	2013883a 	mov	r9,r4
 101785c:	11000017 	ldw	r4,0(r2)
 1017860:	2805883a 	mov	r2,r5
 1017864:	300f883a 	mov	r7,r6
 1017868:	480b883a 	mov	r5,r9
 101786c:	100d883a 	mov	r6,r2
 1017870:	101760c1 	jmpi	101760c <_strtol_r>

01017874 <_strtoul_r>:
 1017874:	defff604 	addi	sp,sp,-40
 1017878:	008040f4 	movhi	r2,259
 101787c:	109bf104 	addi	r2,r2,28612
 1017880:	dd000415 	stw	r20,16(sp)
 1017884:	15000017 	ldw	r20,0(r2)
 1017888:	ddc00715 	stw	r23,28(sp)
 101788c:	dd800615 	stw	r22,24(sp)
 1017890:	dd400515 	stw	r21,20(sp)
 1017894:	dc800215 	stw	r18,8(sp)
 1017898:	dc000015 	stw	r16,0(sp)
 101789c:	dfc00915 	stw	ra,36(sp)
 10178a0:	df000815 	stw	fp,32(sp)
 10178a4:	dcc00315 	stw	r19,12(sp)
 10178a8:	dc400115 	stw	r17,4(sp)
 10178ac:	282b883a 	mov	r21,r5
 10178b0:	202f883a 	mov	r23,r4
 10178b4:	302d883a 	mov	r22,r6
 10178b8:	3825883a 	mov	r18,r7
 10178bc:	2821883a 	mov	r16,r5
 10178c0:	84400007 	ldb	r17,0(r16)
 10178c4:	84000044 	addi	r16,r16,1
 10178c8:	a447883a 	add	r3,r20,r17
 10178cc:	18800003 	ldbu	r2,0(r3)
 10178d0:	1080020c 	andi	r2,r2,8
 10178d4:	103ffa1e 	bne	r2,zero,10178c0 <_strtoul_r+0x4c>
 10178d8:	00800b44 	movi	r2,45
 10178dc:	88805626 	beq	r17,r2,1017a38 <_strtoul_r+0x1c4>
 10178e0:	00800ac4 	movi	r2,43
 10178e4:	88805126 	beq	r17,r2,1017a2c <_strtoul_r+0x1b8>
 10178e8:	0039883a 	mov	fp,zero
 10178ec:	9007003a 	cmpeq	r3,r18,zero
 10178f0:	18003b1e 	bne	r3,zero,10179e0 <_strtoul_r+0x16c>
 10178f4:	00800404 	movi	r2,16
 10178f8:	90803926 	beq	r18,r2,10179e0 <_strtoul_r+0x16c>
 10178fc:	013fffc4 	movi	r4,-1
 1017900:	900b883a 	mov	r5,r18
 1017904:	10136140 	call	1013614 <__udivsi3>
 1017908:	013fffc4 	movi	r4,-1
 101790c:	900b883a 	mov	r5,r18
 1017910:	1027883a 	mov	r19,r2
 1017914:	101361c0 	call	101361c <__umodsi3>
 1017918:	1011883a 	mov	r8,r2
 101791c:	900f883a 	mov	r7,r18
 1017920:	a445883a 	add	r2,r20,r17
 1017924:	11000003 	ldbu	r4,0(r2)
 1017928:	000b883a 	mov	r5,zero
 101792c:	000d883a 	mov	r6,zero
 1017930:	20c0010c 	andi	r3,r4,4
 1017934:	18000e26 	beq	r3,zero,1017970 <_strtoul_r+0xfc>
 1017938:	88fff404 	addi	r3,r17,-48
 101793c:	1c80140e 	bge	r3,r18,1017990 <_strtoul_r+0x11c>
 1017940:	30003316 	blt	r6,zero,1017a10 <_strtoul_r+0x19c>
 1017944:	99403236 	bltu	r19,r5,1017a10 <_strtoul_r+0x19c>
 1017948:	2cc03026 	beq	r5,r19,1017a0c <_strtoul_r+0x198>
 101794c:	29c5383a 	mul	r2,r5,r7
 1017950:	01800044 	movi	r6,1
 1017954:	10cb883a 	add	r5,r2,r3
 1017958:	84400007 	ldb	r17,0(r16)
 101795c:	84000044 	addi	r16,r16,1
 1017960:	a445883a 	add	r2,r20,r17
 1017964:	11000003 	ldbu	r4,0(r2)
 1017968:	20c0010c 	andi	r3,r4,4
 101796c:	183ff21e 	bne	r3,zero,1017938 <_strtoul_r+0xc4>
 1017970:	208000cc 	andi	r2,r4,3
 1017974:	10000626 	beq	r2,zero,1017990 <_strtoul_r+0x11c>
 1017978:	2080004c 	andi	r2,r4,1
 101797c:	1005003a 	cmpeq	r2,r2,zero
 1017980:	1000251e 	bne	r2,zero,1017a18 <_strtoul_r+0x1a4>
 1017984:	00800dc4 	movi	r2,55
 1017988:	8887c83a 	sub	r3,r17,r2
 101798c:	1cbfec16 	blt	r3,r18,1017940 <_strtoul_r+0xcc>
 1017990:	3000400e 	bge	r6,zero,1017a94 <_strtoul_r+0x220>
 1017994:	00800884 	movi	r2,34
 1017998:	017fffc4 	movi	r5,-1
 101799c:	b8800015 	stw	r2,0(r23)
 10179a0:	b0000226 	beq	r22,zero,10179ac <_strtoul_r+0x138>
 10179a4:	30001f1e 	bne	r6,zero,1017a24 <_strtoul_r+0x1b0>
 10179a8:	b5400015 	stw	r21,0(r22)
 10179ac:	2805883a 	mov	r2,r5
 10179b0:	dfc00917 	ldw	ra,36(sp)
 10179b4:	df000817 	ldw	fp,32(sp)
 10179b8:	ddc00717 	ldw	r23,28(sp)
 10179bc:	dd800617 	ldw	r22,24(sp)
 10179c0:	dd400517 	ldw	r21,20(sp)
 10179c4:	dd000417 	ldw	r20,16(sp)
 10179c8:	dcc00317 	ldw	r19,12(sp)
 10179cc:	dc800217 	ldw	r18,8(sp)
 10179d0:	dc400117 	ldw	r17,4(sp)
 10179d4:	dc000017 	ldw	r16,0(sp)
 10179d8:	dec00a04 	addi	sp,sp,40
 10179dc:	f800283a 	ret
 10179e0:	00800c04 	movi	r2,48
 10179e4:	88801826 	beq	r17,r2,1017a48 <_strtoul_r+0x1d4>
 10179e8:	183fc426 	beq	r3,zero,10178fc <_strtoul_r+0x88>
 10179ec:	00800c04 	movi	r2,48
 10179f0:	88802226 	beq	r17,r2,1017a7c <_strtoul_r+0x208>
 10179f4:	04800284 	movi	r18,10
 10179f8:	900f883a 	mov	r7,r18
 10179fc:	04c666b4 	movhi	r19,6554
 1017a00:	9ce66644 	addi	r19,r19,-26215
 1017a04:	02000144 	movi	r8,5
 1017a08:	003fc506 	br	1017920 <_strtoul_r+0xac>
 1017a0c:	40ffcf0e 	bge	r8,r3,101794c <_strtoul_r+0xd8>
 1017a10:	01bfffc4 	movi	r6,-1
 1017a14:	003fd006 	br	1017958 <_strtoul_r+0xe4>
 1017a18:	008015c4 	movi	r2,87
 1017a1c:	8887c83a 	sub	r3,r17,r2
 1017a20:	003fda06 	br	101798c <_strtoul_r+0x118>
 1017a24:	857fffc4 	addi	r21,r16,-1
 1017a28:	003fdf06 	br	10179a8 <_strtoul_r+0x134>
 1017a2c:	84400007 	ldb	r17,0(r16)
 1017a30:	84000044 	addi	r16,r16,1
 1017a34:	003fac06 	br	10178e8 <_strtoul_r+0x74>
 1017a38:	84400007 	ldb	r17,0(r16)
 1017a3c:	07000044 	movi	fp,1
 1017a40:	84000044 	addi	r16,r16,1
 1017a44:	003fa906 	br	10178ec <_strtoul_r+0x78>
 1017a48:	81000007 	ldb	r4,0(r16)
 1017a4c:	00801e04 	movi	r2,120
 1017a50:	20800226 	beq	r4,r2,1017a5c <_strtoul_r+0x1e8>
 1017a54:	00801604 	movi	r2,88
 1017a58:	20bfe31e 	bne	r4,r2,10179e8 <_strtoul_r+0x174>
 1017a5c:	84400047 	ldb	r17,1(r16)
 1017a60:	04800404 	movi	r18,16
 1017a64:	84000084 	addi	r16,r16,2
 1017a68:	900f883a 	mov	r7,r18
 1017a6c:	04c40034 	movhi	r19,4096
 1017a70:	9cffffc4 	addi	r19,r19,-1
 1017a74:	020003c4 	movi	r8,15
 1017a78:	003fa906 	br	1017920 <_strtoul_r+0xac>
 1017a7c:	04800204 	movi	r18,8
 1017a80:	900f883a 	mov	r7,r18
 1017a84:	04c80034 	movhi	r19,8192
 1017a88:	9cffffc4 	addi	r19,r19,-1
 1017a8c:	020001c4 	movi	r8,7
 1017a90:	003fa306 	br	1017920 <_strtoul_r+0xac>
 1017a94:	e005003a 	cmpeq	r2,fp,zero
 1017a98:	103fc11e 	bne	r2,zero,10179a0 <_strtoul_r+0x12c>
 1017a9c:	014bc83a 	sub	r5,zero,r5
 1017aa0:	003fbf06 	br	10179a0 <_strtoul_r+0x12c>

01017aa4 <strtoul>:
 1017aa4:	008040f4 	movhi	r2,259
 1017aa8:	109bed04 	addi	r2,r2,28596
 1017aac:	2013883a 	mov	r9,r4
 1017ab0:	11000017 	ldw	r4,0(r2)
 1017ab4:	2805883a 	mov	r2,r5
 1017ab8:	300f883a 	mov	r7,r6
 1017abc:	480b883a 	mov	r5,r9
 1017ac0:	100d883a 	mov	r6,r2
 1017ac4:	10178741 	jmpi	1017874 <_strtoul_r>

01017ac8 <_vfiprintf_r>:
 1017ac8:	defffe04 	addi	sp,sp,-8
 1017acc:	dfc00115 	stw	ra,4(sp)
 1017ad0:	d9c00015 	stw	r7,0(sp)
 1017ad4:	101eb300 	call	101eb30 <___vfiprintf_internal_r>
 1017ad8:	dfc00117 	ldw	ra,4(sp)
 1017adc:	dec00204 	addi	sp,sp,8
 1017ae0:	f800283a 	ret

01017ae4 <__sprint_r>:
 1017ae4:	30800217 	ldw	r2,8(r6)
 1017ae8:	defffe04 	addi	sp,sp,-8
 1017aec:	dc000015 	stw	r16,0(sp)
 1017af0:	dfc00115 	stw	ra,4(sp)
 1017af4:	3021883a 	mov	r16,r6
 1017af8:	0007883a 	mov	r3,zero
 1017afc:	1000061e 	bne	r2,zero,1017b18 <__sprint_r+0x34>
 1017b00:	1805883a 	mov	r2,r3
 1017b04:	30000115 	stw	zero,4(r6)
 1017b08:	dfc00117 	ldw	ra,4(sp)
 1017b0c:	dc000017 	ldw	r16,0(sp)
 1017b10:	dec00204 	addi	sp,sp,8
 1017b14:	f800283a 	ret
 1017b18:	101bc480 	call	101bc48 <__sfvwrite_r>
 1017b1c:	1007883a 	mov	r3,r2
 1017b20:	1805883a 	mov	r2,r3
 1017b24:	80000115 	stw	zero,4(r16)
 1017b28:	80000215 	stw	zero,8(r16)
 1017b2c:	dfc00117 	ldw	ra,4(sp)
 1017b30:	dc000017 	ldw	r16,0(sp)
 1017b34:	dec00204 	addi	sp,sp,8
 1017b38:	f800283a 	ret

01017b3c <___vfprintf_internal_r>:
 1017b3c:	defea404 	addi	sp,sp,-1392
 1017b40:	dd815815 	stw	r22,1376(sp)
 1017b44:	dc015215 	stw	r16,1352(sp)
 1017b48:	d9c15115 	stw	r7,1348(sp)
 1017b4c:	dfc15b15 	stw	ra,1388(sp)
 1017b50:	df015a15 	stw	fp,1384(sp)
 1017b54:	ddc15915 	stw	r23,1380(sp)
 1017b58:	dd415715 	stw	r21,1372(sp)
 1017b5c:	dd015615 	stw	r20,1368(sp)
 1017b60:	dcc15515 	stw	r19,1364(sp)
 1017b64:	dc815415 	stw	r18,1360(sp)
 1017b68:	dc415315 	stw	r17,1356(sp)
 1017b6c:	282d883a 	mov	r22,r5
 1017b70:	3021883a 	mov	r16,r6
 1017b74:	d9014f15 	stw	r4,1340(sp)
 1017b78:	101cce40 	call	101cce4 <_localeconv_r>
 1017b7c:	10800017 	ldw	r2,0(r2)
 1017b80:	d9c15117 	ldw	r7,1348(sp)
 1017b84:	d8814915 	stw	r2,1316(sp)
 1017b88:	d8814f17 	ldw	r2,1340(sp)
 1017b8c:	10000226 	beq	r2,zero,1017b98 <___vfprintf_internal_r+0x5c>
 1017b90:	10800e17 	ldw	r2,56(r2)
 1017b94:	10020d26 	beq	r2,zero,10183cc <___vfprintf_internal_r+0x890>
 1017b98:	b080030b 	ldhu	r2,12(r22)
 1017b9c:	1080020c 	andi	r2,r2,8
 1017ba0:	10020e26 	beq	r2,zero,10183dc <___vfprintf_internal_r+0x8a0>
 1017ba4:	b0800417 	ldw	r2,16(r22)
 1017ba8:	10020c26 	beq	r2,zero,10183dc <___vfprintf_internal_r+0x8a0>
 1017bac:	b200030b 	ldhu	r8,12(r22)
 1017bb0:	00800284 	movi	r2,10
 1017bb4:	40c0068c 	andi	r3,r8,26
 1017bb8:	18802f1e 	bne	r3,r2,1017c78 <___vfprintf_internal_r+0x13c>
 1017bbc:	b080038f 	ldh	r2,14(r22)
 1017bc0:	10002d16 	blt	r2,zero,1017c78 <___vfprintf_internal_r+0x13c>
 1017bc4:	b240038b 	ldhu	r9,14(r22)
 1017bc8:	b2800717 	ldw	r10,28(r22)
 1017bcc:	b2c00917 	ldw	r11,36(r22)
 1017bd0:	d9014f17 	ldw	r4,1340(sp)
 1017bd4:	dc402904 	addi	r17,sp,164
 1017bd8:	d8804004 	addi	r2,sp,256
 1017bdc:	00c10004 	movi	r3,1024
 1017be0:	423fff4c 	andi	r8,r8,65533
 1017be4:	800d883a 	mov	r6,r16
 1017be8:	880b883a 	mov	r5,r17
 1017bec:	da002c0d 	sth	r8,176(sp)
 1017bf0:	da402c8d 	sth	r9,178(sp)
 1017bf4:	da803015 	stw	r10,192(sp)
 1017bf8:	dac03215 	stw	r11,200(sp)
 1017bfc:	d8802d15 	stw	r2,180(sp)
 1017c00:	d8c02e15 	stw	r3,184(sp)
 1017c04:	d8802915 	stw	r2,164(sp)
 1017c08:	d8c02b15 	stw	r3,172(sp)
 1017c0c:	d8002f15 	stw	zero,188(sp)
 1017c10:	1017b3c0 	call	1017b3c <___vfprintf_internal_r>
 1017c14:	d8814b15 	stw	r2,1324(sp)
 1017c18:	10000416 	blt	r2,zero,1017c2c <___vfprintf_internal_r+0xf0>
 1017c1c:	d9014f17 	ldw	r4,1340(sp)
 1017c20:	880b883a 	mov	r5,r17
 1017c24:	101b5380 	call	101b538 <_fflush_r>
 1017c28:	1002321e 	bne	r2,zero,10184f4 <___vfprintf_internal_r+0x9b8>
 1017c2c:	d8802c0b 	ldhu	r2,176(sp)
 1017c30:	1080100c 	andi	r2,r2,64
 1017c34:	10000326 	beq	r2,zero,1017c44 <___vfprintf_internal_r+0x108>
 1017c38:	b080030b 	ldhu	r2,12(r22)
 1017c3c:	10801014 	ori	r2,r2,64
 1017c40:	b080030d 	sth	r2,12(r22)
 1017c44:	d8814b17 	ldw	r2,1324(sp)
 1017c48:	dfc15b17 	ldw	ra,1388(sp)
 1017c4c:	df015a17 	ldw	fp,1384(sp)
 1017c50:	ddc15917 	ldw	r23,1380(sp)
 1017c54:	dd815817 	ldw	r22,1376(sp)
 1017c58:	dd415717 	ldw	r21,1372(sp)
 1017c5c:	dd015617 	ldw	r20,1368(sp)
 1017c60:	dcc15517 	ldw	r19,1364(sp)
 1017c64:	dc815417 	ldw	r18,1360(sp)
 1017c68:	dc415317 	ldw	r17,1356(sp)
 1017c6c:	dc015217 	ldw	r16,1352(sp)
 1017c70:	dec15c04 	addi	sp,sp,1392
 1017c74:	f800283a 	ret
 1017c78:	0005883a 	mov	r2,zero
 1017c7c:	0007883a 	mov	r3,zero
 1017c80:	dd401904 	addi	r21,sp,100
 1017c84:	d8814215 	stw	r2,1288(sp)
 1017c88:	802f883a 	mov	r23,r16
 1017c8c:	d8c14315 	stw	r3,1292(sp)
 1017c90:	d8014b15 	stw	zero,1324(sp)
 1017c94:	d8014815 	stw	zero,1312(sp)
 1017c98:	d8014415 	stw	zero,1296(sp)
 1017c9c:	d8014715 	stw	zero,1308(sp)
 1017ca0:	dd400c15 	stw	r21,48(sp)
 1017ca4:	d8000e15 	stw	zero,56(sp)
 1017ca8:	d8000d15 	stw	zero,52(sp)
 1017cac:	b8800007 	ldb	r2,0(r23)
 1017cb0:	10001926 	beq	r2,zero,1017d18 <___vfprintf_internal_r+0x1dc>
 1017cb4:	00c00944 	movi	r3,37
 1017cb8:	10c01726 	beq	r2,r3,1017d18 <___vfprintf_internal_r+0x1dc>
 1017cbc:	b821883a 	mov	r16,r23
 1017cc0:	00000106 	br	1017cc8 <___vfprintf_internal_r+0x18c>
 1017cc4:	10c00326 	beq	r2,r3,1017cd4 <___vfprintf_internal_r+0x198>
 1017cc8:	84000044 	addi	r16,r16,1
 1017ccc:	80800007 	ldb	r2,0(r16)
 1017cd0:	103ffc1e 	bne	r2,zero,1017cc4 <___vfprintf_internal_r+0x188>
 1017cd4:	85e7c83a 	sub	r19,r16,r23
 1017cd8:	98000e26 	beq	r19,zero,1017d14 <___vfprintf_internal_r+0x1d8>
 1017cdc:	dc800e17 	ldw	r18,56(sp)
 1017ce0:	dc400d17 	ldw	r17,52(sp)
 1017ce4:	008001c4 	movi	r2,7
 1017ce8:	94e5883a 	add	r18,r18,r19
 1017cec:	8c400044 	addi	r17,r17,1
 1017cf0:	adc00015 	stw	r23,0(r21)
 1017cf4:	dc800e15 	stw	r18,56(sp)
 1017cf8:	acc00115 	stw	r19,4(r21)
 1017cfc:	dc400d15 	stw	r17,52(sp)
 1017d00:	14428b16 	blt	r2,r17,1018730 <___vfprintf_internal_r+0xbf4>
 1017d04:	ad400204 	addi	r21,r21,8
 1017d08:	d9014b17 	ldw	r4,1324(sp)
 1017d0c:	24c9883a 	add	r4,r4,r19
 1017d10:	d9014b15 	stw	r4,1324(sp)
 1017d14:	802f883a 	mov	r23,r16
 1017d18:	b8800007 	ldb	r2,0(r23)
 1017d1c:	10013c26 	beq	r2,zero,1018210 <___vfprintf_internal_r+0x6d4>
 1017d20:	bdc00044 	addi	r23,r23,1
 1017d24:	d8000405 	stb	zero,16(sp)
 1017d28:	b8c00007 	ldb	r3,0(r23)
 1017d2c:	04ffffc4 	movi	r19,-1
 1017d30:	d8014c15 	stw	zero,1328(sp)
 1017d34:	d8014a15 	stw	zero,1320(sp)
 1017d38:	d8c14d15 	stw	r3,1332(sp)
 1017d3c:	bdc00044 	addi	r23,r23,1
 1017d40:	d9414d17 	ldw	r5,1332(sp)
 1017d44:	00801604 	movi	r2,88
 1017d48:	28fff804 	addi	r3,r5,-32
 1017d4c:	10c06036 	bltu	r2,r3,1017ed0 <___vfprintf_internal_r+0x394>
 1017d50:	18c5883a 	add	r2,r3,r3
 1017d54:	1085883a 	add	r2,r2,r2
 1017d58:	00c04074 	movhi	r3,257
 1017d5c:	18df5b04 	addi	r3,r3,32108
 1017d60:	10c5883a 	add	r2,r2,r3
 1017d64:	11000017 	ldw	r4,0(r2)
 1017d68:	2000683a 	jmp	r4
 1017d6c:	01018ce0 	cmpeqi	r4,zero,1587
 1017d70:	01017ed0 	cmplti	r4,zero,1531
 1017d74:	01017ed0 	cmplti	r4,zero,1531
 1017d78:	01018ccc 	andi	r4,zero,1587
 1017d7c:	01017ed0 	cmplti	r4,zero,1531
 1017d80:	01017ed0 	cmplti	r4,zero,1531
 1017d84:	01017ed0 	cmplti	r4,zero,1531
 1017d88:	01017ed0 	cmplti	r4,zero,1531
 1017d8c:	01017ed0 	cmplti	r4,zero,1531
 1017d90:	01017ed0 	cmplti	r4,zero,1531
 1017d94:	01018aac 	andhi	r4,zero,1578
 1017d98:	01018cbc 	xorhi	r4,zero,1586
 1017d9c:	01017ed0 	cmplti	r4,zero,1531
 1017da0:	01018ac4 	movi	r4,1579
 1017da4:	01018d58 	cmpnei	r4,zero,1589
 1017da8:	01017ed0 	cmplti	r4,zero,1531
 1017dac:	01018d44 	movi	r4,1589
 1017db0:	01018d0c 	andi	r4,zero,1588
 1017db4:	01018d0c 	andi	r4,zero,1588
 1017db8:	01018d0c 	andi	r4,zero,1588
 1017dbc:	01018d0c 	andi	r4,zero,1588
 1017dc0:	01018d0c 	andi	r4,zero,1588
 1017dc4:	01018d0c 	andi	r4,zero,1588
 1017dc8:	01018d0c 	andi	r4,zero,1588
 1017dcc:	01018d0c 	andi	r4,zero,1588
 1017dd0:	01018d0c 	andi	r4,zero,1588
 1017dd4:	01017ed0 	cmplti	r4,zero,1531
 1017dd8:	01017ed0 	cmplti	r4,zero,1531
 1017ddc:	01017ed0 	cmplti	r4,zero,1531
 1017de0:	01017ed0 	cmplti	r4,zero,1531
 1017de4:	01017ed0 	cmplti	r4,zero,1531
 1017de8:	01017ed0 	cmplti	r4,zero,1531
 1017dec:	01017ed0 	cmplti	r4,zero,1531
 1017df0:	01017ed0 	cmplti	r4,zero,1531
 1017df4:	01017ed0 	cmplti	r4,zero,1531
 1017df8:	01017ed0 	cmplti	r4,zero,1531
 1017dfc:	01018528 	cmpgeui	r4,zero,1556
 1017e00:	01018b94 	movui	r4,1582
 1017e04:	01017ed0 	cmplti	r4,zero,1531
 1017e08:	01018b94 	movui	r4,1582
 1017e0c:	01017ed0 	cmplti	r4,zero,1531
 1017e10:	01017ed0 	cmplti	r4,zero,1531
 1017e14:	01017ed0 	cmplti	r4,zero,1531
 1017e18:	01017ed0 	cmplti	r4,zero,1531
 1017e1c:	01018cf8 	rdprs	r4,zero,1587
 1017e20:	01017ed0 	cmplti	r4,zero,1531
 1017e24:	01017ed0 	cmplti	r4,zero,1531
 1017e28:	010185dc 	xori	r4,zero,1559
 1017e2c:	01017ed0 	cmplti	r4,zero,1531
 1017e30:	01017ed0 	cmplti	r4,zero,1531
 1017e34:	01017ed0 	cmplti	r4,zero,1531
 1017e38:	01017ed0 	cmplti	r4,zero,1531
 1017e3c:	01017ed0 	cmplti	r4,zero,1531
 1017e40:	01018628 	cmpgeui	r4,zero,1560
 1017e44:	01017ed0 	cmplti	r4,zero,1531
 1017e48:	01017ed0 	cmplti	r4,zero,1531
 1017e4c:	01018c48 	cmpgei	r4,zero,1585
 1017e50:	01017ed0 	cmplti	r4,zero,1531
 1017e54:	01017ed0 	cmplti	r4,zero,1531
 1017e58:	01017ed0 	cmplti	r4,zero,1531
 1017e5c:	01017ed0 	cmplti	r4,zero,1531
 1017e60:	01017ed0 	cmplti	r4,zero,1531
 1017e64:	01017ed0 	cmplti	r4,zero,1531
 1017e68:	01017ed0 	cmplti	r4,zero,1531
 1017e6c:	01017ed0 	cmplti	r4,zero,1531
 1017e70:	01017ed0 	cmplti	r4,zero,1531
 1017e74:	01017ed0 	cmplti	r4,zero,1531
 1017e78:	01018c1c 	xori	r4,zero,1584
 1017e7c:	01018534 	movhi	r4,1556
 1017e80:	01018b94 	movui	r4,1582
 1017e84:	01018b94 	movui	r4,1582
 1017e88:	01018b94 	movui	r4,1582
 1017e8c:	01018b80 	call	1018b8 <__alt_mem_onchip_memory2_0+0x1018b8>
 1017e90:	01018534 	movhi	r4,1556
 1017e94:	01017ed0 	cmplti	r4,zero,1531
 1017e98:	01017ed0 	cmplti	r4,zero,1531
 1017e9c:	01018b08 	cmpgei	r4,zero,1580
 1017ea0:	01017ed0 	cmplti	r4,zero,1531
 1017ea4:	01018ad8 	cmpnei	r4,zero,1579
 1017ea8:	010185e8 	cmpgeui	r4,zero,1559
 1017eac:	01018b38 	rdprs	r4,zero,1580
 1017eb0:	01018b24 	muli	r4,zero,1580
 1017eb4:	01017ed0 	cmplti	r4,zero,1531
 1017eb8:	01018db4 	movhi	r4,1590
 1017ebc:	01017ed0 	cmplti	r4,zero,1531
 1017ec0:	01018634 	movhi	r4,1560
 1017ec4:	01017ed0 	cmplti	r4,zero,1531
 1017ec8:	01017ed0 	cmplti	r4,zero,1531
 1017ecc:	01018cac 	andhi	r4,zero,1586
 1017ed0:	d9014d17 	ldw	r4,1332(sp)
 1017ed4:	2000ce26 	beq	r4,zero,1018210 <___vfprintf_internal_r+0x6d4>
 1017ed8:	01400044 	movi	r5,1
 1017edc:	d9800f04 	addi	r6,sp,60
 1017ee0:	d9c14015 	stw	r7,1280(sp)
 1017ee4:	d9414515 	stw	r5,1300(sp)
 1017ee8:	d9814115 	stw	r6,1284(sp)
 1017eec:	280f883a 	mov	r7,r5
 1017ef0:	d9000f05 	stb	r4,60(sp)
 1017ef4:	d8000405 	stb	zero,16(sp)
 1017ef8:	d8014615 	stw	zero,1304(sp)
 1017efc:	d8c14c17 	ldw	r3,1328(sp)
 1017f00:	1880008c 	andi	r2,r3,2
 1017f04:	1005003a 	cmpeq	r2,r2,zero
 1017f08:	d8815015 	stw	r2,1344(sp)
 1017f0c:	1000031e 	bne	r2,zero,1017f1c <___vfprintf_internal_r+0x3e0>
 1017f10:	d9014517 	ldw	r4,1300(sp)
 1017f14:	21000084 	addi	r4,r4,2
 1017f18:	d9014515 	stw	r4,1300(sp)
 1017f1c:	d9414c17 	ldw	r5,1328(sp)
 1017f20:	2940210c 	andi	r5,r5,132
 1017f24:	d9414e15 	stw	r5,1336(sp)
 1017f28:	28002d1e 	bne	r5,zero,1017fe0 <___vfprintf_internal_r+0x4a4>
 1017f2c:	d9814a17 	ldw	r6,1320(sp)
 1017f30:	d8814517 	ldw	r2,1300(sp)
 1017f34:	30a1c83a 	sub	r16,r6,r2
 1017f38:	0400290e 	bge	zero,r16,1017fe0 <___vfprintf_internal_r+0x4a4>
 1017f3c:	00800404 	movi	r2,16
 1017f40:	1404580e 	bge	r2,r16,10190a4 <___vfprintf_internal_r+0x1568>
 1017f44:	dc800e17 	ldw	r18,56(sp)
 1017f48:	dc400d17 	ldw	r17,52(sp)
 1017f4c:	1027883a 	mov	r19,r2
 1017f50:	070040f4 	movhi	fp,259
 1017f54:	e713c384 	addi	fp,fp,20238
 1017f58:	050001c4 	movi	r20,7
 1017f5c:	00000306 	br	1017f6c <___vfprintf_internal_r+0x430>
 1017f60:	843ffc04 	addi	r16,r16,-16
 1017f64:	ad400204 	addi	r21,r21,8
 1017f68:	9c00130e 	bge	r19,r16,1017fb8 <___vfprintf_internal_r+0x47c>
 1017f6c:	94800404 	addi	r18,r18,16
 1017f70:	8c400044 	addi	r17,r17,1
 1017f74:	af000015 	stw	fp,0(r21)
 1017f78:	acc00115 	stw	r19,4(r21)
 1017f7c:	dc800e15 	stw	r18,56(sp)
 1017f80:	dc400d15 	stw	r17,52(sp)
 1017f84:	a47ff60e 	bge	r20,r17,1017f60 <___vfprintf_internal_r+0x424>
 1017f88:	d9014f17 	ldw	r4,1340(sp)
 1017f8c:	b00b883a 	mov	r5,r22
 1017f90:	d9800c04 	addi	r6,sp,48
 1017f94:	d9c15115 	stw	r7,1348(sp)
 1017f98:	1017ae40 	call	1017ae4 <__sprint_r>
 1017f9c:	d9c15117 	ldw	r7,1348(sp)
 1017fa0:	10009e1e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1017fa4:	843ffc04 	addi	r16,r16,-16
 1017fa8:	dc800e17 	ldw	r18,56(sp)
 1017fac:	dc400d17 	ldw	r17,52(sp)
 1017fb0:	dd401904 	addi	r21,sp,100
 1017fb4:	9c3fed16 	blt	r19,r16,1017f6c <___vfprintf_internal_r+0x430>
 1017fb8:	9425883a 	add	r18,r18,r16
 1017fbc:	8c400044 	addi	r17,r17,1
 1017fc0:	008001c4 	movi	r2,7
 1017fc4:	af000015 	stw	fp,0(r21)
 1017fc8:	ac000115 	stw	r16,4(r21)
 1017fcc:	dc800e15 	stw	r18,56(sp)
 1017fd0:	dc400d15 	stw	r17,52(sp)
 1017fd4:	1441f516 	blt	r2,r17,10187ac <___vfprintf_internal_r+0xc70>
 1017fd8:	ad400204 	addi	r21,r21,8
 1017fdc:	00000206 	br	1017fe8 <___vfprintf_internal_r+0x4ac>
 1017fe0:	dc800e17 	ldw	r18,56(sp)
 1017fe4:	dc400d17 	ldw	r17,52(sp)
 1017fe8:	d8800407 	ldb	r2,16(sp)
 1017fec:	10000b26 	beq	r2,zero,101801c <___vfprintf_internal_r+0x4e0>
 1017ff0:	00800044 	movi	r2,1
 1017ff4:	94800044 	addi	r18,r18,1
 1017ff8:	8c400044 	addi	r17,r17,1
 1017ffc:	a8800115 	stw	r2,4(r21)
 1018000:	d8c00404 	addi	r3,sp,16
 1018004:	008001c4 	movi	r2,7
 1018008:	a8c00015 	stw	r3,0(r21)
 101800c:	dc800e15 	stw	r18,56(sp)
 1018010:	dc400d15 	stw	r17,52(sp)
 1018014:	1441da16 	blt	r2,r17,1018780 <___vfprintf_internal_r+0xc44>
 1018018:	ad400204 	addi	r21,r21,8
 101801c:	d9015017 	ldw	r4,1344(sp)
 1018020:	20000b1e 	bne	r4,zero,1018050 <___vfprintf_internal_r+0x514>
 1018024:	d8800444 	addi	r2,sp,17
 1018028:	94800084 	addi	r18,r18,2
 101802c:	8c400044 	addi	r17,r17,1
 1018030:	a8800015 	stw	r2,0(r21)
 1018034:	00c00084 	movi	r3,2
 1018038:	008001c4 	movi	r2,7
 101803c:	a8c00115 	stw	r3,4(r21)
 1018040:	dc800e15 	stw	r18,56(sp)
 1018044:	dc400d15 	stw	r17,52(sp)
 1018048:	1441c216 	blt	r2,r17,1018754 <___vfprintf_internal_r+0xc18>
 101804c:	ad400204 	addi	r21,r21,8
 1018050:	d9414e17 	ldw	r5,1336(sp)
 1018054:	00802004 	movi	r2,128
 1018058:	2880b126 	beq	r5,r2,1018320 <___vfprintf_internal_r+0x7e4>
 101805c:	d8c14617 	ldw	r3,1304(sp)
 1018060:	19e1c83a 	sub	r16,r3,r7
 1018064:	0400260e 	bge	zero,r16,1018100 <___vfprintf_internal_r+0x5c4>
 1018068:	00800404 	movi	r2,16
 101806c:	1403c90e 	bge	r2,r16,1018f94 <___vfprintf_internal_r+0x1458>
 1018070:	1027883a 	mov	r19,r2
 1018074:	070040f4 	movhi	fp,259
 1018078:	e713bf84 	addi	fp,fp,20222
 101807c:	050001c4 	movi	r20,7
 1018080:	00000306 	br	1018090 <___vfprintf_internal_r+0x554>
 1018084:	843ffc04 	addi	r16,r16,-16
 1018088:	ad400204 	addi	r21,r21,8
 101808c:	9c00130e 	bge	r19,r16,10180dc <___vfprintf_internal_r+0x5a0>
 1018090:	94800404 	addi	r18,r18,16
 1018094:	8c400044 	addi	r17,r17,1
 1018098:	af000015 	stw	fp,0(r21)
 101809c:	acc00115 	stw	r19,4(r21)
 10180a0:	dc800e15 	stw	r18,56(sp)
 10180a4:	dc400d15 	stw	r17,52(sp)
 10180a8:	a47ff60e 	bge	r20,r17,1018084 <___vfprintf_internal_r+0x548>
 10180ac:	d9014f17 	ldw	r4,1340(sp)
 10180b0:	b00b883a 	mov	r5,r22
 10180b4:	d9800c04 	addi	r6,sp,48
 10180b8:	d9c15115 	stw	r7,1348(sp)
 10180bc:	1017ae40 	call	1017ae4 <__sprint_r>
 10180c0:	d9c15117 	ldw	r7,1348(sp)
 10180c4:	1000551e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 10180c8:	843ffc04 	addi	r16,r16,-16
 10180cc:	dc800e17 	ldw	r18,56(sp)
 10180d0:	dc400d17 	ldw	r17,52(sp)
 10180d4:	dd401904 	addi	r21,sp,100
 10180d8:	9c3fed16 	blt	r19,r16,1018090 <___vfprintf_internal_r+0x554>
 10180dc:	9425883a 	add	r18,r18,r16
 10180e0:	8c400044 	addi	r17,r17,1
 10180e4:	008001c4 	movi	r2,7
 10180e8:	af000015 	stw	fp,0(r21)
 10180ec:	ac000115 	stw	r16,4(r21)
 10180f0:	dc800e15 	stw	r18,56(sp)
 10180f4:	dc400d15 	stw	r17,52(sp)
 10180f8:	14418216 	blt	r2,r17,1018704 <___vfprintf_internal_r+0xbc8>
 10180fc:	ad400204 	addi	r21,r21,8
 1018100:	d9014c17 	ldw	r4,1328(sp)
 1018104:	2080400c 	andi	r2,r4,256
 1018108:	10004a1e 	bne	r2,zero,1018234 <___vfprintf_internal_r+0x6f8>
 101810c:	d9414117 	ldw	r5,1284(sp)
 1018110:	91e5883a 	add	r18,r18,r7
 1018114:	8c400044 	addi	r17,r17,1
 1018118:	008001c4 	movi	r2,7
 101811c:	a9400015 	stw	r5,0(r21)
 1018120:	a9c00115 	stw	r7,4(r21)
 1018124:	dc800e15 	stw	r18,56(sp)
 1018128:	dc400d15 	stw	r17,52(sp)
 101812c:	14416716 	blt	r2,r17,10186cc <___vfprintf_internal_r+0xb90>
 1018130:	a8c00204 	addi	r3,r21,8
 1018134:	d9814c17 	ldw	r6,1328(sp)
 1018138:	3080010c 	andi	r2,r6,4
 101813c:	10002826 	beq	r2,zero,10181e0 <___vfprintf_internal_r+0x6a4>
 1018140:	d8814a17 	ldw	r2,1320(sp)
 1018144:	d9014517 	ldw	r4,1300(sp)
 1018148:	1121c83a 	sub	r16,r2,r4
 101814c:	0400240e 	bge	zero,r16,10181e0 <___vfprintf_internal_r+0x6a4>
 1018150:	00800404 	movi	r2,16
 1018154:	14044f0e 	bge	r2,r16,1019294 <___vfprintf_internal_r+0x1758>
 1018158:	dc400d17 	ldw	r17,52(sp)
 101815c:	1027883a 	mov	r19,r2
 1018160:	070040f4 	movhi	fp,259
 1018164:	e713c384 	addi	fp,fp,20238
 1018168:	050001c4 	movi	r20,7
 101816c:	00000306 	br	101817c <___vfprintf_internal_r+0x640>
 1018170:	843ffc04 	addi	r16,r16,-16
 1018174:	18c00204 	addi	r3,r3,8
 1018178:	9c00110e 	bge	r19,r16,10181c0 <___vfprintf_internal_r+0x684>
 101817c:	94800404 	addi	r18,r18,16
 1018180:	8c400044 	addi	r17,r17,1
 1018184:	1f000015 	stw	fp,0(r3)
 1018188:	1cc00115 	stw	r19,4(r3)
 101818c:	dc800e15 	stw	r18,56(sp)
 1018190:	dc400d15 	stw	r17,52(sp)
 1018194:	a47ff60e 	bge	r20,r17,1018170 <___vfprintf_internal_r+0x634>
 1018198:	d9014f17 	ldw	r4,1340(sp)
 101819c:	b00b883a 	mov	r5,r22
 10181a0:	d9800c04 	addi	r6,sp,48
 10181a4:	1017ae40 	call	1017ae4 <__sprint_r>
 10181a8:	10001c1e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 10181ac:	843ffc04 	addi	r16,r16,-16
 10181b0:	dc800e17 	ldw	r18,56(sp)
 10181b4:	dc400d17 	ldw	r17,52(sp)
 10181b8:	d8c01904 	addi	r3,sp,100
 10181bc:	9c3fef16 	blt	r19,r16,101817c <___vfprintf_internal_r+0x640>
 10181c0:	9425883a 	add	r18,r18,r16
 10181c4:	8c400044 	addi	r17,r17,1
 10181c8:	008001c4 	movi	r2,7
 10181cc:	1f000015 	stw	fp,0(r3)
 10181d0:	1c000115 	stw	r16,4(r3)
 10181d4:	dc800e15 	stw	r18,56(sp)
 10181d8:	dc400d15 	stw	r17,52(sp)
 10181dc:	1440cb16 	blt	r2,r17,101850c <___vfprintf_internal_r+0x9d0>
 10181e0:	d8814a17 	ldw	r2,1320(sp)
 10181e4:	d9414517 	ldw	r5,1300(sp)
 10181e8:	1140010e 	bge	r2,r5,10181f0 <___vfprintf_internal_r+0x6b4>
 10181ec:	2805883a 	mov	r2,r5
 10181f0:	d9814b17 	ldw	r6,1324(sp)
 10181f4:	308d883a 	add	r6,r6,r2
 10181f8:	d9814b15 	stw	r6,1324(sp)
 10181fc:	90013b1e 	bne	r18,zero,10186ec <___vfprintf_internal_r+0xbb0>
 1018200:	d9c14017 	ldw	r7,1280(sp)
 1018204:	dd401904 	addi	r21,sp,100
 1018208:	d8000d15 	stw	zero,52(sp)
 101820c:	003ea706 	br	1017cac <___vfprintf_internal_r+0x170>
 1018210:	d8800e17 	ldw	r2,56(sp)
 1018214:	10053f1e 	bne	r2,zero,1019714 <___vfprintf_internal_r+0x1bd8>
 1018218:	d8000d15 	stw	zero,52(sp)
 101821c:	b080030b 	ldhu	r2,12(r22)
 1018220:	1080100c 	andi	r2,r2,64
 1018224:	103e8726 	beq	r2,zero,1017c44 <___vfprintf_internal_r+0x108>
 1018228:	00bfffc4 	movi	r2,-1
 101822c:	d8814b15 	stw	r2,1324(sp)
 1018230:	003e8406 	br	1017c44 <___vfprintf_internal_r+0x108>
 1018234:	d9814d17 	ldw	r6,1332(sp)
 1018238:	00801944 	movi	r2,101
 101823c:	11806e16 	blt	r2,r6,10183f8 <___vfprintf_internal_r+0x8bc>
 1018240:	d9414717 	ldw	r5,1308(sp)
 1018244:	00c00044 	movi	r3,1
 1018248:	1943430e 	bge	r3,r5,1018f58 <___vfprintf_internal_r+0x141c>
 101824c:	d8814117 	ldw	r2,1284(sp)
 1018250:	94800044 	addi	r18,r18,1
 1018254:	8c400044 	addi	r17,r17,1
 1018258:	a8800015 	stw	r2,0(r21)
 101825c:	008001c4 	movi	r2,7
 1018260:	a8c00115 	stw	r3,4(r21)
 1018264:	dc800e15 	stw	r18,56(sp)
 1018268:	dc400d15 	stw	r17,52(sp)
 101826c:	1441ca16 	blt	r2,r17,1018998 <___vfprintf_internal_r+0xe5c>
 1018270:	a8c00204 	addi	r3,r21,8
 1018274:	d9014917 	ldw	r4,1316(sp)
 1018278:	00800044 	movi	r2,1
 101827c:	94800044 	addi	r18,r18,1
 1018280:	8c400044 	addi	r17,r17,1
 1018284:	18800115 	stw	r2,4(r3)
 1018288:	008001c4 	movi	r2,7
 101828c:	19000015 	stw	r4,0(r3)
 1018290:	dc800e15 	stw	r18,56(sp)
 1018294:	dc400d15 	stw	r17,52(sp)
 1018298:	1441b616 	blt	r2,r17,1018974 <___vfprintf_internal_r+0xe38>
 101829c:	1cc00204 	addi	r19,r3,8
 10182a0:	d9014217 	ldw	r4,1288(sp)
 10182a4:	d9414317 	ldw	r5,1292(sp)
 10182a8:	000d883a 	mov	r6,zero
 10182ac:	000f883a 	mov	r7,zero
 10182b0:	1020b900 	call	1020b90 <__nedf2>
 10182b4:	10017426 	beq	r2,zero,1018888 <___vfprintf_internal_r+0xd4c>
 10182b8:	d9414717 	ldw	r5,1308(sp)
 10182bc:	d9814117 	ldw	r6,1284(sp)
 10182c0:	8c400044 	addi	r17,r17,1
 10182c4:	2c85883a 	add	r2,r5,r18
 10182c8:	14bfffc4 	addi	r18,r2,-1
 10182cc:	28bfffc4 	addi	r2,r5,-1
 10182d0:	30c00044 	addi	r3,r6,1
 10182d4:	98800115 	stw	r2,4(r19)
 10182d8:	008001c4 	movi	r2,7
 10182dc:	98c00015 	stw	r3,0(r19)
 10182e0:	dc800e15 	stw	r18,56(sp)
 10182e4:	dc400d15 	stw	r17,52(sp)
 10182e8:	14418e16 	blt	r2,r17,1018924 <___vfprintf_internal_r+0xde8>
 10182ec:	9cc00204 	addi	r19,r19,8
 10182f0:	d9414817 	ldw	r5,1312(sp)
 10182f4:	d8800804 	addi	r2,sp,32
 10182f8:	8c400044 	addi	r17,r17,1
 10182fc:	9165883a 	add	r18,r18,r5
 1018300:	98800015 	stw	r2,0(r19)
 1018304:	008001c4 	movi	r2,7
 1018308:	99400115 	stw	r5,4(r19)
 101830c:	dc800e15 	stw	r18,56(sp)
 1018310:	dc400d15 	stw	r17,52(sp)
 1018314:	1440ed16 	blt	r2,r17,10186cc <___vfprintf_internal_r+0xb90>
 1018318:	98c00204 	addi	r3,r19,8
 101831c:	003f8506 	br	1018134 <___vfprintf_internal_r+0x5f8>
 1018320:	d9814a17 	ldw	r6,1320(sp)
 1018324:	d8814517 	ldw	r2,1300(sp)
 1018328:	30a1c83a 	sub	r16,r6,r2
 101832c:	043f4b0e 	bge	zero,r16,101805c <___vfprintf_internal_r+0x520>
 1018330:	00800404 	movi	r2,16
 1018334:	1404340e 	bge	r2,r16,1019408 <___vfprintf_internal_r+0x18cc>
 1018338:	1027883a 	mov	r19,r2
 101833c:	070040f4 	movhi	fp,259
 1018340:	e713bf84 	addi	fp,fp,20222
 1018344:	050001c4 	movi	r20,7
 1018348:	00000306 	br	1018358 <___vfprintf_internal_r+0x81c>
 101834c:	843ffc04 	addi	r16,r16,-16
 1018350:	ad400204 	addi	r21,r21,8
 1018354:	9c00130e 	bge	r19,r16,10183a4 <___vfprintf_internal_r+0x868>
 1018358:	94800404 	addi	r18,r18,16
 101835c:	8c400044 	addi	r17,r17,1
 1018360:	af000015 	stw	fp,0(r21)
 1018364:	acc00115 	stw	r19,4(r21)
 1018368:	dc800e15 	stw	r18,56(sp)
 101836c:	dc400d15 	stw	r17,52(sp)
 1018370:	a47ff60e 	bge	r20,r17,101834c <___vfprintf_internal_r+0x810>
 1018374:	d9014f17 	ldw	r4,1340(sp)
 1018378:	b00b883a 	mov	r5,r22
 101837c:	d9800c04 	addi	r6,sp,48
 1018380:	d9c15115 	stw	r7,1348(sp)
 1018384:	1017ae40 	call	1017ae4 <__sprint_r>
 1018388:	d9c15117 	ldw	r7,1348(sp)
 101838c:	103fa31e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1018390:	843ffc04 	addi	r16,r16,-16
 1018394:	dc800e17 	ldw	r18,56(sp)
 1018398:	dc400d17 	ldw	r17,52(sp)
 101839c:	dd401904 	addi	r21,sp,100
 10183a0:	9c3fed16 	blt	r19,r16,1018358 <___vfprintf_internal_r+0x81c>
 10183a4:	9425883a 	add	r18,r18,r16
 10183a8:	8c400044 	addi	r17,r17,1
 10183ac:	008001c4 	movi	r2,7
 10183b0:	af000015 	stw	fp,0(r21)
 10183b4:	ac000115 	stw	r16,4(r21)
 10183b8:	dc800e15 	stw	r18,56(sp)
 10183bc:	dc400d15 	stw	r17,52(sp)
 10183c0:	14416116 	blt	r2,r17,1018948 <___vfprintf_internal_r+0xe0c>
 10183c4:	ad400204 	addi	r21,r21,8
 10183c8:	003f2406 	br	101805c <___vfprintf_internal_r+0x520>
 10183cc:	d9014f17 	ldw	r4,1340(sp)
 10183d0:	1013f500 	call	1013f50 <__sinit>
 10183d4:	d9c15117 	ldw	r7,1348(sp)
 10183d8:	003def06 	br	1017b98 <___vfprintf_internal_r+0x5c>
 10183dc:	d9014f17 	ldw	r4,1340(sp)
 10183e0:	b00b883a 	mov	r5,r22
 10183e4:	d9c15115 	stw	r7,1348(sp)
 10183e8:	1019a840 	call	1019a84 <__swsetup_r>
 10183ec:	d9c15117 	ldw	r7,1348(sp)
 10183f0:	103dee26 	beq	r2,zero,1017bac <___vfprintf_internal_r+0x70>
 10183f4:	003f8c06 	br	1018228 <___vfprintf_internal_r+0x6ec>
 10183f8:	d9014217 	ldw	r4,1288(sp)
 10183fc:	d9414317 	ldw	r5,1292(sp)
 1018400:	000d883a 	mov	r6,zero
 1018404:	000f883a 	mov	r7,zero
 1018408:	10130b00 	call	10130b0 <__eqdf2>
 101840c:	1000f21e 	bne	r2,zero,10187d8 <___vfprintf_internal_r+0xc9c>
 1018410:	008040f4 	movhi	r2,259
 1018414:	1093bf04 	addi	r2,r2,20220
 1018418:	94800044 	addi	r18,r18,1
 101841c:	8c400044 	addi	r17,r17,1
 1018420:	a8800015 	stw	r2,0(r21)
 1018424:	00c00044 	movi	r3,1
 1018428:	008001c4 	movi	r2,7
 101842c:	a8c00115 	stw	r3,4(r21)
 1018430:	dc800e15 	stw	r18,56(sp)
 1018434:	dc400d15 	stw	r17,52(sp)
 1018438:	1442fa16 	blt	r2,r17,1019024 <___vfprintf_internal_r+0x14e8>
 101843c:	a8c00204 	addi	r3,r21,8
 1018440:	d8800517 	ldw	r2,20(sp)
 1018444:	d9014717 	ldw	r4,1308(sp)
 1018448:	11015c0e 	bge	r2,r4,10189bc <___vfprintf_internal_r+0xe80>
 101844c:	dc400d17 	ldw	r17,52(sp)
 1018450:	d9814917 	ldw	r6,1316(sp)
 1018454:	00800044 	movi	r2,1
 1018458:	94800044 	addi	r18,r18,1
 101845c:	8c400044 	addi	r17,r17,1
 1018460:	18800115 	stw	r2,4(r3)
 1018464:	008001c4 	movi	r2,7
 1018468:	19800015 	stw	r6,0(r3)
 101846c:	dc800e15 	stw	r18,56(sp)
 1018470:	dc400d15 	stw	r17,52(sp)
 1018474:	14431016 	blt	r2,r17,10190b8 <___vfprintf_internal_r+0x157c>
 1018478:	18c00204 	addi	r3,r3,8
 101847c:	d8814717 	ldw	r2,1308(sp)
 1018480:	143fffc4 	addi	r16,r2,-1
 1018484:	043f2b0e 	bge	zero,r16,1018134 <___vfprintf_internal_r+0x5f8>
 1018488:	00800404 	movi	r2,16
 101848c:	1402a20e 	bge	r2,r16,1018f18 <___vfprintf_internal_r+0x13dc>
 1018490:	dc400d17 	ldw	r17,52(sp)
 1018494:	1027883a 	mov	r19,r2
 1018498:	070040f4 	movhi	fp,259
 101849c:	e713bf84 	addi	fp,fp,20222
 10184a0:	050001c4 	movi	r20,7
 10184a4:	00000306 	br	10184b4 <___vfprintf_internal_r+0x978>
 10184a8:	18c00204 	addi	r3,r3,8
 10184ac:	843ffc04 	addi	r16,r16,-16
 10184b0:	9c029c0e 	bge	r19,r16,1018f24 <___vfprintf_internal_r+0x13e8>
 10184b4:	94800404 	addi	r18,r18,16
 10184b8:	8c400044 	addi	r17,r17,1
 10184bc:	1f000015 	stw	fp,0(r3)
 10184c0:	1cc00115 	stw	r19,4(r3)
 10184c4:	dc800e15 	stw	r18,56(sp)
 10184c8:	dc400d15 	stw	r17,52(sp)
 10184cc:	a47ff60e 	bge	r20,r17,10184a8 <___vfprintf_internal_r+0x96c>
 10184d0:	d9014f17 	ldw	r4,1340(sp)
 10184d4:	b00b883a 	mov	r5,r22
 10184d8:	d9800c04 	addi	r6,sp,48
 10184dc:	1017ae40 	call	1017ae4 <__sprint_r>
 10184e0:	103f4e1e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 10184e4:	dc800e17 	ldw	r18,56(sp)
 10184e8:	dc400d17 	ldw	r17,52(sp)
 10184ec:	d8c01904 	addi	r3,sp,100
 10184f0:	003fee06 	br	10184ac <___vfprintf_internal_r+0x970>
 10184f4:	d8802c0b 	ldhu	r2,176(sp)
 10184f8:	00ffffc4 	movi	r3,-1
 10184fc:	d8c14b15 	stw	r3,1324(sp)
 1018500:	1080100c 	andi	r2,r2,64
 1018504:	103dcc1e 	bne	r2,zero,1017c38 <___vfprintf_internal_r+0xfc>
 1018508:	003dce06 	br	1017c44 <___vfprintf_internal_r+0x108>
 101850c:	d9014f17 	ldw	r4,1340(sp)
 1018510:	b00b883a 	mov	r5,r22
 1018514:	d9800c04 	addi	r6,sp,48
 1018518:	1017ae40 	call	1017ae4 <__sprint_r>
 101851c:	103f3f1e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1018520:	dc800e17 	ldw	r18,56(sp)
 1018524:	003f2e06 	br	10181e0 <___vfprintf_internal_r+0x6a4>
 1018528:	d9414c17 	ldw	r5,1328(sp)
 101852c:	29400414 	ori	r5,r5,16
 1018530:	d9414c15 	stw	r5,1328(sp)
 1018534:	d9814c17 	ldw	r6,1328(sp)
 1018538:	3080080c 	andi	r2,r6,32
 101853c:	10014f1e 	bne	r2,zero,1018a7c <___vfprintf_internal_r+0xf40>
 1018540:	d8c14c17 	ldw	r3,1328(sp)
 1018544:	1880040c 	andi	r2,r3,16
 1018548:	1002ea1e 	bne	r2,zero,10190f4 <___vfprintf_internal_r+0x15b8>
 101854c:	d9014c17 	ldw	r4,1328(sp)
 1018550:	2080100c 	andi	r2,r4,64
 1018554:	1002e726 	beq	r2,zero,10190f4 <___vfprintf_internal_r+0x15b8>
 1018558:	3880000f 	ldh	r2,0(r7)
 101855c:	39c00104 	addi	r7,r7,4
 1018560:	d9c14015 	stw	r7,1280(sp)
 1018564:	1023d7fa 	srai	r17,r2,31
 1018568:	1021883a 	mov	r16,r2
 101856c:	88037216 	blt	r17,zero,1019338 <___vfprintf_internal_r+0x17fc>
 1018570:	01000044 	movi	r4,1
 1018574:	98000416 	blt	r19,zero,1018588 <___vfprintf_internal_r+0xa4c>
 1018578:	d8c14c17 	ldw	r3,1328(sp)
 101857c:	00bfdfc4 	movi	r2,-129
 1018580:	1886703a 	and	r3,r3,r2
 1018584:	d8c14c15 	stw	r3,1328(sp)
 1018588:	8444b03a 	or	r2,r16,r17
 101858c:	1002261e 	bne	r2,zero,1018e28 <___vfprintf_internal_r+0x12ec>
 1018590:	9802251e 	bne	r19,zero,1018e28 <___vfprintf_internal_r+0x12ec>
 1018594:	20803fcc 	andi	r2,r4,255
 1018598:	10029b26 	beq	r2,zero,1019008 <___vfprintf_internal_r+0x14cc>
 101859c:	d8c01904 	addi	r3,sp,100
 10185a0:	dd000f04 	addi	r20,sp,60
 10185a4:	d8c14115 	stw	r3,1284(sp)
 10185a8:	d8c14117 	ldw	r3,1284(sp)
 10185ac:	dcc14515 	stw	r19,1300(sp)
 10185b0:	a0c5c83a 	sub	r2,r20,r3
 10185b4:	11c00a04 	addi	r7,r2,40
 10185b8:	99c0010e 	bge	r19,r7,10185c0 <___vfprintf_internal_r+0xa84>
 10185bc:	d9c14515 	stw	r7,1300(sp)
 10185c0:	dcc14615 	stw	r19,1304(sp)
 10185c4:	d8800407 	ldb	r2,16(sp)
 10185c8:	103e4c26 	beq	r2,zero,1017efc <___vfprintf_internal_r+0x3c0>
 10185cc:	d8814517 	ldw	r2,1300(sp)
 10185d0:	10800044 	addi	r2,r2,1
 10185d4:	d8814515 	stw	r2,1300(sp)
 10185d8:	003e4806 	br	1017efc <___vfprintf_internal_r+0x3c0>
 10185dc:	d9814c17 	ldw	r6,1328(sp)
 10185e0:	31800414 	ori	r6,r6,16
 10185e4:	d9814c15 	stw	r6,1328(sp)
 10185e8:	d8c14c17 	ldw	r3,1328(sp)
 10185ec:	1880080c 	andi	r2,r3,32
 10185f0:	1001271e 	bne	r2,zero,1018a90 <___vfprintf_internal_r+0xf54>
 10185f4:	d9414c17 	ldw	r5,1328(sp)
 10185f8:	2880040c 	andi	r2,r5,16
 10185fc:	1002b61e 	bne	r2,zero,10190d8 <___vfprintf_internal_r+0x159c>
 1018600:	d9814c17 	ldw	r6,1328(sp)
 1018604:	3080100c 	andi	r2,r6,64
 1018608:	1002b326 	beq	r2,zero,10190d8 <___vfprintf_internal_r+0x159c>
 101860c:	3c00000b 	ldhu	r16,0(r7)
 1018610:	0009883a 	mov	r4,zero
 1018614:	39c00104 	addi	r7,r7,4
 1018618:	0023883a 	mov	r17,zero
 101861c:	d9c14015 	stw	r7,1280(sp)
 1018620:	d8000405 	stb	zero,16(sp)
 1018624:	003fd306 	br	1018574 <___vfprintf_internal_r+0xa38>
 1018628:	d9014c17 	ldw	r4,1328(sp)
 101862c:	21000414 	ori	r4,r4,16
 1018630:	d9014c15 	stw	r4,1328(sp)
 1018634:	d9414c17 	ldw	r5,1328(sp)
 1018638:	2880080c 	andi	r2,r5,32
 101863c:	1001081e 	bne	r2,zero,1018a60 <___vfprintf_internal_r+0xf24>
 1018640:	d8c14c17 	ldw	r3,1328(sp)
 1018644:	1880040c 	andi	r2,r3,16
 1018648:	1002b01e 	bne	r2,zero,101910c <___vfprintf_internal_r+0x15d0>
 101864c:	d9014c17 	ldw	r4,1328(sp)
 1018650:	2080100c 	andi	r2,r4,64
 1018654:	1002ad26 	beq	r2,zero,101910c <___vfprintf_internal_r+0x15d0>
 1018658:	3c00000b 	ldhu	r16,0(r7)
 101865c:	01000044 	movi	r4,1
 1018660:	39c00104 	addi	r7,r7,4
 1018664:	0023883a 	mov	r17,zero
 1018668:	d9c14015 	stw	r7,1280(sp)
 101866c:	d8000405 	stb	zero,16(sp)
 1018670:	003fc006 	br	1018574 <___vfprintf_internal_r+0xa38>
 1018674:	d9014f17 	ldw	r4,1340(sp)
 1018678:	b00b883a 	mov	r5,r22
 101867c:	d9800c04 	addi	r6,sp,48
 1018680:	1017ae40 	call	1017ae4 <__sprint_r>
 1018684:	103ee51e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1018688:	dc800e17 	ldw	r18,56(sp)
 101868c:	d8c01904 	addi	r3,sp,100
 1018690:	d9814c17 	ldw	r6,1328(sp)
 1018694:	3080004c 	andi	r2,r6,1
 1018698:	1005003a 	cmpeq	r2,r2,zero
 101869c:	103ea51e 	bne	r2,zero,1018134 <___vfprintf_internal_r+0x5f8>
 10186a0:	00800044 	movi	r2,1
 10186a4:	dc400d17 	ldw	r17,52(sp)
 10186a8:	18800115 	stw	r2,4(r3)
 10186ac:	d8814917 	ldw	r2,1316(sp)
 10186b0:	94800044 	addi	r18,r18,1
 10186b4:	8c400044 	addi	r17,r17,1
 10186b8:	18800015 	stw	r2,0(r3)
 10186bc:	008001c4 	movi	r2,7
 10186c0:	dc800e15 	stw	r18,56(sp)
 10186c4:	dc400d15 	stw	r17,52(sp)
 10186c8:	14421e0e 	bge	r2,r17,1018f44 <___vfprintf_internal_r+0x1408>
 10186cc:	d9014f17 	ldw	r4,1340(sp)
 10186d0:	b00b883a 	mov	r5,r22
 10186d4:	d9800c04 	addi	r6,sp,48
 10186d8:	1017ae40 	call	1017ae4 <__sprint_r>
 10186dc:	103ecf1e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 10186e0:	dc800e17 	ldw	r18,56(sp)
 10186e4:	d8c01904 	addi	r3,sp,100
 10186e8:	003e9206 	br	1018134 <___vfprintf_internal_r+0x5f8>
 10186ec:	d9014f17 	ldw	r4,1340(sp)
 10186f0:	b00b883a 	mov	r5,r22
 10186f4:	d9800c04 	addi	r6,sp,48
 10186f8:	1017ae40 	call	1017ae4 <__sprint_r>
 10186fc:	103ec026 	beq	r2,zero,1018200 <___vfprintf_internal_r+0x6c4>
 1018700:	003ec606 	br	101821c <___vfprintf_internal_r+0x6e0>
 1018704:	d9014f17 	ldw	r4,1340(sp)
 1018708:	b00b883a 	mov	r5,r22
 101870c:	d9800c04 	addi	r6,sp,48
 1018710:	d9c15115 	stw	r7,1348(sp)
 1018714:	1017ae40 	call	1017ae4 <__sprint_r>
 1018718:	d9c15117 	ldw	r7,1348(sp)
 101871c:	103ebf1e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1018720:	dc800e17 	ldw	r18,56(sp)
 1018724:	dc400d17 	ldw	r17,52(sp)
 1018728:	dd401904 	addi	r21,sp,100
 101872c:	003e7406 	br	1018100 <___vfprintf_internal_r+0x5c4>
 1018730:	d9014f17 	ldw	r4,1340(sp)
 1018734:	b00b883a 	mov	r5,r22
 1018738:	d9800c04 	addi	r6,sp,48
 101873c:	d9c15115 	stw	r7,1348(sp)
 1018740:	1017ae40 	call	1017ae4 <__sprint_r>
 1018744:	d9c15117 	ldw	r7,1348(sp)
 1018748:	103eb41e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 101874c:	dd401904 	addi	r21,sp,100
 1018750:	003d6d06 	br	1017d08 <___vfprintf_internal_r+0x1cc>
 1018754:	d9014f17 	ldw	r4,1340(sp)
 1018758:	b00b883a 	mov	r5,r22
 101875c:	d9800c04 	addi	r6,sp,48
 1018760:	d9c15115 	stw	r7,1348(sp)
 1018764:	1017ae40 	call	1017ae4 <__sprint_r>
 1018768:	d9c15117 	ldw	r7,1348(sp)
 101876c:	103eab1e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1018770:	dc800e17 	ldw	r18,56(sp)
 1018774:	dc400d17 	ldw	r17,52(sp)
 1018778:	dd401904 	addi	r21,sp,100
 101877c:	003e3406 	br	1018050 <___vfprintf_internal_r+0x514>
 1018780:	d9014f17 	ldw	r4,1340(sp)
 1018784:	b00b883a 	mov	r5,r22
 1018788:	d9800c04 	addi	r6,sp,48
 101878c:	d9c15115 	stw	r7,1348(sp)
 1018790:	1017ae40 	call	1017ae4 <__sprint_r>
 1018794:	d9c15117 	ldw	r7,1348(sp)
 1018798:	103ea01e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 101879c:	dc800e17 	ldw	r18,56(sp)
 10187a0:	dc400d17 	ldw	r17,52(sp)
 10187a4:	dd401904 	addi	r21,sp,100
 10187a8:	003e1c06 	br	101801c <___vfprintf_internal_r+0x4e0>
 10187ac:	d9014f17 	ldw	r4,1340(sp)
 10187b0:	b00b883a 	mov	r5,r22
 10187b4:	d9800c04 	addi	r6,sp,48
 10187b8:	d9c15115 	stw	r7,1348(sp)
 10187bc:	1017ae40 	call	1017ae4 <__sprint_r>
 10187c0:	d9c15117 	ldw	r7,1348(sp)
 10187c4:	103e951e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 10187c8:	dc800e17 	ldw	r18,56(sp)
 10187cc:	dc400d17 	ldw	r17,52(sp)
 10187d0:	dd401904 	addi	r21,sp,100
 10187d4:	003e0406 	br	1017fe8 <___vfprintf_internal_r+0x4ac>
 10187d8:	d9000517 	ldw	r4,20(sp)
 10187dc:	0102520e 	bge	zero,r4,1019128 <___vfprintf_internal_r+0x15ec>
 10187e0:	d9814717 	ldw	r6,1308(sp)
 10187e4:	21807a16 	blt	r4,r6,10189d0 <___vfprintf_internal_r+0xe94>
 10187e8:	d8814117 	ldw	r2,1284(sp)
 10187ec:	91a5883a 	add	r18,r18,r6
 10187f0:	8c400044 	addi	r17,r17,1
 10187f4:	a8800015 	stw	r2,0(r21)
 10187f8:	008001c4 	movi	r2,7
 10187fc:	a9800115 	stw	r6,4(r21)
 1018800:	dc800e15 	stw	r18,56(sp)
 1018804:	dc400d15 	stw	r17,52(sp)
 1018808:	1442f616 	blt	r2,r17,10193e4 <___vfprintf_internal_r+0x18a8>
 101880c:	a8c00204 	addi	r3,r21,8
 1018810:	d9414717 	ldw	r5,1308(sp)
 1018814:	2161c83a 	sub	r16,r4,r5
 1018818:	043f9d0e 	bge	zero,r16,1018690 <___vfprintf_internal_r+0xb54>
 101881c:	00800404 	movi	r2,16
 1018820:	1402130e 	bge	r2,r16,1019070 <___vfprintf_internal_r+0x1534>
 1018824:	dc400d17 	ldw	r17,52(sp)
 1018828:	1027883a 	mov	r19,r2
 101882c:	070040f4 	movhi	fp,259
 1018830:	e713bf84 	addi	fp,fp,20222
 1018834:	050001c4 	movi	r20,7
 1018838:	00000306 	br	1018848 <___vfprintf_internal_r+0xd0c>
 101883c:	18c00204 	addi	r3,r3,8
 1018840:	843ffc04 	addi	r16,r16,-16
 1018844:	9c020d0e 	bge	r19,r16,101907c <___vfprintf_internal_r+0x1540>
 1018848:	94800404 	addi	r18,r18,16
 101884c:	8c400044 	addi	r17,r17,1
 1018850:	1f000015 	stw	fp,0(r3)
 1018854:	1cc00115 	stw	r19,4(r3)
 1018858:	dc800e15 	stw	r18,56(sp)
 101885c:	dc400d15 	stw	r17,52(sp)
 1018860:	a47ff60e 	bge	r20,r17,101883c <___vfprintf_internal_r+0xd00>
 1018864:	d9014f17 	ldw	r4,1340(sp)
 1018868:	b00b883a 	mov	r5,r22
 101886c:	d9800c04 	addi	r6,sp,48
 1018870:	1017ae40 	call	1017ae4 <__sprint_r>
 1018874:	103e691e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1018878:	dc800e17 	ldw	r18,56(sp)
 101887c:	dc400d17 	ldw	r17,52(sp)
 1018880:	d8c01904 	addi	r3,sp,100
 1018884:	003fee06 	br	1018840 <___vfprintf_internal_r+0xd04>
 1018888:	d8814717 	ldw	r2,1308(sp)
 101888c:	143fffc4 	addi	r16,r2,-1
 1018890:	043e970e 	bge	zero,r16,10182f0 <___vfprintf_internal_r+0x7b4>
 1018894:	00800404 	movi	r2,16
 1018898:	1400180e 	bge	r2,r16,10188fc <___vfprintf_internal_r+0xdc0>
 101889c:	1029883a 	mov	r20,r2
 10188a0:	070040f4 	movhi	fp,259
 10188a4:	e713bf84 	addi	fp,fp,20222
 10188a8:	054001c4 	movi	r21,7
 10188ac:	00000306 	br	10188bc <___vfprintf_internal_r+0xd80>
 10188b0:	9cc00204 	addi	r19,r19,8
 10188b4:	843ffc04 	addi	r16,r16,-16
 10188b8:	a400120e 	bge	r20,r16,1018904 <___vfprintf_internal_r+0xdc8>
 10188bc:	94800404 	addi	r18,r18,16
 10188c0:	8c400044 	addi	r17,r17,1
 10188c4:	9f000015 	stw	fp,0(r19)
 10188c8:	9d000115 	stw	r20,4(r19)
 10188cc:	dc800e15 	stw	r18,56(sp)
 10188d0:	dc400d15 	stw	r17,52(sp)
 10188d4:	ac7ff60e 	bge	r21,r17,10188b0 <___vfprintf_internal_r+0xd74>
 10188d8:	d9014f17 	ldw	r4,1340(sp)
 10188dc:	b00b883a 	mov	r5,r22
 10188e0:	d9800c04 	addi	r6,sp,48
 10188e4:	1017ae40 	call	1017ae4 <__sprint_r>
 10188e8:	103e4c1e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 10188ec:	dc800e17 	ldw	r18,56(sp)
 10188f0:	dc400d17 	ldw	r17,52(sp)
 10188f4:	dcc01904 	addi	r19,sp,100
 10188f8:	003fee06 	br	10188b4 <___vfprintf_internal_r+0xd78>
 10188fc:	070040f4 	movhi	fp,259
 1018900:	e713bf84 	addi	fp,fp,20222
 1018904:	9425883a 	add	r18,r18,r16
 1018908:	8c400044 	addi	r17,r17,1
 101890c:	008001c4 	movi	r2,7
 1018910:	9f000015 	stw	fp,0(r19)
 1018914:	9c000115 	stw	r16,4(r19)
 1018918:	dc800e15 	stw	r18,56(sp)
 101891c:	dc400d15 	stw	r17,52(sp)
 1018920:	147e720e 	bge	r2,r17,10182ec <___vfprintf_internal_r+0x7b0>
 1018924:	d9014f17 	ldw	r4,1340(sp)
 1018928:	b00b883a 	mov	r5,r22
 101892c:	d9800c04 	addi	r6,sp,48
 1018930:	1017ae40 	call	1017ae4 <__sprint_r>
 1018934:	103e391e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1018938:	dc800e17 	ldw	r18,56(sp)
 101893c:	dc400d17 	ldw	r17,52(sp)
 1018940:	dcc01904 	addi	r19,sp,100
 1018944:	003e6a06 	br	10182f0 <___vfprintf_internal_r+0x7b4>
 1018948:	d9014f17 	ldw	r4,1340(sp)
 101894c:	b00b883a 	mov	r5,r22
 1018950:	d9800c04 	addi	r6,sp,48
 1018954:	d9c15115 	stw	r7,1348(sp)
 1018958:	1017ae40 	call	1017ae4 <__sprint_r>
 101895c:	d9c15117 	ldw	r7,1348(sp)
 1018960:	103e2e1e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1018964:	dc800e17 	ldw	r18,56(sp)
 1018968:	dc400d17 	ldw	r17,52(sp)
 101896c:	dd401904 	addi	r21,sp,100
 1018970:	003dba06 	br	101805c <___vfprintf_internal_r+0x520>
 1018974:	d9014f17 	ldw	r4,1340(sp)
 1018978:	b00b883a 	mov	r5,r22
 101897c:	d9800c04 	addi	r6,sp,48
 1018980:	1017ae40 	call	1017ae4 <__sprint_r>
 1018984:	103e251e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1018988:	dc800e17 	ldw	r18,56(sp)
 101898c:	dc400d17 	ldw	r17,52(sp)
 1018990:	dcc01904 	addi	r19,sp,100
 1018994:	003e4206 	br	10182a0 <___vfprintf_internal_r+0x764>
 1018998:	d9014f17 	ldw	r4,1340(sp)
 101899c:	b00b883a 	mov	r5,r22
 10189a0:	d9800c04 	addi	r6,sp,48
 10189a4:	1017ae40 	call	1017ae4 <__sprint_r>
 10189a8:	103e1c1e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 10189ac:	dc800e17 	ldw	r18,56(sp)
 10189b0:	dc400d17 	ldw	r17,52(sp)
 10189b4:	d8c01904 	addi	r3,sp,100
 10189b8:	003e2e06 	br	1018274 <___vfprintf_internal_r+0x738>
 10189bc:	d9414c17 	ldw	r5,1328(sp)
 10189c0:	2880004c 	andi	r2,r5,1
 10189c4:	1005003a 	cmpeq	r2,r2,zero
 10189c8:	103dda1e 	bne	r2,zero,1018134 <___vfprintf_internal_r+0x5f8>
 10189cc:	003e9f06 	br	101844c <___vfprintf_internal_r+0x910>
 10189d0:	d8c14117 	ldw	r3,1284(sp)
 10189d4:	9125883a 	add	r18,r18,r4
 10189d8:	8c400044 	addi	r17,r17,1
 10189dc:	008001c4 	movi	r2,7
 10189e0:	a8c00015 	stw	r3,0(r21)
 10189e4:	a9000115 	stw	r4,4(r21)
 10189e8:	dc800e15 	stw	r18,56(sp)
 10189ec:	dc400d15 	stw	r17,52(sp)
 10189f0:	14426616 	blt	r2,r17,101938c <___vfprintf_internal_r+0x1850>
 10189f4:	a8c00204 	addi	r3,r21,8
 10189f8:	d9414917 	ldw	r5,1316(sp)
 10189fc:	00800044 	movi	r2,1
 1018a00:	94800044 	addi	r18,r18,1
 1018a04:	8c400044 	addi	r17,r17,1
 1018a08:	18800115 	stw	r2,4(r3)
 1018a0c:	008001c4 	movi	r2,7
 1018a10:	19400015 	stw	r5,0(r3)
 1018a14:	dc800e15 	stw	r18,56(sp)
 1018a18:	dc400d15 	stw	r17,52(sp)
 1018a1c:	2021883a 	mov	r16,r4
 1018a20:	14425016 	blt	r2,r17,1019364 <___vfprintf_internal_r+0x1828>
 1018a24:	19400204 	addi	r5,r3,8
 1018a28:	d9814717 	ldw	r6,1308(sp)
 1018a2c:	8c400044 	addi	r17,r17,1
 1018a30:	dc400d15 	stw	r17,52(sp)
 1018a34:	3107c83a 	sub	r3,r6,r4
 1018a38:	d9014117 	ldw	r4,1284(sp)
 1018a3c:	90e5883a 	add	r18,r18,r3
 1018a40:	28c00115 	stw	r3,4(r5)
 1018a44:	8105883a 	add	r2,r16,r4
 1018a48:	28800015 	stw	r2,0(r5)
 1018a4c:	008001c4 	movi	r2,7
 1018a50:	dc800e15 	stw	r18,56(sp)
 1018a54:	147f1d16 	blt	r2,r17,10186cc <___vfprintf_internal_r+0xb90>
 1018a58:	28c00204 	addi	r3,r5,8
 1018a5c:	003db506 	br	1018134 <___vfprintf_internal_r+0x5f8>
 1018a60:	3c000017 	ldw	r16,0(r7)
 1018a64:	3c400117 	ldw	r17,4(r7)
 1018a68:	39800204 	addi	r6,r7,8
 1018a6c:	01000044 	movi	r4,1
 1018a70:	d9814015 	stw	r6,1280(sp)
 1018a74:	d8000405 	stb	zero,16(sp)
 1018a78:	003ebe06 	br	1018574 <___vfprintf_internal_r+0xa38>
 1018a7c:	3c000017 	ldw	r16,0(r7)
 1018a80:	3c400117 	ldw	r17,4(r7)
 1018a84:	38800204 	addi	r2,r7,8
 1018a88:	d8814015 	stw	r2,1280(sp)
 1018a8c:	003eb706 	br	101856c <___vfprintf_internal_r+0xa30>
 1018a90:	3c000017 	ldw	r16,0(r7)
 1018a94:	3c400117 	ldw	r17,4(r7)
 1018a98:	39000204 	addi	r4,r7,8
 1018a9c:	d9014015 	stw	r4,1280(sp)
 1018aa0:	0009883a 	mov	r4,zero
 1018aa4:	d8000405 	stb	zero,16(sp)
 1018aa8:	003eb206 	br	1018574 <___vfprintf_internal_r+0xa38>
 1018aac:	38c00017 	ldw	r3,0(r7)
 1018ab0:	39c00104 	addi	r7,r7,4
 1018ab4:	d8c14a15 	stw	r3,1320(sp)
 1018ab8:	1800d10e 	bge	r3,zero,1018e00 <___vfprintf_internal_r+0x12c4>
 1018abc:	00c7c83a 	sub	r3,zero,r3
 1018ac0:	d8c14a15 	stw	r3,1320(sp)
 1018ac4:	d9014c17 	ldw	r4,1328(sp)
 1018ac8:	b8c00007 	ldb	r3,0(r23)
 1018acc:	21000114 	ori	r4,r4,4
 1018ad0:	d9014c15 	stw	r4,1328(sp)
 1018ad4:	003c9806 	br	1017d38 <___vfprintf_internal_r+0x1fc>
 1018ad8:	d9814c17 	ldw	r6,1328(sp)
 1018adc:	3080080c 	andi	r2,r6,32
 1018ae0:	1001f026 	beq	r2,zero,10192a4 <___vfprintf_internal_r+0x1768>
 1018ae4:	d9014b17 	ldw	r4,1324(sp)
 1018ae8:	38800017 	ldw	r2,0(r7)
 1018aec:	39c00104 	addi	r7,r7,4
 1018af0:	d9c14015 	stw	r7,1280(sp)
 1018af4:	2007d7fa 	srai	r3,r4,31
 1018af8:	d9c14017 	ldw	r7,1280(sp)
 1018afc:	11000015 	stw	r4,0(r2)
 1018b00:	10c00115 	stw	r3,4(r2)
 1018b04:	003c6906 	br	1017cac <___vfprintf_internal_r+0x170>
 1018b08:	b8c00007 	ldb	r3,0(r23)
 1018b0c:	00801b04 	movi	r2,108
 1018b10:	18824f26 	beq	r3,r2,1019450 <___vfprintf_internal_r+0x1914>
 1018b14:	d9414c17 	ldw	r5,1328(sp)
 1018b18:	29400414 	ori	r5,r5,16
 1018b1c:	d9414c15 	stw	r5,1328(sp)
 1018b20:	003c8506 	br	1017d38 <___vfprintf_internal_r+0x1fc>
 1018b24:	d9814c17 	ldw	r6,1328(sp)
 1018b28:	b8c00007 	ldb	r3,0(r23)
 1018b2c:	31800814 	ori	r6,r6,32
 1018b30:	d9814c15 	stw	r6,1328(sp)
 1018b34:	003c8006 	br	1017d38 <___vfprintf_internal_r+0x1fc>
 1018b38:	d8814c17 	ldw	r2,1328(sp)
 1018b3c:	3c000017 	ldw	r16,0(r7)
 1018b40:	00c01e04 	movi	r3,120
 1018b44:	10800094 	ori	r2,r2,2
 1018b48:	d8814c15 	stw	r2,1328(sp)
 1018b4c:	39c00104 	addi	r7,r7,4
 1018b50:	014040f4 	movhi	r5,259
 1018b54:	2953a804 	addi	r5,r5,20128
 1018b58:	00800c04 	movi	r2,48
 1018b5c:	0023883a 	mov	r17,zero
 1018b60:	01000084 	movi	r4,2
 1018b64:	d9c14015 	stw	r7,1280(sp)
 1018b68:	d8c14d15 	stw	r3,1332(sp)
 1018b6c:	d9414415 	stw	r5,1296(sp)
 1018b70:	d8800445 	stb	r2,17(sp)
 1018b74:	d8c00485 	stb	r3,18(sp)
 1018b78:	d8000405 	stb	zero,16(sp)
 1018b7c:	003e7d06 	br	1018574 <___vfprintf_internal_r+0xa38>
 1018b80:	d8814c17 	ldw	r2,1328(sp)
 1018b84:	b8c00007 	ldb	r3,0(r23)
 1018b88:	10801014 	ori	r2,r2,64
 1018b8c:	d8814c15 	stw	r2,1328(sp)
 1018b90:	003c6906 	br	1017d38 <___vfprintf_internal_r+0x1fc>
 1018b94:	d9414c17 	ldw	r5,1328(sp)
 1018b98:	2880020c 	andi	r2,r5,8
 1018b9c:	1001df26 	beq	r2,zero,101931c <___vfprintf_internal_r+0x17e0>
 1018ba0:	39800017 	ldw	r6,0(r7)
 1018ba4:	38800204 	addi	r2,r7,8
 1018ba8:	d8814015 	stw	r2,1280(sp)
 1018bac:	d9814215 	stw	r6,1288(sp)
 1018bb0:	39c00117 	ldw	r7,4(r7)
 1018bb4:	d9c14315 	stw	r7,1292(sp)
 1018bb8:	d9014217 	ldw	r4,1288(sp)
 1018bbc:	d9414317 	ldw	r5,1292(sp)
 1018bc0:	101e7480 	call	101e748 <__isinfd>
 1018bc4:	10021726 	beq	r2,zero,1019424 <___vfprintf_internal_r+0x18e8>
 1018bc8:	d9014217 	ldw	r4,1288(sp)
 1018bcc:	d9414317 	ldw	r5,1292(sp)
 1018bd0:	000d883a 	mov	r6,zero
 1018bd4:	000f883a 	mov	r7,zero
 1018bd8:	10132480 	call	1013248 <__ltdf2>
 1018bdc:	1002ca16 	blt	r2,zero,1019708 <___vfprintf_internal_r+0x1bcc>
 1018be0:	d9414d17 	ldw	r5,1332(sp)
 1018be4:	008011c4 	movi	r2,71
 1018be8:	11420a16 	blt	r2,r5,1019414 <___vfprintf_internal_r+0x18d8>
 1018bec:	018040f4 	movhi	r6,259
 1018bf0:	3193ad04 	addi	r6,r6,20148
 1018bf4:	d9814115 	stw	r6,1284(sp)
 1018bf8:	d9014c17 	ldw	r4,1328(sp)
 1018bfc:	00c000c4 	movi	r3,3
 1018c00:	00bfdfc4 	movi	r2,-129
 1018c04:	2088703a 	and	r4,r4,r2
 1018c08:	180f883a 	mov	r7,r3
 1018c0c:	d8c14515 	stw	r3,1300(sp)
 1018c10:	d9014c15 	stw	r4,1328(sp)
 1018c14:	d8014615 	stw	zero,1304(sp)
 1018c18:	003e6a06 	br	10185c4 <___vfprintf_internal_r+0xa88>
 1018c1c:	38800017 	ldw	r2,0(r7)
 1018c20:	00c00044 	movi	r3,1
 1018c24:	39c00104 	addi	r7,r7,4
 1018c28:	d9c14015 	stw	r7,1280(sp)
 1018c2c:	d9000f04 	addi	r4,sp,60
 1018c30:	180f883a 	mov	r7,r3
 1018c34:	d8c14515 	stw	r3,1300(sp)
 1018c38:	d9014115 	stw	r4,1284(sp)
 1018c3c:	d8800f05 	stb	r2,60(sp)
 1018c40:	d8000405 	stb	zero,16(sp)
 1018c44:	003cac06 	br	1017ef8 <___vfprintf_internal_r+0x3bc>
 1018c48:	014040f4 	movhi	r5,259
 1018c4c:	2953b304 	addi	r5,r5,20172
 1018c50:	d9414415 	stw	r5,1296(sp)
 1018c54:	d9814c17 	ldw	r6,1328(sp)
 1018c58:	3080080c 	andi	r2,r6,32
 1018c5c:	1000f926 	beq	r2,zero,1019044 <___vfprintf_internal_r+0x1508>
 1018c60:	3c000017 	ldw	r16,0(r7)
 1018c64:	3c400117 	ldw	r17,4(r7)
 1018c68:	38800204 	addi	r2,r7,8
 1018c6c:	d8814015 	stw	r2,1280(sp)
 1018c70:	d9414c17 	ldw	r5,1328(sp)
 1018c74:	2880004c 	andi	r2,r5,1
 1018c78:	1005003a 	cmpeq	r2,r2,zero
 1018c7c:	1000b31e 	bne	r2,zero,1018f4c <___vfprintf_internal_r+0x1410>
 1018c80:	8444b03a 	or	r2,r16,r17
 1018c84:	1000b126 	beq	r2,zero,1018f4c <___vfprintf_internal_r+0x1410>
 1018c88:	d9814d17 	ldw	r6,1332(sp)
 1018c8c:	29400094 	ori	r5,r5,2
 1018c90:	00800c04 	movi	r2,48
 1018c94:	01000084 	movi	r4,2
 1018c98:	d9414c15 	stw	r5,1328(sp)
 1018c9c:	d8800445 	stb	r2,17(sp)
 1018ca0:	d9800485 	stb	r6,18(sp)
 1018ca4:	d8000405 	stb	zero,16(sp)
 1018ca8:	003e3206 	br	1018574 <___vfprintf_internal_r+0xa38>
 1018cac:	018040f4 	movhi	r6,259
 1018cb0:	3193a804 	addi	r6,r6,20128
 1018cb4:	d9814415 	stw	r6,1296(sp)
 1018cb8:	003fe606 	br	1018c54 <___vfprintf_internal_r+0x1118>
 1018cbc:	00800ac4 	movi	r2,43
 1018cc0:	d8800405 	stb	r2,16(sp)
 1018cc4:	b8c00007 	ldb	r3,0(r23)
 1018cc8:	003c1b06 	br	1017d38 <___vfprintf_internal_r+0x1fc>
 1018ccc:	d8814c17 	ldw	r2,1328(sp)
 1018cd0:	b8c00007 	ldb	r3,0(r23)
 1018cd4:	10800054 	ori	r2,r2,1
 1018cd8:	d8814c15 	stw	r2,1328(sp)
 1018cdc:	003c1606 	br	1017d38 <___vfprintf_internal_r+0x1fc>
 1018ce0:	d8800407 	ldb	r2,16(sp)
 1018ce4:	1000461e 	bne	r2,zero,1018e00 <___vfprintf_internal_r+0x12c4>
 1018ce8:	00800804 	movi	r2,32
 1018cec:	d8800405 	stb	r2,16(sp)
 1018cf0:	b8c00007 	ldb	r3,0(r23)
 1018cf4:	003c1006 	br	1017d38 <___vfprintf_internal_r+0x1fc>
 1018cf8:	d9814c17 	ldw	r6,1328(sp)
 1018cfc:	b8c00007 	ldb	r3,0(r23)
 1018d00:	31800214 	ori	r6,r6,8
 1018d04:	d9814c15 	stw	r6,1328(sp)
 1018d08:	003c0b06 	br	1017d38 <___vfprintf_internal_r+0x1fc>
 1018d0c:	0007883a 	mov	r3,zero
 1018d10:	01000244 	movi	r4,9
 1018d14:	188002a4 	muli	r2,r3,10
 1018d18:	b8c00007 	ldb	r3,0(r23)
 1018d1c:	d9814d17 	ldw	r6,1332(sp)
 1018d20:	bdc00044 	addi	r23,r23,1
 1018d24:	d8c14d15 	stw	r3,1332(sp)
 1018d28:	d9414d17 	ldw	r5,1332(sp)
 1018d2c:	3085883a 	add	r2,r6,r2
 1018d30:	10fff404 	addi	r3,r2,-48
 1018d34:	28bff404 	addi	r2,r5,-48
 1018d38:	20bff62e 	bgeu	r4,r2,1018d14 <___vfprintf_internal_r+0x11d8>
 1018d3c:	d8c14a15 	stw	r3,1320(sp)
 1018d40:	003bff06 	br	1017d40 <___vfprintf_internal_r+0x204>
 1018d44:	d9414c17 	ldw	r5,1328(sp)
 1018d48:	b8c00007 	ldb	r3,0(r23)
 1018d4c:	29402014 	ori	r5,r5,128
 1018d50:	d9414c15 	stw	r5,1328(sp)
 1018d54:	003bf806 	br	1017d38 <___vfprintf_internal_r+0x1fc>
 1018d58:	b8c00007 	ldb	r3,0(r23)
 1018d5c:	00800a84 	movi	r2,42
 1018d60:	bdc00044 	addi	r23,r23,1
 1018d64:	18831526 	beq	r3,r2,10199bc <___vfprintf_internal_r+0x1e80>
 1018d68:	d8c14d15 	stw	r3,1332(sp)
 1018d6c:	18bff404 	addi	r2,r3,-48
 1018d70:	00c00244 	movi	r3,9
 1018d74:	18827836 	bltu	r3,r2,1019758 <___vfprintf_internal_r+0x1c1c>
 1018d78:	000d883a 	mov	r6,zero
 1018d7c:	308002a4 	muli	r2,r6,10
 1018d80:	b9800007 	ldb	r6,0(r23)
 1018d84:	d9414d17 	ldw	r5,1332(sp)
 1018d88:	bdc00044 	addi	r23,r23,1
 1018d8c:	d9814d15 	stw	r6,1332(sp)
 1018d90:	d9014d17 	ldw	r4,1332(sp)
 1018d94:	1145883a 	add	r2,r2,r5
 1018d98:	11bff404 	addi	r6,r2,-48
 1018d9c:	20bff404 	addi	r2,r4,-48
 1018da0:	18bff62e 	bgeu	r3,r2,1018d7c <___vfprintf_internal_r+0x1240>
 1018da4:	3027883a 	mov	r19,r6
 1018da8:	303be50e 	bge	r6,zero,1017d40 <___vfprintf_internal_r+0x204>
 1018dac:	04ffffc4 	movi	r19,-1
 1018db0:	003be306 	br	1017d40 <___vfprintf_internal_r+0x204>
 1018db4:	d8000405 	stb	zero,16(sp)
 1018db8:	39800017 	ldw	r6,0(r7)
 1018dbc:	39c00104 	addi	r7,r7,4
 1018dc0:	d9c14015 	stw	r7,1280(sp)
 1018dc4:	d9814115 	stw	r6,1284(sp)
 1018dc8:	3001c926 	beq	r6,zero,10194f0 <___vfprintf_internal_r+0x19b4>
 1018dcc:	98000e16 	blt	r19,zero,1018e08 <___vfprintf_internal_r+0x12cc>
 1018dd0:	d9014117 	ldw	r4,1284(sp)
 1018dd4:	000b883a 	mov	r5,zero
 1018dd8:	980d883a 	mov	r6,r19
 1018ddc:	101ce180 	call	101ce18 <memchr>
 1018de0:	10025926 	beq	r2,zero,1019748 <___vfprintf_internal_r+0x1c0c>
 1018de4:	d8c14117 	ldw	r3,1284(sp)
 1018de8:	10cfc83a 	sub	r7,r2,r3
 1018dec:	99c19e16 	blt	r19,r7,1019468 <___vfprintf_internal_r+0x192c>
 1018df0:	d9c14515 	stw	r7,1300(sp)
 1018df4:	38000916 	blt	r7,zero,1018e1c <___vfprintf_internal_r+0x12e0>
 1018df8:	d8014615 	stw	zero,1304(sp)
 1018dfc:	003df106 	br	10185c4 <___vfprintf_internal_r+0xa88>
 1018e00:	b8c00007 	ldb	r3,0(r23)
 1018e04:	003bcc06 	br	1017d38 <___vfprintf_internal_r+0x1fc>
 1018e08:	d9014117 	ldw	r4,1284(sp)
 1018e0c:	1015cfc0 	call	1015cfc <strlen>
 1018e10:	d8814515 	stw	r2,1300(sp)
 1018e14:	100f883a 	mov	r7,r2
 1018e18:	103ff70e 	bge	r2,zero,1018df8 <___vfprintf_internal_r+0x12bc>
 1018e1c:	d8014515 	stw	zero,1300(sp)
 1018e20:	d8014615 	stw	zero,1304(sp)
 1018e24:	003de706 	br	10185c4 <___vfprintf_internal_r+0xa88>
 1018e28:	20c03fcc 	andi	r3,r4,255
 1018e2c:	00800044 	movi	r2,1
 1018e30:	18802d26 	beq	r3,r2,1018ee8 <___vfprintf_internal_r+0x13ac>
 1018e34:	18800e36 	bltu	r3,r2,1018e70 <___vfprintf_internal_r+0x1334>
 1018e38:	00800084 	movi	r2,2
 1018e3c:	1880fa26 	beq	r3,r2,1019228 <___vfprintf_internal_r+0x16ec>
 1018e40:	010040f4 	movhi	r4,259
 1018e44:	2113b804 	addi	r4,r4,20192
 1018e48:	1015cfc0 	call	1015cfc <strlen>
 1018e4c:	100f883a 	mov	r7,r2
 1018e50:	dcc14515 	stw	r19,1300(sp)
 1018e54:	9880010e 	bge	r19,r2,1018e5c <___vfprintf_internal_r+0x1320>
 1018e58:	d8814515 	stw	r2,1300(sp)
 1018e5c:	008040f4 	movhi	r2,259
 1018e60:	1093b804 	addi	r2,r2,20192
 1018e64:	dcc14615 	stw	r19,1304(sp)
 1018e68:	d8814115 	stw	r2,1284(sp)
 1018e6c:	003dd506 	br	10185c4 <___vfprintf_internal_r+0xa88>
 1018e70:	d9401904 	addi	r5,sp,100
 1018e74:	dd000f04 	addi	r20,sp,60
 1018e78:	d9414115 	stw	r5,1284(sp)
 1018e7c:	880a977a 	slli	r5,r17,29
 1018e80:	d9814117 	ldw	r6,1284(sp)
 1018e84:	8004d0fa 	srli	r2,r16,3
 1018e88:	8806d0fa 	srli	r3,r17,3
 1018e8c:	810001cc 	andi	r4,r16,7
 1018e90:	2884b03a 	or	r2,r5,r2
 1018e94:	31bfffc4 	addi	r6,r6,-1
 1018e98:	21000c04 	addi	r4,r4,48
 1018e9c:	d9814115 	stw	r6,1284(sp)
 1018ea0:	10cab03a 	or	r5,r2,r3
 1018ea4:	31000005 	stb	r4,0(r6)
 1018ea8:	1021883a 	mov	r16,r2
 1018eac:	1823883a 	mov	r17,r3
 1018eb0:	283ff21e 	bne	r5,zero,1018e7c <___vfprintf_internal_r+0x1340>
 1018eb4:	d8c14c17 	ldw	r3,1328(sp)
 1018eb8:	1880004c 	andi	r2,r3,1
 1018ebc:	1005003a 	cmpeq	r2,r2,zero
 1018ec0:	103db91e 	bne	r2,zero,10185a8 <___vfprintf_internal_r+0xa6c>
 1018ec4:	20803fcc 	andi	r2,r4,255
 1018ec8:	1080201c 	xori	r2,r2,128
 1018ecc:	10bfe004 	addi	r2,r2,-128
 1018ed0:	00c00c04 	movi	r3,48
 1018ed4:	10fdb426 	beq	r2,r3,10185a8 <___vfprintf_internal_r+0xa6c>
 1018ed8:	31bfffc4 	addi	r6,r6,-1
 1018edc:	d9814115 	stw	r6,1284(sp)
 1018ee0:	30c00005 	stb	r3,0(r6)
 1018ee4:	003db006 	br	10185a8 <___vfprintf_internal_r+0xa6c>
 1018ee8:	88800068 	cmpgeui	r2,r17,1
 1018eec:	10002c1e 	bne	r2,zero,1018fa0 <___vfprintf_internal_r+0x1464>
 1018ef0:	8800021e 	bne	r17,zero,1018efc <___vfprintf_internal_r+0x13c0>
 1018ef4:	00800244 	movi	r2,9
 1018ef8:	14002936 	bltu	r2,r16,1018fa0 <___vfprintf_internal_r+0x1464>
 1018efc:	d90018c4 	addi	r4,sp,99
 1018f00:	dd000f04 	addi	r20,sp,60
 1018f04:	d9014115 	stw	r4,1284(sp)
 1018f08:	d9014117 	ldw	r4,1284(sp)
 1018f0c:	80800c04 	addi	r2,r16,48
 1018f10:	20800005 	stb	r2,0(r4)
 1018f14:	003da406 	br	10185a8 <___vfprintf_internal_r+0xa6c>
 1018f18:	dc400d17 	ldw	r17,52(sp)
 1018f1c:	070040f4 	movhi	fp,259
 1018f20:	e713bf84 	addi	fp,fp,20222
 1018f24:	9425883a 	add	r18,r18,r16
 1018f28:	8c400044 	addi	r17,r17,1
 1018f2c:	008001c4 	movi	r2,7
 1018f30:	1f000015 	stw	fp,0(r3)
 1018f34:	1c000115 	stw	r16,4(r3)
 1018f38:	dc800e15 	stw	r18,56(sp)
 1018f3c:	dc400d15 	stw	r17,52(sp)
 1018f40:	147de216 	blt	r2,r17,10186cc <___vfprintf_internal_r+0xb90>
 1018f44:	18c00204 	addi	r3,r3,8
 1018f48:	003c7a06 	br	1018134 <___vfprintf_internal_r+0x5f8>
 1018f4c:	01000084 	movi	r4,2
 1018f50:	d8000405 	stb	zero,16(sp)
 1018f54:	003d8706 	br	1018574 <___vfprintf_internal_r+0xa38>
 1018f58:	d9814c17 	ldw	r6,1328(sp)
 1018f5c:	30c4703a 	and	r2,r6,r3
 1018f60:	1005003a 	cmpeq	r2,r2,zero
 1018f64:	103cb926 	beq	r2,zero,101824c <___vfprintf_internal_r+0x710>
 1018f68:	d9014117 	ldw	r4,1284(sp)
 1018f6c:	94800044 	addi	r18,r18,1
 1018f70:	8c400044 	addi	r17,r17,1
 1018f74:	008001c4 	movi	r2,7
 1018f78:	a9000015 	stw	r4,0(r21)
 1018f7c:	a8c00115 	stw	r3,4(r21)
 1018f80:	dc800e15 	stw	r18,56(sp)
 1018f84:	dc400d15 	stw	r17,52(sp)
 1018f88:	147e6616 	blt	r2,r17,1018924 <___vfprintf_internal_r+0xde8>
 1018f8c:	acc00204 	addi	r19,r21,8
 1018f90:	003cd706 	br	10182f0 <___vfprintf_internal_r+0x7b4>
 1018f94:	070040f4 	movhi	fp,259
 1018f98:	e713bf84 	addi	fp,fp,20222
 1018f9c:	003c4f06 	br	10180dc <___vfprintf_internal_r+0x5a0>
 1018fa0:	dd000f04 	addi	r20,sp,60
 1018fa4:	dc801904 	addi	r18,sp,100
 1018fa8:	8009883a 	mov	r4,r16
 1018fac:	880b883a 	mov	r5,r17
 1018fb0:	01800284 	movi	r6,10
 1018fb4:	000f883a 	mov	r7,zero
 1018fb8:	10204780 	call	1020478 <__umoddi3>
 1018fbc:	12000c04 	addi	r8,r2,48
 1018fc0:	94bfffc4 	addi	r18,r18,-1
 1018fc4:	8009883a 	mov	r4,r16
 1018fc8:	880b883a 	mov	r5,r17
 1018fcc:	01800284 	movi	r6,10
 1018fd0:	000f883a 	mov	r7,zero
 1018fd4:	92000005 	stb	r8,0(r18)
 1018fd8:	101fe9c0 	call	101fe9c <__udivdi3>
 1018fdc:	1009883a 	mov	r4,r2
 1018fe0:	1021883a 	mov	r16,r2
 1018fe4:	18800068 	cmpgeui	r2,r3,1
 1018fe8:	1823883a 	mov	r17,r3
 1018fec:	103fee1e 	bne	r2,zero,1018fa8 <___vfprintf_internal_r+0x146c>
 1018ff0:	1800021e 	bne	r3,zero,1018ffc <___vfprintf_internal_r+0x14c0>
 1018ff4:	00800244 	movi	r2,9
 1018ff8:	113feb36 	bltu	r2,r4,1018fa8 <___vfprintf_internal_r+0x146c>
 1018ffc:	94bfffc4 	addi	r18,r18,-1
 1019000:	dc814115 	stw	r18,1284(sp)
 1019004:	003fc006 	br	1018f08 <___vfprintf_internal_r+0x13cc>
 1019008:	d9014c17 	ldw	r4,1328(sp)
 101900c:	2080004c 	andi	r2,r4,1
 1019010:	10009a1e 	bne	r2,zero,101927c <___vfprintf_internal_r+0x1740>
 1019014:	d9401904 	addi	r5,sp,100
 1019018:	dd000f04 	addi	r20,sp,60
 101901c:	d9414115 	stw	r5,1284(sp)
 1019020:	003d6106 	br	10185a8 <___vfprintf_internal_r+0xa6c>
 1019024:	d9014f17 	ldw	r4,1340(sp)
 1019028:	b00b883a 	mov	r5,r22
 101902c:	d9800c04 	addi	r6,sp,48
 1019030:	1017ae40 	call	1017ae4 <__sprint_r>
 1019034:	103c791e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1019038:	dc800e17 	ldw	r18,56(sp)
 101903c:	d8c01904 	addi	r3,sp,100
 1019040:	003cff06 	br	1018440 <___vfprintf_internal_r+0x904>
 1019044:	d8c14c17 	ldw	r3,1328(sp)
 1019048:	1880040c 	andi	r2,r3,16
 101904c:	1000711e 	bne	r2,zero,1019214 <___vfprintf_internal_r+0x16d8>
 1019050:	d9014c17 	ldw	r4,1328(sp)
 1019054:	2080100c 	andi	r2,r4,64
 1019058:	10006e26 	beq	r2,zero,1019214 <___vfprintf_internal_r+0x16d8>
 101905c:	3c00000b 	ldhu	r16,0(r7)
 1019060:	0023883a 	mov	r17,zero
 1019064:	39c00104 	addi	r7,r7,4
 1019068:	d9c14015 	stw	r7,1280(sp)
 101906c:	003f0006 	br	1018c70 <___vfprintf_internal_r+0x1134>
 1019070:	dc400d17 	ldw	r17,52(sp)
 1019074:	070040f4 	movhi	fp,259
 1019078:	e713bf84 	addi	fp,fp,20222
 101907c:	9425883a 	add	r18,r18,r16
 1019080:	8c400044 	addi	r17,r17,1
 1019084:	008001c4 	movi	r2,7
 1019088:	1f000015 	stw	fp,0(r3)
 101908c:	1c000115 	stw	r16,4(r3)
 1019090:	dc800e15 	stw	r18,56(sp)
 1019094:	dc400d15 	stw	r17,52(sp)
 1019098:	147d7616 	blt	r2,r17,1018674 <___vfprintf_internal_r+0xb38>
 101909c:	18c00204 	addi	r3,r3,8
 10190a0:	003d7b06 	br	1018690 <___vfprintf_internal_r+0xb54>
 10190a4:	dc800e17 	ldw	r18,56(sp)
 10190a8:	dc400d17 	ldw	r17,52(sp)
 10190ac:	070040f4 	movhi	fp,259
 10190b0:	e713c384 	addi	fp,fp,20238
 10190b4:	003bc006 	br	1017fb8 <___vfprintf_internal_r+0x47c>
 10190b8:	d9014f17 	ldw	r4,1340(sp)
 10190bc:	b00b883a 	mov	r5,r22
 10190c0:	d9800c04 	addi	r6,sp,48
 10190c4:	1017ae40 	call	1017ae4 <__sprint_r>
 10190c8:	103c541e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 10190cc:	dc800e17 	ldw	r18,56(sp)
 10190d0:	d8c01904 	addi	r3,sp,100
 10190d4:	003ce906 	br	101847c <___vfprintf_internal_r+0x940>
 10190d8:	3c000017 	ldw	r16,0(r7)
 10190dc:	0009883a 	mov	r4,zero
 10190e0:	39c00104 	addi	r7,r7,4
 10190e4:	0023883a 	mov	r17,zero
 10190e8:	d9c14015 	stw	r7,1280(sp)
 10190ec:	d8000405 	stb	zero,16(sp)
 10190f0:	003d2006 	br	1018574 <___vfprintf_internal_r+0xa38>
 10190f4:	38800017 	ldw	r2,0(r7)
 10190f8:	39c00104 	addi	r7,r7,4
 10190fc:	d9c14015 	stw	r7,1280(sp)
 1019100:	1023d7fa 	srai	r17,r2,31
 1019104:	1021883a 	mov	r16,r2
 1019108:	003d1806 	br	101856c <___vfprintf_internal_r+0xa30>
 101910c:	3c000017 	ldw	r16,0(r7)
 1019110:	01000044 	movi	r4,1
 1019114:	39c00104 	addi	r7,r7,4
 1019118:	0023883a 	mov	r17,zero
 101911c:	d9c14015 	stw	r7,1280(sp)
 1019120:	d8000405 	stb	zero,16(sp)
 1019124:	003d1306 	br	1018574 <___vfprintf_internal_r+0xa38>
 1019128:	008040f4 	movhi	r2,259
 101912c:	1093bf04 	addi	r2,r2,20220
 1019130:	94800044 	addi	r18,r18,1
 1019134:	8c400044 	addi	r17,r17,1
 1019138:	a8800015 	stw	r2,0(r21)
 101913c:	00c00044 	movi	r3,1
 1019140:	008001c4 	movi	r2,7
 1019144:	a8c00115 	stw	r3,4(r21)
 1019148:	dc800e15 	stw	r18,56(sp)
 101914c:	dc400d15 	stw	r17,52(sp)
 1019150:	1440ca16 	blt	r2,r17,101947c <___vfprintf_internal_r+0x1940>
 1019154:	a8c00204 	addi	r3,r21,8
 1019158:	2000061e 	bne	r4,zero,1019174 <___vfprintf_internal_r+0x1638>
 101915c:	d9414717 	ldw	r5,1308(sp)
 1019160:	2800041e 	bne	r5,zero,1019174 <___vfprintf_internal_r+0x1638>
 1019164:	d9814c17 	ldw	r6,1328(sp)
 1019168:	3080004c 	andi	r2,r6,1
 101916c:	1005003a 	cmpeq	r2,r2,zero
 1019170:	103bf01e 	bne	r2,zero,1018134 <___vfprintf_internal_r+0x5f8>
 1019174:	00800044 	movi	r2,1
 1019178:	dc400d17 	ldw	r17,52(sp)
 101917c:	18800115 	stw	r2,4(r3)
 1019180:	d8814917 	ldw	r2,1316(sp)
 1019184:	94800044 	addi	r18,r18,1
 1019188:	8c400044 	addi	r17,r17,1
 101918c:	18800015 	stw	r2,0(r3)
 1019190:	008001c4 	movi	r2,7
 1019194:	dc800e15 	stw	r18,56(sp)
 1019198:	dc400d15 	stw	r17,52(sp)
 101919c:	1440ca16 	blt	r2,r17,10194c8 <___vfprintf_internal_r+0x198c>
 10191a0:	18c00204 	addi	r3,r3,8
 10191a4:	0121c83a 	sub	r16,zero,r4
 10191a8:	0400500e 	bge	zero,r16,10192ec <___vfprintf_internal_r+0x17b0>
 10191ac:	00800404 	movi	r2,16
 10191b0:	1400800e 	bge	r2,r16,10193b4 <___vfprintf_internal_r+0x1878>
 10191b4:	1027883a 	mov	r19,r2
 10191b8:	070040f4 	movhi	fp,259
 10191bc:	e713bf84 	addi	fp,fp,20222
 10191c0:	050001c4 	movi	r20,7
 10191c4:	00000306 	br	10191d4 <___vfprintf_internal_r+0x1698>
 10191c8:	18c00204 	addi	r3,r3,8
 10191cc:	843ffc04 	addi	r16,r16,-16
 10191d0:	9c007a0e 	bge	r19,r16,10193bc <___vfprintf_internal_r+0x1880>
 10191d4:	94800404 	addi	r18,r18,16
 10191d8:	8c400044 	addi	r17,r17,1
 10191dc:	1f000015 	stw	fp,0(r3)
 10191e0:	1cc00115 	stw	r19,4(r3)
 10191e4:	dc800e15 	stw	r18,56(sp)
 10191e8:	dc400d15 	stw	r17,52(sp)
 10191ec:	a47ff60e 	bge	r20,r17,10191c8 <___vfprintf_internal_r+0x168c>
 10191f0:	d9014f17 	ldw	r4,1340(sp)
 10191f4:	b00b883a 	mov	r5,r22
 10191f8:	d9800c04 	addi	r6,sp,48
 10191fc:	1017ae40 	call	1017ae4 <__sprint_r>
 1019200:	103c061e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1019204:	dc800e17 	ldw	r18,56(sp)
 1019208:	dc400d17 	ldw	r17,52(sp)
 101920c:	d8c01904 	addi	r3,sp,100
 1019210:	003fee06 	br	10191cc <___vfprintf_internal_r+0x1690>
 1019214:	3c000017 	ldw	r16,0(r7)
 1019218:	0023883a 	mov	r17,zero
 101921c:	39c00104 	addi	r7,r7,4
 1019220:	d9c14015 	stw	r7,1280(sp)
 1019224:	003e9206 	br	1018c70 <___vfprintf_internal_r+0x1134>
 1019228:	d9401904 	addi	r5,sp,100
 101922c:	dd000f04 	addi	r20,sp,60
 1019230:	d9414115 	stw	r5,1284(sp)
 1019234:	d9814417 	ldw	r6,1296(sp)
 1019238:	880a973a 	slli	r5,r17,28
 101923c:	8004d13a 	srli	r2,r16,4
 1019240:	810003cc 	andi	r4,r16,15
 1019244:	3109883a 	add	r4,r6,r4
 1019248:	2884b03a 	or	r2,r5,r2
 101924c:	21400003 	ldbu	r5,0(r4)
 1019250:	d9014117 	ldw	r4,1284(sp)
 1019254:	8806d13a 	srli	r3,r17,4
 1019258:	1021883a 	mov	r16,r2
 101925c:	213fffc4 	addi	r4,r4,-1
 1019260:	d9014115 	stw	r4,1284(sp)
 1019264:	d9814117 	ldw	r6,1284(sp)
 1019268:	10c8b03a 	or	r4,r2,r3
 101926c:	1823883a 	mov	r17,r3
 1019270:	31400005 	stb	r5,0(r6)
 1019274:	203fef1e 	bne	r4,zero,1019234 <___vfprintf_internal_r+0x16f8>
 1019278:	003ccb06 	br	10185a8 <___vfprintf_internal_r+0xa6c>
 101927c:	00800c04 	movi	r2,48
 1019280:	d98018c4 	addi	r6,sp,99
 1019284:	dd000f04 	addi	r20,sp,60
 1019288:	d88018c5 	stb	r2,99(sp)
 101928c:	d9814115 	stw	r6,1284(sp)
 1019290:	003cc506 	br	10185a8 <___vfprintf_internal_r+0xa6c>
 1019294:	dc400d17 	ldw	r17,52(sp)
 1019298:	070040f4 	movhi	fp,259
 101929c:	e713c384 	addi	fp,fp,20238
 10192a0:	003bc706 	br	10181c0 <___vfprintf_internal_r+0x684>
 10192a4:	d9414c17 	ldw	r5,1328(sp)
 10192a8:	2880040c 	andi	r2,r5,16
 10192ac:	10007c26 	beq	r2,zero,10194a0 <___vfprintf_internal_r+0x1964>
 10192b0:	38800017 	ldw	r2,0(r7)
 10192b4:	39c00104 	addi	r7,r7,4
 10192b8:	d9c14015 	stw	r7,1280(sp)
 10192bc:	d9814b17 	ldw	r6,1324(sp)
 10192c0:	d9c14017 	ldw	r7,1280(sp)
 10192c4:	11800015 	stw	r6,0(r2)
 10192c8:	003a7806 	br	1017cac <___vfprintf_internal_r+0x170>
 10192cc:	d9014f17 	ldw	r4,1340(sp)
 10192d0:	b00b883a 	mov	r5,r22
 10192d4:	d9800c04 	addi	r6,sp,48
 10192d8:	1017ae40 	call	1017ae4 <__sprint_r>
 10192dc:	103bcf1e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 10192e0:	dc800e17 	ldw	r18,56(sp)
 10192e4:	dc400d17 	ldw	r17,52(sp)
 10192e8:	d8c01904 	addi	r3,sp,100
 10192ec:	d9014717 	ldw	r4,1308(sp)
 10192f0:	d9414117 	ldw	r5,1284(sp)
 10192f4:	8c400044 	addi	r17,r17,1
 10192f8:	9125883a 	add	r18,r18,r4
 10192fc:	008001c4 	movi	r2,7
 1019300:	19400015 	stw	r5,0(r3)
 1019304:	19000115 	stw	r4,4(r3)
 1019308:	dc800e15 	stw	r18,56(sp)
 101930c:	dc400d15 	stw	r17,52(sp)
 1019310:	147cee16 	blt	r2,r17,10186cc <___vfprintf_internal_r+0xb90>
 1019314:	18c00204 	addi	r3,r3,8
 1019318:	003b8606 	br	1018134 <___vfprintf_internal_r+0x5f8>
 101931c:	38c00017 	ldw	r3,0(r7)
 1019320:	39000204 	addi	r4,r7,8
 1019324:	d9014015 	stw	r4,1280(sp)
 1019328:	d8c14215 	stw	r3,1288(sp)
 101932c:	39c00117 	ldw	r7,4(r7)
 1019330:	d9c14315 	stw	r7,1292(sp)
 1019334:	003e2006 	br	1018bb8 <___vfprintf_internal_r+0x107c>
 1019338:	0005883a 	mov	r2,zero
 101933c:	1409c83a 	sub	r4,r2,r16
 1019340:	1105803a 	cmpltu	r2,r2,r4
 1019344:	044bc83a 	sub	r5,zero,r17
 1019348:	2885c83a 	sub	r2,r5,r2
 101934c:	2021883a 	mov	r16,r4
 1019350:	1023883a 	mov	r17,r2
 1019354:	01000044 	movi	r4,1
 1019358:	00800b44 	movi	r2,45
 101935c:	d8800405 	stb	r2,16(sp)
 1019360:	003c8406 	br	1018574 <___vfprintf_internal_r+0xa38>
 1019364:	d9014f17 	ldw	r4,1340(sp)
 1019368:	b00b883a 	mov	r5,r22
 101936c:	d9800c04 	addi	r6,sp,48
 1019370:	1017ae40 	call	1017ae4 <__sprint_r>
 1019374:	103ba91e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1019378:	dc800e17 	ldw	r18,56(sp)
 101937c:	dc400d17 	ldw	r17,52(sp)
 1019380:	d9000517 	ldw	r4,20(sp)
 1019384:	d9401904 	addi	r5,sp,100
 1019388:	003da706 	br	1018a28 <___vfprintf_internal_r+0xeec>
 101938c:	d9014f17 	ldw	r4,1340(sp)
 1019390:	b00b883a 	mov	r5,r22
 1019394:	d9800c04 	addi	r6,sp,48
 1019398:	1017ae40 	call	1017ae4 <__sprint_r>
 101939c:	103b9f1e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 10193a0:	dc800e17 	ldw	r18,56(sp)
 10193a4:	dc400d17 	ldw	r17,52(sp)
 10193a8:	d9000517 	ldw	r4,20(sp)
 10193ac:	d8c01904 	addi	r3,sp,100
 10193b0:	003d9106 	br	10189f8 <___vfprintf_internal_r+0xebc>
 10193b4:	070040f4 	movhi	fp,259
 10193b8:	e713bf84 	addi	fp,fp,20222
 10193bc:	9425883a 	add	r18,r18,r16
 10193c0:	8c400044 	addi	r17,r17,1
 10193c4:	008001c4 	movi	r2,7
 10193c8:	1f000015 	stw	fp,0(r3)
 10193cc:	1c000115 	stw	r16,4(r3)
 10193d0:	dc800e15 	stw	r18,56(sp)
 10193d4:	dc400d15 	stw	r17,52(sp)
 10193d8:	147fbc16 	blt	r2,r17,10192cc <___vfprintf_internal_r+0x1790>
 10193dc:	18c00204 	addi	r3,r3,8
 10193e0:	003fc206 	br	10192ec <___vfprintf_internal_r+0x17b0>
 10193e4:	d9014f17 	ldw	r4,1340(sp)
 10193e8:	b00b883a 	mov	r5,r22
 10193ec:	d9800c04 	addi	r6,sp,48
 10193f0:	1017ae40 	call	1017ae4 <__sprint_r>
 10193f4:	103b891e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 10193f8:	dc800e17 	ldw	r18,56(sp)
 10193fc:	d9000517 	ldw	r4,20(sp)
 1019400:	d8c01904 	addi	r3,sp,100
 1019404:	003d0206 	br	1018810 <___vfprintf_internal_r+0xcd4>
 1019408:	070040f4 	movhi	fp,259
 101940c:	e713bf84 	addi	fp,fp,20222
 1019410:	003be406 	br	10183a4 <___vfprintf_internal_r+0x868>
 1019414:	008040f4 	movhi	r2,259
 1019418:	1093ae04 	addi	r2,r2,20152
 101941c:	d8814115 	stw	r2,1284(sp)
 1019420:	003df506 	br	1018bf8 <___vfprintf_internal_r+0x10bc>
 1019424:	d9014217 	ldw	r4,1288(sp)
 1019428:	d9414317 	ldw	r5,1292(sp)
 101942c:	10122f00 	call	10122f0 <__isnand>
 1019430:	10003926 	beq	r2,zero,1019518 <___vfprintf_internal_r+0x19dc>
 1019434:	d9414d17 	ldw	r5,1332(sp)
 1019438:	008011c4 	movi	r2,71
 101943c:	1140ce16 	blt	r2,r5,1019778 <___vfprintf_internal_r+0x1c3c>
 1019440:	018040f4 	movhi	r6,259
 1019444:	3193af04 	addi	r6,r6,20156
 1019448:	d9814115 	stw	r6,1284(sp)
 101944c:	003dea06 	br	1018bf8 <___vfprintf_internal_r+0x10bc>
 1019450:	d9014c17 	ldw	r4,1328(sp)
 1019454:	bdc00044 	addi	r23,r23,1
 1019458:	b8c00007 	ldb	r3,0(r23)
 101945c:	21000814 	ori	r4,r4,32
 1019460:	d9014c15 	stw	r4,1328(sp)
 1019464:	003a3406 	br	1017d38 <___vfprintf_internal_r+0x1fc>
 1019468:	dcc14515 	stw	r19,1300(sp)
 101946c:	98011016 	blt	r19,zero,10198b0 <___vfprintf_internal_r+0x1d74>
 1019470:	980f883a 	mov	r7,r19
 1019474:	d8014615 	stw	zero,1304(sp)
 1019478:	003c5206 	br	10185c4 <___vfprintf_internal_r+0xa88>
 101947c:	d9014f17 	ldw	r4,1340(sp)
 1019480:	b00b883a 	mov	r5,r22
 1019484:	d9800c04 	addi	r6,sp,48
 1019488:	1017ae40 	call	1017ae4 <__sprint_r>
 101948c:	103b631e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1019490:	dc800e17 	ldw	r18,56(sp)
 1019494:	d9000517 	ldw	r4,20(sp)
 1019498:	d8c01904 	addi	r3,sp,100
 101949c:	003f2e06 	br	1019158 <___vfprintf_internal_r+0x161c>
 10194a0:	d8c14c17 	ldw	r3,1328(sp)
 10194a4:	1880100c 	andi	r2,r3,64
 10194a8:	1000a026 	beq	r2,zero,101972c <___vfprintf_internal_r+0x1bf0>
 10194ac:	38800017 	ldw	r2,0(r7)
 10194b0:	39c00104 	addi	r7,r7,4
 10194b4:	d9c14015 	stw	r7,1280(sp)
 10194b8:	d9014b17 	ldw	r4,1324(sp)
 10194bc:	d9c14017 	ldw	r7,1280(sp)
 10194c0:	1100000d 	sth	r4,0(r2)
 10194c4:	0039f906 	br	1017cac <___vfprintf_internal_r+0x170>
 10194c8:	d9014f17 	ldw	r4,1340(sp)
 10194cc:	b00b883a 	mov	r5,r22
 10194d0:	d9800c04 	addi	r6,sp,48
 10194d4:	1017ae40 	call	1017ae4 <__sprint_r>
 10194d8:	103b501e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 10194dc:	dc800e17 	ldw	r18,56(sp)
 10194e0:	dc400d17 	ldw	r17,52(sp)
 10194e4:	d9000517 	ldw	r4,20(sp)
 10194e8:	d8c01904 	addi	r3,sp,100
 10194ec:	003f2d06 	br	10191a4 <___vfprintf_internal_r+0x1668>
 10194f0:	00800184 	movi	r2,6
 10194f4:	14c09a36 	bltu	r2,r19,1019760 <___vfprintf_internal_r+0x1c24>
 10194f8:	dcc14515 	stw	r19,1300(sp)
 10194fc:	9800010e 	bge	r19,zero,1019504 <___vfprintf_internal_r+0x19c8>
 1019500:	d8014515 	stw	zero,1300(sp)
 1019504:	008040f4 	movhi	r2,259
 1019508:	1093b104 	addi	r2,r2,20164
 101950c:	980f883a 	mov	r7,r19
 1019510:	d8814115 	stw	r2,1284(sp)
 1019514:	003a7806 	br	1017ef8 <___vfprintf_internal_r+0x3bc>
 1019518:	00bfffc4 	movi	r2,-1
 101951c:	9880e226 	beq	r19,r2,10198a8 <___vfprintf_internal_r+0x1d6c>
 1019520:	d9414d17 	ldw	r5,1332(sp)
 1019524:	008019c4 	movi	r2,103
 1019528:	2880dc26 	beq	r5,r2,101989c <___vfprintf_internal_r+0x1d60>
 101952c:	008011c4 	movi	r2,71
 1019530:	2880da26 	beq	r5,r2,101989c <___vfprintf_internal_r+0x1d60>
 1019534:	d9414c17 	ldw	r5,1328(sp)
 1019538:	d9014317 	ldw	r4,1292(sp)
 101953c:	d9814217 	ldw	r6,1288(sp)
 1019540:	29404014 	ori	r5,r5,256
 1019544:	d9414c15 	stw	r5,1328(sp)
 1019548:	2000cc16 	blt	r4,zero,101987c <___vfprintf_internal_r+0x1d40>
 101954c:	3021883a 	mov	r16,r6
 1019550:	2023883a 	mov	r17,r4
 1019554:	0039883a 	mov	fp,zero
 1019558:	d9414d17 	ldw	r5,1332(sp)
 101955c:	00801984 	movi	r2,102
 1019560:	2880b726 	beq	r5,r2,1019840 <___vfprintf_internal_r+0x1d04>
 1019564:	00801184 	movi	r2,70
 1019568:	2880b526 	beq	r5,r2,1019840 <___vfprintf_internal_r+0x1d04>
 101956c:	00801944 	movi	r2,101
 1019570:	2880c826 	beq	r5,r2,1019894 <___vfprintf_internal_r+0x1d58>
 1019574:	00801144 	movi	r2,69
 1019578:	2880c626 	beq	r5,r2,1019894 <___vfprintf_internal_r+0x1d58>
 101957c:	9829883a 	mov	r20,r19
 1019580:	d9014f17 	ldw	r4,1340(sp)
 1019584:	d8800504 	addi	r2,sp,20
 1019588:	880d883a 	mov	r6,r17
 101958c:	d8800115 	stw	r2,4(sp)
 1019590:	d8c00604 	addi	r3,sp,24
 1019594:	d8800704 	addi	r2,sp,28
 1019598:	800b883a 	mov	r5,r16
 101959c:	01c00084 	movi	r7,2
 10195a0:	d8c00215 	stw	r3,8(sp)
 10195a4:	d8800315 	stw	r2,12(sp)
 10195a8:	dd000015 	stw	r20,0(sp)
 10195ac:	1019e600 	call	1019e60 <_dtoa_r>
 10195b0:	d9814d17 	ldw	r6,1332(sp)
 10195b4:	d8814115 	stw	r2,1284(sp)
 10195b8:	008019c4 	movi	r2,103
 10195bc:	30809526 	beq	r6,r2,1019814 <___vfprintf_internal_r+0x1cd8>
 10195c0:	d8c14d17 	ldw	r3,1332(sp)
 10195c4:	008011c4 	movi	r2,71
 10195c8:	18809226 	beq	r3,r2,1019814 <___vfprintf_internal_r+0x1cd8>
 10195cc:	d9414117 	ldw	r5,1284(sp)
 10195d0:	d9814d17 	ldw	r6,1332(sp)
 10195d4:	00801984 	movi	r2,102
 10195d8:	2d25883a 	add	r18,r5,r20
 10195dc:	30808626 	beq	r6,r2,10197f8 <___vfprintf_internal_r+0x1cbc>
 10195e0:	00801184 	movi	r2,70
 10195e4:	30808426 	beq	r6,r2,10197f8 <___vfprintf_internal_r+0x1cbc>
 10195e8:	000d883a 	mov	r6,zero
 10195ec:	000f883a 	mov	r7,zero
 10195f0:	880b883a 	mov	r5,r17
 10195f4:	8009883a 	mov	r4,r16
 10195f8:	10130b00 	call	10130b0 <__eqdf2>
 10195fc:	1000751e 	bne	r2,zero,10197d4 <___vfprintf_internal_r+0x1c98>
 1019600:	9005883a 	mov	r2,r18
 1019604:	dc800715 	stw	r18,28(sp)
 1019608:	d9014117 	ldw	r4,1284(sp)
 101960c:	d9414d17 	ldw	r5,1332(sp)
 1019610:	00c019c4 	movi	r3,103
 1019614:	1125c83a 	sub	r18,r2,r4
 1019618:	28c06826 	beq	r5,r3,10197bc <___vfprintf_internal_r+0x1c80>
 101961c:	008011c4 	movi	r2,71
 1019620:	28806626 	beq	r5,r2,10197bc <___vfprintf_internal_r+0x1c80>
 1019624:	d9000517 	ldw	r4,20(sp)
 1019628:	d8c14d17 	ldw	r3,1332(sp)
 101962c:	00801944 	movi	r2,101
 1019630:	10c05516 	blt	r2,r3,1019788 <___vfprintf_internal_r+0x1c4c>
 1019634:	213fffc4 	addi	r4,r4,-1
 1019638:	d9000515 	stw	r4,20(sp)
 101963c:	d8c00805 	stb	r3,32(sp)
 1019640:	2021883a 	mov	r16,r4
 1019644:	2000c116 	blt	r4,zero,101994c <___vfprintf_internal_r+0x1e10>
 1019648:	00800ac4 	movi	r2,43
 101964c:	d8800845 	stb	r2,33(sp)
 1019650:	00800244 	movi	r2,9
 1019654:	1400af0e 	bge	r2,r16,1019914 <___vfprintf_internal_r+0x1dd8>
 1019658:	1027883a 	mov	r19,r2
 101965c:	dc400b84 	addi	r17,sp,46
 1019660:	8009883a 	mov	r4,r16
 1019664:	01400284 	movi	r5,10
 1019668:	10135b40 	call	10135b4 <__modsi3>
 101966c:	10800c04 	addi	r2,r2,48
 1019670:	8c7fffc4 	addi	r17,r17,-1
 1019674:	8009883a 	mov	r4,r16
 1019678:	01400284 	movi	r5,10
 101967c:	88800005 	stb	r2,0(r17)
 1019680:	10135540 	call	1013554 <__divsi3>
 1019684:	1021883a 	mov	r16,r2
 1019688:	98bff516 	blt	r19,r2,1019660 <___vfprintf_internal_r+0x1b24>
 101968c:	10c00c04 	addi	r3,r2,48
 1019690:	d88009c4 	addi	r2,sp,39
 1019694:	108001c4 	addi	r2,r2,7
 1019698:	897fffc4 	addi	r5,r17,-1
 101969c:	88ffffc5 	stb	r3,-1(r17)
 10196a0:	2880a72e 	bgeu	r5,r2,1019940 <___vfprintf_internal_r+0x1e04>
 10196a4:	1009883a 	mov	r4,r2
 10196a8:	d9800804 	addi	r6,sp,32
 10196ac:	d8c00884 	addi	r3,sp,34
 10196b0:	28800003 	ldbu	r2,0(r5)
 10196b4:	29400044 	addi	r5,r5,1
 10196b8:	18800005 	stb	r2,0(r3)
 10196bc:	18c00044 	addi	r3,r3,1
 10196c0:	293ffb36 	bltu	r5,r4,10196b0 <___vfprintf_internal_r+0x1b74>
 10196c4:	1987c83a 	sub	r3,r3,r6
 10196c8:	00800044 	movi	r2,1
 10196cc:	d8c14815 	stw	r3,1312(sp)
 10196d0:	90cf883a 	add	r7,r18,r3
 10196d4:	1480960e 	bge	r2,r18,1019930 <___vfprintf_internal_r+0x1df4>
 10196d8:	39c00044 	addi	r7,r7,1
 10196dc:	d9c14515 	stw	r7,1300(sp)
 10196e0:	38003416 	blt	r7,zero,10197b4 <___vfprintf_internal_r+0x1c78>
 10196e4:	e0803fcc 	andi	r2,fp,255
 10196e8:	1080201c 	xori	r2,r2,128
 10196ec:	10bfe004 	addi	r2,r2,-128
 10196f0:	10004e26 	beq	r2,zero,101982c <___vfprintf_internal_r+0x1cf0>
 10196f4:	00800b44 	movi	r2,45
 10196f8:	dc814715 	stw	r18,1308(sp)
 10196fc:	d8014615 	stw	zero,1304(sp)
 1019700:	d8800405 	stb	r2,16(sp)
 1019704:	003bb106 	br	10185cc <___vfprintf_internal_r+0xa90>
 1019708:	00800b44 	movi	r2,45
 101970c:	d8800405 	stb	r2,16(sp)
 1019710:	003d3306 	br	1018be0 <___vfprintf_internal_r+0x10a4>
 1019714:	d9014f17 	ldw	r4,1340(sp)
 1019718:	b00b883a 	mov	r5,r22
 101971c:	d9800c04 	addi	r6,sp,48
 1019720:	1017ae40 	call	1017ae4 <__sprint_r>
 1019724:	103abd1e 	bne	r2,zero,101821c <___vfprintf_internal_r+0x6e0>
 1019728:	003abb06 	br	1018218 <___vfprintf_internal_r+0x6dc>
 101972c:	38800017 	ldw	r2,0(r7)
 1019730:	39c00104 	addi	r7,r7,4
 1019734:	d9c14015 	stw	r7,1280(sp)
 1019738:	d9414b17 	ldw	r5,1324(sp)
 101973c:	d9c14017 	ldw	r7,1280(sp)
 1019740:	11400015 	stw	r5,0(r2)
 1019744:	00395906 	br	1017cac <___vfprintf_internal_r+0x170>
 1019748:	980f883a 	mov	r7,r19
 101974c:	dcc14515 	stw	r19,1300(sp)
 1019750:	d8014615 	stw	zero,1304(sp)
 1019754:	003b9b06 	br	10185c4 <___vfprintf_internal_r+0xa88>
 1019758:	0027883a 	mov	r19,zero
 101975c:	00397806 	br	1017d40 <___vfprintf_internal_r+0x204>
 1019760:	00c040f4 	movhi	r3,259
 1019764:	18d3b104 	addi	r3,r3,20164
 1019768:	100f883a 	mov	r7,r2
 101976c:	d8814515 	stw	r2,1300(sp)
 1019770:	d8c14115 	stw	r3,1284(sp)
 1019774:	0039e006 	br	1017ef8 <___vfprintf_internal_r+0x3bc>
 1019778:	008040f4 	movhi	r2,259
 101977c:	1093b004 	addi	r2,r2,20160
 1019780:	d8814115 	stw	r2,1284(sp)
 1019784:	003d1c06 	br	1018bf8 <___vfprintf_internal_r+0x10bc>
 1019788:	d9414d17 	ldw	r5,1332(sp)
 101978c:	00801984 	movi	r2,102
 1019790:	28804926 	beq	r5,r2,10198b8 <___vfprintf_internal_r+0x1d7c>
 1019794:	200f883a 	mov	r7,r4
 1019798:	24805716 	blt	r4,r18,10198f8 <___vfprintf_internal_r+0x1dbc>
 101979c:	d9414c17 	ldw	r5,1328(sp)
 10197a0:	2880004c 	andi	r2,r5,1
 10197a4:	10000126 	beq	r2,zero,10197ac <___vfprintf_internal_r+0x1c70>
 10197a8:	21c00044 	addi	r7,r4,1
 10197ac:	d9c14515 	stw	r7,1300(sp)
 10197b0:	383fcc0e 	bge	r7,zero,10196e4 <___vfprintf_internal_r+0x1ba8>
 10197b4:	d8014515 	stw	zero,1300(sp)
 10197b8:	003fca06 	br	10196e4 <___vfprintf_internal_r+0x1ba8>
 10197bc:	d9000517 	ldw	r4,20(sp)
 10197c0:	00bfff04 	movi	r2,-4
 10197c4:	1100480e 	bge	r2,r4,10198e8 <___vfprintf_internal_r+0x1dac>
 10197c8:	99004716 	blt	r19,r4,10198e8 <___vfprintf_internal_r+0x1dac>
 10197cc:	d8c14d15 	stw	r3,1332(sp)
 10197d0:	003ff006 	br	1019794 <___vfprintf_internal_r+0x1c58>
 10197d4:	d8800717 	ldw	r2,28(sp)
 10197d8:	14bf8b2e 	bgeu	r2,r18,1019608 <___vfprintf_internal_r+0x1acc>
 10197dc:	9007883a 	mov	r3,r18
 10197e0:	01000c04 	movi	r4,48
 10197e4:	11000005 	stb	r4,0(r2)
 10197e8:	10800044 	addi	r2,r2,1
 10197ec:	d8800715 	stw	r2,28(sp)
 10197f0:	18bffc1e 	bne	r3,r2,10197e4 <___vfprintf_internal_r+0x1ca8>
 10197f4:	003f8406 	br	1019608 <___vfprintf_internal_r+0x1acc>
 10197f8:	d8814117 	ldw	r2,1284(sp)
 10197fc:	10c00007 	ldb	r3,0(r2)
 1019800:	00800c04 	movi	r2,48
 1019804:	18805b26 	beq	r3,r2,1019974 <___vfprintf_internal_r+0x1e38>
 1019808:	d9000517 	ldw	r4,20(sp)
 101980c:	9125883a 	add	r18,r18,r4
 1019810:	003f7506 	br	10195e8 <___vfprintf_internal_r+0x1aac>
 1019814:	d9014c17 	ldw	r4,1328(sp)
 1019818:	2080004c 	andi	r2,r4,1
 101981c:	1005003a 	cmpeq	r2,r2,zero
 1019820:	103f6a26 	beq	r2,zero,10195cc <___vfprintf_internal_r+0x1a90>
 1019824:	d8800717 	ldw	r2,28(sp)
 1019828:	003f7706 	br	1019608 <___vfprintf_internal_r+0x1acc>
 101982c:	d9c14515 	stw	r7,1300(sp)
 1019830:	38004d16 	blt	r7,zero,1019968 <___vfprintf_internal_r+0x1e2c>
 1019834:	dc814715 	stw	r18,1308(sp)
 1019838:	d8014615 	stw	zero,1304(sp)
 101983c:	003b6106 	br	10185c4 <___vfprintf_internal_r+0xa88>
 1019840:	d9014f17 	ldw	r4,1340(sp)
 1019844:	d8800504 	addi	r2,sp,20
 1019848:	d8800115 	stw	r2,4(sp)
 101984c:	d8c00604 	addi	r3,sp,24
 1019850:	d8800704 	addi	r2,sp,28
 1019854:	800b883a 	mov	r5,r16
 1019858:	880d883a 	mov	r6,r17
 101985c:	01c000c4 	movi	r7,3
 1019860:	d8c00215 	stw	r3,8(sp)
 1019864:	d8800315 	stw	r2,12(sp)
 1019868:	dcc00015 	stw	r19,0(sp)
 101986c:	9829883a 	mov	r20,r19
 1019870:	1019e600 	call	1019e60 <_dtoa_r>
 1019874:	d8814115 	stw	r2,1284(sp)
 1019878:	003f5106 	br	10195c0 <___vfprintf_internal_r+0x1a84>
 101987c:	d8c14217 	ldw	r3,1288(sp)
 1019880:	d9014317 	ldw	r4,1292(sp)
 1019884:	07000b44 	movi	fp,45
 1019888:	1821883a 	mov	r16,r3
 101988c:	2460003c 	xorhi	r17,r4,32768
 1019890:	003f3106 	br	1019558 <___vfprintf_internal_r+0x1a1c>
 1019894:	9d000044 	addi	r20,r19,1
 1019898:	003f3906 	br	1019580 <___vfprintf_internal_r+0x1a44>
 101989c:	983f251e 	bne	r19,zero,1019534 <___vfprintf_internal_r+0x19f8>
 10198a0:	04c00044 	movi	r19,1
 10198a4:	003f2306 	br	1019534 <___vfprintf_internal_r+0x19f8>
 10198a8:	04c00184 	movi	r19,6
 10198ac:	003f2106 	br	1019534 <___vfprintf_internal_r+0x19f8>
 10198b0:	d8014515 	stw	zero,1300(sp)
 10198b4:	003eee06 	br	1019470 <___vfprintf_internal_r+0x1934>
 10198b8:	200f883a 	mov	r7,r4
 10198bc:	0100370e 	bge	zero,r4,101999c <___vfprintf_internal_r+0x1e60>
 10198c0:	9800031e 	bne	r19,zero,10198d0 <___vfprintf_internal_r+0x1d94>
 10198c4:	d9814c17 	ldw	r6,1328(sp)
 10198c8:	3080004c 	andi	r2,r6,1
 10198cc:	103fb726 	beq	r2,zero,10197ac <___vfprintf_internal_r+0x1c70>
 10198d0:	20800044 	addi	r2,r4,1
 10198d4:	98a7883a 	add	r19,r19,r2
 10198d8:	dcc14515 	stw	r19,1300(sp)
 10198dc:	980f883a 	mov	r7,r19
 10198e0:	983f800e 	bge	r19,zero,10196e4 <___vfprintf_internal_r+0x1ba8>
 10198e4:	003fb306 	br	10197b4 <___vfprintf_internal_r+0x1c78>
 10198e8:	d9814d17 	ldw	r6,1332(sp)
 10198ec:	31bfff84 	addi	r6,r6,-2
 10198f0:	d9814d15 	stw	r6,1332(sp)
 10198f4:	003f4c06 	br	1019628 <___vfprintf_internal_r+0x1aec>
 10198f8:	0100180e 	bge	zero,r4,101995c <___vfprintf_internal_r+0x1e20>
 10198fc:	00800044 	movi	r2,1
 1019900:	1485883a 	add	r2,r2,r18
 1019904:	d8814515 	stw	r2,1300(sp)
 1019908:	100f883a 	mov	r7,r2
 101990c:	103f750e 	bge	r2,zero,10196e4 <___vfprintf_internal_r+0x1ba8>
 1019910:	003fa806 	br	10197b4 <___vfprintf_internal_r+0x1c78>
 1019914:	80c00c04 	addi	r3,r16,48
 1019918:	00800c04 	movi	r2,48
 101991c:	d8c008c5 	stb	r3,35(sp)
 1019920:	d9800804 	addi	r6,sp,32
 1019924:	d8c00904 	addi	r3,sp,36
 1019928:	d8800885 	stb	r2,34(sp)
 101992c:	003f6506 	br	10196c4 <___vfprintf_internal_r+0x1b88>
 1019930:	d9014c17 	ldw	r4,1328(sp)
 1019934:	2084703a 	and	r2,r4,r2
 1019938:	103f9c26 	beq	r2,zero,10197ac <___vfprintf_internal_r+0x1c70>
 101993c:	003f6606 	br	10196d8 <___vfprintf_internal_r+0x1b9c>
 1019940:	d9800804 	addi	r6,sp,32
 1019944:	d8c00884 	addi	r3,sp,34
 1019948:	003f5e06 	br	10196c4 <___vfprintf_internal_r+0x1b88>
 101994c:	00800b44 	movi	r2,45
 1019950:	0121c83a 	sub	r16,zero,r4
 1019954:	d8800845 	stb	r2,33(sp)
 1019958:	003f3d06 	br	1019650 <___vfprintf_internal_r+0x1b14>
 101995c:	00800084 	movi	r2,2
 1019960:	1105c83a 	sub	r2,r2,r4
 1019964:	003fe606 	br	1019900 <___vfprintf_internal_r+0x1dc4>
 1019968:	d8014515 	stw	zero,1300(sp)
 101996c:	dc814715 	stw	r18,1308(sp)
 1019970:	003fb106 	br	1019838 <___vfprintf_internal_r+0x1cfc>
 1019974:	000d883a 	mov	r6,zero
 1019978:	000f883a 	mov	r7,zero
 101997c:	8009883a 	mov	r4,r16
 1019980:	880b883a 	mov	r5,r17
 1019984:	1020b900 	call	1020b90 <__nedf2>
 1019988:	103f9f26 	beq	r2,zero,1019808 <___vfprintf_internal_r+0x1ccc>
 101998c:	00800044 	movi	r2,1
 1019990:	1509c83a 	sub	r4,r2,r20
 1019994:	d9000515 	stw	r4,20(sp)
 1019998:	003f9b06 	br	1019808 <___vfprintf_internal_r+0x1ccc>
 101999c:	98000d1e 	bne	r19,zero,10199d4 <___vfprintf_internal_r+0x1e98>
 10199a0:	d8c14c17 	ldw	r3,1328(sp)
 10199a4:	1880004c 	andi	r2,r3,1
 10199a8:	10000a1e 	bne	r2,zero,10199d4 <___vfprintf_internal_r+0x1e98>
 10199ac:	01000044 	movi	r4,1
 10199b0:	200f883a 	mov	r7,r4
 10199b4:	d9014515 	stw	r4,1300(sp)
 10199b8:	003f4a06 	br	10196e4 <___vfprintf_internal_r+0x1ba8>
 10199bc:	3cc00017 	ldw	r19,0(r7)
 10199c0:	39c00104 	addi	r7,r7,4
 10199c4:	983d0e0e 	bge	r19,zero,1018e00 <___vfprintf_internal_r+0x12c4>
 10199c8:	b8c00007 	ldb	r3,0(r23)
 10199cc:	04ffffc4 	movi	r19,-1
 10199d0:	0038d906 	br	1017d38 <___vfprintf_internal_r+0x1fc>
 10199d4:	9cc00084 	addi	r19,r19,2
 10199d8:	dcc14515 	stw	r19,1300(sp)
 10199dc:	980f883a 	mov	r7,r19
 10199e0:	983f400e 	bge	r19,zero,10196e4 <___vfprintf_internal_r+0x1ba8>
 10199e4:	003f7306 	br	10197b4 <___vfprintf_internal_r+0x1c78>

010199e8 <__vfprintf_internal>:
 10199e8:	008040f4 	movhi	r2,259
 10199ec:	109bed04 	addi	r2,r2,28596
 10199f0:	2013883a 	mov	r9,r4
 10199f4:	11000017 	ldw	r4,0(r2)
 10199f8:	2805883a 	mov	r2,r5
 10199fc:	300f883a 	mov	r7,r6
 1019a00:	480b883a 	mov	r5,r9
 1019a04:	100d883a 	mov	r6,r2
 1019a08:	1017b3c1 	jmpi	1017b3c <___vfprintf_internal_r>

01019a0c <_write_r>:
 1019a0c:	defffd04 	addi	sp,sp,-12
 1019a10:	dc000015 	stw	r16,0(sp)
 1019a14:	04004134 	movhi	r16,260
 1019a18:	84230104 	addi	r16,r16,-29692
 1019a1c:	dc400115 	stw	r17,4(sp)
 1019a20:	80000015 	stw	zero,0(r16)
 1019a24:	2023883a 	mov	r17,r4
 1019a28:	2809883a 	mov	r4,r5
 1019a2c:	300b883a 	mov	r5,r6
 1019a30:	380d883a 	mov	r6,r7
 1019a34:	dfc00215 	stw	ra,8(sp)
 1019a38:	10221e80 	call	10221e8 <write>
 1019a3c:	1007883a 	mov	r3,r2
 1019a40:	00bfffc4 	movi	r2,-1
 1019a44:	18800626 	beq	r3,r2,1019a60 <_write_r+0x54>
 1019a48:	1805883a 	mov	r2,r3
 1019a4c:	dfc00217 	ldw	ra,8(sp)
 1019a50:	dc400117 	ldw	r17,4(sp)
 1019a54:	dc000017 	ldw	r16,0(sp)
 1019a58:	dec00304 	addi	sp,sp,12
 1019a5c:	f800283a 	ret
 1019a60:	80800017 	ldw	r2,0(r16)
 1019a64:	103ff826 	beq	r2,zero,1019a48 <_write_r+0x3c>
 1019a68:	88800015 	stw	r2,0(r17)
 1019a6c:	1805883a 	mov	r2,r3
 1019a70:	dfc00217 	ldw	ra,8(sp)
 1019a74:	dc400117 	ldw	r17,4(sp)
 1019a78:	dc000017 	ldw	r16,0(sp)
 1019a7c:	dec00304 	addi	sp,sp,12
 1019a80:	f800283a 	ret

01019a84 <__swsetup_r>:
 1019a84:	008040f4 	movhi	r2,259
 1019a88:	109bed04 	addi	r2,r2,28596
 1019a8c:	10c00017 	ldw	r3,0(r2)
 1019a90:	defffd04 	addi	sp,sp,-12
 1019a94:	dc400115 	stw	r17,4(sp)
 1019a98:	dc000015 	stw	r16,0(sp)
 1019a9c:	dfc00215 	stw	ra,8(sp)
 1019aa0:	2023883a 	mov	r17,r4
 1019aa4:	2821883a 	mov	r16,r5
 1019aa8:	18000226 	beq	r3,zero,1019ab4 <__swsetup_r+0x30>
 1019aac:	18800e17 	ldw	r2,56(r3)
 1019ab0:	10001f26 	beq	r2,zero,1019b30 <__swsetup_r+0xac>
 1019ab4:	8100030b 	ldhu	r4,12(r16)
 1019ab8:	2080020c 	andi	r2,r4,8
 1019abc:	10002826 	beq	r2,zero,1019b60 <__swsetup_r+0xdc>
 1019ac0:	81400417 	ldw	r5,16(r16)
 1019ac4:	28001d26 	beq	r5,zero,1019b3c <__swsetup_r+0xb8>
 1019ac8:	2080004c 	andi	r2,r4,1
 1019acc:	1005003a 	cmpeq	r2,r2,zero
 1019ad0:	10000b26 	beq	r2,zero,1019b00 <__swsetup_r+0x7c>
 1019ad4:	2080008c 	andi	r2,r4,2
 1019ad8:	10001226 	beq	r2,zero,1019b24 <__swsetup_r+0xa0>
 1019adc:	0005883a 	mov	r2,zero
 1019ae0:	80800215 	stw	r2,8(r16)
 1019ae4:	28000b26 	beq	r5,zero,1019b14 <__swsetup_r+0x90>
 1019ae8:	0005883a 	mov	r2,zero
 1019aec:	dfc00217 	ldw	ra,8(sp)
 1019af0:	dc400117 	ldw	r17,4(sp)
 1019af4:	dc000017 	ldw	r16,0(sp)
 1019af8:	dec00304 	addi	sp,sp,12
 1019afc:	f800283a 	ret
 1019b00:	80800517 	ldw	r2,20(r16)
 1019b04:	80000215 	stw	zero,8(r16)
 1019b08:	0085c83a 	sub	r2,zero,r2
 1019b0c:	80800615 	stw	r2,24(r16)
 1019b10:	283ff51e 	bne	r5,zero,1019ae8 <__swsetup_r+0x64>
 1019b14:	2080200c 	andi	r2,r4,128
 1019b18:	103ff326 	beq	r2,zero,1019ae8 <__swsetup_r+0x64>
 1019b1c:	00bfffc4 	movi	r2,-1
 1019b20:	003ff206 	br	1019aec <__swsetup_r+0x68>
 1019b24:	80800517 	ldw	r2,20(r16)
 1019b28:	80800215 	stw	r2,8(r16)
 1019b2c:	003fed06 	br	1019ae4 <__swsetup_r+0x60>
 1019b30:	1809883a 	mov	r4,r3
 1019b34:	1013f500 	call	1013f50 <__sinit>
 1019b38:	003fde06 	br	1019ab4 <__swsetup_r+0x30>
 1019b3c:	20c0a00c 	andi	r3,r4,640
 1019b40:	00808004 	movi	r2,512
 1019b44:	18bfe026 	beq	r3,r2,1019ac8 <__swsetup_r+0x44>
 1019b48:	8809883a 	mov	r4,r17
 1019b4c:	800b883a 	mov	r5,r16
 1019b50:	10149780 	call	1014978 <__smakebuf_r>
 1019b54:	8100030b 	ldhu	r4,12(r16)
 1019b58:	81400417 	ldw	r5,16(r16)
 1019b5c:	003fda06 	br	1019ac8 <__swsetup_r+0x44>
 1019b60:	2080040c 	andi	r2,r4,16
 1019b64:	103fed26 	beq	r2,zero,1019b1c <__swsetup_r+0x98>
 1019b68:	2080010c 	andi	r2,r4,4
 1019b6c:	10001226 	beq	r2,zero,1019bb8 <__swsetup_r+0x134>
 1019b70:	81400c17 	ldw	r5,48(r16)
 1019b74:	28000526 	beq	r5,zero,1019b8c <__swsetup_r+0x108>
 1019b78:	80801004 	addi	r2,r16,64
 1019b7c:	28800226 	beq	r5,r2,1019b88 <__swsetup_r+0x104>
 1019b80:	8809883a 	mov	r4,r17
 1019b84:	101b9340 	call	101b934 <_free_r>
 1019b88:	80000c15 	stw	zero,48(r16)
 1019b8c:	8080030b 	ldhu	r2,12(r16)
 1019b90:	81400417 	ldw	r5,16(r16)
 1019b94:	80000115 	stw	zero,4(r16)
 1019b98:	10bff6cc 	andi	r2,r2,65499
 1019b9c:	8080030d 	sth	r2,12(r16)
 1019ba0:	81400015 	stw	r5,0(r16)
 1019ba4:	8080030b 	ldhu	r2,12(r16)
 1019ba8:	10800214 	ori	r2,r2,8
 1019bac:	113fffcc 	andi	r4,r2,65535
 1019bb0:	8080030d 	sth	r2,12(r16)
 1019bb4:	003fc306 	br	1019ac4 <__swsetup_r+0x40>
 1019bb8:	81400417 	ldw	r5,16(r16)
 1019bbc:	003ff906 	br	1019ba4 <__swsetup_r+0x120>

01019bc0 <abort>:
 1019bc0:	deffff04 	addi	sp,sp,-4
 1019bc4:	01000184 	movi	r4,6
 1019bc8:	dfc00015 	stw	ra,0(sp)
 1019bcc:	101e8540 	call	101e854 <raise>
 1019bd0:	01000044 	movi	r4,1
 1019bd4:	10212a40 	call	10212a4 <_exit>

01019bd8 <_close_r>:
 1019bd8:	defffd04 	addi	sp,sp,-12
 1019bdc:	dc000015 	stw	r16,0(sp)
 1019be0:	04004134 	movhi	r16,260
 1019be4:	84230104 	addi	r16,r16,-29692
 1019be8:	dc400115 	stw	r17,4(sp)
 1019bec:	80000015 	stw	zero,0(r16)
 1019bf0:	2023883a 	mov	r17,r4
 1019bf4:	2809883a 	mov	r4,r5
 1019bf8:	dfc00215 	stw	ra,8(sp)
 1019bfc:	10210dc0 	call	10210dc <close>
 1019c00:	1007883a 	mov	r3,r2
 1019c04:	00bfffc4 	movi	r2,-1
 1019c08:	18800626 	beq	r3,r2,1019c24 <_close_r+0x4c>
 1019c0c:	1805883a 	mov	r2,r3
 1019c10:	dfc00217 	ldw	ra,8(sp)
 1019c14:	dc400117 	ldw	r17,4(sp)
 1019c18:	dc000017 	ldw	r16,0(sp)
 1019c1c:	dec00304 	addi	sp,sp,12
 1019c20:	f800283a 	ret
 1019c24:	80800017 	ldw	r2,0(r16)
 1019c28:	103ff826 	beq	r2,zero,1019c0c <_close_r+0x34>
 1019c2c:	88800015 	stw	r2,0(r17)
 1019c30:	1805883a 	mov	r2,r3
 1019c34:	dfc00217 	ldw	ra,8(sp)
 1019c38:	dc400117 	ldw	r17,4(sp)
 1019c3c:	dc000017 	ldw	r16,0(sp)
 1019c40:	dec00304 	addi	sp,sp,12
 1019c44:	f800283a 	ret

01019c48 <quorem>:
 1019c48:	28c00417 	ldw	r3,16(r5)
 1019c4c:	20800417 	ldw	r2,16(r4)
 1019c50:	defff604 	addi	sp,sp,-40
 1019c54:	ddc00715 	stw	r23,28(sp)
 1019c58:	dd400515 	stw	r21,20(sp)
 1019c5c:	dfc00915 	stw	ra,36(sp)
 1019c60:	df000815 	stw	fp,32(sp)
 1019c64:	dd800615 	stw	r22,24(sp)
 1019c68:	dd000415 	stw	r20,16(sp)
 1019c6c:	dcc00315 	stw	r19,12(sp)
 1019c70:	dc800215 	stw	r18,8(sp)
 1019c74:	dc400115 	stw	r17,4(sp)
 1019c78:	dc000015 	stw	r16,0(sp)
 1019c7c:	202f883a 	mov	r23,r4
 1019c80:	282b883a 	mov	r21,r5
 1019c84:	10c07416 	blt	r2,r3,1019e58 <quorem+0x210>
 1019c88:	1c7fffc4 	addi	r17,r3,-1
 1019c8c:	8c45883a 	add	r2,r17,r17
 1019c90:	1085883a 	add	r2,r2,r2
 1019c94:	2c000504 	addi	r16,r5,20
 1019c98:	24c00504 	addi	r19,r4,20
 1019c9c:	14ed883a 	add	r22,r2,r19
 1019ca0:	80a5883a 	add	r18,r16,r2
 1019ca4:	b7000017 	ldw	fp,0(r22)
 1019ca8:	91400017 	ldw	r5,0(r18)
 1019cac:	e009883a 	mov	r4,fp
 1019cb0:	29400044 	addi	r5,r5,1
 1019cb4:	10136140 	call	1013614 <__udivsi3>
 1019cb8:	1029883a 	mov	r20,r2
 1019cbc:	10003c1e 	bne	r2,zero,1019db0 <quorem+0x168>
 1019cc0:	a80b883a 	mov	r5,r21
 1019cc4:	b809883a 	mov	r4,r23
 1019cc8:	101d0580 	call	101d058 <__mcmp>
 1019ccc:	10002b16 	blt	r2,zero,1019d7c <quorem+0x134>
 1019cd0:	a5000044 	addi	r20,r20,1
 1019cd4:	980f883a 	mov	r7,r19
 1019cd8:	0011883a 	mov	r8,zero
 1019cdc:	0009883a 	mov	r4,zero
 1019ce0:	81400017 	ldw	r5,0(r16)
 1019ce4:	38c00017 	ldw	r3,0(r7)
 1019ce8:	84000104 	addi	r16,r16,4
 1019cec:	28bfffcc 	andi	r2,r5,65535
 1019cf0:	2085883a 	add	r2,r4,r2
 1019cf4:	11bfffcc 	andi	r6,r2,65535
 1019cf8:	193fffcc 	andi	r4,r3,65535
 1019cfc:	1004d43a 	srli	r2,r2,16
 1019d00:	280ad43a 	srli	r5,r5,16
 1019d04:	2189c83a 	sub	r4,r4,r6
 1019d08:	2209883a 	add	r4,r4,r8
 1019d0c:	1806d43a 	srli	r3,r3,16
 1019d10:	288b883a 	add	r5,r5,r2
 1019d14:	200dd43a 	srai	r6,r4,16
 1019d18:	28bfffcc 	andi	r2,r5,65535
 1019d1c:	1887c83a 	sub	r3,r3,r2
 1019d20:	1987883a 	add	r3,r3,r6
 1019d24:	3900000d 	sth	r4,0(r7)
 1019d28:	38c0008d 	sth	r3,2(r7)
 1019d2c:	2808d43a 	srli	r4,r5,16
 1019d30:	39c00104 	addi	r7,r7,4
 1019d34:	1811d43a 	srai	r8,r3,16
 1019d38:	943fe92e 	bgeu	r18,r16,1019ce0 <quorem+0x98>
 1019d3c:	8c45883a 	add	r2,r17,r17
 1019d40:	1085883a 	add	r2,r2,r2
 1019d44:	9885883a 	add	r2,r19,r2
 1019d48:	10c00017 	ldw	r3,0(r2)
 1019d4c:	18000b1e 	bne	r3,zero,1019d7c <quorem+0x134>
 1019d50:	113fff04 	addi	r4,r2,-4
 1019d54:	9900082e 	bgeu	r19,r4,1019d78 <quorem+0x130>
 1019d58:	10bfff17 	ldw	r2,-4(r2)
 1019d5c:	10000326 	beq	r2,zero,1019d6c <quorem+0x124>
 1019d60:	00000506 	br	1019d78 <quorem+0x130>
 1019d64:	20800017 	ldw	r2,0(r4)
 1019d68:	1000031e 	bne	r2,zero,1019d78 <quorem+0x130>
 1019d6c:	213fff04 	addi	r4,r4,-4
 1019d70:	8c7fffc4 	addi	r17,r17,-1
 1019d74:	993ffb36 	bltu	r19,r4,1019d64 <quorem+0x11c>
 1019d78:	bc400415 	stw	r17,16(r23)
 1019d7c:	a005883a 	mov	r2,r20
 1019d80:	dfc00917 	ldw	ra,36(sp)
 1019d84:	df000817 	ldw	fp,32(sp)
 1019d88:	ddc00717 	ldw	r23,28(sp)
 1019d8c:	dd800617 	ldw	r22,24(sp)
 1019d90:	dd400517 	ldw	r21,20(sp)
 1019d94:	dd000417 	ldw	r20,16(sp)
 1019d98:	dcc00317 	ldw	r19,12(sp)
 1019d9c:	dc800217 	ldw	r18,8(sp)
 1019da0:	dc400117 	ldw	r17,4(sp)
 1019da4:	dc000017 	ldw	r16,0(sp)
 1019da8:	dec00a04 	addi	sp,sp,40
 1019dac:	f800283a 	ret
 1019db0:	980f883a 	mov	r7,r19
 1019db4:	8011883a 	mov	r8,r16
 1019db8:	0013883a 	mov	r9,zero
 1019dbc:	000d883a 	mov	r6,zero
 1019dc0:	40c00017 	ldw	r3,0(r8)
 1019dc4:	39000017 	ldw	r4,0(r7)
 1019dc8:	42000104 	addi	r8,r8,4
 1019dcc:	18bfffcc 	andi	r2,r3,65535
 1019dd0:	a085383a 	mul	r2,r20,r2
 1019dd4:	1806d43a 	srli	r3,r3,16
 1019dd8:	217fffcc 	andi	r5,r4,65535
 1019ddc:	3085883a 	add	r2,r6,r2
 1019de0:	11bfffcc 	andi	r6,r2,65535
 1019de4:	a0c7383a 	mul	r3,r20,r3
 1019de8:	1004d43a 	srli	r2,r2,16
 1019dec:	298bc83a 	sub	r5,r5,r6
 1019df0:	2a4b883a 	add	r5,r5,r9
 1019df4:	2008d43a 	srli	r4,r4,16
 1019df8:	1887883a 	add	r3,r3,r2
 1019dfc:	280dd43a 	srai	r6,r5,16
 1019e00:	18bfffcc 	andi	r2,r3,65535
 1019e04:	2089c83a 	sub	r4,r4,r2
 1019e08:	2189883a 	add	r4,r4,r6
 1019e0c:	3900008d 	sth	r4,2(r7)
 1019e10:	3940000d 	sth	r5,0(r7)
 1019e14:	180cd43a 	srli	r6,r3,16
 1019e18:	39c00104 	addi	r7,r7,4
 1019e1c:	2013d43a 	srai	r9,r4,16
 1019e20:	923fe72e 	bgeu	r18,r8,1019dc0 <quorem+0x178>
 1019e24:	e03fa61e 	bne	fp,zero,1019cc0 <quorem+0x78>
 1019e28:	b0ffff04 	addi	r3,r22,-4
 1019e2c:	98c0082e 	bgeu	r19,r3,1019e50 <quorem+0x208>
 1019e30:	b0bfff17 	ldw	r2,-4(r22)
 1019e34:	10000326 	beq	r2,zero,1019e44 <quorem+0x1fc>
 1019e38:	00000506 	br	1019e50 <quorem+0x208>
 1019e3c:	18800017 	ldw	r2,0(r3)
 1019e40:	1000031e 	bne	r2,zero,1019e50 <quorem+0x208>
 1019e44:	18ffff04 	addi	r3,r3,-4
 1019e48:	8c7fffc4 	addi	r17,r17,-1
 1019e4c:	98fffb36 	bltu	r19,r3,1019e3c <quorem+0x1f4>
 1019e50:	bc400415 	stw	r17,16(r23)
 1019e54:	003f9a06 	br	1019cc0 <quorem+0x78>
 1019e58:	0005883a 	mov	r2,zero
 1019e5c:	003fc806 	br	1019d80 <quorem+0x138>

01019e60 <_dtoa_r>:
 1019e60:	22001017 	ldw	r8,64(r4)
 1019e64:	deffda04 	addi	sp,sp,-152
 1019e68:	dd402115 	stw	r21,132(sp)
 1019e6c:	dd002015 	stw	r20,128(sp)
 1019e70:	dc801e15 	stw	r18,120(sp)
 1019e74:	dc401d15 	stw	r17,116(sp)
 1019e78:	dfc02515 	stw	ra,148(sp)
 1019e7c:	df002415 	stw	fp,144(sp)
 1019e80:	ddc02315 	stw	r23,140(sp)
 1019e84:	dd802215 	stw	r22,136(sp)
 1019e88:	dcc01f15 	stw	r19,124(sp)
 1019e8c:	dc001c15 	stw	r16,112(sp)
 1019e90:	d9001615 	stw	r4,88(sp)
 1019e94:	3023883a 	mov	r17,r6
 1019e98:	2829883a 	mov	r20,r5
 1019e9c:	d9c01715 	stw	r7,92(sp)
 1019ea0:	dc802817 	ldw	r18,160(sp)
 1019ea4:	302b883a 	mov	r21,r6
 1019ea8:	40000a26 	beq	r8,zero,1019ed4 <_dtoa_r+0x74>
 1019eac:	20801117 	ldw	r2,68(r4)
 1019eb0:	400b883a 	mov	r5,r8
 1019eb4:	40800115 	stw	r2,4(r8)
 1019eb8:	20c01117 	ldw	r3,68(r4)
 1019ebc:	00800044 	movi	r2,1
 1019ec0:	10c4983a 	sll	r2,r2,r3
 1019ec4:	40800215 	stw	r2,8(r8)
 1019ec8:	101cefc0 	call	101cefc <_Bfree>
 1019ecc:	d8c01617 	ldw	r3,88(sp)
 1019ed0:	18001015 	stw	zero,64(r3)
 1019ed4:	8800a316 	blt	r17,zero,101a164 <_dtoa_r+0x304>
 1019ed8:	90000015 	stw	zero,0(r18)
 1019edc:	a8dffc2c 	andhi	r3,r21,32752
 1019ee0:	009ffc34 	movhi	r2,32752
 1019ee4:	18809126 	beq	r3,r2,101a12c <_dtoa_r+0x2cc>
 1019ee8:	000d883a 	mov	r6,zero
 1019eec:	000f883a 	mov	r7,zero
 1019ef0:	a009883a 	mov	r4,r20
 1019ef4:	a80b883a 	mov	r5,r21
 1019ef8:	dd001215 	stw	r20,72(sp)
 1019efc:	dd401315 	stw	r21,76(sp)
 1019f00:	1020b900 	call	1020b90 <__nedf2>
 1019f04:	1000171e 	bne	r2,zero,1019f64 <_dtoa_r+0x104>
 1019f08:	d9802717 	ldw	r6,156(sp)
 1019f0c:	00800044 	movi	r2,1
 1019f10:	30800015 	stw	r2,0(r6)
 1019f14:	d8802917 	ldw	r2,164(sp)
 1019f18:	10029b26 	beq	r2,zero,101a988 <_dtoa_r+0xb28>
 1019f1c:	d9002917 	ldw	r4,164(sp)
 1019f20:	008040f4 	movhi	r2,259
 1019f24:	1093bf44 	addi	r2,r2,20221
 1019f28:	10ffffc4 	addi	r3,r2,-1
 1019f2c:	20800015 	stw	r2,0(r4)
 1019f30:	1805883a 	mov	r2,r3
 1019f34:	dfc02517 	ldw	ra,148(sp)
 1019f38:	df002417 	ldw	fp,144(sp)
 1019f3c:	ddc02317 	ldw	r23,140(sp)
 1019f40:	dd802217 	ldw	r22,136(sp)
 1019f44:	dd402117 	ldw	r21,132(sp)
 1019f48:	dd002017 	ldw	r20,128(sp)
 1019f4c:	dcc01f17 	ldw	r19,124(sp)
 1019f50:	dc801e17 	ldw	r18,120(sp)
 1019f54:	dc401d17 	ldw	r17,116(sp)
 1019f58:	dc001c17 	ldw	r16,112(sp)
 1019f5c:	dec02604 	addi	sp,sp,152
 1019f60:	f800283a 	ret
 1019f64:	d9001617 	ldw	r4,88(sp)
 1019f68:	d9401217 	ldw	r5,72(sp)
 1019f6c:	d8800104 	addi	r2,sp,4
 1019f70:	a80d883a 	mov	r6,r21
 1019f74:	d9c00204 	addi	r7,sp,8
 1019f78:	d8800015 	stw	r2,0(sp)
 1019f7c:	101d5380 	call	101d538 <__d2b>
 1019f80:	d8800715 	stw	r2,28(sp)
 1019f84:	a804d53a 	srli	r2,r21,20
 1019f88:	1101ffcc 	andi	r4,r2,2047
 1019f8c:	20008626 	beq	r4,zero,101a1a8 <_dtoa_r+0x348>
 1019f90:	d8c01217 	ldw	r3,72(sp)
 1019f94:	00800434 	movhi	r2,16
 1019f98:	10bfffc4 	addi	r2,r2,-1
 1019f9c:	ddc00117 	ldw	r23,4(sp)
 1019fa0:	a884703a 	and	r2,r21,r2
 1019fa4:	1811883a 	mov	r8,r3
 1019fa8:	124ffc34 	orhi	r9,r2,16368
 1019fac:	25bf0044 	addi	r22,r4,-1023
 1019fb0:	d8000815 	stw	zero,32(sp)
 1019fb4:	0005883a 	mov	r2,zero
 1019fb8:	00cffe34 	movhi	r3,16376
 1019fbc:	480b883a 	mov	r5,r9
 1019fc0:	4009883a 	mov	r4,r8
 1019fc4:	180f883a 	mov	r7,r3
 1019fc8:	100d883a 	mov	r6,r2
 1019fcc:	10129a00 	call	10129a0 <__subdf3>
 1019fd0:	0218dbf4 	movhi	r8,25455
 1019fd4:	4210d844 	addi	r8,r8,17249
 1019fd8:	024ff4f4 	movhi	r9,16339
 1019fdc:	4a61e9c4 	addi	r9,r9,-30809
 1019fe0:	480f883a 	mov	r7,r9
 1019fe4:	400d883a 	mov	r6,r8
 1019fe8:	180b883a 	mov	r5,r3
 1019fec:	1009883a 	mov	r4,r2
 1019ff0:	1012a940 	call	1012a94 <__muldf3>
 1019ff4:	0222d874 	movhi	r8,35681
 1019ff8:	42322cc4 	addi	r8,r8,-14157
 1019ffc:	024ff1f4 	movhi	r9,16327
 101a000:	4a628a04 	addi	r9,r9,-30168
 101a004:	480f883a 	mov	r7,r9
 101a008:	400d883a 	mov	r6,r8
 101a00c:	180b883a 	mov	r5,r3
 101a010:	1009883a 	mov	r4,r2
 101a014:	1012a200 	call	1012a20 <__adddf3>
 101a018:	b009883a 	mov	r4,r22
 101a01c:	1021883a 	mov	r16,r2
 101a020:	1823883a 	mov	r17,r3
 101a024:	10132d00 	call	10132d0 <__floatsidf>
 101a028:	021427f4 	movhi	r8,20639
 101a02c:	421e7ec4 	addi	r8,r8,31227
 101a030:	024ff4f4 	movhi	r9,16339
 101a034:	4a5104c4 	addi	r9,r9,17427
 101a038:	480f883a 	mov	r7,r9
 101a03c:	400d883a 	mov	r6,r8
 101a040:	180b883a 	mov	r5,r3
 101a044:	1009883a 	mov	r4,r2
 101a048:	1012a940 	call	1012a94 <__muldf3>
 101a04c:	180f883a 	mov	r7,r3
 101a050:	880b883a 	mov	r5,r17
 101a054:	100d883a 	mov	r6,r2
 101a058:	8009883a 	mov	r4,r16
 101a05c:	1012a200 	call	1012a20 <__adddf3>
 101a060:	1009883a 	mov	r4,r2
 101a064:	180b883a 	mov	r5,r3
 101a068:	1021883a 	mov	r16,r2
 101a06c:	1823883a 	mov	r17,r3
 101a070:	10133c80 	call	10133c8 <__fixdfsi>
 101a074:	000d883a 	mov	r6,zero
 101a078:	000f883a 	mov	r7,zero
 101a07c:	8009883a 	mov	r4,r16
 101a080:	880b883a 	mov	r5,r17
 101a084:	d8800d15 	stw	r2,52(sp)
 101a088:	10132480 	call	1013248 <__ltdf2>
 101a08c:	10031716 	blt	r2,zero,101acec <_dtoa_r+0xe8c>
 101a090:	d8c00d17 	ldw	r3,52(sp)
 101a094:	00800584 	movi	r2,22
 101a098:	10c1482e 	bgeu	r2,r3,101a5bc <_dtoa_r+0x75c>
 101a09c:	01000044 	movi	r4,1
 101a0a0:	d9000c15 	stw	r4,48(sp)
 101a0a4:	bd85c83a 	sub	r2,r23,r22
 101a0a8:	11bfffc4 	addi	r6,r2,-1
 101a0ac:	30030b16 	blt	r6,zero,101acdc <_dtoa_r+0xe7c>
 101a0b0:	d9800a15 	stw	r6,40(sp)
 101a0b4:	d8001115 	stw	zero,68(sp)
 101a0b8:	d8c00d17 	ldw	r3,52(sp)
 101a0bc:	1802ff16 	blt	r3,zero,101acbc <_dtoa_r+0xe5c>
 101a0c0:	d9000a17 	ldw	r4,40(sp)
 101a0c4:	d8c00915 	stw	r3,36(sp)
 101a0c8:	d8001015 	stw	zero,64(sp)
 101a0cc:	20c9883a 	add	r4,r4,r3
 101a0d0:	d9000a15 	stw	r4,40(sp)
 101a0d4:	d9001717 	ldw	r4,92(sp)
 101a0d8:	00800244 	movi	r2,9
 101a0dc:	11004636 	bltu	r2,r4,101a1f8 <_dtoa_r+0x398>
 101a0e0:	00800144 	movi	r2,5
 101a0e4:	11020416 	blt	r2,r4,101a8f8 <_dtoa_r+0xa98>
 101a0e8:	04400044 	movi	r17,1
 101a0ec:	d8c01717 	ldw	r3,92(sp)
 101a0f0:	00800144 	movi	r2,5
 101a0f4:	10c1ed36 	bltu	r2,r3,101a8ac <_dtoa_r+0xa4c>
 101a0f8:	18c5883a 	add	r2,r3,r3
 101a0fc:	1085883a 	add	r2,r2,r2
 101a100:	00c040b4 	movhi	r3,258
 101a104:	18e84504 	addi	r3,r3,-24300
 101a108:	10c5883a 	add	r2,r2,r3
 101a10c:	11000017 	ldw	r4,0(r2)
 101a110:	2000683a 	jmp	r4
 101a114:	0101a200 	call	101a20 <__alt_mem_onchip_memory2_0+0x101a20>
 101a118:	0101a200 	call	101a20 <__alt_mem_onchip_memory2_0+0x101a20>
 101a11c:	0101ac00 	call	101ac0 <__alt_mem_onchip_memory2_0+0x101ac0>
 101a120:	0101abd8 	cmpnei	r4,zero,1711
 101a124:	0101ac1c 	xori	r4,zero,1712
 101a128:	0101ac28 	cmpgeui	r4,zero,1712
 101a12c:	d9002717 	ldw	r4,156(sp)
 101a130:	0089c3c4 	movi	r2,9999
 101a134:	20800015 	stw	r2,0(r4)
 101a138:	a0001026 	beq	r20,zero,101a17c <_dtoa_r+0x31c>
 101a13c:	00c040f4 	movhi	r3,259
 101a140:	18d46b04 	addi	r3,r3,20908
 101a144:	d9802917 	ldw	r6,164(sp)
 101a148:	303f7926 	beq	r6,zero,1019f30 <_dtoa_r+0xd0>
 101a14c:	188000c7 	ldb	r2,3(r3)
 101a150:	190000c4 	addi	r4,r3,3
 101a154:	1000101e 	bne	r2,zero,101a198 <_dtoa_r+0x338>
 101a158:	d8802917 	ldw	r2,164(sp)
 101a15c:	11000015 	stw	r4,0(r2)
 101a160:	003f7306 	br	1019f30 <_dtoa_r+0xd0>
 101a164:	00a00034 	movhi	r2,32768
 101a168:	10bfffc4 	addi	r2,r2,-1
 101a16c:	00c00044 	movi	r3,1
 101a170:	88aa703a 	and	r21,r17,r2
 101a174:	90c00015 	stw	r3,0(r18)
 101a178:	003f5806 	br	1019edc <_dtoa_r+0x7c>
 101a17c:	00800434 	movhi	r2,16
 101a180:	10bfffc4 	addi	r2,r2,-1
 101a184:	a884703a 	and	r2,r21,r2
 101a188:	103fec1e 	bne	r2,zero,101a13c <_dtoa_r+0x2dc>
 101a18c:	00c040f4 	movhi	r3,259
 101a190:	18d46804 	addi	r3,r3,20896
 101a194:	003feb06 	br	101a144 <_dtoa_r+0x2e4>
 101a198:	d8802917 	ldw	r2,164(sp)
 101a19c:	19000204 	addi	r4,r3,8
 101a1a0:	11000015 	stw	r4,0(r2)
 101a1a4:	003f6206 	br	1019f30 <_dtoa_r+0xd0>
 101a1a8:	ddc00117 	ldw	r23,4(sp)
 101a1ac:	d8800217 	ldw	r2,8(sp)
 101a1b0:	01000804 	movi	r4,32
 101a1b4:	b8c10c84 	addi	r3,r23,1074
 101a1b8:	18a3883a 	add	r17,r3,r2
 101a1bc:	2441b80e 	bge	r4,r17,101a8a0 <_dtoa_r+0xa40>
 101a1c0:	00c01004 	movi	r3,64
 101a1c4:	1c47c83a 	sub	r3,r3,r17
 101a1c8:	88bff804 	addi	r2,r17,-32
 101a1cc:	a8c6983a 	sll	r3,r21,r3
 101a1d0:	a084d83a 	srl	r2,r20,r2
 101a1d4:	1888b03a 	or	r4,r3,r2
 101a1d8:	1020d140 	call	1020d14 <__floatunsidf>
 101a1dc:	1011883a 	mov	r8,r2
 101a1e0:	00bf8434 	movhi	r2,65040
 101a1e4:	01000044 	movi	r4,1
 101a1e8:	10d3883a 	add	r9,r2,r3
 101a1ec:	8dbef344 	addi	r22,r17,-1075
 101a1f0:	d9000815 	stw	r4,32(sp)
 101a1f4:	003f6f06 	br	1019fb4 <_dtoa_r+0x154>
 101a1f8:	d8001715 	stw	zero,92(sp)
 101a1fc:	04400044 	movi	r17,1
 101a200:	00bfffc4 	movi	r2,-1
 101a204:	00c00044 	movi	r3,1
 101a208:	d8800e15 	stw	r2,56(sp)
 101a20c:	d8002615 	stw	zero,152(sp)
 101a210:	d8800f15 	stw	r2,60(sp)
 101a214:	d8c00b15 	stw	r3,44(sp)
 101a218:	1021883a 	mov	r16,r2
 101a21c:	d8801617 	ldw	r2,88(sp)
 101a220:	10001115 	stw	zero,68(r2)
 101a224:	d8801617 	ldw	r2,88(sp)
 101a228:	11401117 	ldw	r5,68(r2)
 101a22c:	1009883a 	mov	r4,r2
 101a230:	101d47c0 	call	101d47c <_Balloc>
 101a234:	d8c01617 	ldw	r3,88(sp)
 101a238:	d8800515 	stw	r2,20(sp)
 101a23c:	18801015 	stw	r2,64(r3)
 101a240:	00800384 	movi	r2,14
 101a244:	14006836 	bltu	r2,r16,101a3e8 <_dtoa_r+0x588>
 101a248:	8805003a 	cmpeq	r2,r17,zero
 101a24c:	1000661e 	bne	r2,zero,101a3e8 <_dtoa_r+0x588>
 101a250:	d9000d17 	ldw	r4,52(sp)
 101a254:	0102300e 	bge	zero,r4,101ab18 <_dtoa_r+0xcb8>
 101a258:	208003cc 	andi	r2,r4,15
 101a25c:	100490fa 	slli	r2,r2,3
 101a260:	2025d13a 	srai	r18,r4,4
 101a264:	00c040f4 	movhi	r3,259
 101a268:	18d48304 	addi	r3,r3,21004
 101a26c:	10c5883a 	add	r2,r2,r3
 101a270:	90c0040c 	andi	r3,r18,16
 101a274:	14000017 	ldw	r16,0(r2)
 101a278:	14400117 	ldw	r17,4(r2)
 101a27c:	18036a1e 	bne	r3,zero,101b028 <_dtoa_r+0x11c8>
 101a280:	05800084 	movi	r22,2
 101a284:	90001026 	beq	r18,zero,101a2c8 <_dtoa_r+0x468>
 101a288:	04c040f4 	movhi	r19,259
 101a28c:	9cd4b504 	addi	r19,r19,21204
 101a290:	9080004c 	andi	r2,r18,1
 101a294:	1005003a 	cmpeq	r2,r2,zero
 101a298:	1000081e 	bne	r2,zero,101a2bc <_dtoa_r+0x45c>
 101a29c:	99800017 	ldw	r6,0(r19)
 101a2a0:	99c00117 	ldw	r7,4(r19)
 101a2a4:	880b883a 	mov	r5,r17
 101a2a8:	8009883a 	mov	r4,r16
 101a2ac:	1012a940 	call	1012a94 <__muldf3>
 101a2b0:	1021883a 	mov	r16,r2
 101a2b4:	b5800044 	addi	r22,r22,1
 101a2b8:	1823883a 	mov	r17,r3
 101a2bc:	9025d07a 	srai	r18,r18,1
 101a2c0:	9cc00204 	addi	r19,r19,8
 101a2c4:	903ff21e 	bne	r18,zero,101a290 <_dtoa_r+0x430>
 101a2c8:	a80b883a 	mov	r5,r21
 101a2cc:	a009883a 	mov	r4,r20
 101a2d0:	880f883a 	mov	r7,r17
 101a2d4:	800d883a 	mov	r6,r16
 101a2d8:	1012e580 	call	1012e58 <__divdf3>
 101a2dc:	1029883a 	mov	r20,r2
 101a2e0:	182b883a 	mov	r21,r3
 101a2e4:	d8c00c17 	ldw	r3,48(sp)
 101a2e8:	1805003a 	cmpeq	r2,r3,zero
 101a2ec:	1000081e 	bne	r2,zero,101a310 <_dtoa_r+0x4b0>
 101a2f0:	0005883a 	mov	r2,zero
 101a2f4:	00cffc34 	movhi	r3,16368
 101a2f8:	180f883a 	mov	r7,r3
 101a2fc:	a009883a 	mov	r4,r20
 101a300:	a80b883a 	mov	r5,r21
 101a304:	100d883a 	mov	r6,r2
 101a308:	10132480 	call	1013248 <__ltdf2>
 101a30c:	1003fe16 	blt	r2,zero,101b308 <_dtoa_r+0x14a8>
 101a310:	b009883a 	mov	r4,r22
 101a314:	10132d00 	call	10132d0 <__floatsidf>
 101a318:	180b883a 	mov	r5,r3
 101a31c:	1009883a 	mov	r4,r2
 101a320:	a00d883a 	mov	r6,r20
 101a324:	a80f883a 	mov	r7,r21
 101a328:	1012a940 	call	1012a94 <__muldf3>
 101a32c:	0011883a 	mov	r8,zero
 101a330:	02500734 	movhi	r9,16412
 101a334:	1009883a 	mov	r4,r2
 101a338:	180b883a 	mov	r5,r3
 101a33c:	480f883a 	mov	r7,r9
 101a340:	400d883a 	mov	r6,r8
 101a344:	1012a200 	call	1012a20 <__adddf3>
 101a348:	d9000f17 	ldw	r4,60(sp)
 101a34c:	102d883a 	mov	r22,r2
 101a350:	00bf3034 	movhi	r2,64704
 101a354:	18b9883a 	add	fp,r3,r2
 101a358:	e02f883a 	mov	r23,fp
 101a35c:	20028f1e 	bne	r4,zero,101ad9c <_dtoa_r+0xf3c>
 101a360:	0005883a 	mov	r2,zero
 101a364:	00d00534 	movhi	r3,16404
 101a368:	a009883a 	mov	r4,r20
 101a36c:	a80b883a 	mov	r5,r21
 101a370:	180f883a 	mov	r7,r3
 101a374:	100d883a 	mov	r6,r2
 101a378:	10129a00 	call	10129a0 <__subdf3>
 101a37c:	1009883a 	mov	r4,r2
 101a380:	e00f883a 	mov	r7,fp
 101a384:	180b883a 	mov	r5,r3
 101a388:	b00d883a 	mov	r6,r22
 101a38c:	1025883a 	mov	r18,r2
 101a390:	1827883a 	mov	r19,r3
 101a394:	10131380 	call	1013138 <__gtdf2>
 101a398:	00834f16 	blt	zero,r2,101b0d8 <_dtoa_r+0x1278>
 101a39c:	e0e0003c 	xorhi	r3,fp,32768
 101a3a0:	9009883a 	mov	r4,r18
 101a3a4:	980b883a 	mov	r5,r19
 101a3a8:	180f883a 	mov	r7,r3
 101a3ac:	b00d883a 	mov	r6,r22
 101a3b0:	10132480 	call	1013248 <__ltdf2>
 101a3b4:	1000080e 	bge	r2,zero,101a3d8 <_dtoa_r+0x578>
 101a3b8:	0027883a 	mov	r19,zero
 101a3bc:	0025883a 	mov	r18,zero
 101a3c0:	d8802617 	ldw	r2,152(sp)
 101a3c4:	df000517 	ldw	fp,20(sp)
 101a3c8:	d8000615 	stw	zero,24(sp)
 101a3cc:	0084303a 	nor	r2,zero,r2
 101a3d0:	d8800d15 	stw	r2,52(sp)
 101a3d4:	00019b06 	br	101aa44 <_dtoa_r+0xbe4>
 101a3d8:	d9801217 	ldw	r6,72(sp)
 101a3dc:	d8801317 	ldw	r2,76(sp)
 101a3e0:	3029883a 	mov	r20,r6
 101a3e4:	102b883a 	mov	r21,r2
 101a3e8:	d8c00217 	ldw	r3,8(sp)
 101a3ec:	18008516 	blt	r3,zero,101a604 <_dtoa_r+0x7a4>
 101a3f0:	d9000d17 	ldw	r4,52(sp)
 101a3f4:	00800384 	movi	r2,14
 101a3f8:	11008216 	blt	r2,r4,101a604 <_dtoa_r+0x7a4>
 101a3fc:	200490fa 	slli	r2,r4,3
 101a400:	d9802617 	ldw	r6,152(sp)
 101a404:	00c040f4 	movhi	r3,259
 101a408:	18d48304 	addi	r3,r3,21004
 101a40c:	10c5883a 	add	r2,r2,r3
 101a410:	14800017 	ldw	r18,0(r2)
 101a414:	14c00117 	ldw	r19,4(r2)
 101a418:	30031e16 	blt	r6,zero,101b094 <_dtoa_r+0x1234>
 101a41c:	d9000517 	ldw	r4,20(sp)
 101a420:	d8c00f17 	ldw	r3,60(sp)
 101a424:	a823883a 	mov	r17,r21
 101a428:	a021883a 	mov	r16,r20
 101a42c:	192b883a 	add	r21,r3,r4
 101a430:	2039883a 	mov	fp,r4
 101a434:	00000f06 	br	101a474 <_dtoa_r+0x614>
 101a438:	0005883a 	mov	r2,zero
 101a43c:	00d00934 	movhi	r3,16420
 101a440:	5009883a 	mov	r4,r10
 101a444:	580b883a 	mov	r5,r11
 101a448:	180f883a 	mov	r7,r3
 101a44c:	100d883a 	mov	r6,r2
 101a450:	1012a940 	call	1012a94 <__muldf3>
 101a454:	180b883a 	mov	r5,r3
 101a458:	000d883a 	mov	r6,zero
 101a45c:	000f883a 	mov	r7,zero
 101a460:	1009883a 	mov	r4,r2
 101a464:	1021883a 	mov	r16,r2
 101a468:	1823883a 	mov	r17,r3
 101a46c:	1020b900 	call	1020b90 <__nedf2>
 101a470:	10004526 	beq	r2,zero,101a588 <_dtoa_r+0x728>
 101a474:	900d883a 	mov	r6,r18
 101a478:	980f883a 	mov	r7,r19
 101a47c:	8009883a 	mov	r4,r16
 101a480:	880b883a 	mov	r5,r17
 101a484:	1012e580 	call	1012e58 <__divdf3>
 101a488:	180b883a 	mov	r5,r3
 101a48c:	1009883a 	mov	r4,r2
 101a490:	10133c80 	call	10133c8 <__fixdfsi>
 101a494:	1009883a 	mov	r4,r2
 101a498:	1029883a 	mov	r20,r2
 101a49c:	10132d00 	call	10132d0 <__floatsidf>
 101a4a0:	180f883a 	mov	r7,r3
 101a4a4:	9009883a 	mov	r4,r18
 101a4a8:	980b883a 	mov	r5,r19
 101a4ac:	100d883a 	mov	r6,r2
 101a4b0:	1012a940 	call	1012a94 <__muldf3>
 101a4b4:	180f883a 	mov	r7,r3
 101a4b8:	880b883a 	mov	r5,r17
 101a4bc:	8009883a 	mov	r4,r16
 101a4c0:	100d883a 	mov	r6,r2
 101a4c4:	10129a00 	call	10129a0 <__subdf3>
 101a4c8:	1015883a 	mov	r10,r2
 101a4cc:	a0800c04 	addi	r2,r20,48
 101a4d0:	e0800005 	stb	r2,0(fp)
 101a4d4:	e7000044 	addi	fp,fp,1
 101a4d8:	1817883a 	mov	r11,r3
 101a4dc:	e57fd61e 	bne	fp,r21,101a438 <_dtoa_r+0x5d8>
 101a4e0:	500d883a 	mov	r6,r10
 101a4e4:	180f883a 	mov	r7,r3
 101a4e8:	5009883a 	mov	r4,r10
 101a4ec:	180b883a 	mov	r5,r3
 101a4f0:	1012a200 	call	1012a20 <__adddf3>
 101a4f4:	100d883a 	mov	r6,r2
 101a4f8:	9009883a 	mov	r4,r18
 101a4fc:	980b883a 	mov	r5,r19
 101a500:	180f883a 	mov	r7,r3
 101a504:	1021883a 	mov	r16,r2
 101a508:	1823883a 	mov	r17,r3
 101a50c:	10132480 	call	1013248 <__ltdf2>
 101a510:	10000816 	blt	r2,zero,101a534 <_dtoa_r+0x6d4>
 101a514:	980b883a 	mov	r5,r19
 101a518:	800d883a 	mov	r6,r16
 101a51c:	880f883a 	mov	r7,r17
 101a520:	9009883a 	mov	r4,r18
 101a524:	10130b00 	call	10130b0 <__eqdf2>
 101a528:	1000171e 	bne	r2,zero,101a588 <_dtoa_r+0x728>
 101a52c:	a080004c 	andi	r2,r20,1
 101a530:	10001526 	beq	r2,zero,101a588 <_dtoa_r+0x728>
 101a534:	d8800d17 	ldw	r2,52(sp)
 101a538:	d8800415 	stw	r2,16(sp)
 101a53c:	e009883a 	mov	r4,fp
 101a540:	213fffc4 	addi	r4,r4,-1
 101a544:	20c00007 	ldb	r3,0(r4)
 101a548:	00800e44 	movi	r2,57
 101a54c:	1880081e 	bne	r3,r2,101a570 <_dtoa_r+0x710>
 101a550:	d8800517 	ldw	r2,20(sp)
 101a554:	113ffa1e 	bne	r2,r4,101a540 <_dtoa_r+0x6e0>
 101a558:	d8c00417 	ldw	r3,16(sp)
 101a55c:	d9800517 	ldw	r6,20(sp)
 101a560:	00800c04 	movi	r2,48
 101a564:	18c00044 	addi	r3,r3,1
 101a568:	d8c00415 	stw	r3,16(sp)
 101a56c:	30800005 	stb	r2,0(r6)
 101a570:	20800003 	ldbu	r2,0(r4)
 101a574:	d8c00417 	ldw	r3,16(sp)
 101a578:	27000044 	addi	fp,r4,1
 101a57c:	10800044 	addi	r2,r2,1
 101a580:	d8c00d15 	stw	r3,52(sp)
 101a584:	20800005 	stb	r2,0(r4)
 101a588:	d9001617 	ldw	r4,88(sp)
 101a58c:	d9400717 	ldw	r5,28(sp)
 101a590:	101cefc0 	call	101cefc <_Bfree>
 101a594:	e0000005 	stb	zero,0(fp)
 101a598:	d9800d17 	ldw	r6,52(sp)
 101a59c:	d8c02717 	ldw	r3,156(sp)
 101a5a0:	d9002917 	ldw	r4,164(sp)
 101a5a4:	30800044 	addi	r2,r6,1
 101a5a8:	18800015 	stw	r2,0(r3)
 101a5ac:	20029c26 	beq	r4,zero,101b020 <_dtoa_r+0x11c0>
 101a5b0:	d8c00517 	ldw	r3,20(sp)
 101a5b4:	27000015 	stw	fp,0(r4)
 101a5b8:	003e5d06 	br	1019f30 <_dtoa_r+0xd0>
 101a5bc:	d9800d17 	ldw	r6,52(sp)
 101a5c0:	00c040f4 	movhi	r3,259
 101a5c4:	18d48304 	addi	r3,r3,21004
 101a5c8:	d9001217 	ldw	r4,72(sp)
 101a5cc:	300490fa 	slli	r2,r6,3
 101a5d0:	d9401317 	ldw	r5,76(sp)
 101a5d4:	10c5883a 	add	r2,r2,r3
 101a5d8:	12000017 	ldw	r8,0(r2)
 101a5dc:	12400117 	ldw	r9,4(r2)
 101a5e0:	400d883a 	mov	r6,r8
 101a5e4:	480f883a 	mov	r7,r9
 101a5e8:	10132480 	call	1013248 <__ltdf2>
 101a5ec:	1000030e 	bge	r2,zero,101a5fc <_dtoa_r+0x79c>
 101a5f0:	d8800d17 	ldw	r2,52(sp)
 101a5f4:	10bfffc4 	addi	r2,r2,-1
 101a5f8:	d8800d15 	stw	r2,52(sp)
 101a5fc:	d8000c15 	stw	zero,48(sp)
 101a600:	003ea806 	br	101a0a4 <_dtoa_r+0x244>
 101a604:	d9000b17 	ldw	r4,44(sp)
 101a608:	202cc03a 	cmpne	r22,r4,zero
 101a60c:	b000c71e 	bne	r22,zero,101a92c <_dtoa_r+0xacc>
 101a610:	dc001117 	ldw	r16,68(sp)
 101a614:	dc801017 	ldw	r18,64(sp)
 101a618:	0027883a 	mov	r19,zero
 101a61c:	04000b0e 	bge	zero,r16,101a64c <_dtoa_r+0x7ec>
 101a620:	d8c00a17 	ldw	r3,40(sp)
 101a624:	00c0090e 	bge	zero,r3,101a64c <_dtoa_r+0x7ec>
 101a628:	8005883a 	mov	r2,r16
 101a62c:	1c011316 	blt	r3,r16,101aa7c <_dtoa_r+0xc1c>
 101a630:	d9000a17 	ldw	r4,40(sp)
 101a634:	d9801117 	ldw	r6,68(sp)
 101a638:	80a1c83a 	sub	r16,r16,r2
 101a63c:	2089c83a 	sub	r4,r4,r2
 101a640:	308dc83a 	sub	r6,r6,r2
 101a644:	d9000a15 	stw	r4,40(sp)
 101a648:	d9801115 	stw	r6,68(sp)
 101a64c:	d8801017 	ldw	r2,64(sp)
 101a650:	0080150e 	bge	zero,r2,101a6a8 <_dtoa_r+0x848>
 101a654:	d8c00b17 	ldw	r3,44(sp)
 101a658:	1805003a 	cmpeq	r2,r3,zero
 101a65c:	1001c91e 	bne	r2,zero,101ad84 <_dtoa_r+0xf24>
 101a660:	04800e0e 	bge	zero,r18,101a69c <_dtoa_r+0x83c>
 101a664:	d9001617 	ldw	r4,88(sp)
 101a668:	980b883a 	mov	r5,r19
 101a66c:	900d883a 	mov	r6,r18
 101a670:	101dcb00 	call	101dcb0 <__pow5mult>
 101a674:	d9001617 	ldw	r4,88(sp)
 101a678:	d9800717 	ldw	r6,28(sp)
 101a67c:	100b883a 	mov	r5,r2
 101a680:	1027883a 	mov	r19,r2
 101a684:	101d98c0 	call	101d98c <__multiply>
 101a688:	d9001617 	ldw	r4,88(sp)
 101a68c:	d9400717 	ldw	r5,28(sp)
 101a690:	1023883a 	mov	r17,r2
 101a694:	101cefc0 	call	101cefc <_Bfree>
 101a698:	dc400715 	stw	r17,28(sp)
 101a69c:	d9001017 	ldw	r4,64(sp)
 101a6a0:	248dc83a 	sub	r6,r4,r18
 101a6a4:	30010e1e 	bne	r6,zero,101aae0 <_dtoa_r+0xc80>
 101a6a8:	d9001617 	ldw	r4,88(sp)
 101a6ac:	04400044 	movi	r17,1
 101a6b0:	880b883a 	mov	r5,r17
 101a6b4:	101db740 	call	101db74 <__i2b>
 101a6b8:	d9800917 	ldw	r6,36(sp)
 101a6bc:	1025883a 	mov	r18,r2
 101a6c0:	0180040e 	bge	zero,r6,101a6d4 <_dtoa_r+0x874>
 101a6c4:	d9001617 	ldw	r4,88(sp)
 101a6c8:	100b883a 	mov	r5,r2
 101a6cc:	101dcb00 	call	101dcb0 <__pow5mult>
 101a6d0:	1025883a 	mov	r18,r2
 101a6d4:	d8801717 	ldw	r2,92(sp)
 101a6d8:	8880f30e 	bge	r17,r2,101aaa8 <_dtoa_r+0xc48>
 101a6dc:	0023883a 	mov	r17,zero
 101a6e0:	d9800917 	ldw	r6,36(sp)
 101a6e4:	30019e1e 	bne	r6,zero,101ad60 <_dtoa_r+0xf00>
 101a6e8:	00c00044 	movi	r3,1
 101a6ec:	d9000a17 	ldw	r4,40(sp)
 101a6f0:	20c5883a 	add	r2,r4,r3
 101a6f4:	10c007cc 	andi	r3,r2,31
 101a6f8:	1800841e 	bne	r3,zero,101a90c <_dtoa_r+0xaac>
 101a6fc:	00800704 	movi	r2,28
 101a700:	d9000a17 	ldw	r4,40(sp)
 101a704:	d9801117 	ldw	r6,68(sp)
 101a708:	80a1883a 	add	r16,r16,r2
 101a70c:	2089883a 	add	r4,r4,r2
 101a710:	308d883a 	add	r6,r6,r2
 101a714:	d9000a15 	stw	r4,40(sp)
 101a718:	d9801115 	stw	r6,68(sp)
 101a71c:	d8801117 	ldw	r2,68(sp)
 101a720:	0080050e 	bge	zero,r2,101a738 <_dtoa_r+0x8d8>
 101a724:	d9400717 	ldw	r5,28(sp)
 101a728:	d9001617 	ldw	r4,88(sp)
 101a72c:	100d883a 	mov	r6,r2
 101a730:	101d8400 	call	101d840 <__lshift>
 101a734:	d8800715 	stw	r2,28(sp)
 101a738:	d8c00a17 	ldw	r3,40(sp)
 101a73c:	00c0050e 	bge	zero,r3,101a754 <_dtoa_r+0x8f4>
 101a740:	d9001617 	ldw	r4,88(sp)
 101a744:	900b883a 	mov	r5,r18
 101a748:	180d883a 	mov	r6,r3
 101a74c:	101d8400 	call	101d840 <__lshift>
 101a750:	1025883a 	mov	r18,r2
 101a754:	d9000c17 	ldw	r4,48(sp)
 101a758:	2005003a 	cmpeq	r2,r4,zero
 101a75c:	10016f26 	beq	r2,zero,101ad1c <_dtoa_r+0xebc>
 101a760:	d9000f17 	ldw	r4,60(sp)
 101a764:	0102170e 	bge	zero,r4,101afc4 <_dtoa_r+0x1164>
 101a768:	d9800b17 	ldw	r6,44(sp)
 101a76c:	3005003a 	cmpeq	r2,r6,zero
 101a770:	1000881e 	bne	r2,zero,101a994 <_dtoa_r+0xb34>
 101a774:	0400050e 	bge	zero,r16,101a78c <_dtoa_r+0x92c>
 101a778:	d9001617 	ldw	r4,88(sp)
 101a77c:	980b883a 	mov	r5,r19
 101a780:	800d883a 	mov	r6,r16
 101a784:	101d8400 	call	101d840 <__lshift>
 101a788:	1027883a 	mov	r19,r2
 101a78c:	8804c03a 	cmpne	r2,r17,zero
 101a790:	1002541e 	bne	r2,zero,101b0e4 <_dtoa_r+0x1284>
 101a794:	980b883a 	mov	r5,r19
 101a798:	dd800517 	ldw	r22,20(sp)
 101a79c:	dcc00615 	stw	r19,24(sp)
 101a7a0:	a700004c 	andi	fp,r20,1
 101a7a4:	2827883a 	mov	r19,r5
 101a7a8:	d9000717 	ldw	r4,28(sp)
 101a7ac:	900b883a 	mov	r5,r18
 101a7b0:	1019c480 	call	1019c48 <quorem>
 101a7b4:	d9000717 	ldw	r4,28(sp)
 101a7b8:	d9400617 	ldw	r5,24(sp)
 101a7bc:	1023883a 	mov	r17,r2
 101a7c0:	8dc00c04 	addi	r23,r17,48
 101a7c4:	101d0580 	call	101d058 <__mcmp>
 101a7c8:	d9001617 	ldw	r4,88(sp)
 101a7cc:	900b883a 	mov	r5,r18
 101a7d0:	980d883a 	mov	r6,r19
 101a7d4:	1029883a 	mov	r20,r2
 101a7d8:	101d6b40 	call	101d6b4 <__mdiff>
 101a7dc:	102b883a 	mov	r21,r2
 101a7e0:	10800317 	ldw	r2,12(r2)
 101a7e4:	1001281e 	bne	r2,zero,101ac88 <_dtoa_r+0xe28>
 101a7e8:	d9000717 	ldw	r4,28(sp)
 101a7ec:	a80b883a 	mov	r5,r21
 101a7f0:	101d0580 	call	101d058 <__mcmp>
 101a7f4:	d9001617 	ldw	r4,88(sp)
 101a7f8:	1021883a 	mov	r16,r2
 101a7fc:	a80b883a 	mov	r5,r21
 101a800:	101cefc0 	call	101cefc <_Bfree>
 101a804:	8000041e 	bne	r16,zero,101a818 <_dtoa_r+0x9b8>
 101a808:	d8801717 	ldw	r2,92(sp)
 101a80c:	1000021e 	bne	r2,zero,101a818 <_dtoa_r+0x9b8>
 101a810:	e004c03a 	cmpne	r2,fp,zero
 101a814:	10011726 	beq	r2,zero,101ac74 <_dtoa_r+0xe14>
 101a818:	a0010616 	blt	r20,zero,101ac34 <_dtoa_r+0xdd4>
 101a81c:	a000041e 	bne	r20,zero,101a830 <_dtoa_r+0x9d0>
 101a820:	d8c01717 	ldw	r3,92(sp)
 101a824:	1800021e 	bne	r3,zero,101a830 <_dtoa_r+0x9d0>
 101a828:	e004c03a 	cmpne	r2,fp,zero
 101a82c:	10010126 	beq	r2,zero,101ac34 <_dtoa_r+0xdd4>
 101a830:	04023d16 	blt	zero,r16,101b128 <_dtoa_r+0x12c8>
 101a834:	b5c00005 	stb	r23,0(r22)
 101a838:	d9800517 	ldw	r6,20(sp)
 101a83c:	d9000f17 	ldw	r4,60(sp)
 101a840:	b5800044 	addi	r22,r22,1
 101a844:	3105883a 	add	r2,r6,r4
 101a848:	b0806526 	beq	r22,r2,101a9e0 <_dtoa_r+0xb80>
 101a84c:	d9400717 	ldw	r5,28(sp)
 101a850:	d9001617 	ldw	r4,88(sp)
 101a854:	01800284 	movi	r6,10
 101a858:	000f883a 	mov	r7,zero
 101a85c:	101dbb00 	call	101dbb0 <__multadd>
 101a860:	d8800715 	stw	r2,28(sp)
 101a864:	d8800617 	ldw	r2,24(sp)
 101a868:	14c10c26 	beq	r2,r19,101ac9c <_dtoa_r+0xe3c>
 101a86c:	d9400617 	ldw	r5,24(sp)
 101a870:	d9001617 	ldw	r4,88(sp)
 101a874:	01800284 	movi	r6,10
 101a878:	000f883a 	mov	r7,zero
 101a87c:	101dbb00 	call	101dbb0 <__multadd>
 101a880:	d9001617 	ldw	r4,88(sp)
 101a884:	980b883a 	mov	r5,r19
 101a888:	01800284 	movi	r6,10
 101a88c:	000f883a 	mov	r7,zero
 101a890:	d8800615 	stw	r2,24(sp)
 101a894:	101dbb00 	call	101dbb0 <__multadd>
 101a898:	1027883a 	mov	r19,r2
 101a89c:	003fc206 	br	101a7a8 <_dtoa_r+0x948>
 101a8a0:	2445c83a 	sub	r2,r4,r17
 101a8a4:	a088983a 	sll	r4,r20,r2
 101a8a8:	003e4b06 	br	101a1d8 <_dtoa_r+0x378>
 101a8ac:	01bfffc4 	movi	r6,-1
 101a8b0:	00800044 	movi	r2,1
 101a8b4:	d9800e15 	stw	r6,56(sp)
 101a8b8:	d9800f15 	stw	r6,60(sp)
 101a8bc:	d8800b15 	stw	r2,44(sp)
 101a8c0:	d8c01617 	ldw	r3,88(sp)
 101a8c4:	008005c4 	movi	r2,23
 101a8c8:	18001115 	stw	zero,68(r3)
 101a8cc:	1580082e 	bgeu	r2,r22,101a8f0 <_dtoa_r+0xa90>
 101a8d0:	00c00104 	movi	r3,4
 101a8d4:	0009883a 	mov	r4,zero
 101a8d8:	18c7883a 	add	r3,r3,r3
 101a8dc:	18800504 	addi	r2,r3,20
 101a8e0:	21000044 	addi	r4,r4,1
 101a8e4:	b0bffc2e 	bgeu	r22,r2,101a8d8 <_dtoa_r+0xa78>
 101a8e8:	d9801617 	ldw	r6,88(sp)
 101a8ec:	31001115 	stw	r4,68(r6)
 101a8f0:	dc000f17 	ldw	r16,60(sp)
 101a8f4:	003e4b06 	br	101a224 <_dtoa_r+0x3c4>
 101a8f8:	d9801717 	ldw	r6,92(sp)
 101a8fc:	0023883a 	mov	r17,zero
 101a900:	31bfff04 	addi	r6,r6,-4
 101a904:	d9801715 	stw	r6,92(sp)
 101a908:	003df806 	br	101a0ec <_dtoa_r+0x28c>
 101a90c:	00800804 	movi	r2,32
 101a910:	10c9c83a 	sub	r4,r2,r3
 101a914:	00c00104 	movi	r3,4
 101a918:	19005a16 	blt	r3,r4,101aa84 <_dtoa_r+0xc24>
 101a91c:	008000c4 	movi	r2,3
 101a920:	113f7e16 	blt	r2,r4,101a71c <_dtoa_r+0x8bc>
 101a924:	20800704 	addi	r2,r4,28
 101a928:	003f7506 	br	101a700 <_dtoa_r+0x8a0>
 101a92c:	d9801717 	ldw	r6,92(sp)
 101a930:	00800044 	movi	r2,1
 101a934:	1180a10e 	bge	r2,r6,101abbc <_dtoa_r+0xd5c>
 101a938:	d9800f17 	ldw	r6,60(sp)
 101a93c:	d8c01017 	ldw	r3,64(sp)
 101a940:	30bfffc4 	addi	r2,r6,-1
 101a944:	1881c616 	blt	r3,r2,101b060 <_dtoa_r+0x1200>
 101a948:	18a5c83a 	sub	r18,r3,r2
 101a94c:	d8800f17 	ldw	r2,60(sp)
 101a950:	10026216 	blt	r2,zero,101b2dc <_dtoa_r+0x147c>
 101a954:	dc001117 	ldw	r16,68(sp)
 101a958:	1007883a 	mov	r3,r2
 101a95c:	d9800a17 	ldw	r6,40(sp)
 101a960:	d8801117 	ldw	r2,68(sp)
 101a964:	d9001617 	ldw	r4,88(sp)
 101a968:	30cd883a 	add	r6,r6,r3
 101a96c:	10c5883a 	add	r2,r2,r3
 101a970:	01400044 	movi	r5,1
 101a974:	d9800a15 	stw	r6,40(sp)
 101a978:	d8801115 	stw	r2,68(sp)
 101a97c:	101db740 	call	101db74 <__i2b>
 101a980:	1027883a 	mov	r19,r2
 101a984:	003f2506 	br	101a61c <_dtoa_r+0x7bc>
 101a988:	00c040f4 	movhi	r3,259
 101a98c:	18d3bf04 	addi	r3,r3,20220
 101a990:	003d6706 	br	1019f30 <_dtoa_r+0xd0>
 101a994:	dd800517 	ldw	r22,20(sp)
 101a998:	04000044 	movi	r16,1
 101a99c:	00000706 	br	101a9bc <_dtoa_r+0xb5c>
 101a9a0:	d9400717 	ldw	r5,28(sp)
 101a9a4:	d9001617 	ldw	r4,88(sp)
 101a9a8:	01800284 	movi	r6,10
 101a9ac:	000f883a 	mov	r7,zero
 101a9b0:	101dbb00 	call	101dbb0 <__multadd>
 101a9b4:	d8800715 	stw	r2,28(sp)
 101a9b8:	84000044 	addi	r16,r16,1
 101a9bc:	d9000717 	ldw	r4,28(sp)
 101a9c0:	900b883a 	mov	r5,r18
 101a9c4:	1019c480 	call	1019c48 <quorem>
 101a9c8:	15c00c04 	addi	r23,r2,48
 101a9cc:	b5c00005 	stb	r23,0(r22)
 101a9d0:	d8c00f17 	ldw	r3,60(sp)
 101a9d4:	b5800044 	addi	r22,r22,1
 101a9d8:	80fff116 	blt	r16,r3,101a9a0 <_dtoa_r+0xb40>
 101a9dc:	d8000615 	stw	zero,24(sp)
 101a9e0:	d9400717 	ldw	r5,28(sp)
 101a9e4:	d9001617 	ldw	r4,88(sp)
 101a9e8:	01800044 	movi	r6,1
 101a9ec:	101d8400 	call	101d840 <__lshift>
 101a9f0:	1009883a 	mov	r4,r2
 101a9f4:	900b883a 	mov	r5,r18
 101a9f8:	d8800715 	stw	r2,28(sp)
 101a9fc:	101d0580 	call	101d058 <__mcmp>
 101aa00:	00803c0e 	bge	zero,r2,101aaf4 <_dtoa_r+0xc94>
 101aa04:	b009883a 	mov	r4,r22
 101aa08:	213fffc4 	addi	r4,r4,-1
 101aa0c:	21400003 	ldbu	r5,0(r4)
 101aa10:	00800e44 	movi	r2,57
 101aa14:	28c03fcc 	andi	r3,r5,255
 101aa18:	18c0201c 	xori	r3,r3,128
 101aa1c:	18ffe004 	addi	r3,r3,-128
 101aa20:	1881981e 	bne	r3,r2,101b084 <_dtoa_r+0x1224>
 101aa24:	d9800517 	ldw	r6,20(sp)
 101aa28:	21bff71e 	bne	r4,r6,101aa08 <_dtoa_r+0xba8>
 101aa2c:	d8800d17 	ldw	r2,52(sp)
 101aa30:	37000044 	addi	fp,r6,1
 101aa34:	10800044 	addi	r2,r2,1
 101aa38:	d8800d15 	stw	r2,52(sp)
 101aa3c:	00800c44 	movi	r2,49
 101aa40:	30800005 	stb	r2,0(r6)
 101aa44:	d9001617 	ldw	r4,88(sp)
 101aa48:	900b883a 	mov	r5,r18
 101aa4c:	101cefc0 	call	101cefc <_Bfree>
 101aa50:	983ecd26 	beq	r19,zero,101a588 <_dtoa_r+0x728>
 101aa54:	d8c00617 	ldw	r3,24(sp)
 101aa58:	18000426 	beq	r3,zero,101aa6c <_dtoa_r+0xc0c>
 101aa5c:	1cc00326 	beq	r3,r19,101aa6c <_dtoa_r+0xc0c>
 101aa60:	d9001617 	ldw	r4,88(sp)
 101aa64:	180b883a 	mov	r5,r3
 101aa68:	101cefc0 	call	101cefc <_Bfree>
 101aa6c:	d9001617 	ldw	r4,88(sp)
 101aa70:	980b883a 	mov	r5,r19
 101aa74:	101cefc0 	call	101cefc <_Bfree>
 101aa78:	003ec306 	br	101a588 <_dtoa_r+0x728>
 101aa7c:	1805883a 	mov	r2,r3
 101aa80:	003eeb06 	br	101a630 <_dtoa_r+0x7d0>
 101aa84:	d9800a17 	ldw	r6,40(sp)
 101aa88:	d8c01117 	ldw	r3,68(sp)
 101aa8c:	20bfff04 	addi	r2,r4,-4
 101aa90:	308d883a 	add	r6,r6,r2
 101aa94:	1887883a 	add	r3,r3,r2
 101aa98:	80a1883a 	add	r16,r16,r2
 101aa9c:	d9800a15 	stw	r6,40(sp)
 101aaa0:	d8c01115 	stw	r3,68(sp)
 101aaa4:	003f1d06 	br	101a71c <_dtoa_r+0x8bc>
 101aaa8:	a03f0c1e 	bne	r20,zero,101a6dc <_dtoa_r+0x87c>
 101aaac:	00800434 	movhi	r2,16
 101aab0:	10bfffc4 	addi	r2,r2,-1
 101aab4:	a884703a 	and	r2,r21,r2
 101aab8:	103f081e 	bne	r2,zero,101a6dc <_dtoa_r+0x87c>
 101aabc:	a89ffc2c 	andhi	r2,r21,32752
 101aac0:	103f0626 	beq	r2,zero,101a6dc <_dtoa_r+0x87c>
 101aac4:	d8c01117 	ldw	r3,68(sp)
 101aac8:	d9000a17 	ldw	r4,40(sp)
 101aacc:	18c00044 	addi	r3,r3,1
 101aad0:	21000044 	addi	r4,r4,1
 101aad4:	d8c01115 	stw	r3,68(sp)
 101aad8:	d9000a15 	stw	r4,40(sp)
 101aadc:	003f0006 	br	101a6e0 <_dtoa_r+0x880>
 101aae0:	d9400717 	ldw	r5,28(sp)
 101aae4:	d9001617 	ldw	r4,88(sp)
 101aae8:	101dcb00 	call	101dcb0 <__pow5mult>
 101aaec:	d8800715 	stw	r2,28(sp)
 101aaf0:	003eed06 	br	101a6a8 <_dtoa_r+0x848>
 101aaf4:	1000021e 	bne	r2,zero,101ab00 <_dtoa_r+0xca0>
 101aaf8:	b880004c 	andi	r2,r23,1
 101aafc:	103fc11e 	bne	r2,zero,101aa04 <_dtoa_r+0xba4>
 101ab00:	b5bfffc4 	addi	r22,r22,-1
 101ab04:	b0c00007 	ldb	r3,0(r22)
 101ab08:	00800c04 	movi	r2,48
 101ab0c:	18bffc26 	beq	r3,r2,101ab00 <_dtoa_r+0xca0>
 101ab10:	b7000044 	addi	fp,r22,1
 101ab14:	003fcb06 	br	101aa44 <_dtoa_r+0xbe4>
 101ab18:	d9800d17 	ldw	r6,52(sp)
 101ab1c:	018fc83a 	sub	r7,zero,r6
 101ab20:	3801f726 	beq	r7,zero,101b300 <_dtoa_r+0x14a0>
 101ab24:	398003cc 	andi	r6,r7,15
 101ab28:	300c90fa 	slli	r6,r6,3
 101ab2c:	014040f4 	movhi	r5,259
 101ab30:	29548304 	addi	r5,r5,21004
 101ab34:	d9001217 	ldw	r4,72(sp)
 101ab38:	314d883a 	add	r6,r6,r5
 101ab3c:	30c00117 	ldw	r3,4(r6)
 101ab40:	30800017 	ldw	r2,0(r6)
 101ab44:	d9401317 	ldw	r5,76(sp)
 101ab48:	3821d13a 	srai	r16,r7,4
 101ab4c:	100d883a 	mov	r6,r2
 101ab50:	180f883a 	mov	r7,r3
 101ab54:	1012a940 	call	1012a94 <__muldf3>
 101ab58:	1011883a 	mov	r8,r2
 101ab5c:	1813883a 	mov	r9,r3
 101ab60:	1029883a 	mov	r20,r2
 101ab64:	182b883a 	mov	r21,r3
 101ab68:	8001e526 	beq	r16,zero,101b300 <_dtoa_r+0x14a0>
 101ab6c:	05800084 	movi	r22,2
 101ab70:	044040f4 	movhi	r17,259
 101ab74:	8c54b504 	addi	r17,r17,21204
 101ab78:	8080004c 	andi	r2,r16,1
 101ab7c:	1005003a 	cmpeq	r2,r2,zero
 101ab80:	1000081e 	bne	r2,zero,101aba4 <_dtoa_r+0xd44>
 101ab84:	89800017 	ldw	r6,0(r17)
 101ab88:	89c00117 	ldw	r7,4(r17)
 101ab8c:	480b883a 	mov	r5,r9
 101ab90:	4009883a 	mov	r4,r8
 101ab94:	1012a940 	call	1012a94 <__muldf3>
 101ab98:	1011883a 	mov	r8,r2
 101ab9c:	b5800044 	addi	r22,r22,1
 101aba0:	1813883a 	mov	r9,r3
 101aba4:	8021d07a 	srai	r16,r16,1
 101aba8:	8c400204 	addi	r17,r17,8
 101abac:	803ff21e 	bne	r16,zero,101ab78 <_dtoa_r+0xd18>
 101abb0:	4029883a 	mov	r20,r8
 101abb4:	482b883a 	mov	r21,r9
 101abb8:	003dca06 	br	101a2e4 <_dtoa_r+0x484>
 101abbc:	d9000817 	ldw	r4,32(sp)
 101abc0:	2005003a 	cmpeq	r2,r4,zero
 101abc4:	1001f61e 	bne	r2,zero,101b3a0 <_dtoa_r+0x1540>
 101abc8:	dc001117 	ldw	r16,68(sp)
 101abcc:	dc801017 	ldw	r18,64(sp)
 101abd0:	18c10cc4 	addi	r3,r3,1075
 101abd4:	003f6106 	br	101a95c <_dtoa_r+0xafc>
 101abd8:	d8000b15 	stw	zero,44(sp)
 101abdc:	d9802617 	ldw	r6,152(sp)
 101abe0:	d8c00d17 	ldw	r3,52(sp)
 101abe4:	30800044 	addi	r2,r6,1
 101abe8:	18ad883a 	add	r22,r3,r2
 101abec:	b13fffc4 	addi	r4,r22,-1
 101abf0:	d9000e15 	stw	r4,56(sp)
 101abf4:	0581f60e 	bge	zero,r22,101b3d0 <_dtoa_r+0x1570>
 101abf8:	dd800f15 	stw	r22,60(sp)
 101abfc:	003f3006 	br	101a8c0 <_dtoa_r+0xa60>
 101ac00:	d8000b15 	stw	zero,44(sp)
 101ac04:	d9002617 	ldw	r4,152(sp)
 101ac08:	0101eb0e 	bge	zero,r4,101b3b8 <_dtoa_r+0x1558>
 101ac0c:	202d883a 	mov	r22,r4
 101ac10:	d9000e15 	stw	r4,56(sp)
 101ac14:	d9000f15 	stw	r4,60(sp)
 101ac18:	003f2906 	br	101a8c0 <_dtoa_r+0xa60>
 101ac1c:	01800044 	movi	r6,1
 101ac20:	d9800b15 	stw	r6,44(sp)
 101ac24:	003ff706 	br	101ac04 <_dtoa_r+0xda4>
 101ac28:	01000044 	movi	r4,1
 101ac2c:	d9000b15 	stw	r4,44(sp)
 101ac30:	003fea06 	br	101abdc <_dtoa_r+0xd7c>
 101ac34:	04000c0e 	bge	zero,r16,101ac68 <_dtoa_r+0xe08>
 101ac38:	d9400717 	ldw	r5,28(sp)
 101ac3c:	d9001617 	ldw	r4,88(sp)
 101ac40:	01800044 	movi	r6,1
 101ac44:	101d8400 	call	101d840 <__lshift>
 101ac48:	1009883a 	mov	r4,r2
 101ac4c:	900b883a 	mov	r5,r18
 101ac50:	d8800715 	stw	r2,28(sp)
 101ac54:	101d0580 	call	101d058 <__mcmp>
 101ac58:	0081e00e 	bge	zero,r2,101b3dc <_dtoa_r+0x157c>
 101ac5c:	bdc00044 	addi	r23,r23,1
 101ac60:	00800e84 	movi	r2,58
 101ac64:	b881a226 	beq	r23,r2,101b2f0 <_dtoa_r+0x1490>
 101ac68:	b7000044 	addi	fp,r22,1
 101ac6c:	b5c00005 	stb	r23,0(r22)
 101ac70:	003f7406 	br	101aa44 <_dtoa_r+0xbe4>
 101ac74:	00800e44 	movi	r2,57
 101ac78:	b8819d26 	beq	r23,r2,101b2f0 <_dtoa_r+0x1490>
 101ac7c:	053ffa0e 	bge	zero,r20,101ac68 <_dtoa_r+0xe08>
 101ac80:	8dc00c44 	addi	r23,r17,49
 101ac84:	003ff806 	br	101ac68 <_dtoa_r+0xe08>
 101ac88:	d9001617 	ldw	r4,88(sp)
 101ac8c:	a80b883a 	mov	r5,r21
 101ac90:	04000044 	movi	r16,1
 101ac94:	101cefc0 	call	101cefc <_Bfree>
 101ac98:	003edf06 	br	101a818 <_dtoa_r+0x9b8>
 101ac9c:	d9001617 	ldw	r4,88(sp)
 101aca0:	980b883a 	mov	r5,r19
 101aca4:	01800284 	movi	r6,10
 101aca8:	000f883a 	mov	r7,zero
 101acac:	101dbb00 	call	101dbb0 <__multadd>
 101acb0:	1027883a 	mov	r19,r2
 101acb4:	d8800615 	stw	r2,24(sp)
 101acb8:	003ebb06 	br	101a7a8 <_dtoa_r+0x948>
 101acbc:	d9801117 	ldw	r6,68(sp)
 101acc0:	d8800d17 	ldw	r2,52(sp)
 101acc4:	d8000915 	stw	zero,36(sp)
 101acc8:	308dc83a 	sub	r6,r6,r2
 101accc:	0087c83a 	sub	r3,zero,r2
 101acd0:	d9801115 	stw	r6,68(sp)
 101acd4:	d8c01015 	stw	r3,64(sp)
 101acd8:	003cfe06 	br	101a0d4 <_dtoa_r+0x274>
 101acdc:	018dc83a 	sub	r6,zero,r6
 101ace0:	d9801115 	stw	r6,68(sp)
 101ace4:	d8000a15 	stw	zero,40(sp)
 101ace8:	003cf306 	br	101a0b8 <_dtoa_r+0x258>
 101acec:	d9000d17 	ldw	r4,52(sp)
 101acf0:	10132d00 	call	10132d0 <__floatsidf>
 101acf4:	880b883a 	mov	r5,r17
 101acf8:	8009883a 	mov	r4,r16
 101acfc:	180f883a 	mov	r7,r3
 101ad00:	100d883a 	mov	r6,r2
 101ad04:	1020b900 	call	1020b90 <__nedf2>
 101ad08:	103ce126 	beq	r2,zero,101a090 <_dtoa_r+0x230>
 101ad0c:	d9800d17 	ldw	r6,52(sp)
 101ad10:	31bfffc4 	addi	r6,r6,-1
 101ad14:	d9800d15 	stw	r6,52(sp)
 101ad18:	003cdd06 	br	101a090 <_dtoa_r+0x230>
 101ad1c:	d9000717 	ldw	r4,28(sp)
 101ad20:	900b883a 	mov	r5,r18
 101ad24:	101d0580 	call	101d058 <__mcmp>
 101ad28:	103e8d0e 	bge	r2,zero,101a760 <_dtoa_r+0x900>
 101ad2c:	d9400717 	ldw	r5,28(sp)
 101ad30:	d9001617 	ldw	r4,88(sp)
 101ad34:	01800284 	movi	r6,10
 101ad38:	000f883a 	mov	r7,zero
 101ad3c:	101dbb00 	call	101dbb0 <__multadd>
 101ad40:	d9800d17 	ldw	r6,52(sp)
 101ad44:	d8800715 	stw	r2,28(sp)
 101ad48:	31bfffc4 	addi	r6,r6,-1
 101ad4c:	d9800d15 	stw	r6,52(sp)
 101ad50:	b001a71e 	bne	r22,zero,101b3f0 <_dtoa_r+0x1590>
 101ad54:	d8800e17 	ldw	r2,56(sp)
 101ad58:	d8800f15 	stw	r2,60(sp)
 101ad5c:	003e8006 	br	101a760 <_dtoa_r+0x900>
 101ad60:	90800417 	ldw	r2,16(r18)
 101ad64:	1085883a 	add	r2,r2,r2
 101ad68:	1085883a 	add	r2,r2,r2
 101ad6c:	1485883a 	add	r2,r2,r18
 101ad70:	11000417 	ldw	r4,16(r2)
 101ad74:	101cf240 	call	101cf24 <__hi0bits>
 101ad78:	00c00804 	movi	r3,32
 101ad7c:	1887c83a 	sub	r3,r3,r2
 101ad80:	003e5a06 	br	101a6ec <_dtoa_r+0x88c>
 101ad84:	d9400717 	ldw	r5,28(sp)
 101ad88:	d9801017 	ldw	r6,64(sp)
 101ad8c:	d9001617 	ldw	r4,88(sp)
 101ad90:	101dcb00 	call	101dcb0 <__pow5mult>
 101ad94:	d8800715 	stw	r2,28(sp)
 101ad98:	003e4306 	br	101a6a8 <_dtoa_r+0x848>
 101ad9c:	d9800f17 	ldw	r6,60(sp)
 101ada0:	d8800d17 	ldw	r2,52(sp)
 101ada4:	d9800315 	stw	r6,12(sp)
 101ada8:	d8800415 	stw	r2,16(sp)
 101adac:	d8c00b17 	ldw	r3,44(sp)
 101adb0:	1805003a 	cmpeq	r2,r3,zero
 101adb4:	1000e21e 	bne	r2,zero,101b140 <_dtoa_r+0x12e0>
 101adb8:	d9000317 	ldw	r4,12(sp)
 101adbc:	0005883a 	mov	r2,zero
 101adc0:	00cff834 	movhi	r3,16352
 101adc4:	200c90fa 	slli	r6,r4,3
 101adc8:	010040f4 	movhi	r4,259
 101adcc:	21148304 	addi	r4,r4,21004
 101add0:	180b883a 	mov	r5,r3
 101add4:	310d883a 	add	r6,r6,r4
 101add8:	327fff17 	ldw	r9,-4(r6)
 101addc:	323ffe17 	ldw	r8,-8(r6)
 101ade0:	1009883a 	mov	r4,r2
 101ade4:	480f883a 	mov	r7,r9
 101ade8:	400d883a 	mov	r6,r8
 101adec:	1012e580 	call	1012e58 <__divdf3>
 101adf0:	180b883a 	mov	r5,r3
 101adf4:	b00d883a 	mov	r6,r22
 101adf8:	b80f883a 	mov	r7,r23
 101adfc:	1009883a 	mov	r4,r2
 101ae00:	10129a00 	call	10129a0 <__subdf3>
 101ae04:	a80b883a 	mov	r5,r21
 101ae08:	a009883a 	mov	r4,r20
 101ae0c:	d8c01915 	stw	r3,100(sp)
 101ae10:	d8801815 	stw	r2,96(sp)
 101ae14:	10133c80 	call	10133c8 <__fixdfsi>
 101ae18:	1009883a 	mov	r4,r2
 101ae1c:	1027883a 	mov	r19,r2
 101ae20:	10132d00 	call	10132d0 <__floatsidf>
 101ae24:	a80b883a 	mov	r5,r21
 101ae28:	a009883a 	mov	r4,r20
 101ae2c:	180f883a 	mov	r7,r3
 101ae30:	100d883a 	mov	r6,r2
 101ae34:	10129a00 	call	10129a0 <__subdf3>
 101ae38:	d9801817 	ldw	r6,96(sp)
 101ae3c:	1823883a 	mov	r17,r3
 101ae40:	d8801415 	stw	r2,80(sp)
 101ae44:	302d883a 	mov	r22,r6
 101ae48:	d9800517 	ldw	r6,20(sp)
 101ae4c:	9cc00c04 	addi	r19,r19,48
 101ae50:	dc401515 	stw	r17,84(sp)
 101ae54:	d8c01917 	ldw	r3,100(sp)
 101ae58:	34c00005 	stb	r19,0(r6)
 101ae5c:	d8800517 	ldw	r2,20(sp)
 101ae60:	d9401917 	ldw	r5,100(sp)
 101ae64:	d9801417 	ldw	r6,80(sp)
 101ae68:	b009883a 	mov	r4,r22
 101ae6c:	880f883a 	mov	r7,r17
 101ae70:	182f883a 	mov	r23,r3
 101ae74:	17000044 	addi	fp,r2,1
 101ae78:	10131380 	call	1013138 <__gtdf2>
 101ae7c:	00804e16 	blt	zero,r2,101afb8 <_dtoa_r+0x1158>
 101ae80:	d9801417 	ldw	r6,80(sp)
 101ae84:	0005883a 	mov	r2,zero
 101ae88:	00cffc34 	movhi	r3,16368
 101ae8c:	180b883a 	mov	r5,r3
 101ae90:	880f883a 	mov	r7,r17
 101ae94:	1009883a 	mov	r4,r2
 101ae98:	10129a00 	call	10129a0 <__subdf3>
 101ae9c:	d9401917 	ldw	r5,100(sp)
 101aea0:	180f883a 	mov	r7,r3
 101aea4:	b009883a 	mov	r4,r22
 101aea8:	100d883a 	mov	r6,r2
 101aeac:	10131380 	call	1013138 <__gtdf2>
 101aeb0:	00bda216 	blt	zero,r2,101a53c <_dtoa_r+0x6dc>
 101aeb4:	d8c00317 	ldw	r3,12(sp)
 101aeb8:	00800044 	movi	r2,1
 101aebc:	10c01216 	blt	r2,r3,101af08 <_dtoa_r+0x10a8>
 101aec0:	003d4506 	br	101a3d8 <_dtoa_r+0x578>
 101aec4:	d9801417 	ldw	r6,80(sp)
 101aec8:	0005883a 	mov	r2,zero
 101aecc:	00cffc34 	movhi	r3,16368
 101aed0:	180b883a 	mov	r5,r3
 101aed4:	880f883a 	mov	r7,r17
 101aed8:	1009883a 	mov	r4,r2
 101aedc:	10129a00 	call	10129a0 <__subdf3>
 101aee0:	d9c01b17 	ldw	r7,108(sp)
 101aee4:	180b883a 	mov	r5,r3
 101aee8:	1009883a 	mov	r4,r2
 101aeec:	b00d883a 	mov	r6,r22
 101aef0:	10132480 	call	1013248 <__ltdf2>
 101aef4:	103d9116 	blt	r2,zero,101a53c <_dtoa_r+0x6dc>
 101aef8:	d9800517 	ldw	r6,20(sp)
 101aefc:	d9000317 	ldw	r4,12(sp)
 101af00:	3105883a 	add	r2,r6,r4
 101af04:	e0bd3426 	beq	fp,r2,101a3d8 <_dtoa_r+0x578>
 101af08:	04500934 	movhi	r17,16420
 101af0c:	0021883a 	mov	r16,zero
 101af10:	b80b883a 	mov	r5,r23
 101af14:	b009883a 	mov	r4,r22
 101af18:	800d883a 	mov	r6,r16
 101af1c:	880f883a 	mov	r7,r17
 101af20:	1012a940 	call	1012a94 <__muldf3>
 101af24:	d9401517 	ldw	r5,84(sp)
 101af28:	d9001417 	ldw	r4,80(sp)
 101af2c:	880f883a 	mov	r7,r17
 101af30:	000d883a 	mov	r6,zero
 101af34:	d8801a15 	stw	r2,104(sp)
 101af38:	d8c01b15 	stw	r3,108(sp)
 101af3c:	1012a940 	call	1012a94 <__muldf3>
 101af40:	180b883a 	mov	r5,r3
 101af44:	1009883a 	mov	r4,r2
 101af48:	1823883a 	mov	r17,r3
 101af4c:	1021883a 	mov	r16,r2
 101af50:	10133c80 	call	10133c8 <__fixdfsi>
 101af54:	1009883a 	mov	r4,r2
 101af58:	102b883a 	mov	r21,r2
 101af5c:	10132d00 	call	10132d0 <__floatsidf>
 101af60:	880b883a 	mov	r5,r17
 101af64:	8009883a 	mov	r4,r16
 101af68:	180f883a 	mov	r7,r3
 101af6c:	100d883a 	mov	r6,r2
 101af70:	10129a00 	call	10129a0 <__subdf3>
 101af74:	1021883a 	mov	r16,r2
 101af78:	d9001b17 	ldw	r4,108(sp)
 101af7c:	1823883a 	mov	r17,r3
 101af80:	dc001415 	stw	r16,80(sp)
 101af84:	ad400c04 	addi	r21,r21,48
 101af88:	dc401515 	stw	r17,84(sp)
 101af8c:	d8801a17 	ldw	r2,104(sp)
 101af90:	e5400005 	stb	r21,0(fp)
 101af94:	202f883a 	mov	r23,r4
 101af98:	d9c01b17 	ldw	r7,108(sp)
 101af9c:	d9001417 	ldw	r4,80(sp)
 101afa0:	880b883a 	mov	r5,r17
 101afa4:	100d883a 	mov	r6,r2
 101afa8:	102d883a 	mov	r22,r2
 101afac:	e7000044 	addi	fp,fp,1
 101afb0:	10132480 	call	1013248 <__ltdf2>
 101afb4:	103fc30e 	bge	r2,zero,101aec4 <_dtoa_r+0x1064>
 101afb8:	d9000417 	ldw	r4,16(sp)
 101afbc:	d9000d15 	stw	r4,52(sp)
 101afc0:	003d7106 	br	101a588 <_dtoa_r+0x728>
 101afc4:	d9801717 	ldw	r6,92(sp)
 101afc8:	00800084 	movi	r2,2
 101afcc:	11bde60e 	bge	r2,r6,101a768 <_dtoa_r+0x908>
 101afd0:	203cfb1e 	bne	r4,zero,101a3c0 <_dtoa_r+0x560>
 101afd4:	d9001617 	ldw	r4,88(sp)
 101afd8:	900b883a 	mov	r5,r18
 101afdc:	01800144 	movi	r6,5
 101afe0:	000f883a 	mov	r7,zero
 101afe4:	101dbb00 	call	101dbb0 <__multadd>
 101afe8:	d9000717 	ldw	r4,28(sp)
 101afec:	100b883a 	mov	r5,r2
 101aff0:	1025883a 	mov	r18,r2
 101aff4:	101d0580 	call	101d058 <__mcmp>
 101aff8:	00bcf10e 	bge	zero,r2,101a3c0 <_dtoa_r+0x560>
 101affc:	d8c00d17 	ldw	r3,52(sp)
 101b000:	d9000517 	ldw	r4,20(sp)
 101b004:	d8000615 	stw	zero,24(sp)
 101b008:	18c00044 	addi	r3,r3,1
 101b00c:	d8c00d15 	stw	r3,52(sp)
 101b010:	00800c44 	movi	r2,49
 101b014:	27000044 	addi	fp,r4,1
 101b018:	20800005 	stb	r2,0(r4)
 101b01c:	003e8906 	br	101aa44 <_dtoa_r+0xbe4>
 101b020:	d8c00517 	ldw	r3,20(sp)
 101b024:	003bc206 	br	1019f30 <_dtoa_r+0xd0>
 101b028:	018040f4 	movhi	r6,259
 101b02c:	3194b504 	addi	r6,r6,21204
 101b030:	30c00917 	ldw	r3,36(r6)
 101b034:	30800817 	ldw	r2,32(r6)
 101b038:	d9001217 	ldw	r4,72(sp)
 101b03c:	d9401317 	ldw	r5,76(sp)
 101b040:	180f883a 	mov	r7,r3
 101b044:	100d883a 	mov	r6,r2
 101b048:	1012e580 	call	1012e58 <__divdf3>
 101b04c:	948003cc 	andi	r18,r18,15
 101b050:	058000c4 	movi	r22,3
 101b054:	1029883a 	mov	r20,r2
 101b058:	182b883a 	mov	r21,r3
 101b05c:	003c8906 	br	101a284 <_dtoa_r+0x424>
 101b060:	d9001017 	ldw	r4,64(sp)
 101b064:	d9800917 	ldw	r6,36(sp)
 101b068:	0025883a 	mov	r18,zero
 101b06c:	1105c83a 	sub	r2,r2,r4
 101b070:	2089883a 	add	r4,r4,r2
 101b074:	308d883a 	add	r6,r6,r2
 101b078:	d9001015 	stw	r4,64(sp)
 101b07c:	d9800915 	stw	r6,36(sp)
 101b080:	003e3206 	br	101a94c <_dtoa_r+0xaec>
 101b084:	28800044 	addi	r2,r5,1
 101b088:	27000044 	addi	fp,r4,1
 101b08c:	20800005 	stb	r2,0(r4)
 101b090:	003e6c06 	br	101aa44 <_dtoa_r+0xbe4>
 101b094:	d8800f17 	ldw	r2,60(sp)
 101b098:	00bce016 	blt	zero,r2,101a41c <_dtoa_r+0x5bc>
 101b09c:	d9800f17 	ldw	r6,60(sp)
 101b0a0:	303cc51e 	bne	r6,zero,101a3b8 <_dtoa_r+0x558>
 101b0a4:	0005883a 	mov	r2,zero
 101b0a8:	00d00534 	movhi	r3,16404
 101b0ac:	980b883a 	mov	r5,r19
 101b0b0:	180f883a 	mov	r7,r3
 101b0b4:	9009883a 	mov	r4,r18
 101b0b8:	100d883a 	mov	r6,r2
 101b0bc:	1012a940 	call	1012a94 <__muldf3>
 101b0c0:	180b883a 	mov	r5,r3
 101b0c4:	a80f883a 	mov	r7,r21
 101b0c8:	1009883a 	mov	r4,r2
 101b0cc:	a00d883a 	mov	r6,r20
 101b0d0:	10131c00 	call	10131c0 <__gedf2>
 101b0d4:	103cb80e 	bge	r2,zero,101a3b8 <_dtoa_r+0x558>
 101b0d8:	0027883a 	mov	r19,zero
 101b0dc:	0025883a 	mov	r18,zero
 101b0e0:	003fc606 	br	101affc <_dtoa_r+0x119c>
 101b0e4:	99400117 	ldw	r5,4(r19)
 101b0e8:	d9001617 	ldw	r4,88(sp)
 101b0ec:	101d47c0 	call	101d47c <_Balloc>
 101b0f0:	99800417 	ldw	r6,16(r19)
 101b0f4:	11000304 	addi	r4,r2,12
 101b0f8:	99400304 	addi	r5,r19,12
 101b0fc:	318d883a 	add	r6,r6,r6
 101b100:	318d883a 	add	r6,r6,r6
 101b104:	31800204 	addi	r6,r6,8
 101b108:	1023883a 	mov	r17,r2
 101b10c:	10152740 	call	1015274 <memcpy>
 101b110:	d9001617 	ldw	r4,88(sp)
 101b114:	880b883a 	mov	r5,r17
 101b118:	01800044 	movi	r6,1
 101b11c:	101d8400 	call	101d840 <__lshift>
 101b120:	100b883a 	mov	r5,r2
 101b124:	003d9c06 	br	101a798 <_dtoa_r+0x938>
 101b128:	00800e44 	movi	r2,57
 101b12c:	b8807026 	beq	r23,r2,101b2f0 <_dtoa_r+0x1490>
 101b130:	b8800044 	addi	r2,r23,1
 101b134:	b7000044 	addi	fp,r22,1
 101b138:	b0800005 	stb	r2,0(r22)
 101b13c:	003e4106 	br	101aa44 <_dtoa_r+0xbe4>
 101b140:	d8800317 	ldw	r2,12(sp)
 101b144:	018040f4 	movhi	r6,259
 101b148:	31948304 	addi	r6,r6,21004
 101b14c:	b009883a 	mov	r4,r22
 101b150:	100e90fa 	slli	r7,r2,3
 101b154:	b80b883a 	mov	r5,r23
 101b158:	398f883a 	add	r7,r7,r6
 101b15c:	38bffe17 	ldw	r2,-8(r7)
 101b160:	d9800517 	ldw	r6,20(sp)
 101b164:	38ffff17 	ldw	r3,-4(r7)
 101b168:	37000044 	addi	fp,r6,1
 101b16c:	180f883a 	mov	r7,r3
 101b170:	100d883a 	mov	r6,r2
 101b174:	1012a940 	call	1012a94 <__muldf3>
 101b178:	a80b883a 	mov	r5,r21
 101b17c:	a009883a 	mov	r4,r20
 101b180:	182f883a 	mov	r23,r3
 101b184:	102d883a 	mov	r22,r2
 101b188:	10133c80 	call	10133c8 <__fixdfsi>
 101b18c:	1009883a 	mov	r4,r2
 101b190:	1027883a 	mov	r19,r2
 101b194:	10132d00 	call	10132d0 <__floatsidf>
 101b198:	a80b883a 	mov	r5,r21
 101b19c:	a009883a 	mov	r4,r20
 101b1a0:	180f883a 	mov	r7,r3
 101b1a4:	100d883a 	mov	r6,r2
 101b1a8:	10129a00 	call	10129a0 <__subdf3>
 101b1ac:	180b883a 	mov	r5,r3
 101b1b0:	d8c00517 	ldw	r3,20(sp)
 101b1b4:	9cc00c04 	addi	r19,r19,48
 101b1b8:	1009883a 	mov	r4,r2
 101b1bc:	1cc00005 	stb	r19,0(r3)
 101b1c0:	2021883a 	mov	r16,r4
 101b1c4:	d9000317 	ldw	r4,12(sp)
 101b1c8:	00800044 	movi	r2,1
 101b1cc:	2823883a 	mov	r17,r5
 101b1d0:	20802226 	beq	r4,r2,101b25c <_dtoa_r+0x13fc>
 101b1d4:	1029883a 	mov	r20,r2
 101b1d8:	0005883a 	mov	r2,zero
 101b1dc:	00d00934 	movhi	r3,16420
 101b1e0:	180f883a 	mov	r7,r3
 101b1e4:	100d883a 	mov	r6,r2
 101b1e8:	880b883a 	mov	r5,r17
 101b1ec:	8009883a 	mov	r4,r16
 101b1f0:	1012a940 	call	1012a94 <__muldf3>
 101b1f4:	180b883a 	mov	r5,r3
 101b1f8:	1009883a 	mov	r4,r2
 101b1fc:	1823883a 	mov	r17,r3
 101b200:	1021883a 	mov	r16,r2
 101b204:	10133c80 	call	10133c8 <__fixdfsi>
 101b208:	1009883a 	mov	r4,r2
 101b20c:	102b883a 	mov	r21,r2
 101b210:	10132d00 	call	10132d0 <__floatsidf>
 101b214:	880b883a 	mov	r5,r17
 101b218:	8009883a 	mov	r4,r16
 101b21c:	180f883a 	mov	r7,r3
 101b220:	100d883a 	mov	r6,r2
 101b224:	10129a00 	call	10129a0 <__subdf3>
 101b228:	180b883a 	mov	r5,r3
 101b22c:	d8c00517 	ldw	r3,20(sp)
 101b230:	1009883a 	mov	r4,r2
 101b234:	ad400c04 	addi	r21,r21,48
 101b238:	1d05883a 	add	r2,r3,r20
 101b23c:	15400005 	stb	r21,0(r2)
 101b240:	2021883a 	mov	r16,r4
 101b244:	d9000317 	ldw	r4,12(sp)
 101b248:	a5000044 	addi	r20,r20,1
 101b24c:	2823883a 	mov	r17,r5
 101b250:	a13fe11e 	bne	r20,r4,101b1d8 <_dtoa_r+0x1378>
 101b254:	e505883a 	add	r2,fp,r20
 101b258:	173fffc4 	addi	fp,r2,-1
 101b25c:	0025883a 	mov	r18,zero
 101b260:	04cff834 	movhi	r19,16352
 101b264:	b009883a 	mov	r4,r22
 101b268:	b80b883a 	mov	r5,r23
 101b26c:	900d883a 	mov	r6,r18
 101b270:	980f883a 	mov	r7,r19
 101b274:	1012a200 	call	1012a20 <__adddf3>
 101b278:	180b883a 	mov	r5,r3
 101b27c:	1009883a 	mov	r4,r2
 101b280:	800d883a 	mov	r6,r16
 101b284:	880f883a 	mov	r7,r17
 101b288:	10132480 	call	1013248 <__ltdf2>
 101b28c:	103cab16 	blt	r2,zero,101a53c <_dtoa_r+0x6dc>
 101b290:	0009883a 	mov	r4,zero
 101b294:	980b883a 	mov	r5,r19
 101b298:	b80f883a 	mov	r7,r23
 101b29c:	b00d883a 	mov	r6,r22
 101b2a0:	10129a00 	call	10129a0 <__subdf3>
 101b2a4:	180b883a 	mov	r5,r3
 101b2a8:	880f883a 	mov	r7,r17
 101b2ac:	1009883a 	mov	r4,r2
 101b2b0:	800d883a 	mov	r6,r16
 101b2b4:	10131380 	call	1013138 <__gtdf2>
 101b2b8:	00bc470e 	bge	zero,r2,101a3d8 <_dtoa_r+0x578>
 101b2bc:	00c00c04 	movi	r3,48
 101b2c0:	e73fffc4 	addi	fp,fp,-1
 101b2c4:	e0800007 	ldb	r2,0(fp)
 101b2c8:	10fffd26 	beq	r2,r3,101b2c0 <_dtoa_r+0x1460>
 101b2cc:	d9800417 	ldw	r6,16(sp)
 101b2d0:	e7000044 	addi	fp,fp,1
 101b2d4:	d9800d15 	stw	r6,52(sp)
 101b2d8:	003cab06 	br	101a588 <_dtoa_r+0x728>
 101b2dc:	d8c00f17 	ldw	r3,60(sp)
 101b2e0:	d9001117 	ldw	r4,68(sp)
 101b2e4:	20e1c83a 	sub	r16,r4,r3
 101b2e8:	0007883a 	mov	r3,zero
 101b2ec:	003d9b06 	br	101a95c <_dtoa_r+0xafc>
 101b2f0:	00800e44 	movi	r2,57
 101b2f4:	b0800005 	stb	r2,0(r22)
 101b2f8:	b5800044 	addi	r22,r22,1
 101b2fc:	003dc106 	br	101aa04 <_dtoa_r+0xba4>
 101b300:	05800084 	movi	r22,2
 101b304:	003bf706 	br	101a2e4 <_dtoa_r+0x484>
 101b308:	d9000f17 	ldw	r4,60(sp)
 101b30c:	013c000e 	bge	zero,r4,101a310 <_dtoa_r+0x4b0>
 101b310:	d9800e17 	ldw	r6,56(sp)
 101b314:	01bc300e 	bge	zero,r6,101a3d8 <_dtoa_r+0x578>
 101b318:	0005883a 	mov	r2,zero
 101b31c:	00d00934 	movhi	r3,16420
 101b320:	a80b883a 	mov	r5,r21
 101b324:	180f883a 	mov	r7,r3
 101b328:	a009883a 	mov	r4,r20
 101b32c:	100d883a 	mov	r6,r2
 101b330:	1012a940 	call	1012a94 <__muldf3>
 101b334:	b1000044 	addi	r4,r22,1
 101b338:	1021883a 	mov	r16,r2
 101b33c:	1823883a 	mov	r17,r3
 101b340:	10132d00 	call	10132d0 <__floatsidf>
 101b344:	880b883a 	mov	r5,r17
 101b348:	8009883a 	mov	r4,r16
 101b34c:	180f883a 	mov	r7,r3
 101b350:	100d883a 	mov	r6,r2
 101b354:	1012a940 	call	1012a94 <__muldf3>
 101b358:	0011883a 	mov	r8,zero
 101b35c:	02500734 	movhi	r9,16412
 101b360:	180b883a 	mov	r5,r3
 101b364:	480f883a 	mov	r7,r9
 101b368:	1009883a 	mov	r4,r2
 101b36c:	400d883a 	mov	r6,r8
 101b370:	1012a200 	call	1012a20 <__adddf3>
 101b374:	102d883a 	mov	r22,r2
 101b378:	00bf3034 	movhi	r2,64704
 101b37c:	10ef883a 	add	r23,r2,r3
 101b380:	d8800d17 	ldw	r2,52(sp)
 101b384:	d8c00e17 	ldw	r3,56(sp)
 101b388:	8029883a 	mov	r20,r16
 101b38c:	10bfffc4 	addi	r2,r2,-1
 101b390:	882b883a 	mov	r21,r17
 101b394:	d8800415 	stw	r2,16(sp)
 101b398:	d8c00315 	stw	r3,12(sp)
 101b39c:	003e8306 	br	101adac <_dtoa_r+0xf4c>
 101b3a0:	d8800117 	ldw	r2,4(sp)
 101b3a4:	dc001117 	ldw	r16,68(sp)
 101b3a8:	dc801017 	ldw	r18,64(sp)
 101b3ac:	00c00d84 	movi	r3,54
 101b3b0:	1887c83a 	sub	r3,r3,r2
 101b3b4:	003d6906 	br	101a95c <_dtoa_r+0xafc>
 101b3b8:	01800044 	movi	r6,1
 101b3bc:	3021883a 	mov	r16,r6
 101b3c0:	d9800f15 	stw	r6,60(sp)
 101b3c4:	d9802615 	stw	r6,152(sp)
 101b3c8:	d9800e15 	stw	r6,56(sp)
 101b3cc:	003b9306 	br	101a21c <_dtoa_r+0x3bc>
 101b3d0:	b021883a 	mov	r16,r22
 101b3d4:	dd800f15 	stw	r22,60(sp)
 101b3d8:	003b9006 	br	101a21c <_dtoa_r+0x3bc>
 101b3dc:	103e221e 	bne	r2,zero,101ac68 <_dtoa_r+0xe08>
 101b3e0:	b880004c 	andi	r2,r23,1
 101b3e4:	1005003a 	cmpeq	r2,r2,zero
 101b3e8:	103e1f1e 	bne	r2,zero,101ac68 <_dtoa_r+0xe08>
 101b3ec:	003e1b06 	br	101ac5c <_dtoa_r+0xdfc>
 101b3f0:	d9001617 	ldw	r4,88(sp)
 101b3f4:	980b883a 	mov	r5,r19
 101b3f8:	01800284 	movi	r6,10
 101b3fc:	000f883a 	mov	r7,zero
 101b400:	101dbb00 	call	101dbb0 <__multadd>
 101b404:	d8c00e17 	ldw	r3,56(sp)
 101b408:	1027883a 	mov	r19,r2
 101b40c:	d8c00f15 	stw	r3,60(sp)
 101b410:	003cd306 	br	101a760 <_dtoa_r+0x900>

0101b414 <_fclose_r>:
 101b414:	defffc04 	addi	sp,sp,-16
 101b418:	dc400115 	stw	r17,4(sp)
 101b41c:	dc000015 	stw	r16,0(sp)
 101b420:	dfc00315 	stw	ra,12(sp)
 101b424:	dc800215 	stw	r18,8(sp)
 101b428:	2821883a 	mov	r16,r5
 101b42c:	2023883a 	mov	r17,r4
 101b430:	28002926 	beq	r5,zero,101b4d8 <_fclose_r+0xc4>
 101b434:	1013f400 	call	1013f40 <__sfp_lock_acquire>
 101b438:	88000226 	beq	r17,zero,101b444 <_fclose_r+0x30>
 101b43c:	88800e17 	ldw	r2,56(r17)
 101b440:	10002d26 	beq	r2,zero,101b4f8 <_fclose_r+0xe4>
 101b444:	8080030f 	ldh	r2,12(r16)
 101b448:	10002226 	beq	r2,zero,101b4d4 <_fclose_r+0xc0>
 101b44c:	8809883a 	mov	r4,r17
 101b450:	800b883a 	mov	r5,r16
 101b454:	101b5380 	call	101b538 <_fflush_r>
 101b458:	1025883a 	mov	r18,r2
 101b45c:	80800b17 	ldw	r2,44(r16)
 101b460:	10000426 	beq	r2,zero,101b474 <_fclose_r+0x60>
 101b464:	81400717 	ldw	r5,28(r16)
 101b468:	8809883a 	mov	r4,r17
 101b46c:	103ee83a 	callr	r2
 101b470:	10002a16 	blt	r2,zero,101b51c <_fclose_r+0x108>
 101b474:	8080030b 	ldhu	r2,12(r16)
 101b478:	1080200c 	andi	r2,r2,128
 101b47c:	1000231e 	bne	r2,zero,101b50c <_fclose_r+0xf8>
 101b480:	81400c17 	ldw	r5,48(r16)
 101b484:	28000526 	beq	r5,zero,101b49c <_fclose_r+0x88>
 101b488:	80801004 	addi	r2,r16,64
 101b48c:	28800226 	beq	r5,r2,101b498 <_fclose_r+0x84>
 101b490:	8809883a 	mov	r4,r17
 101b494:	101b9340 	call	101b934 <_free_r>
 101b498:	80000c15 	stw	zero,48(r16)
 101b49c:	81401117 	ldw	r5,68(r16)
 101b4a0:	28000326 	beq	r5,zero,101b4b0 <_fclose_r+0x9c>
 101b4a4:	8809883a 	mov	r4,r17
 101b4a8:	101b9340 	call	101b934 <_free_r>
 101b4ac:	80001115 	stw	zero,68(r16)
 101b4b0:	8000030d 	sth	zero,12(r16)
 101b4b4:	1013f440 	call	1013f44 <__sfp_lock_release>
 101b4b8:	9005883a 	mov	r2,r18
 101b4bc:	dfc00317 	ldw	ra,12(sp)
 101b4c0:	dc800217 	ldw	r18,8(sp)
 101b4c4:	dc400117 	ldw	r17,4(sp)
 101b4c8:	dc000017 	ldw	r16,0(sp)
 101b4cc:	dec00404 	addi	sp,sp,16
 101b4d0:	f800283a 	ret
 101b4d4:	1013f440 	call	1013f44 <__sfp_lock_release>
 101b4d8:	0025883a 	mov	r18,zero
 101b4dc:	9005883a 	mov	r2,r18
 101b4e0:	dfc00317 	ldw	ra,12(sp)
 101b4e4:	dc800217 	ldw	r18,8(sp)
 101b4e8:	dc400117 	ldw	r17,4(sp)
 101b4ec:	dc000017 	ldw	r16,0(sp)
 101b4f0:	dec00404 	addi	sp,sp,16
 101b4f4:	f800283a 	ret
 101b4f8:	8809883a 	mov	r4,r17
 101b4fc:	1013f500 	call	1013f50 <__sinit>
 101b500:	8080030f 	ldh	r2,12(r16)
 101b504:	103fd11e 	bne	r2,zero,101b44c <_fclose_r+0x38>
 101b508:	003ff206 	br	101b4d4 <_fclose_r+0xc0>
 101b50c:	81400417 	ldw	r5,16(r16)
 101b510:	8809883a 	mov	r4,r17
 101b514:	101b9340 	call	101b934 <_free_r>
 101b518:	003fd906 	br	101b480 <_fclose_r+0x6c>
 101b51c:	04bfffc4 	movi	r18,-1
 101b520:	003fd406 	br	101b474 <_fclose_r+0x60>

0101b524 <fclose>:
 101b524:	008040f4 	movhi	r2,259
 101b528:	109bed04 	addi	r2,r2,28596
 101b52c:	200b883a 	mov	r5,r4
 101b530:	11000017 	ldw	r4,0(r2)
 101b534:	101b4141 	jmpi	101b414 <_fclose_r>

0101b538 <_fflush_r>:
 101b538:	defffb04 	addi	sp,sp,-20
 101b53c:	dcc00315 	stw	r19,12(sp)
 101b540:	dc800215 	stw	r18,8(sp)
 101b544:	dfc00415 	stw	ra,16(sp)
 101b548:	dc400115 	stw	r17,4(sp)
 101b54c:	dc000015 	stw	r16,0(sp)
 101b550:	2027883a 	mov	r19,r4
 101b554:	2825883a 	mov	r18,r5
 101b558:	20000226 	beq	r4,zero,101b564 <_fflush_r+0x2c>
 101b55c:	20800e17 	ldw	r2,56(r4)
 101b560:	10005626 	beq	r2,zero,101b6bc <_fflush_r+0x184>
 101b564:	9100030b 	ldhu	r4,12(r18)
 101b568:	20ffffcc 	andi	r3,r4,65535
 101b56c:	18e0001c 	xori	r3,r3,32768
 101b570:	18e00004 	addi	r3,r3,-32768
 101b574:	1880020c 	andi	r2,r3,8
 101b578:	1000261e 	bne	r2,zero,101b614 <_fflush_r+0xdc>
 101b57c:	90c00117 	ldw	r3,4(r18)
 101b580:	20820014 	ori	r2,r4,2048
 101b584:	9080030d 	sth	r2,12(r18)
 101b588:	1009883a 	mov	r4,r2
 101b58c:	00c0400e 	bge	zero,r3,101b690 <_fflush_r+0x158>
 101b590:	92000a17 	ldw	r8,40(r18)
 101b594:	40004026 	beq	r8,zero,101b698 <_fflush_r+0x160>
 101b598:	2084000c 	andi	r2,r4,4096
 101b59c:	10005326 	beq	r2,zero,101b6ec <_fflush_r+0x1b4>
 101b5a0:	94001417 	ldw	r16,80(r18)
 101b5a4:	9080030b 	ldhu	r2,12(r18)
 101b5a8:	1080010c 	andi	r2,r2,4
 101b5ac:	1000481e 	bne	r2,zero,101b6d0 <_fflush_r+0x198>
 101b5b0:	91400717 	ldw	r5,28(r18)
 101b5b4:	9809883a 	mov	r4,r19
 101b5b8:	800d883a 	mov	r6,r16
 101b5bc:	000f883a 	mov	r7,zero
 101b5c0:	403ee83a 	callr	r8
 101b5c4:	8080261e 	bne	r16,r2,101b660 <_fflush_r+0x128>
 101b5c8:	9080030b 	ldhu	r2,12(r18)
 101b5cc:	91000417 	ldw	r4,16(r18)
 101b5d0:	90000115 	stw	zero,4(r18)
 101b5d4:	10bdffcc 	andi	r2,r2,63487
 101b5d8:	10ffffcc 	andi	r3,r2,65535
 101b5dc:	18c4000c 	andi	r3,r3,4096
 101b5e0:	9080030d 	sth	r2,12(r18)
 101b5e4:	91000015 	stw	r4,0(r18)
 101b5e8:	18002b26 	beq	r3,zero,101b698 <_fflush_r+0x160>
 101b5ec:	0007883a 	mov	r3,zero
 101b5f0:	1805883a 	mov	r2,r3
 101b5f4:	94001415 	stw	r16,80(r18)
 101b5f8:	dfc00417 	ldw	ra,16(sp)
 101b5fc:	dcc00317 	ldw	r19,12(sp)
 101b600:	dc800217 	ldw	r18,8(sp)
 101b604:	dc400117 	ldw	r17,4(sp)
 101b608:	dc000017 	ldw	r16,0(sp)
 101b60c:	dec00504 	addi	sp,sp,20
 101b610:	f800283a 	ret
 101b614:	94400417 	ldw	r17,16(r18)
 101b618:	88001f26 	beq	r17,zero,101b698 <_fflush_r+0x160>
 101b61c:	90800017 	ldw	r2,0(r18)
 101b620:	18c000cc 	andi	r3,r3,3
 101b624:	94400015 	stw	r17,0(r18)
 101b628:	1461c83a 	sub	r16,r2,r17
 101b62c:	18002526 	beq	r3,zero,101b6c4 <_fflush_r+0x18c>
 101b630:	0005883a 	mov	r2,zero
 101b634:	90800215 	stw	r2,8(r18)
 101b638:	0400170e 	bge	zero,r16,101b698 <_fflush_r+0x160>
 101b63c:	90c00917 	ldw	r3,36(r18)
 101b640:	91400717 	ldw	r5,28(r18)
 101b644:	880d883a 	mov	r6,r17
 101b648:	800f883a 	mov	r7,r16
 101b64c:	9809883a 	mov	r4,r19
 101b650:	183ee83a 	callr	r3
 101b654:	88a3883a 	add	r17,r17,r2
 101b658:	80a1c83a 	sub	r16,r16,r2
 101b65c:	00bff616 	blt	zero,r2,101b638 <_fflush_r+0x100>
 101b660:	9080030b 	ldhu	r2,12(r18)
 101b664:	00ffffc4 	movi	r3,-1
 101b668:	10801014 	ori	r2,r2,64
 101b66c:	9080030d 	sth	r2,12(r18)
 101b670:	1805883a 	mov	r2,r3
 101b674:	dfc00417 	ldw	ra,16(sp)
 101b678:	dcc00317 	ldw	r19,12(sp)
 101b67c:	dc800217 	ldw	r18,8(sp)
 101b680:	dc400117 	ldw	r17,4(sp)
 101b684:	dc000017 	ldw	r16,0(sp)
 101b688:	dec00504 	addi	sp,sp,20
 101b68c:	f800283a 	ret
 101b690:	90800f17 	ldw	r2,60(r18)
 101b694:	00bfbe16 	blt	zero,r2,101b590 <_fflush_r+0x58>
 101b698:	0007883a 	mov	r3,zero
 101b69c:	1805883a 	mov	r2,r3
 101b6a0:	dfc00417 	ldw	ra,16(sp)
 101b6a4:	dcc00317 	ldw	r19,12(sp)
 101b6a8:	dc800217 	ldw	r18,8(sp)
 101b6ac:	dc400117 	ldw	r17,4(sp)
 101b6b0:	dc000017 	ldw	r16,0(sp)
 101b6b4:	dec00504 	addi	sp,sp,20
 101b6b8:	f800283a 	ret
 101b6bc:	1013f500 	call	1013f50 <__sinit>
 101b6c0:	003fa806 	br	101b564 <_fflush_r+0x2c>
 101b6c4:	90800517 	ldw	r2,20(r18)
 101b6c8:	90800215 	stw	r2,8(r18)
 101b6cc:	003fda06 	br	101b638 <_fflush_r+0x100>
 101b6d0:	90800117 	ldw	r2,4(r18)
 101b6d4:	90c00c17 	ldw	r3,48(r18)
 101b6d8:	80a1c83a 	sub	r16,r16,r2
 101b6dc:	183fb426 	beq	r3,zero,101b5b0 <_fflush_r+0x78>
 101b6e0:	90800f17 	ldw	r2,60(r18)
 101b6e4:	80a1c83a 	sub	r16,r16,r2
 101b6e8:	003fb106 	br	101b5b0 <_fflush_r+0x78>
 101b6ec:	91400717 	ldw	r5,28(r18)
 101b6f0:	9809883a 	mov	r4,r19
 101b6f4:	000d883a 	mov	r6,zero
 101b6f8:	01c00044 	movi	r7,1
 101b6fc:	403ee83a 	callr	r8
 101b700:	1021883a 	mov	r16,r2
 101b704:	00bfffc4 	movi	r2,-1
 101b708:	80800226 	beq	r16,r2,101b714 <_fflush_r+0x1dc>
 101b70c:	92000a17 	ldw	r8,40(r18)
 101b710:	003fa406 	br	101b5a4 <_fflush_r+0x6c>
 101b714:	98c00017 	ldw	r3,0(r19)
 101b718:	00800744 	movi	r2,29
 101b71c:	18bfde26 	beq	r3,r2,101b698 <_fflush_r+0x160>
 101b720:	9080030b 	ldhu	r2,12(r18)
 101b724:	8007883a 	mov	r3,r16
 101b728:	10801014 	ori	r2,r2,64
 101b72c:	9080030d 	sth	r2,12(r18)
 101b730:	003fcf06 	br	101b670 <_fflush_r+0x138>

0101b734 <fflush>:
 101b734:	014040b4 	movhi	r5,258
 101b738:	296d4e04 	addi	r5,r5,-19144
 101b73c:	2007883a 	mov	r3,r4
 101b740:	20000526 	beq	r4,zero,101b758 <fflush+0x24>
 101b744:	008040f4 	movhi	r2,259
 101b748:	109bed04 	addi	r2,r2,28596
 101b74c:	11000017 	ldw	r4,0(r2)
 101b750:	180b883a 	mov	r5,r3
 101b754:	101b5381 	jmpi	101b538 <_fflush_r>
 101b758:	008040f4 	movhi	r2,259
 101b75c:	109bee04 	addi	r2,r2,28600
 101b760:	11000017 	ldw	r4,0(r2)
 101b764:	10147f81 	jmpi	10147f8 <_fwalk_reent>

0101b768 <__sflags>:
 101b768:	28c00007 	ldb	r3,0(r5)
 101b76c:	00801c84 	movi	r2,114
 101b770:	18800926 	beq	r3,r2,101b798 <__sflags+0x30>
 101b774:	00801dc4 	movi	r2,119
 101b778:	18801426 	beq	r3,r2,101b7cc <__sflags+0x64>
 101b77c:	00801844 	movi	r2,97
 101b780:	18801626 	beq	r3,r2,101b7dc <__sflags+0x74>
 101b784:	0007883a 	mov	r3,zero
 101b788:	00800584 	movi	r2,22
 101b78c:	20800015 	stw	r2,0(r4)
 101b790:	1805883a 	mov	r2,r3
 101b794:	f800283a 	ret
 101b798:	000f883a 	mov	r7,zero
 101b79c:	0011883a 	mov	r8,zero
 101b7a0:	00c00104 	movi	r3,4
 101b7a4:	28800047 	ldb	r2,1(r5)
 101b7a8:	10000426 	beq	r2,zero,101b7bc <__sflags+0x54>
 101b7ac:	01000ac4 	movi	r4,43
 101b7b0:	11000e26 	beq	r2,r4,101b7ec <__sflags+0x84>
 101b7b4:	28800087 	ldb	r2,2(r5)
 101b7b8:	11000c26 	beq	r2,r4,101b7ec <__sflags+0x84>
 101b7bc:	3a04b03a 	or	r2,r7,r8
 101b7c0:	30800015 	stw	r2,0(r6)
 101b7c4:	1805883a 	mov	r2,r3
 101b7c8:	f800283a 	ret
 101b7cc:	01c00044 	movi	r7,1
 101b7d0:	02018004 	movi	r8,1536
 101b7d4:	00c00204 	movi	r3,8
 101b7d8:	003ff206 	br	101b7a4 <__sflags+0x3c>
 101b7dc:	01c00044 	movi	r7,1
 101b7e0:	02008204 	movi	r8,520
 101b7e4:	00c04204 	movi	r3,264
 101b7e8:	003fee06 	br	101b7a4 <__sflags+0x3c>
 101b7ec:	00bffcc4 	movi	r2,-13
 101b7f0:	1884703a 	and	r2,r3,r2
 101b7f4:	01c00084 	movi	r7,2
 101b7f8:	10c00414 	ori	r3,r2,16
 101b7fc:	3a04b03a 	or	r2,r7,r8
 101b800:	30800015 	stw	r2,0(r6)
 101b804:	003fef06 	br	101b7c4 <__sflags+0x5c>

0101b808 <_malloc_trim_r>:
 101b808:	defffb04 	addi	sp,sp,-20
 101b80c:	dcc00315 	stw	r19,12(sp)
 101b810:	04c040f4 	movhi	r19,259
 101b814:	9cd63804 	addi	r19,r19,22752
 101b818:	dc800215 	stw	r18,8(sp)
 101b81c:	dc400115 	stw	r17,4(sp)
 101b820:	dc000015 	stw	r16,0(sp)
 101b824:	2823883a 	mov	r17,r5
 101b828:	2025883a 	mov	r18,r4
 101b82c:	dfc00415 	stw	ra,16(sp)
 101b830:	10219800 	call	1021980 <__malloc_lock>
 101b834:	98800217 	ldw	r2,8(r19)
 101b838:	9009883a 	mov	r4,r18
 101b83c:	000b883a 	mov	r5,zero
 101b840:	10c00117 	ldw	r3,4(r2)
 101b844:	00bfff04 	movi	r2,-4
 101b848:	18a0703a 	and	r16,r3,r2
 101b84c:	8463c83a 	sub	r17,r16,r17
 101b850:	8c43fbc4 	addi	r17,r17,4079
 101b854:	8822d33a 	srli	r17,r17,12
 101b858:	0083ffc4 	movi	r2,4095
 101b85c:	8c7fffc4 	addi	r17,r17,-1
 101b860:	8822933a 	slli	r17,r17,12
 101b864:	1440060e 	bge	r2,r17,101b880 <_malloc_trim_r+0x78>
 101b868:	10158940 	call	1015894 <_sbrk_r>
 101b86c:	98c00217 	ldw	r3,8(r19)
 101b870:	9009883a 	mov	r4,r18
 101b874:	044bc83a 	sub	r5,zero,r17
 101b878:	80c7883a 	add	r3,r16,r3
 101b87c:	10c00926 	beq	r2,r3,101b8a4 <_malloc_trim_r+0x9c>
 101b880:	10219a00 	call	10219a0 <__malloc_unlock>
 101b884:	0005883a 	mov	r2,zero
 101b888:	dfc00417 	ldw	ra,16(sp)
 101b88c:	dcc00317 	ldw	r19,12(sp)
 101b890:	dc800217 	ldw	r18,8(sp)
 101b894:	dc400117 	ldw	r17,4(sp)
 101b898:	dc000017 	ldw	r16,0(sp)
 101b89c:	dec00504 	addi	sp,sp,20
 101b8a0:	f800283a 	ret
 101b8a4:	9009883a 	mov	r4,r18
 101b8a8:	10158940 	call	1015894 <_sbrk_r>
 101b8ac:	844dc83a 	sub	r6,r16,r17
 101b8b0:	00ffffc4 	movi	r3,-1
 101b8b4:	9009883a 	mov	r4,r18
 101b8b8:	000b883a 	mov	r5,zero
 101b8bc:	01c04134 	movhi	r7,260
 101b8c0:	39e34f04 	addi	r7,r7,-29380
 101b8c4:	31800054 	ori	r6,r6,1
 101b8c8:	10c00926 	beq	r2,r3,101b8f0 <_malloc_trim_r+0xe8>
 101b8cc:	38800017 	ldw	r2,0(r7)
 101b8d0:	98c00217 	ldw	r3,8(r19)
 101b8d4:	9009883a 	mov	r4,r18
 101b8d8:	1445c83a 	sub	r2,r2,r17
 101b8dc:	38800015 	stw	r2,0(r7)
 101b8e0:	19800115 	stw	r6,4(r3)
 101b8e4:	10219a00 	call	10219a0 <__malloc_unlock>
 101b8e8:	00800044 	movi	r2,1
 101b8ec:	003fe606 	br	101b888 <_malloc_trim_r+0x80>
 101b8f0:	10158940 	call	1015894 <_sbrk_r>
 101b8f4:	99800217 	ldw	r6,8(r19)
 101b8f8:	100f883a 	mov	r7,r2
 101b8fc:	9009883a 	mov	r4,r18
 101b900:	1187c83a 	sub	r3,r2,r6
 101b904:	008003c4 	movi	r2,15
 101b908:	19400054 	ori	r5,r3,1
 101b90c:	10ffdc0e 	bge	r2,r3,101b880 <_malloc_trim_r+0x78>
 101b910:	008040f4 	movhi	r2,259
 101b914:	109bf004 	addi	r2,r2,28608
 101b918:	10c00017 	ldw	r3,0(r2)
 101b91c:	00804134 	movhi	r2,260
 101b920:	10a34f04 	addi	r2,r2,-29380
 101b924:	31400115 	stw	r5,4(r6)
 101b928:	38c7c83a 	sub	r3,r7,r3
 101b92c:	10c00015 	stw	r3,0(r2)
 101b930:	003fd306 	br	101b880 <_malloc_trim_r+0x78>

0101b934 <_free_r>:
 101b934:	defffd04 	addi	sp,sp,-12
 101b938:	dc400115 	stw	r17,4(sp)
 101b93c:	dc000015 	stw	r16,0(sp)
 101b940:	dfc00215 	stw	ra,8(sp)
 101b944:	2821883a 	mov	r16,r5
 101b948:	2023883a 	mov	r17,r4
 101b94c:	28005a26 	beq	r5,zero,101bab8 <_free_r+0x184>
 101b950:	10219800 	call	1021980 <__malloc_lock>
 101b954:	823ffe04 	addi	r8,r16,-8
 101b958:	41400117 	ldw	r5,4(r8)
 101b95c:	00bfff84 	movi	r2,-2
 101b960:	028040f4 	movhi	r10,259
 101b964:	52963804 	addi	r10,r10,22752
 101b968:	288e703a 	and	r7,r5,r2
 101b96c:	41cd883a 	add	r6,r8,r7
 101b970:	30c00117 	ldw	r3,4(r6)
 101b974:	51000217 	ldw	r4,8(r10)
 101b978:	00bfff04 	movi	r2,-4
 101b97c:	1892703a 	and	r9,r3,r2
 101b980:	5017883a 	mov	r11,r10
 101b984:	31006726 	beq	r6,r4,101bb24 <_free_r+0x1f0>
 101b988:	2880004c 	andi	r2,r5,1
 101b98c:	1005003a 	cmpeq	r2,r2,zero
 101b990:	32400115 	stw	r9,4(r6)
 101b994:	10001a1e 	bne	r2,zero,101ba00 <_free_r+0xcc>
 101b998:	000b883a 	mov	r5,zero
 101b99c:	3247883a 	add	r3,r6,r9
 101b9a0:	18800117 	ldw	r2,4(r3)
 101b9a4:	1080004c 	andi	r2,r2,1
 101b9a8:	1000231e 	bne	r2,zero,101ba38 <_free_r+0x104>
 101b9ac:	280ac03a 	cmpne	r5,r5,zero
 101b9b0:	3a4f883a 	add	r7,r7,r9
 101b9b4:	2800451e 	bne	r5,zero,101bacc <_free_r+0x198>
 101b9b8:	31000217 	ldw	r4,8(r6)
 101b9bc:	008040f4 	movhi	r2,259
 101b9c0:	10963a04 	addi	r2,r2,22760
 101b9c4:	20807b26 	beq	r4,r2,101bbb4 <_free_r+0x280>
 101b9c8:	30800317 	ldw	r2,12(r6)
 101b9cc:	3a07883a 	add	r3,r7,r8
 101b9d0:	19c00015 	stw	r7,0(r3)
 101b9d4:	11000215 	stw	r4,8(r2)
 101b9d8:	20800315 	stw	r2,12(r4)
 101b9dc:	38800054 	ori	r2,r7,1
 101b9e0:	40800115 	stw	r2,4(r8)
 101b9e4:	28001a26 	beq	r5,zero,101ba50 <_free_r+0x11c>
 101b9e8:	8809883a 	mov	r4,r17
 101b9ec:	dfc00217 	ldw	ra,8(sp)
 101b9f0:	dc400117 	ldw	r17,4(sp)
 101b9f4:	dc000017 	ldw	r16,0(sp)
 101b9f8:	dec00304 	addi	sp,sp,12
 101b9fc:	10219a01 	jmpi	10219a0 <__malloc_unlock>
 101ba00:	80bffe17 	ldw	r2,-8(r16)
 101ba04:	50c00204 	addi	r3,r10,8
 101ba08:	4091c83a 	sub	r8,r8,r2
 101ba0c:	41000217 	ldw	r4,8(r8)
 101ba10:	388f883a 	add	r7,r7,r2
 101ba14:	20c06126 	beq	r4,r3,101bb9c <_free_r+0x268>
 101ba18:	40800317 	ldw	r2,12(r8)
 101ba1c:	3247883a 	add	r3,r6,r9
 101ba20:	000b883a 	mov	r5,zero
 101ba24:	11000215 	stw	r4,8(r2)
 101ba28:	20800315 	stw	r2,12(r4)
 101ba2c:	18800117 	ldw	r2,4(r3)
 101ba30:	1080004c 	andi	r2,r2,1
 101ba34:	103fdd26 	beq	r2,zero,101b9ac <_free_r+0x78>
 101ba38:	38800054 	ori	r2,r7,1
 101ba3c:	3a07883a 	add	r3,r7,r8
 101ba40:	280ac03a 	cmpne	r5,r5,zero
 101ba44:	40800115 	stw	r2,4(r8)
 101ba48:	19c00015 	stw	r7,0(r3)
 101ba4c:	283fe61e 	bne	r5,zero,101b9e8 <_free_r+0xb4>
 101ba50:	00807fc4 	movi	r2,511
 101ba54:	11c01f2e 	bgeu	r2,r7,101bad4 <_free_r+0x1a0>
 101ba58:	3806d27a 	srli	r3,r7,9
 101ba5c:	1800481e 	bne	r3,zero,101bb80 <_free_r+0x24c>
 101ba60:	3804d0fa 	srli	r2,r7,3
 101ba64:	100690fa 	slli	r3,r2,3
 101ba68:	1acd883a 	add	r6,r3,r11
 101ba6c:	31400217 	ldw	r5,8(r6)
 101ba70:	31405926 	beq	r6,r5,101bbd8 <_free_r+0x2a4>
 101ba74:	28800117 	ldw	r2,4(r5)
 101ba78:	00ffff04 	movi	r3,-4
 101ba7c:	10c4703a 	and	r2,r2,r3
 101ba80:	3880022e 	bgeu	r7,r2,101ba8c <_free_r+0x158>
 101ba84:	29400217 	ldw	r5,8(r5)
 101ba88:	317ffa1e 	bne	r6,r5,101ba74 <_free_r+0x140>
 101ba8c:	29800317 	ldw	r6,12(r5)
 101ba90:	41800315 	stw	r6,12(r8)
 101ba94:	41400215 	stw	r5,8(r8)
 101ba98:	8809883a 	mov	r4,r17
 101ba9c:	2a000315 	stw	r8,12(r5)
 101baa0:	32000215 	stw	r8,8(r6)
 101baa4:	dfc00217 	ldw	ra,8(sp)
 101baa8:	dc400117 	ldw	r17,4(sp)
 101baac:	dc000017 	ldw	r16,0(sp)
 101bab0:	dec00304 	addi	sp,sp,12
 101bab4:	10219a01 	jmpi	10219a0 <__malloc_unlock>
 101bab8:	dfc00217 	ldw	ra,8(sp)
 101babc:	dc400117 	ldw	r17,4(sp)
 101bac0:	dc000017 	ldw	r16,0(sp)
 101bac4:	dec00304 	addi	sp,sp,12
 101bac8:	f800283a 	ret
 101bacc:	31000217 	ldw	r4,8(r6)
 101bad0:	003fbd06 	br	101b9c8 <_free_r+0x94>
 101bad4:	3806d0fa 	srli	r3,r7,3
 101bad8:	00800044 	movi	r2,1
 101badc:	51400117 	ldw	r5,4(r10)
 101bae0:	180890fa 	slli	r4,r3,3
 101bae4:	1807d0ba 	srai	r3,r3,2
 101bae8:	22c9883a 	add	r4,r4,r11
 101baec:	21800217 	ldw	r6,8(r4)
 101baf0:	10c4983a 	sll	r2,r2,r3
 101baf4:	41000315 	stw	r4,12(r8)
 101baf8:	41800215 	stw	r6,8(r8)
 101bafc:	288ab03a 	or	r5,r5,r2
 101bb00:	22000215 	stw	r8,8(r4)
 101bb04:	8809883a 	mov	r4,r17
 101bb08:	51400115 	stw	r5,4(r10)
 101bb0c:	32000315 	stw	r8,12(r6)
 101bb10:	dfc00217 	ldw	ra,8(sp)
 101bb14:	dc400117 	ldw	r17,4(sp)
 101bb18:	dc000017 	ldw	r16,0(sp)
 101bb1c:	dec00304 	addi	sp,sp,12
 101bb20:	10219a01 	jmpi	10219a0 <__malloc_unlock>
 101bb24:	2880004c 	andi	r2,r5,1
 101bb28:	3a4d883a 	add	r6,r7,r9
 101bb2c:	1000071e 	bne	r2,zero,101bb4c <_free_r+0x218>
 101bb30:	80bffe17 	ldw	r2,-8(r16)
 101bb34:	4091c83a 	sub	r8,r8,r2
 101bb38:	41000317 	ldw	r4,12(r8)
 101bb3c:	40c00217 	ldw	r3,8(r8)
 101bb40:	308d883a 	add	r6,r6,r2
 101bb44:	20c00215 	stw	r3,8(r4)
 101bb48:	19000315 	stw	r4,12(r3)
 101bb4c:	008040f4 	movhi	r2,259
 101bb50:	109bef04 	addi	r2,r2,28604
 101bb54:	11000017 	ldw	r4,0(r2)
 101bb58:	30c00054 	ori	r3,r6,1
 101bb5c:	52000215 	stw	r8,8(r10)
 101bb60:	40c00115 	stw	r3,4(r8)
 101bb64:	313fa036 	bltu	r6,r4,101b9e8 <_free_r+0xb4>
 101bb68:	00804134 	movhi	r2,260
 101bb6c:	10a30204 	addi	r2,r2,-29688
 101bb70:	11400017 	ldw	r5,0(r2)
 101bb74:	8809883a 	mov	r4,r17
 101bb78:	101b8080 	call	101b808 <_malloc_trim_r>
 101bb7c:	003f9a06 	br	101b9e8 <_free_r+0xb4>
 101bb80:	00800104 	movi	r2,4
 101bb84:	10c0072e 	bgeu	r2,r3,101bba4 <_free_r+0x270>
 101bb88:	00800504 	movi	r2,20
 101bb8c:	10c01936 	bltu	r2,r3,101bbf4 <_free_r+0x2c0>
 101bb90:	188016c4 	addi	r2,r3,91
 101bb94:	100690fa 	slli	r3,r2,3
 101bb98:	003fb306 	br	101ba68 <_free_r+0x134>
 101bb9c:	01400044 	movi	r5,1
 101bba0:	003f7e06 	br	101b99c <_free_r+0x68>
 101bba4:	3804d1ba 	srli	r2,r7,6
 101bba8:	10800e04 	addi	r2,r2,56
 101bbac:	100690fa 	slli	r3,r2,3
 101bbb0:	003fad06 	br	101ba68 <_free_r+0x134>
 101bbb4:	22000315 	stw	r8,12(r4)
 101bbb8:	22000215 	stw	r8,8(r4)
 101bbbc:	3a05883a 	add	r2,r7,r8
 101bbc0:	38c00054 	ori	r3,r7,1
 101bbc4:	11c00015 	stw	r7,0(r2)
 101bbc8:	41000215 	stw	r4,8(r8)
 101bbcc:	40c00115 	stw	r3,4(r8)
 101bbd0:	41000315 	stw	r4,12(r8)
 101bbd4:	003f8406 	br	101b9e8 <_free_r+0xb4>
 101bbd8:	1005d0ba 	srai	r2,r2,2
 101bbdc:	00c00044 	movi	r3,1
 101bbe0:	51000117 	ldw	r4,4(r10)
 101bbe4:	1886983a 	sll	r3,r3,r2
 101bbe8:	20c8b03a 	or	r4,r4,r3
 101bbec:	51000115 	stw	r4,4(r10)
 101bbf0:	003fa706 	br	101ba90 <_free_r+0x15c>
 101bbf4:	00801504 	movi	r2,84
 101bbf8:	10c00436 	bltu	r2,r3,101bc0c <_free_r+0x2d8>
 101bbfc:	3804d33a 	srli	r2,r7,12
 101bc00:	10801b84 	addi	r2,r2,110
 101bc04:	100690fa 	slli	r3,r2,3
 101bc08:	003f9706 	br	101ba68 <_free_r+0x134>
 101bc0c:	00805504 	movi	r2,340
 101bc10:	10c00436 	bltu	r2,r3,101bc24 <_free_r+0x2f0>
 101bc14:	3804d3fa 	srli	r2,r7,15
 101bc18:	10801dc4 	addi	r2,r2,119
 101bc1c:	100690fa 	slli	r3,r2,3
 101bc20:	003f9106 	br	101ba68 <_free_r+0x134>
 101bc24:	00815504 	movi	r2,1364
 101bc28:	10c0032e 	bgeu	r2,r3,101bc38 <_free_r+0x304>
 101bc2c:	00801f84 	movi	r2,126
 101bc30:	00c0fc04 	movi	r3,1008
 101bc34:	003f8c06 	br	101ba68 <_free_r+0x134>
 101bc38:	3804d4ba 	srli	r2,r7,18
 101bc3c:	10801f04 	addi	r2,r2,124
 101bc40:	100690fa 	slli	r3,r2,3
 101bc44:	003f8806 	br	101ba68 <_free_r+0x134>

0101bc48 <__sfvwrite_r>:
 101bc48:	30800217 	ldw	r2,8(r6)
 101bc4c:	defff504 	addi	sp,sp,-44
 101bc50:	df000915 	stw	fp,36(sp)
 101bc54:	dd800715 	stw	r22,28(sp)
 101bc58:	dc800315 	stw	r18,12(sp)
 101bc5c:	dfc00a15 	stw	ra,40(sp)
 101bc60:	ddc00815 	stw	r23,32(sp)
 101bc64:	dd400615 	stw	r21,24(sp)
 101bc68:	dd000515 	stw	r20,20(sp)
 101bc6c:	dcc00415 	stw	r19,16(sp)
 101bc70:	dc400215 	stw	r17,8(sp)
 101bc74:	dc000115 	stw	r16,4(sp)
 101bc78:	302d883a 	mov	r22,r6
 101bc7c:	2039883a 	mov	fp,r4
 101bc80:	2825883a 	mov	r18,r5
 101bc84:	10001c26 	beq	r2,zero,101bcf8 <__sfvwrite_r+0xb0>
 101bc88:	29c0030b 	ldhu	r7,12(r5)
 101bc8c:	3880020c 	andi	r2,r7,8
 101bc90:	10002726 	beq	r2,zero,101bd30 <__sfvwrite_r+0xe8>
 101bc94:	28800417 	ldw	r2,16(r5)
 101bc98:	10002526 	beq	r2,zero,101bd30 <__sfvwrite_r+0xe8>
 101bc9c:	3880008c 	andi	r2,r7,2
 101bca0:	b5400017 	ldw	r21,0(r22)
 101bca4:	10002826 	beq	r2,zero,101bd48 <__sfvwrite_r+0x100>
 101bca8:	0021883a 	mov	r16,zero
 101bcac:	0023883a 	mov	r17,zero
 101bcb0:	880d883a 	mov	r6,r17
 101bcb4:	e009883a 	mov	r4,fp
 101bcb8:	00810004 	movi	r2,1024
 101bcbc:	80006e26 	beq	r16,zero,101be78 <__sfvwrite_r+0x230>
 101bcc0:	800f883a 	mov	r7,r16
 101bcc4:	91400717 	ldw	r5,28(r18)
 101bcc8:	1400012e 	bgeu	r2,r16,101bcd0 <__sfvwrite_r+0x88>
 101bccc:	100f883a 	mov	r7,r2
 101bcd0:	90c00917 	ldw	r3,36(r18)
 101bcd4:	183ee83a 	callr	r3
 101bcd8:	1007883a 	mov	r3,r2
 101bcdc:	80a1c83a 	sub	r16,r16,r2
 101bce0:	88a3883a 	add	r17,r17,r2
 101bce4:	00806d0e 	bge	zero,r2,101be9c <__sfvwrite_r+0x254>
 101bce8:	b0800217 	ldw	r2,8(r22)
 101bcec:	10c5c83a 	sub	r2,r2,r3
 101bcf0:	b0800215 	stw	r2,8(r22)
 101bcf4:	103fee1e 	bne	r2,zero,101bcb0 <__sfvwrite_r+0x68>
 101bcf8:	0009883a 	mov	r4,zero
 101bcfc:	2005883a 	mov	r2,r4
 101bd00:	dfc00a17 	ldw	ra,40(sp)
 101bd04:	df000917 	ldw	fp,36(sp)
 101bd08:	ddc00817 	ldw	r23,32(sp)
 101bd0c:	dd800717 	ldw	r22,28(sp)
 101bd10:	dd400617 	ldw	r21,24(sp)
 101bd14:	dd000517 	ldw	r20,20(sp)
 101bd18:	dcc00417 	ldw	r19,16(sp)
 101bd1c:	dc800317 	ldw	r18,12(sp)
 101bd20:	dc400217 	ldw	r17,8(sp)
 101bd24:	dc000117 	ldw	r16,4(sp)
 101bd28:	dec00b04 	addi	sp,sp,44
 101bd2c:	f800283a 	ret
 101bd30:	1019a840 	call	1019a84 <__swsetup_r>
 101bd34:	1000e41e 	bne	r2,zero,101c0c8 <__sfvwrite_r+0x480>
 101bd38:	91c0030b 	ldhu	r7,12(r18)
 101bd3c:	b5400017 	ldw	r21,0(r22)
 101bd40:	3880008c 	andi	r2,r7,2
 101bd44:	103fd81e 	bne	r2,zero,101bca8 <__sfvwrite_r+0x60>
 101bd48:	3880004c 	andi	r2,r7,1
 101bd4c:	1005003a 	cmpeq	r2,r2,zero
 101bd50:	10005726 	beq	r2,zero,101beb0 <__sfvwrite_r+0x268>
 101bd54:	0029883a 	mov	r20,zero
 101bd58:	002f883a 	mov	r23,zero
 101bd5c:	a0004226 	beq	r20,zero,101be68 <__sfvwrite_r+0x220>
 101bd60:	3880800c 	andi	r2,r7,512
 101bd64:	94000217 	ldw	r16,8(r18)
 101bd68:	10008b26 	beq	r2,zero,101bf98 <__sfvwrite_r+0x350>
 101bd6c:	800d883a 	mov	r6,r16
 101bd70:	a400a536 	bltu	r20,r16,101c008 <__sfvwrite_r+0x3c0>
 101bd74:	3881200c 	andi	r2,r7,1152
 101bd78:	10002726 	beq	r2,zero,101be18 <__sfvwrite_r+0x1d0>
 101bd7c:	90800517 	ldw	r2,20(r18)
 101bd80:	92000417 	ldw	r8,16(r18)
 101bd84:	91400017 	ldw	r5,0(r18)
 101bd88:	1087883a 	add	r3,r2,r2
 101bd8c:	1887883a 	add	r3,r3,r2
 101bd90:	1808d7fa 	srli	r4,r3,31
 101bd94:	2a21c83a 	sub	r16,r5,r8
 101bd98:	80800044 	addi	r2,r16,1
 101bd9c:	20c9883a 	add	r4,r4,r3
 101bda0:	2027d07a 	srai	r19,r4,1
 101bda4:	a085883a 	add	r2,r20,r2
 101bda8:	980d883a 	mov	r6,r19
 101bdac:	9880022e 	bgeu	r19,r2,101bdb8 <__sfvwrite_r+0x170>
 101bdb0:	1027883a 	mov	r19,r2
 101bdb4:	100d883a 	mov	r6,r2
 101bdb8:	3881000c 	andi	r2,r7,1024
 101bdbc:	1000b826 	beq	r2,zero,101c0a0 <__sfvwrite_r+0x458>
 101bdc0:	300b883a 	mov	r5,r6
 101bdc4:	e009883a 	mov	r4,fp
 101bdc8:	1014b340 	call	1014b34 <_malloc_r>
 101bdcc:	10003126 	beq	r2,zero,101be94 <__sfvwrite_r+0x24c>
 101bdd0:	91400417 	ldw	r5,16(r18)
 101bdd4:	1009883a 	mov	r4,r2
 101bdd8:	800d883a 	mov	r6,r16
 101bddc:	1023883a 	mov	r17,r2
 101bde0:	10152740 	call	1015274 <memcpy>
 101bde4:	90c0030b 	ldhu	r3,12(r18)
 101bde8:	00beffc4 	movi	r2,-1025
 101bdec:	1886703a 	and	r3,r3,r2
 101bdf0:	18c02014 	ori	r3,r3,128
 101bdf4:	90c0030d 	sth	r3,12(r18)
 101bdf8:	9c07c83a 	sub	r3,r19,r16
 101bdfc:	8c05883a 	add	r2,r17,r16
 101be00:	a00d883a 	mov	r6,r20
 101be04:	a021883a 	mov	r16,r20
 101be08:	90800015 	stw	r2,0(r18)
 101be0c:	90c00215 	stw	r3,8(r18)
 101be10:	94400415 	stw	r17,16(r18)
 101be14:	94c00515 	stw	r19,20(r18)
 101be18:	91000017 	ldw	r4,0(r18)
 101be1c:	b80b883a 	mov	r5,r23
 101be20:	a023883a 	mov	r17,r20
 101be24:	10153140 	call	1015314 <memmove>
 101be28:	90c00217 	ldw	r3,8(r18)
 101be2c:	90800017 	ldw	r2,0(r18)
 101be30:	a027883a 	mov	r19,r20
 101be34:	1c07c83a 	sub	r3,r3,r16
 101be38:	1405883a 	add	r2,r2,r16
 101be3c:	90c00215 	stw	r3,8(r18)
 101be40:	a021883a 	mov	r16,r20
 101be44:	90800015 	stw	r2,0(r18)
 101be48:	b0800217 	ldw	r2,8(r22)
 101be4c:	1405c83a 	sub	r2,r2,r16
 101be50:	b0800215 	stw	r2,8(r22)
 101be54:	103fa826 	beq	r2,zero,101bcf8 <__sfvwrite_r+0xb0>
 101be58:	a469c83a 	sub	r20,r20,r17
 101be5c:	91c0030b 	ldhu	r7,12(r18)
 101be60:	bcef883a 	add	r23,r23,r19
 101be64:	a03fbe1e 	bne	r20,zero,101bd60 <__sfvwrite_r+0x118>
 101be68:	adc00017 	ldw	r23,0(r21)
 101be6c:	ad000117 	ldw	r20,4(r21)
 101be70:	ad400204 	addi	r21,r21,8
 101be74:	003fb906 	br	101bd5c <__sfvwrite_r+0x114>
 101be78:	ac400017 	ldw	r17,0(r21)
 101be7c:	ac000117 	ldw	r16,4(r21)
 101be80:	ad400204 	addi	r21,r21,8
 101be84:	003f8a06 	br	101bcb0 <__sfvwrite_r+0x68>
 101be88:	91400417 	ldw	r5,16(r18)
 101be8c:	e009883a 	mov	r4,fp
 101be90:	101b9340 	call	101b934 <_free_r>
 101be94:	00800304 	movi	r2,12
 101be98:	e0800015 	stw	r2,0(fp)
 101be9c:	9080030b 	ldhu	r2,12(r18)
 101bea0:	013fffc4 	movi	r4,-1
 101bea4:	10801014 	ori	r2,r2,64
 101bea8:	9080030d 	sth	r2,12(r18)
 101beac:	003f9306 	br	101bcfc <__sfvwrite_r+0xb4>
 101beb0:	0027883a 	mov	r19,zero
 101beb4:	002f883a 	mov	r23,zero
 101beb8:	d8000015 	stw	zero,0(sp)
 101bebc:	0029883a 	mov	r20,zero
 101bec0:	98001e26 	beq	r19,zero,101bf3c <__sfvwrite_r+0x2f4>
 101bec4:	d8c00017 	ldw	r3,0(sp)
 101bec8:	1804c03a 	cmpne	r2,r3,zero
 101becc:	10005e26 	beq	r2,zero,101c048 <__sfvwrite_r+0x400>
 101bed0:	9821883a 	mov	r16,r19
 101bed4:	a4c0012e 	bgeu	r20,r19,101bedc <__sfvwrite_r+0x294>
 101bed8:	a021883a 	mov	r16,r20
 101bedc:	91000017 	ldw	r4,0(r18)
 101bee0:	90800417 	ldw	r2,16(r18)
 101bee4:	91800217 	ldw	r6,8(r18)
 101bee8:	91c00517 	ldw	r7,20(r18)
 101beec:	1100022e 	bgeu	r2,r4,101bef8 <__sfvwrite_r+0x2b0>
 101bef0:	31e3883a 	add	r17,r6,r7
 101bef4:	8c001616 	blt	r17,r16,101bf50 <__sfvwrite_r+0x308>
 101bef8:	81c03816 	blt	r16,r7,101bfdc <__sfvwrite_r+0x394>
 101befc:	90c00917 	ldw	r3,36(r18)
 101bf00:	91400717 	ldw	r5,28(r18)
 101bf04:	e009883a 	mov	r4,fp
 101bf08:	b80d883a 	mov	r6,r23
 101bf0c:	183ee83a 	callr	r3
 101bf10:	1023883a 	mov	r17,r2
 101bf14:	00bfe10e 	bge	zero,r2,101be9c <__sfvwrite_r+0x254>
 101bf18:	a469c83a 	sub	r20,r20,r17
 101bf1c:	a0001826 	beq	r20,zero,101bf80 <__sfvwrite_r+0x338>
 101bf20:	b0800217 	ldw	r2,8(r22)
 101bf24:	1445c83a 	sub	r2,r2,r17
 101bf28:	b0800215 	stw	r2,8(r22)
 101bf2c:	103f7226 	beq	r2,zero,101bcf8 <__sfvwrite_r+0xb0>
 101bf30:	9c67c83a 	sub	r19,r19,r17
 101bf34:	bc6f883a 	add	r23,r23,r17
 101bf38:	983fe21e 	bne	r19,zero,101bec4 <__sfvwrite_r+0x27c>
 101bf3c:	adc00017 	ldw	r23,0(r21)
 101bf40:	acc00117 	ldw	r19,4(r21)
 101bf44:	ad400204 	addi	r21,r21,8
 101bf48:	d8000015 	stw	zero,0(sp)
 101bf4c:	003fdc06 	br	101bec0 <__sfvwrite_r+0x278>
 101bf50:	b80b883a 	mov	r5,r23
 101bf54:	880d883a 	mov	r6,r17
 101bf58:	10153140 	call	1015314 <memmove>
 101bf5c:	90c00017 	ldw	r3,0(r18)
 101bf60:	e009883a 	mov	r4,fp
 101bf64:	900b883a 	mov	r5,r18
 101bf68:	1c47883a 	add	r3,r3,r17
 101bf6c:	90c00015 	stw	r3,0(r18)
 101bf70:	101b5380 	call	101b538 <_fflush_r>
 101bf74:	103fc91e 	bne	r2,zero,101be9c <__sfvwrite_r+0x254>
 101bf78:	a469c83a 	sub	r20,r20,r17
 101bf7c:	a03fe81e 	bne	r20,zero,101bf20 <__sfvwrite_r+0x2d8>
 101bf80:	e009883a 	mov	r4,fp
 101bf84:	900b883a 	mov	r5,r18
 101bf88:	101b5380 	call	101b538 <_fflush_r>
 101bf8c:	103fc31e 	bne	r2,zero,101be9c <__sfvwrite_r+0x254>
 101bf90:	d8000015 	stw	zero,0(sp)
 101bf94:	003fe206 	br	101bf20 <__sfvwrite_r+0x2d8>
 101bf98:	91000017 	ldw	r4,0(r18)
 101bf9c:	90800417 	ldw	r2,16(r18)
 101bfa0:	1100022e 	bgeu	r2,r4,101bfac <__sfvwrite_r+0x364>
 101bfa4:	8023883a 	mov	r17,r16
 101bfa8:	85003136 	bltu	r16,r20,101c070 <__sfvwrite_r+0x428>
 101bfac:	91c00517 	ldw	r7,20(r18)
 101bfb0:	a1c01836 	bltu	r20,r7,101c014 <__sfvwrite_r+0x3cc>
 101bfb4:	90c00917 	ldw	r3,36(r18)
 101bfb8:	91400717 	ldw	r5,28(r18)
 101bfbc:	e009883a 	mov	r4,fp
 101bfc0:	b80d883a 	mov	r6,r23
 101bfc4:	183ee83a 	callr	r3
 101bfc8:	1021883a 	mov	r16,r2
 101bfcc:	00bfb30e 	bge	zero,r2,101be9c <__sfvwrite_r+0x254>
 101bfd0:	1023883a 	mov	r17,r2
 101bfd4:	1027883a 	mov	r19,r2
 101bfd8:	003f9b06 	br	101be48 <__sfvwrite_r+0x200>
 101bfdc:	b80b883a 	mov	r5,r23
 101bfe0:	800d883a 	mov	r6,r16
 101bfe4:	10153140 	call	1015314 <memmove>
 101bfe8:	90c00217 	ldw	r3,8(r18)
 101bfec:	90800017 	ldw	r2,0(r18)
 101bff0:	8023883a 	mov	r17,r16
 101bff4:	1c07c83a 	sub	r3,r3,r16
 101bff8:	1405883a 	add	r2,r2,r16
 101bffc:	90c00215 	stw	r3,8(r18)
 101c000:	90800015 	stw	r2,0(r18)
 101c004:	003fc406 	br	101bf18 <__sfvwrite_r+0x2d0>
 101c008:	a00d883a 	mov	r6,r20
 101c00c:	a021883a 	mov	r16,r20
 101c010:	003f8106 	br	101be18 <__sfvwrite_r+0x1d0>
 101c014:	b80b883a 	mov	r5,r23
 101c018:	a00d883a 	mov	r6,r20
 101c01c:	10153140 	call	1015314 <memmove>
 101c020:	90c00217 	ldw	r3,8(r18)
 101c024:	90800017 	ldw	r2,0(r18)
 101c028:	a021883a 	mov	r16,r20
 101c02c:	1d07c83a 	sub	r3,r3,r20
 101c030:	1505883a 	add	r2,r2,r20
 101c034:	a023883a 	mov	r17,r20
 101c038:	a027883a 	mov	r19,r20
 101c03c:	90c00215 	stw	r3,8(r18)
 101c040:	90800015 	stw	r2,0(r18)
 101c044:	003f8006 	br	101be48 <__sfvwrite_r+0x200>
 101c048:	b809883a 	mov	r4,r23
 101c04c:	01400284 	movi	r5,10
 101c050:	980d883a 	mov	r6,r19
 101c054:	101ce180 	call	101ce18 <memchr>
 101c058:	10001726 	beq	r2,zero,101c0b8 <__sfvwrite_r+0x470>
 101c05c:	15c5c83a 	sub	r2,r2,r23
 101c060:	15000044 	addi	r20,r2,1
 101c064:	00800044 	movi	r2,1
 101c068:	d8800015 	stw	r2,0(sp)
 101c06c:	003f9806 	br	101bed0 <__sfvwrite_r+0x288>
 101c070:	b80b883a 	mov	r5,r23
 101c074:	800d883a 	mov	r6,r16
 101c078:	10153140 	call	1015314 <memmove>
 101c07c:	90c00017 	ldw	r3,0(r18)
 101c080:	e009883a 	mov	r4,fp
 101c084:	900b883a 	mov	r5,r18
 101c088:	1c07883a 	add	r3,r3,r16
 101c08c:	90c00015 	stw	r3,0(r18)
 101c090:	8027883a 	mov	r19,r16
 101c094:	101b5380 	call	101b538 <_fflush_r>
 101c098:	103f6b26 	beq	r2,zero,101be48 <__sfvwrite_r+0x200>
 101c09c:	003f7f06 	br	101be9c <__sfvwrite_r+0x254>
 101c0a0:	400b883a 	mov	r5,r8
 101c0a4:	e009883a 	mov	r4,fp
 101c0a8:	101e1540 	call	101e154 <_realloc_r>
 101c0ac:	103f7626 	beq	r2,zero,101be88 <__sfvwrite_r+0x240>
 101c0b0:	1023883a 	mov	r17,r2
 101c0b4:	003f5006 	br	101bdf8 <__sfvwrite_r+0x1b0>
 101c0b8:	00c00044 	movi	r3,1
 101c0bc:	9d000044 	addi	r20,r19,1
 101c0c0:	d8c00015 	stw	r3,0(sp)
 101c0c4:	003f8206 	br	101bed0 <__sfvwrite_r+0x288>
 101c0c8:	9080030b 	ldhu	r2,12(r18)
 101c0cc:	00c00244 	movi	r3,9
 101c0d0:	013fffc4 	movi	r4,-1
 101c0d4:	10801014 	ori	r2,r2,64
 101c0d8:	9080030d 	sth	r2,12(r18)
 101c0dc:	e0c00015 	stw	r3,0(fp)
 101c0e0:	003f0606 	br	101bcfc <__sfvwrite_r+0xb4>

0101c0e4 <htinit>:
 101c0e4:	28800003 	ldbu	r2,0(r5)
 101c0e8:	10000626 	beq	r2,zero,101c104 <htinit+0x20>
 101c0ec:	1105883a 	add	r2,r2,r4
 101c0f0:	11800005 	stb	r6,0(r2)
 101c0f4:	28800043 	ldbu	r2,1(r5)
 101c0f8:	31800044 	addi	r6,r6,1
 101c0fc:	29400044 	addi	r5,r5,1
 101c100:	103ffa1e 	bne	r2,zero,101c0ec <htinit+0x8>
 101c104:	f800283a 	ret

0101c108 <__hexdig_init>:
 101c108:	defffd04 	addi	sp,sp,-12
 101c10c:	dc400015 	stw	r17,0(sp)
 101c110:	04404134 	movhi	r17,260
 101c114:	8c635d04 	addi	r17,r17,-29324
 101c118:	dcc00115 	stw	r19,4(sp)
 101c11c:	8809883a 	mov	r4,r17
 101c120:	04c00684 	movi	r19,26
 101c124:	014040f4 	movhi	r5,259
 101c128:	29546c04 	addi	r5,r5,20912
 101c12c:	01800404 	movi	r6,16
 101c130:	dfc00215 	stw	ra,8(sp)
 101c134:	101c0e40 	call	101c0e4 <htinit>
 101c138:	980d883a 	mov	r6,r19
 101c13c:	8809883a 	mov	r4,r17
 101c140:	014040f4 	movhi	r5,259
 101c144:	29546f04 	addi	r5,r5,20924
 101c148:	101c0e40 	call	101c0e4 <htinit>
 101c14c:	8809883a 	mov	r4,r17
 101c150:	980d883a 	mov	r6,r19
 101c154:	014040f4 	movhi	r5,259
 101c158:	29547104 	addi	r5,r5,20932
 101c15c:	dfc00217 	ldw	ra,8(sp)
 101c160:	dcc00117 	ldw	r19,4(sp)
 101c164:	dc400017 	ldw	r17,0(sp)
 101c168:	dec00304 	addi	sp,sp,12
 101c16c:	101c0e41 	jmpi	101c0e4 <htinit>

0101c170 <rshift>:
 101c170:	2807d17a 	srai	r3,r5,5
 101c174:	20800417 	ldw	r2,16(r4)
 101c178:	22400504 	addi	r9,r4,20
 101c17c:	480f883a 	mov	r7,r9
 101c180:	1880190e 	bge	r3,r2,101c1e8 <rshift+0x78>
 101c184:	1085883a 	add	r2,r2,r2
 101c188:	18c7883a 	add	r3,r3,r3
 101c18c:	1085883a 	add	r2,r2,r2
 101c190:	18c7883a 	add	r3,r3,r3
 101c194:	294007cc 	andi	r5,r5,31
 101c198:	4891883a 	add	r8,r9,r2
 101c19c:	48cd883a 	add	r6,r9,r3
 101c1a0:	28001726 	beq	r5,zero,101c200 <rshift+0x90>
 101c1a4:	30c00017 	ldw	r3,0(r6)
 101c1a8:	00800804 	movi	r2,32
 101c1ac:	31800104 	addi	r6,r6,4
 101c1b0:	1155c83a 	sub	r10,r2,r5
 101c1b4:	1946d83a 	srl	r3,r3,r5
 101c1b8:	3200092e 	bgeu	r6,r8,101c1e0 <rshift+0x70>
 101c1bc:	30800017 	ldw	r2,0(r6)
 101c1c0:	1284983a 	sll	r2,r2,r10
 101c1c4:	10c4b03a 	or	r2,r2,r3
 101c1c8:	38800015 	stw	r2,0(r7)
 101c1cc:	30c00017 	ldw	r3,0(r6)
 101c1d0:	31800104 	addi	r6,r6,4
 101c1d4:	39c00104 	addi	r7,r7,4
 101c1d8:	1946d83a 	srl	r3,r3,r5
 101c1dc:	323ff736 	bltu	r6,r8,101c1bc <rshift+0x4c>
 101c1e0:	38c00015 	stw	r3,0(r7)
 101c1e4:	18000c1e 	bne	r3,zero,101c218 <rshift+0xa8>
 101c1e8:	3a45c83a 	sub	r2,r7,r9
 101c1ec:	1005d0ba 	srai	r2,r2,2
 101c1f0:	20800415 	stw	r2,16(r4)
 101c1f4:	1000011e 	bne	r2,zero,101c1fc <rshift+0x8c>
 101c1f8:	20000515 	stw	zero,20(r4)
 101c1fc:	f800283a 	ret
 101c200:	323ff92e 	bgeu	r6,r8,101c1e8 <rshift+0x78>
 101c204:	30800017 	ldw	r2,0(r6)
 101c208:	31800104 	addi	r6,r6,4
 101c20c:	38800015 	stw	r2,0(r7)
 101c210:	39c00104 	addi	r7,r7,4
 101c214:	003ffa06 	br	101c200 <rshift+0x90>
 101c218:	39c00104 	addi	r7,r7,4
 101c21c:	003ff206 	br	101c1e8 <rshift+0x78>

0101c220 <__gethex>:
 101c220:	defff304 	addi	sp,sp,-52
 101c224:	dd400815 	stw	r21,32(sp)
 101c228:	dd000715 	stw	r20,28(sp)
 101c22c:	dcc00615 	stw	r19,24(sp)
 101c230:	dc400415 	stw	r17,16(sp)
 101c234:	dfc00c15 	stw	ra,48(sp)
 101c238:	df000b15 	stw	fp,44(sp)
 101c23c:	ddc00a15 	stw	r23,40(sp)
 101c240:	dd800915 	stw	r22,36(sp)
 101c244:	dc800515 	stw	r18,20(sp)
 101c248:	dc000315 	stw	r16,12(sp)
 101c24c:	04404134 	movhi	r17,260
 101c250:	8c635d04 	addi	r17,r17,-29324
 101c254:	88800c03 	ldbu	r2,48(r17)
 101c258:	202b883a 	mov	r21,r4
 101c25c:	2827883a 	mov	r19,r5
 101c260:	3029883a 	mov	r20,r6
 101c264:	d9c00115 	stw	r7,4(sp)
 101c268:	10006e26 	beq	r2,zero,101c424 <__gethex+0x204>
 101c26c:	99800017 	ldw	r6,0(r19)
 101c270:	00800c04 	movi	r2,48
 101c274:	31000083 	ldbu	r4,2(r6)
 101c278:	30c00084 	addi	r3,r6,2
 101c27c:	20806f1e 	bne	r4,r2,101c43c <__gethex+0x21c>
 101c280:	200b883a 	mov	r5,r4
 101c284:	3007883a 	mov	r3,r6
 101c288:	188000c3 	ldbu	r2,3(r3)
 101c28c:	18c00044 	addi	r3,r3,1
 101c290:	1009883a 	mov	r4,r2
 101c294:	117ffc26 	beq	r2,r5,101c288 <__gethex+0x68>
 101c298:	1997c83a 	sub	r11,r3,r6
 101c29c:	19400084 	addi	r5,r3,2
 101c2a0:	2445883a 	add	r2,r4,r17
 101c2a4:	10c00003 	ldbu	r3,0(r2)
 101c2a8:	18002d26 	beq	r3,zero,101c360 <__gethex+0x140>
 101c2ac:	29000003 	ldbu	r4,0(r5)
 101c2b0:	2825883a 	mov	r18,r5
 101c2b4:	000d883a 	mov	r6,zero
 101c2b8:	0013883a 	mov	r9,zero
 101c2bc:	21003fcc 	andi	r4,r4,255
 101c2c0:	2445883a 	add	r2,r4,r17
 101c2c4:	10c00003 	ldbu	r3,0(r2)
 101c2c8:	18000526 	beq	r3,zero,101c2e0 <__gethex+0xc0>
 101c2cc:	29400044 	addi	r5,r5,1
 101c2d0:	29000003 	ldbu	r4,0(r5)
 101c2d4:	2445883a 	add	r2,r4,r17
 101c2d8:	10c00003 	ldbu	r3,0(r2)
 101c2dc:	183ffb1e 	bne	r3,zero,101c2cc <__gethex+0xac>
 101c2e0:	00800b84 	movi	r2,46
 101c2e4:	20805826 	beq	r4,r2,101c448 <__gethex+0x228>
 101c2e8:	30007a26 	beq	r6,zero,101c4d4 <__gethex+0x2b4>
 101c2ec:	2985c83a 	sub	r2,r5,r6
 101c2f0:	1085883a 	add	r2,r2,r2
 101c2f4:	1085883a 	add	r2,r2,r2
 101c2f8:	00adc83a 	sub	r22,zero,r2
 101c2fc:	2821883a 	mov	r16,r5
 101c300:	80c00003 	ldbu	r3,0(r16)
 101c304:	00801404 	movi	r2,80
 101c308:	18801e26 	beq	r3,r2,101c384 <__gethex+0x164>
 101c30c:	00801c04 	movi	r2,112
 101c310:	18801c26 	beq	r3,r2,101c384 <__gethex+0x164>
 101c314:	800d883a 	mov	r6,r16
 101c318:	4805003a 	cmpeq	r2,r9,zero
 101c31c:	99800015 	stw	r6,0(r19)
 101c320:	1000861e 	bne	r2,zero,101c53c <__gethex+0x31c>
 101c324:	58003d26 	beq	r11,zero,101c41c <__gethex+0x1fc>
 101c328:	0025883a 	mov	r18,zero
 101c32c:	9005883a 	mov	r2,r18
 101c330:	dfc00c17 	ldw	ra,48(sp)
 101c334:	df000b17 	ldw	fp,44(sp)
 101c338:	ddc00a17 	ldw	r23,40(sp)
 101c33c:	dd800917 	ldw	r22,36(sp)
 101c340:	dd400817 	ldw	r21,32(sp)
 101c344:	dd000717 	ldw	r20,28(sp)
 101c348:	dcc00617 	ldw	r19,24(sp)
 101c34c:	dc800517 	ldw	r18,20(sp)
 101c350:	dc400417 	ldw	r17,16(sp)
 101c354:	dc000317 	ldw	r16,12(sp)
 101c358:	dec00d04 	addi	sp,sp,52
 101c35c:	f800283a 	ret
 101c360:	00800b84 	movi	r2,46
 101c364:	20804a26 	beq	r4,r2,101c490 <__gethex+0x270>
 101c368:	2821883a 	mov	r16,r5
 101c36c:	80c00003 	ldbu	r3,0(r16)
 101c370:	00801404 	movi	r2,80
 101c374:	2825883a 	mov	r18,r5
 101c378:	02400044 	movi	r9,1
 101c37c:	002d883a 	mov	r22,zero
 101c380:	18bfe21e 	bne	r3,r2,101c30c <__gethex+0xec>
 101c384:	80c00043 	ldbu	r3,1(r16)
 101c388:	00800ac4 	movi	r2,43
 101c38c:	81000044 	addi	r4,r16,1
 101c390:	18804a26 	beq	r3,r2,101c4bc <__gethex+0x29c>
 101c394:	00800b44 	movi	r2,45
 101c398:	18804c26 	beq	r3,r2,101c4cc <__gethex+0x2ac>
 101c39c:	0015883a 	mov	r10,zero
 101c3a0:	1c45883a 	add	r2,r3,r17
 101c3a4:	10800003 	ldbu	r2,0(r2)
 101c3a8:	103fda26 	beq	r2,zero,101c314 <__gethex+0xf4>
 101c3ac:	02000644 	movi	r8,25
 101c3b0:	40bfd816 	blt	r8,r2,101c314 <__gethex+0xf4>
 101c3b4:	20c00043 	ldbu	r3,1(r4)
 101c3b8:	11fffc04 	addi	r7,r2,-16
 101c3bc:	00804134 	movhi	r2,260
 101c3c0:	10a35d04 	addi	r2,r2,-29324
 101c3c4:	1887883a 	add	r3,r3,r2
 101c3c8:	18800003 	ldbu	r2,0(r3)
 101c3cc:	21800044 	addi	r6,r4,1
 101c3d0:	10000d26 	beq	r2,zero,101c408 <__gethex+0x1e8>
 101c3d4:	100b883a 	mov	r5,r2
 101c3d8:	4080020e 	bge	r8,r2,101c3e4 <__gethex+0x1c4>
 101c3dc:	00000a06 	br	101c408 <__gethex+0x1e8>
 101c3e0:	41000916 	blt	r8,r4,101c408 <__gethex+0x1e8>
 101c3e4:	31800044 	addi	r6,r6,1
 101c3e8:	30800003 	ldbu	r2,0(r6)
 101c3ec:	38c002a4 	muli	r3,r7,10
 101c3f0:	1445883a 	add	r2,r2,r17
 101c3f4:	11000003 	ldbu	r4,0(r2)
 101c3f8:	1947883a 	add	r3,r3,r5
 101c3fc:	19fffc04 	addi	r7,r3,-16
 101c400:	200b883a 	mov	r5,r4
 101c404:	203ff61e 	bne	r4,zero,101c3e0 <__gethex+0x1c0>
 101c408:	5005003a 	cmpeq	r2,r10,zero
 101c40c:	1000011e 	bne	r2,zero,101c414 <__gethex+0x1f4>
 101c410:	01cfc83a 	sub	r7,zero,r7
 101c414:	b1ed883a 	add	r22,r22,r7
 101c418:	003fbf06 	br	101c318 <__gethex+0xf8>
 101c41c:	04800184 	movi	r18,6
 101c420:	003fc206 	br	101c32c <__gethex+0x10c>
 101c424:	101c1080 	call	101c108 <__hexdig_init>
 101c428:	99800017 	ldw	r6,0(r19)
 101c42c:	00800c04 	movi	r2,48
 101c430:	31000083 	ldbu	r4,2(r6)
 101c434:	30c00084 	addi	r3,r6,2
 101c438:	20bf9126 	beq	r4,r2,101c280 <__gethex+0x60>
 101c43c:	180b883a 	mov	r5,r3
 101c440:	0017883a 	mov	r11,zero
 101c444:	003f9606 	br	101c2a0 <__gethex+0x80>
 101c448:	303fa81e 	bne	r6,zero,101c2ec <__gethex+0xcc>
 101c44c:	29400044 	addi	r5,r5,1
 101c450:	28800003 	ldbu	r2,0(r5)
 101c454:	1445883a 	add	r2,r2,r17
 101c458:	10c00003 	ldbu	r3,0(r2)
 101c45c:	1800ad26 	beq	r3,zero,101c714 <__gethex+0x4f4>
 101c460:	2809883a 	mov	r4,r5
 101c464:	21000044 	addi	r4,r4,1
 101c468:	20800003 	ldbu	r2,0(r4)
 101c46c:	1445883a 	add	r2,r2,r17
 101c470:	10c00003 	ldbu	r3,0(r2)
 101c474:	183ffb1e 	bne	r3,zero,101c464 <__gethex+0x244>
 101c478:	2145c83a 	sub	r2,r4,r5
 101c47c:	1085883a 	add	r2,r2,r2
 101c480:	1085883a 	add	r2,r2,r2
 101c484:	00adc83a 	sub	r22,zero,r2
 101c488:	200b883a 	mov	r5,r4
 101c48c:	003f9b06 	br	101c2fc <__gethex+0xdc>
 101c490:	29000043 	ldbu	r4,1(r5)
 101c494:	00804134 	movhi	r2,260
 101c498:	10a35d04 	addi	r2,r2,-29324
 101c49c:	2c000044 	addi	r16,r5,1
 101c4a0:	2085883a 	add	r2,r4,r2
 101c4a4:	10c00003 	ldbu	r3,0(r2)
 101c4a8:	18000d1e 	bne	r3,zero,101c4e0 <__gethex+0x2c0>
 101c4ac:	2825883a 	mov	r18,r5
 101c4b0:	02400044 	movi	r9,1
 101c4b4:	002d883a 	mov	r22,zero
 101c4b8:	003f9106 	br	101c300 <__gethex+0xe0>
 101c4bc:	0015883a 	mov	r10,zero
 101c4c0:	21000044 	addi	r4,r4,1
 101c4c4:	20c00003 	ldbu	r3,0(r4)
 101c4c8:	003fb506 	br	101c3a0 <__gethex+0x180>
 101c4cc:	02800044 	movi	r10,1
 101c4d0:	003ffb06 	br	101c4c0 <__gethex+0x2a0>
 101c4d4:	2821883a 	mov	r16,r5
 101c4d8:	002d883a 	mov	r22,zero
 101c4dc:	003f8806 	br	101c300 <__gethex+0xe0>
 101c4e0:	00800c04 	movi	r2,48
 101c4e4:	20800e1e 	bne	r4,r2,101c520 <__gethex+0x300>
 101c4e8:	2007883a 	mov	r3,r4
 101c4ec:	800b883a 	mov	r5,r16
 101c4f0:	29400044 	addi	r5,r5,1
 101c4f4:	29000003 	ldbu	r4,0(r5)
 101c4f8:	20803fcc 	andi	r2,r4,255
 101c4fc:	10fffc26 	beq	r2,r3,101c4f0 <__gethex+0x2d0>
 101c500:	1445883a 	add	r2,r2,r17
 101c504:	10c00003 	ldbu	r3,0(r2)
 101c508:	1800071e 	bne	r3,zero,101c528 <__gethex+0x308>
 101c50c:	02c00044 	movi	r11,1
 101c510:	800d883a 	mov	r6,r16
 101c514:	2825883a 	mov	r18,r5
 101c518:	5813883a 	mov	r9,r11
 101c51c:	003f6706 	br	101c2bc <__gethex+0x9c>
 101c520:	81000003 	ldbu	r4,0(r16)
 101c524:	800b883a 	mov	r5,r16
 101c528:	800d883a 	mov	r6,r16
 101c52c:	2825883a 	mov	r18,r5
 101c530:	02c00044 	movi	r11,1
 101c534:	0013883a 	mov	r9,zero
 101c538:	003f6006 	br	101c2bc <__gethex+0x9c>
 101c53c:	8485c83a 	sub	r2,r16,r18
 101c540:	10bfffc4 	addi	r2,r2,-1
 101c544:	00c001c4 	movi	r3,7
 101c548:	1880700e 	bge	r3,r2,101c70c <__gethex+0x4ec>
 101c54c:	000b883a 	mov	r5,zero
 101c550:	1005d07a 	srai	r2,r2,1
 101c554:	29400044 	addi	r5,r5,1
 101c558:	18bffd16 	blt	r3,r2,101c550 <__gethex+0x330>
 101c55c:	a809883a 	mov	r4,r21
 101c560:	101d47c0 	call	101d47c <_Balloc>
 101c564:	1027883a 	mov	r19,r2
 101c568:	10800504 	addi	r2,r2,20
 101c56c:	d8800215 	stw	r2,8(sp)
 101c570:	9400522e 	bgeu	r18,r16,101c6bc <__gethex+0x49c>
 101c574:	da000217 	ldw	r8,8(sp)
 101c578:	800b883a 	mov	r5,r16
 101c57c:	000f883a 	mov	r7,zero
 101c580:	0009883a 	mov	r4,zero
 101c584:	02400b84 	movi	r9,46
 101c588:	02800804 	movi	r10,32
 101c58c:	297fffc4 	addi	r5,r5,-1
 101c590:	28c00003 	ldbu	r3,0(r5)
 101c594:	1a400826 	beq	r3,r9,101c5b8 <__gethex+0x398>
 101c598:	380d883a 	mov	r6,r7
 101c59c:	3a802726 	beq	r7,r10,101c63c <__gethex+0x41c>
 101c5a0:	39c00104 	addi	r7,r7,4
 101c5a4:	1c47883a 	add	r3,r3,r17
 101c5a8:	18800003 	ldbu	r2,0(r3)
 101c5ac:	108003cc 	andi	r2,r2,15
 101c5b0:	1184983a 	sll	r2,r2,r6
 101c5b4:	2088b03a 	or	r4,r4,r2
 101c5b8:	917ff436 	bltu	r18,r5,101c58c <__gethex+0x36c>
 101c5bc:	d8c00217 	ldw	r3,8(sp)
 101c5c0:	40800104 	addi	r2,r8,4
 101c5c4:	41000015 	stw	r4,0(r8)
 101c5c8:	10c5c83a 	sub	r2,r2,r3
 101c5cc:	1021d0ba 	srai	r16,r2,2
 101c5d0:	9c000415 	stw	r16,16(r19)
 101c5d4:	101cf240 	call	101cf24 <__hi0bits>
 101c5d8:	8006917a 	slli	r3,r16,5
 101c5dc:	a5c00017 	ldw	r23,0(r20)
 101c5e0:	1885c83a 	sub	r2,r3,r2
 101c5e4:	b8801c16 	blt	r23,r2,101c658 <__gethex+0x438>
 101c5e8:	15c00a16 	blt	r2,r23,101c614 <__gethex+0x3f4>
 101c5ec:	0039883a 	mov	fp,zero
 101c5f0:	a0800217 	ldw	r2,8(r20)
 101c5f4:	1580340e 	bge	r2,r22,101c6c8 <__gethex+0x4a8>
 101c5f8:	a809883a 	mov	r4,r21
 101c5fc:	980b883a 	mov	r5,r19
 101c600:	101cefc0 	call	101cefc <_Bfree>
 101c604:	d8c00d17 	ldw	r3,52(sp)
 101c608:	048028c4 	movi	r18,163
 101c60c:	18000015 	stw	zero,0(r3)
 101c610:	003f4606 	br	101c32c <__gethex+0x10c>
 101c614:	b8a1c83a 	sub	r16,r23,r2
 101c618:	980b883a 	mov	r5,r19
 101c61c:	a809883a 	mov	r4,r21
 101c620:	800d883a 	mov	r6,r16
 101c624:	101d8400 	call	101d840 <__lshift>
 101c628:	1027883a 	mov	r19,r2
 101c62c:	b42dc83a 	sub	r22,r22,r16
 101c630:	10800504 	addi	r2,r2,20
 101c634:	d8800215 	stw	r2,8(sp)
 101c638:	003fec06 	br	101c5ec <__gethex+0x3cc>
 101c63c:	41000015 	stw	r4,0(r8)
 101c640:	28c00003 	ldbu	r3,0(r5)
 101c644:	01c00104 	movi	r7,4
 101c648:	000d883a 	mov	r6,zero
 101c64c:	41d1883a 	add	r8,r8,r7
 101c650:	0009883a 	mov	r4,zero
 101c654:	003fd306 	br	101c5a4 <__gethex+0x384>
 101c658:	15e1c83a 	sub	r16,r2,r23
 101c65c:	9809883a 	mov	r4,r19
 101c660:	800b883a 	mov	r5,r16
 101c664:	101d3f40 	call	101d3f4 <__any_on>
 101c668:	1000061e 	bne	r2,zero,101c684 <__gethex+0x464>
 101c66c:	0039883a 	mov	fp,zero
 101c670:	9809883a 	mov	r4,r19
 101c674:	800b883a 	mov	r5,r16
 101c678:	101c1700 	call	101c170 <rshift>
 101c67c:	b42d883a 	add	r22,r22,r16
 101c680:	003fdb06 	br	101c5f0 <__gethex+0x3d0>
 101c684:	817fffc4 	addi	r5,r16,-1
 101c688:	2805d17a 	srai	r2,r5,5
 101c68c:	d8c00217 	ldw	r3,8(sp)
 101c690:	290007cc 	andi	r4,r5,31
 101c694:	1085883a 	add	r2,r2,r2
 101c698:	1085883a 	add	r2,r2,r2
 101c69c:	01800044 	movi	r6,1
 101c6a0:	10c5883a 	add	r2,r2,r3
 101c6a4:	3108983a 	sll	r4,r6,r4
 101c6a8:	10c00017 	ldw	r3,0(r2)
 101c6ac:	20c8703a 	and	r4,r4,r3
 101c6b0:	20001a1e 	bne	r4,zero,101c71c <__gethex+0x4fc>
 101c6b4:	3039883a 	mov	fp,r6
 101c6b8:	003fed06 	br	101c670 <__gethex+0x450>
 101c6bc:	1011883a 	mov	r8,r2
 101c6c0:	0009883a 	mov	r4,zero
 101c6c4:	003fbd06 	br	101c5bc <__gethex+0x39c>
 101c6c8:	a1000117 	ldw	r4,4(r20)
 101c6cc:	b1001a16 	blt	r22,r4,101c738 <__gethex+0x518>
 101c6d0:	04800044 	movi	r18,1
 101c6d4:	e0000826 	beq	fp,zero,101c6f8 <__gethex+0x4d8>
 101c6d8:	a1000317 	ldw	r4,12(r20)
 101c6dc:	00800084 	movi	r2,2
 101c6e0:	20809426 	beq	r4,r2,101c934 <__gethex+0x714>
 101c6e4:	008000c4 	movi	r2,3
 101c6e8:	20805826 	beq	r4,r2,101c84c <__gethex+0x62c>
 101c6ec:	00800044 	movi	r2,1
 101c6f0:	20803f26 	beq	r4,r2,101c7f0 <__gethex+0x5d0>
 101c6f4:	94800414 	ori	r18,r18,16
 101c6f8:	d8800d17 	ldw	r2,52(sp)
 101c6fc:	d8c00117 	ldw	r3,4(sp)
 101c700:	14c00015 	stw	r19,0(r2)
 101c704:	1d800015 	stw	r22,0(r3)
 101c708:	003f0806 	br	101c32c <__gethex+0x10c>
 101c70c:	000b883a 	mov	r5,zero
 101c710:	003f9206 	br	101c55c <__gethex+0x33c>
 101c714:	002d883a 	mov	r22,zero
 101c718:	003ef806 	br	101c2fc <__gethex+0xdc>
 101c71c:	3140160e 	bge	r6,r5,101c778 <__gethex+0x558>
 101c720:	9809883a 	mov	r4,r19
 101c724:	817fff84 	addi	r5,r16,-2
 101c728:	101d3f40 	call	101d3f4 <__any_on>
 101c72c:	10001226 	beq	r2,zero,101c778 <__gethex+0x558>
 101c730:	070000c4 	movi	fp,3
 101c734:	003fce06 	br	101c670 <__gethex+0x450>
 101c738:	25a3c83a 	sub	r17,r4,r22
 101c73c:	8dc01016 	blt	r17,r23,101c780 <__gethex+0x560>
 101c740:	a0c00317 	ldw	r3,12(r20)
 101c744:	00800084 	movi	r2,2
 101c748:	18809326 	beq	r3,r2,101c998 <__gethex+0x778>
 101c74c:	008000c4 	movi	r2,3
 101c750:	18808e26 	beq	r3,r2,101c98c <__gethex+0x76c>
 101c754:	00800044 	movi	r2,1
 101c758:	18807b26 	beq	r3,r2,101c948 <__gethex+0x728>
 101c75c:	a809883a 	mov	r4,r21
 101c760:	980b883a 	mov	r5,r19
 101c764:	101cefc0 	call	101cefc <_Bfree>
 101c768:	d8c00d17 	ldw	r3,52(sp)
 101c76c:	04801404 	movi	r18,80
 101c770:	18000015 	stw	zero,0(r3)
 101c774:	003eed06 	br	101c32c <__gethex+0x10c>
 101c778:	07000084 	movi	fp,2
 101c77c:	003fbc06 	br	101c670 <__gethex+0x450>
 101c780:	8c3fffc4 	addi	r16,r17,-1
 101c784:	e0001426 	beq	fp,zero,101c7d8 <__gethex+0x5b8>
 101c788:	07000044 	movi	fp,1
 101c78c:	8005d17a 	srai	r2,r16,5
 101c790:	d8c00217 	ldw	r3,8(sp)
 101c794:	814007cc 	andi	r5,r16,31
 101c798:	1085883a 	add	r2,r2,r2
 101c79c:	1085883a 	add	r2,r2,r2
 101c7a0:	10c5883a 	add	r2,r2,r3
 101c7a4:	00c00044 	movi	r3,1
 101c7a8:	1946983a 	sll	r3,r3,r5
 101c7ac:	11000017 	ldw	r4,0(r2)
 101c7b0:	1906703a 	and	r3,r3,r4
 101c7b4:	18000126 	beq	r3,zero,101c7bc <__gethex+0x59c>
 101c7b8:	e7000094 	ori	fp,fp,2
 101c7bc:	880b883a 	mov	r5,r17
 101c7c0:	9809883a 	mov	r4,r19
 101c7c4:	101c1700 	call	101c170 <rshift>
 101c7c8:	a5800117 	ldw	r22,4(r20)
 101c7cc:	bc6fc83a 	sub	r23,r23,r17
 101c7d0:	04800084 	movi	r18,2
 101c7d4:	003fbf06 	br	101c6d4 <__gethex+0x4b4>
 101c7d8:	043fec0e 	bge	zero,r16,101c78c <__gethex+0x56c>
 101c7dc:	9809883a 	mov	r4,r19
 101c7e0:	800b883a 	mov	r5,r16
 101c7e4:	101d3f40 	call	101d3f4 <__any_on>
 101c7e8:	1039883a 	mov	fp,r2
 101c7ec:	003fe706 	br	101c78c <__gethex+0x56c>
 101c7f0:	e080008c 	andi	r2,fp,2
 101c7f4:	103fbf26 	beq	r2,zero,101c6f4 <__gethex+0x4d4>
 101c7f8:	d8c00217 	ldw	r3,8(sp)
 101c7fc:	18800017 	ldw	r2,0(r3)
 101c800:	e084b03a 	or	r2,fp,r2
 101c804:	1104703a 	and	r2,r2,r4
 101c808:	103fba26 	beq	r2,zero,101c6f4 <__gethex+0x4d4>
 101c80c:	9c000417 	ldw	r16,16(r19)
 101c810:	d8c00217 	ldw	r3,8(sp)
 101c814:	017fffc4 	movi	r5,-1
 101c818:	8405883a 	add	r2,r16,r16
 101c81c:	10b9883a 	add	fp,r2,r2
 101c820:	1f09883a 	add	r4,r3,fp
 101c824:	dc000015 	stw	r16,0(sp)
 101c828:	00000306 	br	101c838 <__gethex+0x618>
 101c82c:	18000015 	stw	zero,0(r3)
 101c830:	18c00104 	addi	r3,r3,4
 101c834:	1900082e 	bgeu	r3,r4,101c858 <__gethex+0x638>
 101c838:	18800017 	ldw	r2,0(r3)
 101c83c:	117ffb26 	beq	r2,r5,101c82c <__gethex+0x60c>
 101c840:	10800044 	addi	r2,r2,1
 101c844:	18800015 	stw	r2,0(r3)
 101c848:	00001f06 	br	101c8c8 <__gethex+0x6a8>
 101c84c:	d8800e17 	ldw	r2,56(sp)
 101c850:	103fa826 	beq	r2,zero,101c6f4 <__gethex+0x4d4>
 101c854:	003fed06 	br	101c80c <__gethex+0x5ec>
 101c858:	98800217 	ldw	r2,8(r19)
 101c85c:	80801316 	blt	r16,r2,101c8ac <__gethex+0x68c>
 101c860:	99400117 	ldw	r5,4(r19)
 101c864:	a809883a 	mov	r4,r21
 101c868:	29400044 	addi	r5,r5,1
 101c86c:	101d47c0 	call	101d47c <_Balloc>
 101c870:	99800417 	ldw	r6,16(r19)
 101c874:	99400304 	addi	r5,r19,12
 101c878:	11000304 	addi	r4,r2,12
 101c87c:	318d883a 	add	r6,r6,r6
 101c880:	318d883a 	add	r6,r6,r6
 101c884:	31800204 	addi	r6,r6,8
 101c888:	1023883a 	mov	r17,r2
 101c88c:	10152740 	call	1015274 <memcpy>
 101c890:	980b883a 	mov	r5,r19
 101c894:	a809883a 	mov	r4,r21
 101c898:	101cefc0 	call	101cefc <_Bfree>
 101c89c:	8c000417 	ldw	r16,16(r17)
 101c8a0:	88800504 	addi	r2,r17,20
 101c8a4:	8827883a 	mov	r19,r17
 101c8a8:	d8800215 	stw	r2,8(sp)
 101c8ac:	8405883a 	add	r2,r16,r16
 101c8b0:	1085883a 	add	r2,r2,r2
 101c8b4:	14c5883a 	add	r2,r2,r19
 101c8b8:	84000044 	addi	r16,r16,1
 101c8bc:	00c00044 	movi	r3,1
 101c8c0:	10c00515 	stw	r3,20(r2)
 101c8c4:	9c000415 	stw	r16,16(r19)
 101c8c8:	00800084 	movi	r2,2
 101c8cc:	90801426 	beq	r18,r2,101c920 <__gethex+0x700>
 101c8d0:	d8800017 	ldw	r2,0(sp)
 101c8d4:	14000b16 	blt	r2,r16,101c904 <__gethex+0x6e4>
 101c8d8:	bc0007cc 	andi	r16,r23,31
 101c8dc:	8000021e 	bne	r16,zero,101c8e8 <__gethex+0x6c8>
 101c8e0:	94800814 	ori	r18,r18,32
 101c8e4:	003f8406 	br	101c6f8 <__gethex+0x4d8>
 101c8e8:	d8c00217 	ldw	r3,8(sp)
 101c8ec:	1f05883a 	add	r2,r3,fp
 101c8f0:	113fff17 	ldw	r4,-4(r2)
 101c8f4:	101cf240 	call	101cf24 <__hi0bits>
 101c8f8:	00c00804 	movi	r3,32
 101c8fc:	1c07c83a 	sub	r3,r3,r16
 101c900:	10fff70e 	bge	r2,r3,101c8e0 <__gethex+0x6c0>
 101c904:	9809883a 	mov	r4,r19
 101c908:	01400044 	movi	r5,1
 101c90c:	101c1700 	call	101c170 <rshift>
 101c910:	a0800217 	ldw	r2,8(r20)
 101c914:	b5800044 	addi	r22,r22,1
 101c918:	15bf3716 	blt	r2,r22,101c5f8 <__gethex+0x3d8>
 101c91c:	003ff006 	br	101c8e0 <__gethex+0x6c0>
 101c920:	a0800017 	ldw	r2,0(r20)
 101c924:	10bfffc4 	addi	r2,r2,-1
 101c928:	b8801e26 	beq	r23,r2,101c9a4 <__gethex+0x784>
 101c92c:	04800884 	movi	r18,34
 101c930:	003f7106 	br	101c6f8 <__gethex+0x4d8>
 101c934:	d8c00e17 	ldw	r3,56(sp)
 101c938:	00800044 	movi	r2,1
 101c93c:	10c5c83a 	sub	r2,r2,r3
 101c940:	103f6c26 	beq	r2,zero,101c6f4 <__gethex+0x4d4>
 101c944:	003fb106 	br	101c80c <__gethex+0x5ec>
 101c948:	bc7f841e 	bne	r23,r17,101c75c <__gethex+0x53c>
 101c94c:	1dc0050e 	bge	r3,r23,101c964 <__gethex+0x744>
 101c950:	b8cbc83a 	sub	r5,r23,r3
 101c954:	9809883a 	mov	r4,r19
 101c958:	101d3f40 	call	101d3f4 <__any_on>
 101c95c:	103f7f26 	beq	r2,zero,101c75c <__gethex+0x53c>
 101c960:	a1000117 	ldw	r4,4(r20)
 101c964:	d8800117 	ldw	r2,4(sp)
 101c968:	d8c00217 	ldw	r3,8(sp)
 101c96c:	04000044 	movi	r16,1
 101c970:	11000015 	stw	r4,0(r2)
 101c974:	d8800d17 	ldw	r2,52(sp)
 101c978:	04801884 	movi	r18,98
 101c97c:	1c000015 	stw	r16,0(r3)
 101c980:	14c00015 	stw	r19,0(r2)
 101c984:	9c000415 	stw	r16,16(r19)
 101c988:	003e6806 	br	101c32c <__gethex+0x10c>
 101c98c:	d8c00e17 	ldw	r3,56(sp)
 101c990:	183f7226 	beq	r3,zero,101c75c <__gethex+0x53c>
 101c994:	003ff306 	br	101c964 <__gethex+0x744>
 101c998:	d8800e17 	ldw	r2,56(sp)
 101c99c:	103ff126 	beq	r2,zero,101c964 <__gethex+0x744>
 101c9a0:	003f6e06 	br	101c75c <__gethex+0x53c>
 101c9a4:	b805d17a 	srai	r2,r23,5
 101c9a8:	d8c00217 	ldw	r3,8(sp)
 101c9ac:	b94007cc 	andi	r5,r23,31
 101c9b0:	1085883a 	add	r2,r2,r2
 101c9b4:	1085883a 	add	r2,r2,r2
 101c9b8:	10c5883a 	add	r2,r2,r3
 101c9bc:	00c00044 	movi	r3,1
 101c9c0:	1946983a 	sll	r3,r3,r5
 101c9c4:	11000017 	ldw	r4,0(r2)
 101c9c8:	1906703a 	and	r3,r3,r4
 101c9cc:	183fd726 	beq	r3,zero,101c92c <__gethex+0x70c>
 101c9d0:	04800844 	movi	r18,33
 101c9d4:	003f4806 	br	101c6f8 <__gethex+0x4d8>

0101c9d8 <L_shift>:
 101c9d8:	00800204 	movi	r2,8
 101c9dc:	1185c83a 	sub	r2,r2,r6
 101c9e0:	1085883a 	add	r2,r2,r2
 101c9e4:	21c00017 	ldw	r7,0(r4)
 101c9e8:	1093883a 	add	r9,r2,r2
 101c9ec:	00800804 	movi	r2,32
 101c9f0:	200d883a 	mov	r6,r4
 101c9f4:	1251c83a 	sub	r8,r2,r9
 101c9f8:	31800104 	addi	r6,r6,4
 101c9fc:	3805883a 	mov	r2,r7
 101ca00:	31c00017 	ldw	r7,0(r6)
 101ca04:	3a08983a 	sll	r4,r7,r8
 101ca08:	3a46d83a 	srl	r3,r7,r9
 101ca0c:	1104b03a 	or	r2,r2,r4
 101ca10:	180f883a 	mov	r7,r3
 101ca14:	30bfff15 	stw	r2,-4(r6)
 101ca18:	30c00015 	stw	r3,0(r6)
 101ca1c:	317ff636 	bltu	r6,r5,101c9f8 <L_shift+0x20>
 101ca20:	f800283a 	ret

0101ca24 <__hexnan>:
 101ca24:	defff404 	addi	sp,sp,-48
 101ca28:	dd800815 	stw	r22,32(sp)
 101ca2c:	05804134 	movhi	r22,260
 101ca30:	b5a35d04 	addi	r22,r22,-29324
 101ca34:	b0800c03 	ldbu	r2,48(r22)
 101ca38:	dcc00515 	stw	r19,20(sp)
 101ca3c:	dc000215 	stw	r16,8(sp)
 101ca40:	dfc00b15 	stw	ra,44(sp)
 101ca44:	df000a15 	stw	fp,40(sp)
 101ca48:	ddc00915 	stw	r23,36(sp)
 101ca4c:	dd400715 	stw	r21,28(sp)
 101ca50:	dd000615 	stw	r20,24(sp)
 101ca54:	dc800415 	stw	r18,16(sp)
 101ca58:	dc400315 	stw	r17,12(sp)
 101ca5c:	d9000115 	stw	r4,4(sp)
 101ca60:	2821883a 	mov	r16,r5
 101ca64:	3027883a 	mov	r19,r6
 101ca68:	10007426 	beq	r2,zero,101cc3c <__hexnan+0x218>
 101ca6c:	80c00017 	ldw	r3,0(r16)
 101ca70:	1805d17a 	srai	r2,r3,5
 101ca74:	18c007cc 	andi	r3,r3,31
 101ca78:	1839003a 	cmpeq	fp,r3,zero
 101ca7c:	1085883a 	add	r2,r2,r2
 101ca80:	1085883a 	add	r2,r2,r2
 101ca84:	d8c00015 	stw	r3,0(sp)
 101ca88:	14c5883a 	add	r2,r2,r19
 101ca8c:	e000011e 	bne	fp,zero,101ca94 <__hexnan+0x70>
 101ca90:	10800104 	addi	r2,r2,4
 101ca94:	d8c00117 	ldw	r3,4(sp)
 101ca98:	153fff04 	addi	r20,r2,-4
 101ca9c:	a021883a 	mov	r16,r20
 101caa0:	1c400017 	ldw	r17,0(r3)
 101caa4:	a02b883a 	mov	r21,r20
 101caa8:	0025883a 	mov	r18,zero
 101caac:	002f883a 	mov	r23,zero
 101cab0:	000d883a 	mov	r6,zero
 101cab4:	103fff15 	stw	zero,-4(r2)
 101cab8:	8c400044 	addi	r17,r17,1
 101cabc:	89000003 	ldbu	r4,0(r17)
 101cac0:	20000e26 	beq	r4,zero,101cafc <__hexnan+0xd8>
 101cac4:	2585883a 	add	r2,r4,r22
 101cac8:	10c00003 	ldbu	r3,0(r2)
 101cacc:	18002e1e 	bne	r3,zero,101cb88 <__hexnan+0x164>
 101cad0:	00800804 	movi	r2,32
 101cad4:	11005536 	bltu	r2,r4,101cc2c <__hexnan+0x208>
 101cad8:	bcbff70e 	bge	r23,r18,101cab8 <__hexnan+0x94>
 101cadc:	8540022e 	bgeu	r16,r21,101cae8 <__hexnan+0xc4>
 101cae0:	008001c4 	movi	r2,7
 101cae4:	11803c0e 	bge	r2,r6,101cbd8 <__hexnan+0x1b4>
 101cae8:	9c003536 	bltu	r19,r16,101cbc0 <__hexnan+0x19c>
 101caec:	8c400044 	addi	r17,r17,1
 101caf0:	89000003 	ldbu	r4,0(r17)
 101caf4:	01800204 	movi	r6,8
 101caf8:	203ff21e 	bne	r4,zero,101cac4 <__hexnan+0xa0>
 101cafc:	90004d26 	beq	r18,zero,101cc34 <__hexnan+0x210>
 101cb00:	85404336 	bltu	r16,r21,101cc10 <__hexnan+0x1ec>
 101cb04:	9c00382e 	bgeu	r19,r16,101cbe8 <__hexnan+0x1c4>
 101cb08:	9807883a 	mov	r3,r19
 101cb0c:	80800017 	ldw	r2,0(r16)
 101cb10:	84000104 	addi	r16,r16,4
 101cb14:	18800015 	stw	r2,0(r3)
 101cb18:	18c00104 	addi	r3,r3,4
 101cb1c:	a43ffb2e 	bgeu	r20,r16,101cb0c <__hexnan+0xe8>
 101cb20:	18000015 	stw	zero,0(r3)
 101cb24:	18c00104 	addi	r3,r3,4
 101cb28:	a0fffd2e 	bgeu	r20,r3,101cb20 <__hexnan+0xfc>
 101cb2c:	a0800017 	ldw	r2,0(r20)
 101cb30:	1000071e 	bne	r2,zero,101cb50 <__hexnan+0x12c>
 101cb34:	9d004326 	beq	r19,r20,101cc44 <__hexnan+0x220>
 101cb38:	a007883a 	mov	r3,r20
 101cb3c:	00000106 	br	101cb44 <__hexnan+0x120>
 101cb40:	98c04026 	beq	r19,r3,101cc44 <__hexnan+0x220>
 101cb44:	18ffff04 	addi	r3,r3,-4
 101cb48:	18800017 	ldw	r2,0(r3)
 101cb4c:	103ffc26 	beq	r2,zero,101cb40 <__hexnan+0x11c>
 101cb50:	00c00144 	movi	r3,5
 101cb54:	1805883a 	mov	r2,r3
 101cb58:	dfc00b17 	ldw	ra,44(sp)
 101cb5c:	df000a17 	ldw	fp,40(sp)
 101cb60:	ddc00917 	ldw	r23,36(sp)
 101cb64:	dd800817 	ldw	r22,32(sp)
 101cb68:	dd400717 	ldw	r21,28(sp)
 101cb6c:	dd000617 	ldw	r20,24(sp)
 101cb70:	dcc00517 	ldw	r19,20(sp)
 101cb74:	dc800417 	ldw	r18,16(sp)
 101cb78:	dc400317 	ldw	r17,12(sp)
 101cb7c:	dc000217 	ldw	r16,8(sp)
 101cb80:	dec00c04 	addi	sp,sp,48
 101cb84:	f800283a 	ret
 101cb88:	31800044 	addi	r6,r6,1
 101cb8c:	00800204 	movi	r2,8
 101cb90:	94800044 	addi	r18,r18,1
 101cb94:	1180040e 	bge	r2,r6,101cba8 <__hexnan+0x184>
 101cb98:	9c3fc72e 	bgeu	r19,r16,101cab8 <__hexnan+0x94>
 101cb9c:	843fff04 	addi	r16,r16,-4
 101cba0:	80000015 	stw	zero,0(r16)
 101cba4:	01800044 	movi	r6,1
 101cba8:	80800017 	ldw	r2,0(r16)
 101cbac:	18c003cc 	andi	r3,r3,15
 101cbb0:	1004913a 	slli	r2,r2,4
 101cbb4:	10c4b03a 	or	r2,r2,r3
 101cbb8:	80800015 	stw	r2,0(r16)
 101cbbc:	003fbe06 	br	101cab8 <__hexnan+0x94>
 101cbc0:	843fff04 	addi	r16,r16,-4
 101cbc4:	802b883a 	mov	r21,r16
 101cbc8:	902f883a 	mov	r23,r18
 101cbcc:	000d883a 	mov	r6,zero
 101cbd0:	80000015 	stw	zero,0(r16)
 101cbd4:	003fb806 	br	101cab8 <__hexnan+0x94>
 101cbd8:	8009883a 	mov	r4,r16
 101cbdc:	a80b883a 	mov	r5,r21
 101cbe0:	101c9d80 	call	101c9d8 <L_shift>
 101cbe4:	003fc006 	br	101cae8 <__hexnan+0xc4>
 101cbe8:	e03fd01e 	bne	fp,zero,101cb2c <__hexnan+0x108>
 101cbec:	d8c00017 	ldw	r3,0(sp)
 101cbf0:	00800804 	movi	r2,32
 101cbf4:	10c5c83a 	sub	r2,r2,r3
 101cbf8:	00ffffc4 	movi	r3,-1
 101cbfc:	1886d83a 	srl	r3,r3,r2
 101cc00:	a0800017 	ldw	r2,0(r20)
 101cc04:	10c4703a 	and	r2,r2,r3
 101cc08:	a0800015 	stw	r2,0(r20)
 101cc0c:	003fc806 	br	101cb30 <__hexnan+0x10c>
 101cc10:	008001c4 	movi	r2,7
 101cc14:	11bfbb16 	blt	r2,r6,101cb04 <__hexnan+0xe0>
 101cc18:	a80b883a 	mov	r5,r21
 101cc1c:	8009883a 	mov	r4,r16
 101cc20:	101c9d80 	call	101c9d8 <L_shift>
 101cc24:	9c3ff02e 	bgeu	r19,r16,101cbe8 <__hexnan+0x1c4>
 101cc28:	003fb706 	br	101cb08 <__hexnan+0xe4>
 101cc2c:	00800a44 	movi	r2,41
 101cc30:	20800826 	beq	r4,r2,101cc54 <__hexnan+0x230>
 101cc34:	00c00104 	movi	r3,4
 101cc38:	003fc606 	br	101cb54 <__hexnan+0x130>
 101cc3c:	101c1080 	call	101c108 <__hexdig_init>
 101cc40:	003f8a06 	br	101ca6c <__hexnan+0x48>
 101cc44:	00800044 	movi	r2,1
 101cc48:	00c00144 	movi	r3,5
 101cc4c:	98800015 	stw	r2,0(r19)
 101cc50:	003fc006 	br	101cb54 <__hexnan+0x130>
 101cc54:	903ff726 	beq	r18,zero,101cc34 <__hexnan+0x210>
 101cc58:	d8c00117 	ldw	r3,4(sp)
 101cc5c:	88800044 	addi	r2,r17,1
 101cc60:	18800015 	stw	r2,0(r3)
 101cc64:	857fa72e 	bgeu	r16,r21,101cb04 <__hexnan+0xe0>
 101cc68:	003fe906 	br	101cc10 <__hexnan+0x1ec>

0101cc6c <_isatty_r>:
 101cc6c:	defffd04 	addi	sp,sp,-12
 101cc70:	dc000015 	stw	r16,0(sp)
 101cc74:	04004134 	movhi	r16,260
 101cc78:	84230104 	addi	r16,r16,-29692
 101cc7c:	dc400115 	stw	r17,4(sp)
 101cc80:	80000015 	stw	zero,0(r16)
 101cc84:	2023883a 	mov	r17,r4
 101cc88:	2809883a 	mov	r4,r5
 101cc8c:	dfc00215 	stw	ra,8(sp)
 101cc90:	10214180 	call	1021418 <isatty>
 101cc94:	1007883a 	mov	r3,r2
 101cc98:	00bfffc4 	movi	r2,-1
 101cc9c:	18800626 	beq	r3,r2,101ccb8 <_isatty_r+0x4c>
 101cca0:	1805883a 	mov	r2,r3
 101cca4:	dfc00217 	ldw	ra,8(sp)
 101cca8:	dc400117 	ldw	r17,4(sp)
 101ccac:	dc000017 	ldw	r16,0(sp)
 101ccb0:	dec00304 	addi	sp,sp,12
 101ccb4:	f800283a 	ret
 101ccb8:	80800017 	ldw	r2,0(r16)
 101ccbc:	103ff826 	beq	r2,zero,101cca0 <_isatty_r+0x34>
 101ccc0:	88800015 	stw	r2,0(r17)
 101ccc4:	1805883a 	mov	r2,r3
 101ccc8:	dfc00217 	ldw	ra,8(sp)
 101cccc:	dc400117 	ldw	r17,4(sp)
 101ccd0:	dc000017 	ldw	r16,0(sp)
 101ccd4:	dec00304 	addi	sp,sp,12
 101ccd8:	f800283a 	ret

0101ccdc <__locale_charset>:
 101ccdc:	d0a00917 	ldw	r2,-32732(gp)
 101cce0:	f800283a 	ret

0101cce4 <_localeconv_r>:
 101cce4:	008040f4 	movhi	r2,259
 101cce8:	10947704 	addi	r2,r2,20956
 101ccec:	f800283a 	ret

0101ccf0 <localeconv>:
 101ccf0:	008040f4 	movhi	r2,259
 101ccf4:	109bed04 	addi	r2,r2,28596
 101ccf8:	11000017 	ldw	r4,0(r2)
 101ccfc:	101cce41 	jmpi	101cce4 <_localeconv_r>

0101cd00 <_setlocale_r>:
 101cd00:	defffc04 	addi	sp,sp,-16
 101cd04:	00c040f4 	movhi	r3,259
 101cd08:	18d39804 	addi	r3,r3,20064
 101cd0c:	dc800215 	stw	r18,8(sp)
 101cd10:	dc400115 	stw	r17,4(sp)
 101cd14:	dc000015 	stw	r16,0(sp)
 101cd18:	2023883a 	mov	r17,r4
 101cd1c:	2825883a 	mov	r18,r5
 101cd20:	dfc00315 	stw	ra,12(sp)
 101cd24:	3021883a 	mov	r16,r6
 101cd28:	3009883a 	mov	r4,r6
 101cd2c:	180b883a 	mov	r5,r3
 101cd30:	30000926 	beq	r6,zero,101cd58 <_setlocale_r+0x58>
 101cd34:	1015bb40 	call	1015bb4 <strcmp>
 101cd38:	8009883a 	mov	r4,r16
 101cd3c:	014040f4 	movhi	r5,259
 101cd40:	29539704 	addi	r5,r5,20060
 101cd44:	10000b1e 	bne	r2,zero,101cd74 <_setlocale_r+0x74>
 101cd48:	8c000d15 	stw	r16,52(r17)
 101cd4c:	8c800c15 	stw	r18,48(r17)
 101cd50:	00c040f4 	movhi	r3,259
 101cd54:	18d39804 	addi	r3,r3,20064
 101cd58:	1805883a 	mov	r2,r3
 101cd5c:	dfc00317 	ldw	ra,12(sp)
 101cd60:	dc800217 	ldw	r18,8(sp)
 101cd64:	dc400117 	ldw	r17,4(sp)
 101cd68:	dc000017 	ldw	r16,0(sp)
 101cd6c:	dec00404 	addi	sp,sp,16
 101cd70:	f800283a 	ret
 101cd74:	1015bb40 	call	1015bb4 <strcmp>
 101cd78:	0007883a 	mov	r3,zero
 101cd7c:	103ff226 	beq	r2,zero,101cd48 <_setlocale_r+0x48>
 101cd80:	003ff506 	br	101cd58 <_setlocale_r+0x58>

0101cd84 <setlocale>:
 101cd84:	018040f4 	movhi	r6,259
 101cd88:	319bed04 	addi	r6,r6,28596
 101cd8c:	2007883a 	mov	r3,r4
 101cd90:	31000017 	ldw	r4,0(r6)
 101cd94:	280d883a 	mov	r6,r5
 101cd98:	180b883a 	mov	r5,r3
 101cd9c:	101cd001 	jmpi	101cd00 <_setlocale_r>

0101cda0 <_lseek_r>:
 101cda0:	defffd04 	addi	sp,sp,-12
 101cda4:	dc000015 	stw	r16,0(sp)
 101cda8:	04004134 	movhi	r16,260
 101cdac:	84230104 	addi	r16,r16,-29692
 101cdb0:	dc400115 	stw	r17,4(sp)
 101cdb4:	80000015 	stw	zero,0(r16)
 101cdb8:	2023883a 	mov	r17,r4
 101cdbc:	2809883a 	mov	r4,r5
 101cdc0:	300b883a 	mov	r5,r6
 101cdc4:	380d883a 	mov	r6,r7
 101cdc8:	dfc00215 	stw	ra,8(sp)
 101cdcc:	10217c40 	call	10217c4 <lseek>
 101cdd0:	1007883a 	mov	r3,r2
 101cdd4:	00bfffc4 	movi	r2,-1
 101cdd8:	18800626 	beq	r3,r2,101cdf4 <_lseek_r+0x54>
 101cddc:	1805883a 	mov	r2,r3
 101cde0:	dfc00217 	ldw	ra,8(sp)
 101cde4:	dc400117 	ldw	r17,4(sp)
 101cde8:	dc000017 	ldw	r16,0(sp)
 101cdec:	dec00304 	addi	sp,sp,12
 101cdf0:	f800283a 	ret
 101cdf4:	80800017 	ldw	r2,0(r16)
 101cdf8:	103ff826 	beq	r2,zero,101cddc <_lseek_r+0x3c>
 101cdfc:	88800015 	stw	r2,0(r17)
 101ce00:	1805883a 	mov	r2,r3
 101ce04:	dfc00217 	ldw	ra,8(sp)
 101ce08:	dc400117 	ldw	r17,4(sp)
 101ce0c:	dc000017 	ldw	r16,0(sp)
 101ce10:	dec00304 	addi	sp,sp,12
 101ce14:	f800283a 	ret

0101ce18 <memchr>:
 101ce18:	008000c4 	movi	r2,3
 101ce1c:	29403fcc 	andi	r5,r5,255
 101ce20:	2007883a 	mov	r3,r4
 101ce24:	1180022e 	bgeu	r2,r6,101ce30 <memchr+0x18>
 101ce28:	2084703a 	and	r2,r4,r2
 101ce2c:	10000b26 	beq	r2,zero,101ce5c <memchr+0x44>
 101ce30:	313fffc4 	addi	r4,r6,-1
 101ce34:	3000051e 	bne	r6,zero,101ce4c <memchr+0x34>
 101ce38:	00002c06 	br	101ceec <memchr+0xd4>
 101ce3c:	213fffc4 	addi	r4,r4,-1
 101ce40:	00bfffc4 	movi	r2,-1
 101ce44:	18c00044 	addi	r3,r3,1
 101ce48:	20802826 	beq	r4,r2,101ceec <memchr+0xd4>
 101ce4c:	18800003 	ldbu	r2,0(r3)
 101ce50:	28bffa1e 	bne	r5,r2,101ce3c <memchr+0x24>
 101ce54:	1805883a 	mov	r2,r3
 101ce58:	f800283a 	ret
 101ce5c:	0011883a 	mov	r8,zero
 101ce60:	0007883a 	mov	r3,zero
 101ce64:	01c00104 	movi	r7,4
 101ce68:	4004923a 	slli	r2,r8,8
 101ce6c:	18c00044 	addi	r3,r3,1
 101ce70:	1151883a 	add	r8,r2,r5
 101ce74:	19fffc1e 	bne	r3,r7,101ce68 <memchr+0x50>
 101ce78:	02bfbff4 	movhi	r10,65279
 101ce7c:	52bfbfc4 	addi	r10,r10,-257
 101ce80:	02602074 	movhi	r9,32897
 101ce84:	4a602004 	addi	r9,r9,-32640
 101ce88:	02c000c4 	movi	r11,3
 101ce8c:	20800017 	ldw	r2,0(r4)
 101ce90:	31bfff04 	addi	r6,r6,-4
 101ce94:	200f883a 	mov	r7,r4
 101ce98:	1204f03a 	xor	r2,r2,r8
 101ce9c:	1287883a 	add	r3,r2,r10
 101cea0:	1a46703a 	and	r3,r3,r9
 101cea4:	0084303a 	nor	r2,zero,r2
 101cea8:	10c4703a 	and	r2,r2,r3
 101ceac:	10000b26 	beq	r2,zero,101cedc <memchr+0xc4>
 101ceb0:	20800003 	ldbu	r2,0(r4)
 101ceb4:	28800f26 	beq	r5,r2,101cef4 <memchr+0xdc>
 101ceb8:	20800043 	ldbu	r2,1(r4)
 101cebc:	21c00044 	addi	r7,r4,1
 101cec0:	28800c26 	beq	r5,r2,101cef4 <memchr+0xdc>
 101cec4:	20800083 	ldbu	r2,2(r4)
 101cec8:	21c00084 	addi	r7,r4,2
 101cecc:	28800926 	beq	r5,r2,101cef4 <memchr+0xdc>
 101ced0:	208000c3 	ldbu	r2,3(r4)
 101ced4:	21c000c4 	addi	r7,r4,3
 101ced8:	28800626 	beq	r5,r2,101cef4 <memchr+0xdc>
 101cedc:	21000104 	addi	r4,r4,4
 101cee0:	59bfea36 	bltu	r11,r6,101ce8c <memchr+0x74>
 101cee4:	2007883a 	mov	r3,r4
 101cee8:	003fd106 	br	101ce30 <memchr+0x18>
 101ceec:	0005883a 	mov	r2,zero
 101cef0:	f800283a 	ret
 101cef4:	3805883a 	mov	r2,r7
 101cef8:	f800283a 	ret

0101cefc <_Bfree>:
 101cefc:	28000826 	beq	r5,zero,101cf20 <_Bfree+0x24>
 101cf00:	28800117 	ldw	r2,4(r5)
 101cf04:	21001317 	ldw	r4,76(r4)
 101cf08:	1085883a 	add	r2,r2,r2
 101cf0c:	1085883a 	add	r2,r2,r2
 101cf10:	1105883a 	add	r2,r2,r4
 101cf14:	10c00017 	ldw	r3,0(r2)
 101cf18:	28c00015 	stw	r3,0(r5)
 101cf1c:	11400015 	stw	r5,0(r2)
 101cf20:	f800283a 	ret

0101cf24 <__hi0bits>:
 101cf24:	20bfffec 	andhi	r2,r4,65535
 101cf28:	10001426 	beq	r2,zero,101cf7c <__hi0bits+0x58>
 101cf2c:	0007883a 	mov	r3,zero
 101cf30:	20bfc02c 	andhi	r2,r4,65280
 101cf34:	1000021e 	bne	r2,zero,101cf40 <__hi0bits+0x1c>
 101cf38:	2008923a 	slli	r4,r4,8
 101cf3c:	18c00204 	addi	r3,r3,8
 101cf40:	20bc002c 	andhi	r2,r4,61440
 101cf44:	1000021e 	bne	r2,zero,101cf50 <__hi0bits+0x2c>
 101cf48:	2008913a 	slli	r4,r4,4
 101cf4c:	18c00104 	addi	r3,r3,4
 101cf50:	20b0002c 	andhi	r2,r4,49152
 101cf54:	1000031e 	bne	r2,zero,101cf64 <__hi0bits+0x40>
 101cf58:	2105883a 	add	r2,r4,r4
 101cf5c:	18c00084 	addi	r3,r3,2
 101cf60:	1089883a 	add	r4,r2,r2
 101cf64:	20000316 	blt	r4,zero,101cf74 <__hi0bits+0x50>
 101cf68:	2090002c 	andhi	r2,r4,16384
 101cf6c:	10000626 	beq	r2,zero,101cf88 <__hi0bits+0x64>
 101cf70:	18c00044 	addi	r3,r3,1
 101cf74:	1805883a 	mov	r2,r3
 101cf78:	f800283a 	ret
 101cf7c:	2008943a 	slli	r4,r4,16
 101cf80:	00c00404 	movi	r3,16
 101cf84:	003fea06 	br	101cf30 <__hi0bits+0xc>
 101cf88:	00c00804 	movi	r3,32
 101cf8c:	1805883a 	mov	r2,r3
 101cf90:	f800283a 	ret

0101cf94 <__lo0bits>:
 101cf94:	20c00017 	ldw	r3,0(r4)
 101cf98:	188001cc 	andi	r2,r3,7
 101cf9c:	10000a26 	beq	r2,zero,101cfc8 <__lo0bits+0x34>
 101cfa0:	1880004c 	andi	r2,r3,1
 101cfa4:	1005003a 	cmpeq	r2,r2,zero
 101cfa8:	10002126 	beq	r2,zero,101d030 <__lo0bits+0x9c>
 101cfac:	1880008c 	andi	r2,r3,2
 101cfb0:	1000251e 	bne	r2,zero,101d048 <__lo0bits+0xb4>
 101cfb4:	1804d0ba 	srli	r2,r3,2
 101cfb8:	01400084 	movi	r5,2
 101cfbc:	20800015 	stw	r2,0(r4)
 101cfc0:	2805883a 	mov	r2,r5
 101cfc4:	f800283a 	ret
 101cfc8:	18bfffcc 	andi	r2,r3,65535
 101cfcc:	10001526 	beq	r2,zero,101d024 <__lo0bits+0x90>
 101cfd0:	000b883a 	mov	r5,zero
 101cfd4:	18803fcc 	andi	r2,r3,255
 101cfd8:	1000021e 	bne	r2,zero,101cfe4 <__lo0bits+0x50>
 101cfdc:	1806d23a 	srli	r3,r3,8
 101cfe0:	29400204 	addi	r5,r5,8
 101cfe4:	188003cc 	andi	r2,r3,15
 101cfe8:	1000021e 	bne	r2,zero,101cff4 <__lo0bits+0x60>
 101cfec:	1806d13a 	srli	r3,r3,4
 101cff0:	29400104 	addi	r5,r5,4
 101cff4:	188000cc 	andi	r2,r3,3
 101cff8:	1000021e 	bne	r2,zero,101d004 <__lo0bits+0x70>
 101cffc:	1806d0ba 	srli	r3,r3,2
 101d000:	29400084 	addi	r5,r5,2
 101d004:	1880004c 	andi	r2,r3,1
 101d008:	1000031e 	bne	r2,zero,101d018 <__lo0bits+0x84>
 101d00c:	1806d07a 	srli	r3,r3,1
 101d010:	18000a26 	beq	r3,zero,101d03c <__lo0bits+0xa8>
 101d014:	29400044 	addi	r5,r5,1
 101d018:	2805883a 	mov	r2,r5
 101d01c:	20c00015 	stw	r3,0(r4)
 101d020:	f800283a 	ret
 101d024:	1806d43a 	srli	r3,r3,16
 101d028:	01400404 	movi	r5,16
 101d02c:	003fe906 	br	101cfd4 <__lo0bits+0x40>
 101d030:	000b883a 	mov	r5,zero
 101d034:	2805883a 	mov	r2,r5
 101d038:	f800283a 	ret
 101d03c:	01400804 	movi	r5,32
 101d040:	2805883a 	mov	r2,r5
 101d044:	f800283a 	ret
 101d048:	1804d07a 	srli	r2,r3,1
 101d04c:	01400044 	movi	r5,1
 101d050:	20800015 	stw	r2,0(r4)
 101d054:	003fda06 	br	101cfc0 <__lo0bits+0x2c>

0101d058 <__mcmp>:
 101d058:	20800417 	ldw	r2,16(r4)
 101d05c:	28c00417 	ldw	r3,16(r5)
 101d060:	10cfc83a 	sub	r7,r2,r3
 101d064:	38000c1e 	bne	r7,zero,101d098 <__mcmp+0x40>
 101d068:	18c5883a 	add	r2,r3,r3
 101d06c:	1085883a 	add	r2,r2,r2
 101d070:	10c00504 	addi	r3,r2,20
 101d074:	21000504 	addi	r4,r4,20
 101d078:	28cb883a 	add	r5,r5,r3
 101d07c:	2085883a 	add	r2,r4,r2
 101d080:	10bfff04 	addi	r2,r2,-4
 101d084:	297fff04 	addi	r5,r5,-4
 101d088:	11800017 	ldw	r6,0(r2)
 101d08c:	28c00017 	ldw	r3,0(r5)
 101d090:	30c0031e 	bne	r6,r3,101d0a0 <__mcmp+0x48>
 101d094:	20bffa36 	bltu	r4,r2,101d080 <__mcmp+0x28>
 101d098:	3805883a 	mov	r2,r7
 101d09c:	f800283a 	ret
 101d0a0:	30c00336 	bltu	r6,r3,101d0b0 <__mcmp+0x58>
 101d0a4:	01c00044 	movi	r7,1
 101d0a8:	3805883a 	mov	r2,r7
 101d0ac:	f800283a 	ret
 101d0b0:	01ffffc4 	movi	r7,-1
 101d0b4:	003ff806 	br	101d098 <__mcmp+0x40>

0101d0b8 <__ulp>:
 101d0b8:	295ffc2c 	andhi	r5,r5,32752
 101d0bc:	013f3034 	movhi	r4,64704
 101d0c0:	290b883a 	add	r5,r5,r4
 101d0c4:	0145c83a 	sub	r2,zero,r5
 101d0c8:	1007d53a 	srai	r3,r2,20
 101d0cc:	000d883a 	mov	r6,zero
 101d0d0:	0140040e 	bge	zero,r5,101d0e4 <__ulp+0x2c>
 101d0d4:	280f883a 	mov	r7,r5
 101d0d8:	3807883a 	mov	r3,r7
 101d0dc:	3005883a 	mov	r2,r6
 101d0e0:	f800283a 	ret
 101d0e4:	008004c4 	movi	r2,19
 101d0e8:	193ffb04 	addi	r4,r3,-20
 101d0ec:	10c00c0e 	bge	r2,r3,101d120 <__ulp+0x68>
 101d0f0:	008007c4 	movi	r2,31
 101d0f4:	1107c83a 	sub	r3,r2,r4
 101d0f8:	00800784 	movi	r2,30
 101d0fc:	01400044 	movi	r5,1
 101d100:	11000216 	blt	r2,r4,101d10c <__ulp+0x54>
 101d104:	00800044 	movi	r2,1
 101d108:	10ca983a 	sll	r5,r2,r3
 101d10c:	000f883a 	mov	r7,zero
 101d110:	280d883a 	mov	r6,r5
 101d114:	3807883a 	mov	r3,r7
 101d118:	3005883a 	mov	r2,r6
 101d11c:	f800283a 	ret
 101d120:	00800234 	movhi	r2,8
 101d124:	10cfd83a 	sra	r7,r2,r3
 101d128:	000d883a 	mov	r6,zero
 101d12c:	3005883a 	mov	r2,r6
 101d130:	3807883a 	mov	r3,r7
 101d134:	f800283a 	ret

0101d138 <__b2d>:
 101d138:	20800417 	ldw	r2,16(r4)
 101d13c:	defff904 	addi	sp,sp,-28
 101d140:	dd000415 	stw	r20,16(sp)
 101d144:	1085883a 	add	r2,r2,r2
 101d148:	25000504 	addi	r20,r4,20
 101d14c:	1085883a 	add	r2,r2,r2
 101d150:	dc000015 	stw	r16,0(sp)
 101d154:	a0a1883a 	add	r16,r20,r2
 101d158:	dd400515 	stw	r21,20(sp)
 101d15c:	857fff17 	ldw	r21,-4(r16)
 101d160:	dc400115 	stw	r17,4(sp)
 101d164:	dfc00615 	stw	ra,24(sp)
 101d168:	a809883a 	mov	r4,r21
 101d16c:	2823883a 	mov	r17,r5
 101d170:	dcc00315 	stw	r19,12(sp)
 101d174:	dc800215 	stw	r18,8(sp)
 101d178:	101cf240 	call	101cf24 <__hi0bits>
 101d17c:	100b883a 	mov	r5,r2
 101d180:	00800804 	movi	r2,32
 101d184:	1145c83a 	sub	r2,r2,r5
 101d188:	88800015 	stw	r2,0(r17)
 101d18c:	00800284 	movi	r2,10
 101d190:	80ffff04 	addi	r3,r16,-4
 101d194:	11401416 	blt	r2,r5,101d1e8 <__b2d+0xb0>
 101d198:	008002c4 	movi	r2,11
 101d19c:	1149c83a 	sub	r4,r2,r5
 101d1a0:	a0c02736 	bltu	r20,r3,101d240 <__b2d+0x108>
 101d1a4:	000d883a 	mov	r6,zero
 101d1a8:	28800544 	addi	r2,r5,21
 101d1ac:	a906d83a 	srl	r3,r21,r4
 101d1b0:	a884983a 	sll	r2,r21,r2
 101d1b4:	1ccffc34 	orhi	r19,r3,16368
 101d1b8:	11a4b03a 	or	r18,r2,r6
 101d1bc:	9005883a 	mov	r2,r18
 101d1c0:	9807883a 	mov	r3,r19
 101d1c4:	dfc00617 	ldw	ra,24(sp)
 101d1c8:	dd400517 	ldw	r21,20(sp)
 101d1cc:	dd000417 	ldw	r20,16(sp)
 101d1d0:	dcc00317 	ldw	r19,12(sp)
 101d1d4:	dc800217 	ldw	r18,8(sp)
 101d1d8:	dc400117 	ldw	r17,4(sp)
 101d1dc:	dc000017 	ldw	r16,0(sp)
 101d1e0:	dec00704 	addi	sp,sp,28
 101d1e4:	f800283a 	ret
 101d1e8:	a0c00e36 	bltu	r20,r3,101d224 <__b2d+0xec>
 101d1ec:	293ffd44 	addi	r4,r5,-11
 101d1f0:	000d883a 	mov	r6,zero
 101d1f4:	20000f26 	beq	r4,zero,101d234 <__b2d+0xfc>
 101d1f8:	00800804 	movi	r2,32
 101d1fc:	110bc83a 	sub	r5,r2,r4
 101d200:	a0c01236 	bltu	r20,r3,101d24c <__b2d+0x114>
 101d204:	000f883a 	mov	r7,zero
 101d208:	a904983a 	sll	r2,r21,r4
 101d20c:	3146d83a 	srl	r3,r6,r5
 101d210:	3108983a 	sll	r4,r6,r4
 101d214:	108ffc34 	orhi	r2,r2,16368
 101d218:	18a6b03a 	or	r19,r3,r2
 101d21c:	3924b03a 	or	r18,r7,r4
 101d220:	003fe606 	br	101d1bc <__b2d+0x84>
 101d224:	293ffd44 	addi	r4,r5,-11
 101d228:	81bffe17 	ldw	r6,-8(r16)
 101d22c:	80fffe04 	addi	r3,r16,-8
 101d230:	203ff11e 	bne	r4,zero,101d1f8 <__b2d+0xc0>
 101d234:	accffc34 	orhi	r19,r21,16368
 101d238:	3025883a 	mov	r18,r6
 101d23c:	003fdf06 	br	101d1bc <__b2d+0x84>
 101d240:	18bfff17 	ldw	r2,-4(r3)
 101d244:	110cd83a 	srl	r6,r2,r4
 101d248:	003fd706 	br	101d1a8 <__b2d+0x70>
 101d24c:	18bfff17 	ldw	r2,-4(r3)
 101d250:	114ed83a 	srl	r7,r2,r5
 101d254:	003fec06 	br	101d208 <__b2d+0xd0>

0101d258 <__ratio>:
 101d258:	defff904 	addi	sp,sp,-28
 101d25c:	dc400215 	stw	r17,8(sp)
 101d260:	2823883a 	mov	r17,r5
 101d264:	d80b883a 	mov	r5,sp
 101d268:	dfc00615 	stw	ra,24(sp)
 101d26c:	dd000515 	stw	r20,20(sp)
 101d270:	dcc00415 	stw	r19,16(sp)
 101d274:	dc800315 	stw	r18,12(sp)
 101d278:	2025883a 	mov	r18,r4
 101d27c:	101d1380 	call	101d138 <__b2d>
 101d280:	8809883a 	mov	r4,r17
 101d284:	d9400104 	addi	r5,sp,4
 101d288:	1027883a 	mov	r19,r2
 101d28c:	1829883a 	mov	r20,r3
 101d290:	101d1380 	call	101d138 <__b2d>
 101d294:	89000417 	ldw	r4,16(r17)
 101d298:	91c00417 	ldw	r7,16(r18)
 101d29c:	d9800117 	ldw	r6,4(sp)
 101d2a0:	180b883a 	mov	r5,r3
 101d2a4:	390fc83a 	sub	r7,r7,r4
 101d2a8:	1009883a 	mov	r4,r2
 101d2ac:	d8800017 	ldw	r2,0(sp)
 101d2b0:	380e917a 	slli	r7,r7,5
 101d2b4:	2011883a 	mov	r8,r4
 101d2b8:	1185c83a 	sub	r2,r2,r6
 101d2bc:	11c5883a 	add	r2,r2,r7
 101d2c0:	1006953a 	slli	r3,r2,20
 101d2c4:	2813883a 	mov	r9,r5
 101d2c8:	00800d0e 	bge	zero,r2,101d300 <__ratio+0xa8>
 101d2cc:	1d29883a 	add	r20,r3,r20
 101d2d0:	a00b883a 	mov	r5,r20
 101d2d4:	480f883a 	mov	r7,r9
 101d2d8:	9809883a 	mov	r4,r19
 101d2dc:	400d883a 	mov	r6,r8
 101d2e0:	1012e580 	call	1012e58 <__divdf3>
 101d2e4:	dfc00617 	ldw	ra,24(sp)
 101d2e8:	dd000517 	ldw	r20,20(sp)
 101d2ec:	dcc00417 	ldw	r19,16(sp)
 101d2f0:	dc800317 	ldw	r18,12(sp)
 101d2f4:	dc400217 	ldw	r17,8(sp)
 101d2f8:	dec00704 	addi	sp,sp,28
 101d2fc:	f800283a 	ret
 101d300:	28d3c83a 	sub	r9,r5,r3
 101d304:	003ff206 	br	101d2d0 <__ratio+0x78>

0101d308 <_mprec_log10>:
 101d308:	defffe04 	addi	sp,sp,-8
 101d30c:	008005c4 	movi	r2,23
 101d310:	dc000015 	stw	r16,0(sp)
 101d314:	dfc00115 	stw	ra,4(sp)
 101d318:	2021883a 	mov	r16,r4
 101d31c:	11000c16 	blt	r2,r4,101d350 <_mprec_log10+0x48>
 101d320:	200490fa 	slli	r2,r4,3
 101d324:	00c040f4 	movhi	r3,259
 101d328:	18d48304 	addi	r3,r3,21004
 101d32c:	10c5883a 	add	r2,r2,r3
 101d330:	12400117 	ldw	r9,4(r2)
 101d334:	12000017 	ldw	r8,0(r2)
 101d338:	4807883a 	mov	r3,r9
 101d33c:	4005883a 	mov	r2,r8
 101d340:	dfc00117 	ldw	ra,4(sp)
 101d344:	dc000017 	ldw	r16,0(sp)
 101d348:	dec00204 	addi	sp,sp,8
 101d34c:	f800283a 	ret
 101d350:	0011883a 	mov	r8,zero
 101d354:	024ffc34 	movhi	r9,16368
 101d358:	0005883a 	mov	r2,zero
 101d35c:	00d00934 	movhi	r3,16420
 101d360:	480b883a 	mov	r5,r9
 101d364:	4009883a 	mov	r4,r8
 101d368:	180f883a 	mov	r7,r3
 101d36c:	100d883a 	mov	r6,r2
 101d370:	1012a940 	call	1012a94 <__muldf3>
 101d374:	843fffc4 	addi	r16,r16,-1
 101d378:	1011883a 	mov	r8,r2
 101d37c:	1813883a 	mov	r9,r3
 101d380:	803ff51e 	bne	r16,zero,101d358 <_mprec_log10+0x50>
 101d384:	4005883a 	mov	r2,r8
 101d388:	4807883a 	mov	r3,r9
 101d38c:	dfc00117 	ldw	ra,4(sp)
 101d390:	dc000017 	ldw	r16,0(sp)
 101d394:	dec00204 	addi	sp,sp,8
 101d398:	f800283a 	ret

0101d39c <__copybits>:
 101d39c:	297fffc4 	addi	r5,r5,-1
 101d3a0:	30800417 	ldw	r2,16(r6)
 101d3a4:	280bd17a 	srai	r5,r5,5
 101d3a8:	31800504 	addi	r6,r6,20
 101d3ac:	1085883a 	add	r2,r2,r2
 101d3b0:	294b883a 	add	r5,r5,r5
 101d3b4:	294b883a 	add	r5,r5,r5
 101d3b8:	1085883a 	add	r2,r2,r2
 101d3bc:	290b883a 	add	r5,r5,r4
 101d3c0:	3087883a 	add	r3,r6,r2
 101d3c4:	29400104 	addi	r5,r5,4
 101d3c8:	30c0052e 	bgeu	r6,r3,101d3e0 <__copybits+0x44>
 101d3cc:	30800017 	ldw	r2,0(r6)
 101d3d0:	31800104 	addi	r6,r6,4
 101d3d4:	20800015 	stw	r2,0(r4)
 101d3d8:	21000104 	addi	r4,r4,4
 101d3dc:	30fffb36 	bltu	r6,r3,101d3cc <__copybits+0x30>
 101d3e0:	2140032e 	bgeu	r4,r5,101d3f0 <__copybits+0x54>
 101d3e4:	20000015 	stw	zero,0(r4)
 101d3e8:	21000104 	addi	r4,r4,4
 101d3ec:	217ffd36 	bltu	r4,r5,101d3e4 <__copybits+0x48>
 101d3f0:	f800283a 	ret

0101d3f4 <__any_on>:
 101d3f4:	20800417 	ldw	r2,16(r4)
 101d3f8:	2807d17a 	srai	r3,r5,5
 101d3fc:	21000504 	addi	r4,r4,20
 101d400:	10c00d0e 	bge	r2,r3,101d438 <__any_on+0x44>
 101d404:	1085883a 	add	r2,r2,r2
 101d408:	1085883a 	add	r2,r2,r2
 101d40c:	208d883a 	add	r6,r4,r2
 101d410:	2180182e 	bgeu	r4,r6,101d474 <__any_on+0x80>
 101d414:	30bfff17 	ldw	r2,-4(r6)
 101d418:	30ffff04 	addi	r3,r6,-4
 101d41c:	1000041e 	bne	r2,zero,101d430 <__any_on+0x3c>
 101d420:	20c0142e 	bgeu	r4,r3,101d474 <__any_on+0x80>
 101d424:	18ffff04 	addi	r3,r3,-4
 101d428:	18800017 	ldw	r2,0(r3)
 101d42c:	103ffc26 	beq	r2,zero,101d420 <__any_on+0x2c>
 101d430:	00800044 	movi	r2,1
 101d434:	f800283a 	ret
 101d438:	18800a0e 	bge	r3,r2,101d464 <__any_on+0x70>
 101d43c:	294007cc 	andi	r5,r5,31
 101d440:	28000826 	beq	r5,zero,101d464 <__any_on+0x70>
 101d444:	18c5883a 	add	r2,r3,r3
 101d448:	1085883a 	add	r2,r2,r2
 101d44c:	208d883a 	add	r6,r4,r2
 101d450:	30c00017 	ldw	r3,0(r6)
 101d454:	1944d83a 	srl	r2,r3,r5
 101d458:	1144983a 	sll	r2,r2,r5
 101d45c:	18bff41e 	bne	r3,r2,101d430 <__any_on+0x3c>
 101d460:	003feb06 	br	101d410 <__any_on+0x1c>
 101d464:	18c5883a 	add	r2,r3,r3
 101d468:	1085883a 	add	r2,r2,r2
 101d46c:	208d883a 	add	r6,r4,r2
 101d470:	003fe706 	br	101d410 <__any_on+0x1c>
 101d474:	0005883a 	mov	r2,zero
 101d478:	f800283a 	ret

0101d47c <_Balloc>:
 101d47c:	20c01317 	ldw	r3,76(r4)
 101d480:	defffb04 	addi	sp,sp,-20
 101d484:	dcc00315 	stw	r19,12(sp)
 101d488:	dc800215 	stw	r18,8(sp)
 101d48c:	dfc00415 	stw	ra,16(sp)
 101d490:	2825883a 	mov	r18,r5
 101d494:	dc400115 	stw	r17,4(sp)
 101d498:	dc000015 	stw	r16,0(sp)
 101d49c:	2027883a 	mov	r19,r4
 101d4a0:	01800404 	movi	r6,16
 101d4a4:	01400104 	movi	r5,4
 101d4a8:	18001726 	beq	r3,zero,101d508 <_Balloc+0x8c>
 101d4ac:	01400044 	movi	r5,1
 101d4b0:	9485883a 	add	r2,r18,r18
 101d4b4:	2ca2983a 	sll	r17,r5,r18
 101d4b8:	1085883a 	add	r2,r2,r2
 101d4bc:	10c7883a 	add	r3,r2,r3
 101d4c0:	1c000017 	ldw	r16,0(r3)
 101d4c4:	8c4d883a 	add	r6,r17,r17
 101d4c8:	318d883a 	add	r6,r6,r6
 101d4cc:	9809883a 	mov	r4,r19
 101d4d0:	31800504 	addi	r6,r6,20
 101d4d4:	80001226 	beq	r16,zero,101d520 <_Balloc+0xa4>
 101d4d8:	80800017 	ldw	r2,0(r16)
 101d4dc:	18800015 	stw	r2,0(r3)
 101d4e0:	80000415 	stw	zero,16(r16)
 101d4e4:	80000315 	stw	zero,12(r16)
 101d4e8:	8005883a 	mov	r2,r16
 101d4ec:	dfc00417 	ldw	ra,16(sp)
 101d4f0:	dcc00317 	ldw	r19,12(sp)
 101d4f4:	dc800217 	ldw	r18,8(sp)
 101d4f8:	dc400117 	ldw	r17,4(sp)
 101d4fc:	dc000017 	ldw	r16,0(sp)
 101d500:	dec00504 	addi	sp,sp,20
 101d504:	f800283a 	ret
 101d508:	101fd440 	call	101fd44 <_calloc_r>
 101d50c:	1007883a 	mov	r3,r2
 101d510:	0021883a 	mov	r16,zero
 101d514:	98801315 	stw	r2,76(r19)
 101d518:	103fe41e 	bne	r2,zero,101d4ac <_Balloc+0x30>
 101d51c:	003ff206 	br	101d4e8 <_Balloc+0x6c>
 101d520:	101fd440 	call	101fd44 <_calloc_r>
 101d524:	103ff026 	beq	r2,zero,101d4e8 <_Balloc+0x6c>
 101d528:	1021883a 	mov	r16,r2
 101d52c:	14800115 	stw	r18,4(r2)
 101d530:	14400215 	stw	r17,8(r2)
 101d534:	003fea06 	br	101d4e0 <_Balloc+0x64>

0101d538 <__d2b>:
 101d538:	defff504 	addi	sp,sp,-44
 101d53c:	dcc00515 	stw	r19,20(sp)
 101d540:	04c00044 	movi	r19,1
 101d544:	dc000215 	stw	r16,8(sp)
 101d548:	2821883a 	mov	r16,r5
 101d54c:	980b883a 	mov	r5,r19
 101d550:	ddc00915 	stw	r23,36(sp)
 101d554:	dd800815 	stw	r22,32(sp)
 101d558:	dd400715 	stw	r21,28(sp)
 101d55c:	dd000615 	stw	r20,24(sp)
 101d560:	dc800415 	stw	r18,16(sp)
 101d564:	dc400315 	stw	r17,12(sp)
 101d568:	dfc00a15 	stw	ra,40(sp)
 101d56c:	3023883a 	mov	r17,r6
 101d570:	382d883a 	mov	r22,r7
 101d574:	ddc00b17 	ldw	r23,44(sp)
 101d578:	101d47c0 	call	101d47c <_Balloc>
 101d57c:	1025883a 	mov	r18,r2
 101d580:	00a00034 	movhi	r2,32768
 101d584:	10bfffc4 	addi	r2,r2,-1
 101d588:	8888703a 	and	r4,r17,r2
 101d58c:	202ad53a 	srli	r21,r4,20
 101d590:	00800434 	movhi	r2,16
 101d594:	10bfffc4 	addi	r2,r2,-1
 101d598:	8886703a 	and	r3,r17,r2
 101d59c:	a829003a 	cmpeq	r20,r21,zero
 101d5a0:	800b883a 	mov	r5,r16
 101d5a4:	d8c00115 	stw	r3,4(sp)
 101d5a8:	94000504 	addi	r16,r18,20
 101d5ac:	a000021e 	bne	r20,zero,101d5b8 <__d2b+0x80>
 101d5b0:	18c00434 	orhi	r3,r3,16
 101d5b4:	d8c00115 	stw	r3,4(sp)
 101d5b8:	28002726 	beq	r5,zero,101d658 <__d2b+0x120>
 101d5bc:	d809883a 	mov	r4,sp
 101d5c0:	d9400015 	stw	r5,0(sp)
 101d5c4:	101cf940 	call	101cf94 <__lo0bits>
 101d5c8:	100d883a 	mov	r6,r2
 101d5cc:	10003526 	beq	r2,zero,101d6a4 <__d2b+0x16c>
 101d5d0:	d8c00117 	ldw	r3,4(sp)
 101d5d4:	00800804 	movi	r2,32
 101d5d8:	1185c83a 	sub	r2,r2,r6
 101d5dc:	d9000017 	ldw	r4,0(sp)
 101d5e0:	1886983a 	sll	r3,r3,r2
 101d5e4:	1906b03a 	or	r3,r3,r4
 101d5e8:	90c00515 	stw	r3,20(r18)
 101d5ec:	d8c00117 	ldw	r3,4(sp)
 101d5f0:	1986d83a 	srl	r3,r3,r6
 101d5f4:	d8c00115 	stw	r3,4(sp)
 101d5f8:	180b003a 	cmpeq	r5,r3,zero
 101d5fc:	00800084 	movi	r2,2
 101d600:	114bc83a 	sub	r5,r2,r5
 101d604:	80c00115 	stw	r3,4(r16)
 101d608:	91400415 	stw	r5,16(r18)
 101d60c:	a0001a1e 	bne	r20,zero,101d678 <__d2b+0x140>
 101d610:	3545883a 	add	r2,r6,r21
 101d614:	10bef344 	addi	r2,r2,-1075
 101d618:	00c00d44 	movi	r3,53
 101d61c:	b0800015 	stw	r2,0(r22)
 101d620:	1987c83a 	sub	r3,r3,r6
 101d624:	b8c00015 	stw	r3,0(r23)
 101d628:	9005883a 	mov	r2,r18
 101d62c:	dfc00a17 	ldw	ra,40(sp)
 101d630:	ddc00917 	ldw	r23,36(sp)
 101d634:	dd800817 	ldw	r22,32(sp)
 101d638:	dd400717 	ldw	r21,28(sp)
 101d63c:	dd000617 	ldw	r20,24(sp)
 101d640:	dcc00517 	ldw	r19,20(sp)
 101d644:	dc800417 	ldw	r18,16(sp)
 101d648:	dc400317 	ldw	r17,12(sp)
 101d64c:	dc000217 	ldw	r16,8(sp)
 101d650:	dec00b04 	addi	sp,sp,44
 101d654:	f800283a 	ret
 101d658:	d9000104 	addi	r4,sp,4
 101d65c:	101cf940 	call	101cf94 <__lo0bits>
 101d660:	11800804 	addi	r6,r2,32
 101d664:	d8800117 	ldw	r2,4(sp)
 101d668:	94c00415 	stw	r19,16(r18)
 101d66c:	980b883a 	mov	r5,r19
 101d670:	90800515 	stw	r2,20(r18)
 101d674:	a03fe626 	beq	r20,zero,101d610 <__d2b+0xd8>
 101d678:	2945883a 	add	r2,r5,r5
 101d67c:	1085883a 	add	r2,r2,r2
 101d680:	1405883a 	add	r2,r2,r16
 101d684:	113fff17 	ldw	r4,-4(r2)
 101d688:	30fef384 	addi	r3,r6,-1074
 101d68c:	2820917a 	slli	r16,r5,5
 101d690:	b0c00015 	stw	r3,0(r22)
 101d694:	101cf240 	call	101cf24 <__hi0bits>
 101d698:	80a1c83a 	sub	r16,r16,r2
 101d69c:	bc000015 	stw	r16,0(r23)
 101d6a0:	003fe106 	br	101d628 <__d2b+0xf0>
 101d6a4:	d8800017 	ldw	r2,0(sp)
 101d6a8:	90800515 	stw	r2,20(r18)
 101d6ac:	d8c00117 	ldw	r3,4(sp)
 101d6b0:	003fd106 	br	101d5f8 <__d2b+0xc0>

0101d6b4 <__mdiff>:
 101d6b4:	defffb04 	addi	sp,sp,-20
 101d6b8:	dc000015 	stw	r16,0(sp)
 101d6bc:	2821883a 	mov	r16,r5
 101d6c0:	dc800215 	stw	r18,8(sp)
 101d6c4:	300b883a 	mov	r5,r6
 101d6c8:	2025883a 	mov	r18,r4
 101d6cc:	8009883a 	mov	r4,r16
 101d6d0:	dc400115 	stw	r17,4(sp)
 101d6d4:	dfc00415 	stw	ra,16(sp)
 101d6d8:	dcc00315 	stw	r19,12(sp)
 101d6dc:	3023883a 	mov	r17,r6
 101d6e0:	101d0580 	call	101d058 <__mcmp>
 101d6e4:	10004226 	beq	r2,zero,101d7f0 <__mdiff+0x13c>
 101d6e8:	10005016 	blt	r2,zero,101d82c <__mdiff+0x178>
 101d6ec:	0027883a 	mov	r19,zero
 101d6f0:	81400117 	ldw	r5,4(r16)
 101d6f4:	9009883a 	mov	r4,r18
 101d6f8:	101d47c0 	call	101d47c <_Balloc>
 101d6fc:	1019883a 	mov	r12,r2
 101d700:	82800417 	ldw	r10,16(r16)
 101d704:	88800417 	ldw	r2,16(r17)
 101d708:	81800504 	addi	r6,r16,20
 101d70c:	5287883a 	add	r3,r10,r10
 101d710:	1085883a 	add	r2,r2,r2
 101d714:	18c7883a 	add	r3,r3,r3
 101d718:	1085883a 	add	r2,r2,r2
 101d71c:	8a000504 	addi	r8,r17,20
 101d720:	64c00315 	stw	r19,12(r12)
 101d724:	30db883a 	add	r13,r6,r3
 101d728:	4097883a 	add	r11,r8,r2
 101d72c:	61c00504 	addi	r7,r12,20
 101d730:	0013883a 	mov	r9,zero
 101d734:	31000017 	ldw	r4,0(r6)
 101d738:	41400017 	ldw	r5,0(r8)
 101d73c:	42000104 	addi	r8,r8,4
 101d740:	20bfffcc 	andi	r2,r4,65535
 101d744:	28ffffcc 	andi	r3,r5,65535
 101d748:	10c5c83a 	sub	r2,r2,r3
 101d74c:	1245883a 	add	r2,r2,r9
 101d750:	2008d43a 	srli	r4,r4,16
 101d754:	280ad43a 	srli	r5,r5,16
 101d758:	1007d43a 	srai	r3,r2,16
 101d75c:	3880000d 	sth	r2,0(r7)
 101d760:	2149c83a 	sub	r4,r4,r5
 101d764:	20c9883a 	add	r4,r4,r3
 101d768:	3900008d 	sth	r4,2(r7)
 101d76c:	31800104 	addi	r6,r6,4
 101d770:	39c00104 	addi	r7,r7,4
 101d774:	2013d43a 	srai	r9,r4,16
 101d778:	42ffee36 	bltu	r8,r11,101d734 <__mdiff+0x80>
 101d77c:	33400c2e 	bgeu	r6,r13,101d7b0 <__mdiff+0xfc>
 101d780:	30800017 	ldw	r2,0(r6)
 101d784:	31800104 	addi	r6,r6,4
 101d788:	10ffffcc 	andi	r3,r2,65535
 101d78c:	1a47883a 	add	r3,r3,r9
 101d790:	1004d43a 	srli	r2,r2,16
 101d794:	1809d43a 	srai	r4,r3,16
 101d798:	38c0000d 	sth	r3,0(r7)
 101d79c:	1105883a 	add	r2,r2,r4
 101d7a0:	3880008d 	sth	r2,2(r7)
 101d7a4:	1013d43a 	srai	r9,r2,16
 101d7a8:	39c00104 	addi	r7,r7,4
 101d7ac:	337ff436 	bltu	r6,r13,101d780 <__mdiff+0xcc>
 101d7b0:	38bfff17 	ldw	r2,-4(r7)
 101d7b4:	38ffff04 	addi	r3,r7,-4
 101d7b8:	1000041e 	bne	r2,zero,101d7cc <__mdiff+0x118>
 101d7bc:	18ffff04 	addi	r3,r3,-4
 101d7c0:	18800017 	ldw	r2,0(r3)
 101d7c4:	52bfffc4 	addi	r10,r10,-1
 101d7c8:	103ffc26 	beq	r2,zero,101d7bc <__mdiff+0x108>
 101d7cc:	6005883a 	mov	r2,r12
 101d7d0:	62800415 	stw	r10,16(r12)
 101d7d4:	dfc00417 	ldw	ra,16(sp)
 101d7d8:	dcc00317 	ldw	r19,12(sp)
 101d7dc:	dc800217 	ldw	r18,8(sp)
 101d7e0:	dc400117 	ldw	r17,4(sp)
 101d7e4:	dc000017 	ldw	r16,0(sp)
 101d7e8:	dec00504 	addi	sp,sp,20
 101d7ec:	f800283a 	ret
 101d7f0:	9009883a 	mov	r4,r18
 101d7f4:	000b883a 	mov	r5,zero
 101d7f8:	101d47c0 	call	101d47c <_Balloc>
 101d7fc:	1019883a 	mov	r12,r2
 101d800:	00800044 	movi	r2,1
 101d804:	60800415 	stw	r2,16(r12)
 101d808:	6005883a 	mov	r2,r12
 101d80c:	60000515 	stw	zero,20(r12)
 101d810:	dfc00417 	ldw	ra,16(sp)
 101d814:	dcc00317 	ldw	r19,12(sp)
 101d818:	dc800217 	ldw	r18,8(sp)
 101d81c:	dc400117 	ldw	r17,4(sp)
 101d820:	dc000017 	ldw	r16,0(sp)
 101d824:	dec00504 	addi	sp,sp,20
 101d828:	f800283a 	ret
 101d82c:	880d883a 	mov	r6,r17
 101d830:	04c00044 	movi	r19,1
 101d834:	8023883a 	mov	r17,r16
 101d838:	3021883a 	mov	r16,r6
 101d83c:	003fac06 	br	101d6f0 <__mdiff+0x3c>

0101d840 <__lshift>:
 101d840:	defff904 	addi	sp,sp,-28
 101d844:	28800417 	ldw	r2,16(r5)
 101d848:	dc000015 	stw	r16,0(sp)
 101d84c:	3021d17a 	srai	r16,r6,5
 101d850:	28c00217 	ldw	r3,8(r5)
 101d854:	10800044 	addi	r2,r2,1
 101d858:	dc400115 	stw	r17,4(sp)
 101d85c:	80a3883a 	add	r17,r16,r2
 101d860:	dd400515 	stw	r21,20(sp)
 101d864:	dd000415 	stw	r20,16(sp)
 101d868:	dc800215 	stw	r18,8(sp)
 101d86c:	dfc00615 	stw	ra,24(sp)
 101d870:	2825883a 	mov	r18,r5
 101d874:	dcc00315 	stw	r19,12(sp)
 101d878:	3029883a 	mov	r20,r6
 101d87c:	202b883a 	mov	r21,r4
 101d880:	29400117 	ldw	r5,4(r5)
 101d884:	1c40030e 	bge	r3,r17,101d894 <__lshift+0x54>
 101d888:	18c7883a 	add	r3,r3,r3
 101d88c:	29400044 	addi	r5,r5,1
 101d890:	1c7ffd16 	blt	r3,r17,101d888 <__lshift+0x48>
 101d894:	a809883a 	mov	r4,r21
 101d898:	101d47c0 	call	101d47c <_Balloc>
 101d89c:	1027883a 	mov	r19,r2
 101d8a0:	11400504 	addi	r5,r2,20
 101d8a4:	0400090e 	bge	zero,r16,101d8cc <__lshift+0x8c>
 101d8a8:	2805883a 	mov	r2,r5
 101d8ac:	0007883a 	mov	r3,zero
 101d8b0:	18c00044 	addi	r3,r3,1
 101d8b4:	10000015 	stw	zero,0(r2)
 101d8b8:	10800104 	addi	r2,r2,4
 101d8bc:	80fffc1e 	bne	r16,r3,101d8b0 <__lshift+0x70>
 101d8c0:	8405883a 	add	r2,r16,r16
 101d8c4:	1085883a 	add	r2,r2,r2
 101d8c8:	288b883a 	add	r5,r5,r2
 101d8cc:	90800417 	ldw	r2,16(r18)
 101d8d0:	91000504 	addi	r4,r18,20
 101d8d4:	a18007cc 	andi	r6,r20,31
 101d8d8:	1085883a 	add	r2,r2,r2
 101d8dc:	1085883a 	add	r2,r2,r2
 101d8e0:	208f883a 	add	r7,r4,r2
 101d8e4:	30001e26 	beq	r6,zero,101d960 <__lshift+0x120>
 101d8e8:	00800804 	movi	r2,32
 101d8ec:	1191c83a 	sub	r8,r2,r6
 101d8f0:	0007883a 	mov	r3,zero
 101d8f4:	20800017 	ldw	r2,0(r4)
 101d8f8:	1184983a 	sll	r2,r2,r6
 101d8fc:	1884b03a 	or	r2,r3,r2
 101d900:	28800015 	stw	r2,0(r5)
 101d904:	20c00017 	ldw	r3,0(r4)
 101d908:	21000104 	addi	r4,r4,4
 101d90c:	29400104 	addi	r5,r5,4
 101d910:	1a06d83a 	srl	r3,r3,r8
 101d914:	21fff736 	bltu	r4,r7,101d8f4 <__lshift+0xb4>
 101d918:	28c00015 	stw	r3,0(r5)
 101d91c:	18000126 	beq	r3,zero,101d924 <__lshift+0xe4>
 101d920:	8c400044 	addi	r17,r17,1
 101d924:	88bfffc4 	addi	r2,r17,-1
 101d928:	98800415 	stw	r2,16(r19)
 101d92c:	a809883a 	mov	r4,r21
 101d930:	900b883a 	mov	r5,r18
 101d934:	101cefc0 	call	101cefc <_Bfree>
 101d938:	9805883a 	mov	r2,r19
 101d93c:	dfc00617 	ldw	ra,24(sp)
 101d940:	dd400517 	ldw	r21,20(sp)
 101d944:	dd000417 	ldw	r20,16(sp)
 101d948:	dcc00317 	ldw	r19,12(sp)
 101d94c:	dc800217 	ldw	r18,8(sp)
 101d950:	dc400117 	ldw	r17,4(sp)
 101d954:	dc000017 	ldw	r16,0(sp)
 101d958:	dec00704 	addi	sp,sp,28
 101d95c:	f800283a 	ret
 101d960:	20800017 	ldw	r2,0(r4)
 101d964:	21000104 	addi	r4,r4,4
 101d968:	28800015 	stw	r2,0(r5)
 101d96c:	29400104 	addi	r5,r5,4
 101d970:	21ffec2e 	bgeu	r4,r7,101d924 <__lshift+0xe4>
 101d974:	20800017 	ldw	r2,0(r4)
 101d978:	21000104 	addi	r4,r4,4
 101d97c:	28800015 	stw	r2,0(r5)
 101d980:	29400104 	addi	r5,r5,4
 101d984:	21fff636 	bltu	r4,r7,101d960 <__lshift+0x120>
 101d988:	003fe606 	br	101d924 <__lshift+0xe4>

0101d98c <__multiply>:
 101d98c:	defff904 	addi	sp,sp,-28
 101d990:	dcc00315 	stw	r19,12(sp)
 101d994:	dc800215 	stw	r18,8(sp)
 101d998:	2cc00417 	ldw	r19,16(r5)
 101d99c:	34800417 	ldw	r18,16(r6)
 101d9a0:	dd000415 	stw	r20,16(sp)
 101d9a4:	dc400115 	stw	r17,4(sp)
 101d9a8:	dfc00615 	stw	ra,24(sp)
 101d9ac:	dd400515 	stw	r21,20(sp)
 101d9b0:	dc000015 	stw	r16,0(sp)
 101d9b4:	2823883a 	mov	r17,r5
 101d9b8:	3029883a 	mov	r20,r6
 101d9bc:	9c80040e 	bge	r19,r18,101d9d0 <__multiply+0x44>
 101d9c0:	9027883a 	mov	r19,r18
 101d9c4:	2c800417 	ldw	r18,16(r5)
 101d9c8:	2829883a 	mov	r20,r5
 101d9cc:	3023883a 	mov	r17,r6
 101d9d0:	88800217 	ldw	r2,8(r17)
 101d9d4:	9ca1883a 	add	r16,r19,r18
 101d9d8:	89400117 	ldw	r5,4(r17)
 101d9dc:	1400010e 	bge	r2,r16,101d9e4 <__multiply+0x58>
 101d9e0:	29400044 	addi	r5,r5,1
 101d9e4:	101d47c0 	call	101d47c <_Balloc>
 101d9e8:	102b883a 	mov	r21,r2
 101d9ec:	8405883a 	add	r2,r16,r16
 101d9f0:	1085883a 	add	r2,r2,r2
 101d9f4:	a9000504 	addi	r4,r21,20
 101d9f8:	209d883a 	add	r14,r4,r2
 101d9fc:	2380042e 	bgeu	r4,r14,101da10 <__multiply+0x84>
 101da00:	2005883a 	mov	r2,r4
 101da04:	10000015 	stw	zero,0(r2)
 101da08:	10800104 	addi	r2,r2,4
 101da0c:	13bffd36 	bltu	r2,r14,101da04 <__multiply+0x78>
 101da10:	9485883a 	add	r2,r18,r18
 101da14:	9cc7883a 	add	r3,r19,r19
 101da18:	a1800504 	addi	r6,r20,20
 101da1c:	1085883a 	add	r2,r2,r2
 101da20:	8b400504 	addi	r13,r17,20
 101da24:	18c7883a 	add	r3,r3,r3
 101da28:	309f883a 	add	r15,r6,r2
 101da2c:	68d7883a 	add	r11,r13,r3
 101da30:	33c03b2e 	bgeu	r6,r15,101db20 <__multiply+0x194>
 101da34:	2019883a 	mov	r12,r4
 101da38:	30800017 	ldw	r2,0(r6)
 101da3c:	127fffcc 	andi	r9,r2,65535
 101da40:	48001826 	beq	r9,zero,101daa4 <__multiply+0x118>
 101da44:	6811883a 	mov	r8,r13
 101da48:	600f883a 	mov	r7,r12
 101da4c:	0015883a 	mov	r10,zero
 101da50:	40c00017 	ldw	r3,0(r8)
 101da54:	39400017 	ldw	r5,0(r7)
 101da58:	42000104 	addi	r8,r8,4
 101da5c:	193fffcc 	andi	r4,r3,65535
 101da60:	4909383a 	mul	r4,r9,r4
 101da64:	1806d43a 	srli	r3,r3,16
 101da68:	28bfffcc 	andi	r2,r5,65535
 101da6c:	5085883a 	add	r2,r10,r2
 101da70:	2089883a 	add	r4,r4,r2
 101da74:	48c7383a 	mul	r3,r9,r3
 101da78:	280ad43a 	srli	r5,r5,16
 101da7c:	2004d43a 	srli	r2,r4,16
 101da80:	3900000d 	sth	r4,0(r7)
 101da84:	1947883a 	add	r3,r3,r5
 101da88:	10c5883a 	add	r2,r2,r3
 101da8c:	3880008d 	sth	r2,2(r7)
 101da90:	1014d43a 	srli	r10,r2,16
 101da94:	39c00104 	addi	r7,r7,4
 101da98:	42ffed36 	bltu	r8,r11,101da50 <__multiply+0xc4>
 101da9c:	3a800015 	stw	r10,0(r7)
 101daa0:	30800017 	ldw	r2,0(r6)
 101daa4:	1012d43a 	srli	r9,r2,16
 101daa8:	48001926 	beq	r9,zero,101db10 <__multiply+0x184>
 101daac:	60800017 	ldw	r2,0(r12)
 101dab0:	6811883a 	mov	r8,r13
 101dab4:	600f883a 	mov	r7,r12
 101dab8:	0015883a 	mov	r10,zero
 101dabc:	100b883a 	mov	r5,r2
 101dac0:	41000017 	ldw	r4,0(r8)
 101dac4:	2806d43a 	srli	r3,r5,16
 101dac8:	3880000d 	sth	r2,0(r7)
 101dacc:	20bfffcc 	andi	r2,r4,65535
 101dad0:	4885383a 	mul	r2,r9,r2
 101dad4:	50c7883a 	add	r3,r10,r3
 101dad8:	2008d43a 	srli	r4,r4,16
 101dadc:	10c5883a 	add	r2,r2,r3
 101dae0:	3880008d 	sth	r2,2(r7)
 101dae4:	39c00104 	addi	r7,r7,4
 101dae8:	39400017 	ldw	r5,0(r7)
 101daec:	4909383a 	mul	r4,r9,r4
 101daf0:	1004d43a 	srli	r2,r2,16
 101daf4:	28ffffcc 	andi	r3,r5,65535
 101daf8:	20c9883a 	add	r4,r4,r3
 101dafc:	1105883a 	add	r2,r2,r4
 101db00:	42000104 	addi	r8,r8,4
 101db04:	1014d43a 	srli	r10,r2,16
 101db08:	42ffed36 	bltu	r8,r11,101dac0 <__multiply+0x134>
 101db0c:	38800015 	stw	r2,0(r7)
 101db10:	31800104 	addi	r6,r6,4
 101db14:	33c0022e 	bgeu	r6,r15,101db20 <__multiply+0x194>
 101db18:	63000104 	addi	r12,r12,4
 101db1c:	003fc606 	br	101da38 <__multiply+0xac>
 101db20:	0400090e 	bge	zero,r16,101db48 <__multiply+0x1bc>
 101db24:	70bfff17 	ldw	r2,-4(r14)
 101db28:	70ffff04 	addi	r3,r14,-4
 101db2c:	10000326 	beq	r2,zero,101db3c <__multiply+0x1b0>
 101db30:	00000506 	br	101db48 <__multiply+0x1bc>
 101db34:	18800017 	ldw	r2,0(r3)
 101db38:	1000031e 	bne	r2,zero,101db48 <__multiply+0x1bc>
 101db3c:	843fffc4 	addi	r16,r16,-1
 101db40:	18ffff04 	addi	r3,r3,-4
 101db44:	803ffb1e 	bne	r16,zero,101db34 <__multiply+0x1a8>
 101db48:	a805883a 	mov	r2,r21
 101db4c:	ac000415 	stw	r16,16(r21)
 101db50:	dfc00617 	ldw	ra,24(sp)
 101db54:	dd400517 	ldw	r21,20(sp)
 101db58:	dd000417 	ldw	r20,16(sp)
 101db5c:	dcc00317 	ldw	r19,12(sp)
 101db60:	dc800217 	ldw	r18,8(sp)
 101db64:	dc400117 	ldw	r17,4(sp)
 101db68:	dc000017 	ldw	r16,0(sp)
 101db6c:	dec00704 	addi	sp,sp,28
 101db70:	f800283a 	ret

0101db74 <__i2b>:
 101db74:	defffd04 	addi	sp,sp,-12
 101db78:	dc000015 	stw	r16,0(sp)
 101db7c:	04000044 	movi	r16,1
 101db80:	dc800115 	stw	r18,4(sp)
 101db84:	2825883a 	mov	r18,r5
 101db88:	800b883a 	mov	r5,r16
 101db8c:	dfc00215 	stw	ra,8(sp)
 101db90:	101d47c0 	call	101d47c <_Balloc>
 101db94:	14000415 	stw	r16,16(r2)
 101db98:	14800515 	stw	r18,20(r2)
 101db9c:	dfc00217 	ldw	ra,8(sp)
 101dba0:	dc800117 	ldw	r18,4(sp)
 101dba4:	dc000017 	ldw	r16,0(sp)
 101dba8:	dec00304 	addi	sp,sp,12
 101dbac:	f800283a 	ret

0101dbb0 <__multadd>:
 101dbb0:	defffa04 	addi	sp,sp,-24
 101dbb4:	dc800215 	stw	r18,8(sp)
 101dbb8:	2c800417 	ldw	r18,16(r5)
 101dbbc:	dd000415 	stw	r20,16(sp)
 101dbc0:	dcc00315 	stw	r19,12(sp)
 101dbc4:	dc000015 	stw	r16,0(sp)
 101dbc8:	dfc00515 	stw	ra,20(sp)
 101dbcc:	3821883a 	mov	r16,r7
 101dbd0:	dc400115 	stw	r17,4(sp)
 101dbd4:	2827883a 	mov	r19,r5
 101dbd8:	2029883a 	mov	r20,r4
 101dbdc:	2a000504 	addi	r8,r5,20
 101dbe0:	000f883a 	mov	r7,zero
 101dbe4:	40800017 	ldw	r2,0(r8)
 101dbe8:	39c00044 	addi	r7,r7,1
 101dbec:	10ffffcc 	andi	r3,r2,65535
 101dbf0:	1987383a 	mul	r3,r3,r6
 101dbf4:	1004d43a 	srli	r2,r2,16
 101dbf8:	1c07883a 	add	r3,r3,r16
 101dbfc:	180ad43a 	srli	r5,r3,16
 101dc00:	1185383a 	mul	r2,r2,r6
 101dc04:	18ffffcc 	andi	r3,r3,65535
 101dc08:	1145883a 	add	r2,r2,r5
 101dc0c:	1008943a 	slli	r4,r2,16
 101dc10:	1020d43a 	srli	r16,r2,16
 101dc14:	20c9883a 	add	r4,r4,r3
 101dc18:	41000015 	stw	r4,0(r8)
 101dc1c:	42000104 	addi	r8,r8,4
 101dc20:	3cbff016 	blt	r7,r18,101dbe4 <__multadd+0x34>
 101dc24:	80000826 	beq	r16,zero,101dc48 <__multadd+0x98>
 101dc28:	98800217 	ldw	r2,8(r19)
 101dc2c:	90800f0e 	bge	r18,r2,101dc6c <__multadd+0xbc>
 101dc30:	9485883a 	add	r2,r18,r18
 101dc34:	1085883a 	add	r2,r2,r2
 101dc38:	14c5883a 	add	r2,r2,r19
 101dc3c:	90c00044 	addi	r3,r18,1
 101dc40:	14000515 	stw	r16,20(r2)
 101dc44:	98c00415 	stw	r3,16(r19)
 101dc48:	9805883a 	mov	r2,r19
 101dc4c:	dfc00517 	ldw	ra,20(sp)
 101dc50:	dd000417 	ldw	r20,16(sp)
 101dc54:	dcc00317 	ldw	r19,12(sp)
 101dc58:	dc800217 	ldw	r18,8(sp)
 101dc5c:	dc400117 	ldw	r17,4(sp)
 101dc60:	dc000017 	ldw	r16,0(sp)
 101dc64:	dec00604 	addi	sp,sp,24
 101dc68:	f800283a 	ret
 101dc6c:	99400117 	ldw	r5,4(r19)
 101dc70:	a009883a 	mov	r4,r20
 101dc74:	29400044 	addi	r5,r5,1
 101dc78:	101d47c0 	call	101d47c <_Balloc>
 101dc7c:	99800417 	ldw	r6,16(r19)
 101dc80:	99400304 	addi	r5,r19,12
 101dc84:	11000304 	addi	r4,r2,12
 101dc88:	318d883a 	add	r6,r6,r6
 101dc8c:	318d883a 	add	r6,r6,r6
 101dc90:	31800204 	addi	r6,r6,8
 101dc94:	1023883a 	mov	r17,r2
 101dc98:	10152740 	call	1015274 <memcpy>
 101dc9c:	980b883a 	mov	r5,r19
 101dca0:	a009883a 	mov	r4,r20
 101dca4:	101cefc0 	call	101cefc <_Bfree>
 101dca8:	8827883a 	mov	r19,r17
 101dcac:	003fe006 	br	101dc30 <__multadd+0x80>

0101dcb0 <__pow5mult>:
 101dcb0:	defffa04 	addi	sp,sp,-24
 101dcb4:	308000cc 	andi	r2,r6,3
 101dcb8:	dd000415 	stw	r20,16(sp)
 101dcbc:	dcc00315 	stw	r19,12(sp)
 101dcc0:	dc000015 	stw	r16,0(sp)
 101dcc4:	dfc00515 	stw	ra,20(sp)
 101dcc8:	dc800215 	stw	r18,8(sp)
 101dccc:	dc400115 	stw	r17,4(sp)
 101dcd0:	3021883a 	mov	r16,r6
 101dcd4:	2027883a 	mov	r19,r4
 101dcd8:	2829883a 	mov	r20,r5
 101dcdc:	10002b1e 	bne	r2,zero,101dd8c <__pow5mult+0xdc>
 101dce0:	8025d0ba 	srai	r18,r16,2
 101dce4:	90001b26 	beq	r18,zero,101dd54 <__pow5mult+0xa4>
 101dce8:	9c001217 	ldw	r16,72(r19)
 101dcec:	8000081e 	bne	r16,zero,101dd10 <__pow5mult+0x60>
 101dcf0:	00003006 	br	101ddb4 <__pow5mult+0x104>
 101dcf4:	800b883a 	mov	r5,r16
 101dcf8:	800d883a 	mov	r6,r16
 101dcfc:	9809883a 	mov	r4,r19
 101dd00:	90001426 	beq	r18,zero,101dd54 <__pow5mult+0xa4>
 101dd04:	80800017 	ldw	r2,0(r16)
 101dd08:	10001b26 	beq	r2,zero,101dd78 <__pow5mult+0xc8>
 101dd0c:	1021883a 	mov	r16,r2
 101dd10:	9080004c 	andi	r2,r18,1
 101dd14:	1005003a 	cmpeq	r2,r2,zero
 101dd18:	9025d07a 	srai	r18,r18,1
 101dd1c:	800d883a 	mov	r6,r16
 101dd20:	9809883a 	mov	r4,r19
 101dd24:	a00b883a 	mov	r5,r20
 101dd28:	103ff21e 	bne	r2,zero,101dcf4 <__pow5mult+0x44>
 101dd2c:	101d98c0 	call	101d98c <__multiply>
 101dd30:	a00b883a 	mov	r5,r20
 101dd34:	9809883a 	mov	r4,r19
 101dd38:	1023883a 	mov	r17,r2
 101dd3c:	101cefc0 	call	101cefc <_Bfree>
 101dd40:	8829883a 	mov	r20,r17
 101dd44:	800b883a 	mov	r5,r16
 101dd48:	800d883a 	mov	r6,r16
 101dd4c:	9809883a 	mov	r4,r19
 101dd50:	903fec1e 	bne	r18,zero,101dd04 <__pow5mult+0x54>
 101dd54:	a005883a 	mov	r2,r20
 101dd58:	dfc00517 	ldw	ra,20(sp)
 101dd5c:	dd000417 	ldw	r20,16(sp)
 101dd60:	dcc00317 	ldw	r19,12(sp)
 101dd64:	dc800217 	ldw	r18,8(sp)
 101dd68:	dc400117 	ldw	r17,4(sp)
 101dd6c:	dc000017 	ldw	r16,0(sp)
 101dd70:	dec00604 	addi	sp,sp,24
 101dd74:	f800283a 	ret
 101dd78:	101d98c0 	call	101d98c <__multiply>
 101dd7c:	80800015 	stw	r2,0(r16)
 101dd80:	1021883a 	mov	r16,r2
 101dd84:	10000015 	stw	zero,0(r2)
 101dd88:	003fe106 	br	101dd10 <__pow5mult+0x60>
 101dd8c:	1085883a 	add	r2,r2,r2
 101dd90:	00c040f4 	movhi	r3,259
 101dd94:	18d4c904 	addi	r3,r3,21284
 101dd98:	1085883a 	add	r2,r2,r2
 101dd9c:	10c5883a 	add	r2,r2,r3
 101dda0:	11bfff17 	ldw	r6,-4(r2)
 101dda4:	000f883a 	mov	r7,zero
 101dda8:	101dbb00 	call	101dbb0 <__multadd>
 101ddac:	1029883a 	mov	r20,r2
 101ddb0:	003fcb06 	br	101dce0 <__pow5mult+0x30>
 101ddb4:	9809883a 	mov	r4,r19
 101ddb8:	01409c44 	movi	r5,625
 101ddbc:	101db740 	call	101db74 <__i2b>
 101ddc0:	98801215 	stw	r2,72(r19)
 101ddc4:	1021883a 	mov	r16,r2
 101ddc8:	10000015 	stw	zero,0(r2)
 101ddcc:	003fd006 	br	101dd10 <__pow5mult+0x60>

0101ddd0 <__s2b>:
 101ddd0:	defff904 	addi	sp,sp,-28
 101ddd4:	dcc00315 	stw	r19,12(sp)
 101ddd8:	dc800215 	stw	r18,8(sp)
 101dddc:	2827883a 	mov	r19,r5
 101dde0:	2025883a 	mov	r18,r4
 101dde4:	01400244 	movi	r5,9
 101dde8:	39000204 	addi	r4,r7,8
 101ddec:	dd000415 	stw	r20,16(sp)
 101ddf0:	dc400115 	stw	r17,4(sp)
 101ddf4:	dfc00615 	stw	ra,24(sp)
 101ddf8:	dd400515 	stw	r21,20(sp)
 101ddfc:	dc000015 	stw	r16,0(sp)
 101de00:	3829883a 	mov	r20,r7
 101de04:	3023883a 	mov	r17,r6
 101de08:	10135540 	call	1013554 <__divsi3>
 101de0c:	00c00044 	movi	r3,1
 101de10:	1880350e 	bge	r3,r2,101dee8 <__s2b+0x118>
 101de14:	000b883a 	mov	r5,zero
 101de18:	18c7883a 	add	r3,r3,r3
 101de1c:	29400044 	addi	r5,r5,1
 101de20:	18bffd16 	blt	r3,r2,101de18 <__s2b+0x48>
 101de24:	9009883a 	mov	r4,r18
 101de28:	101d47c0 	call	101d47c <_Balloc>
 101de2c:	1011883a 	mov	r8,r2
 101de30:	d8800717 	ldw	r2,28(sp)
 101de34:	00c00044 	movi	r3,1
 101de38:	01800244 	movi	r6,9
 101de3c:	40800515 	stw	r2,20(r8)
 101de40:	40c00415 	stw	r3,16(r8)
 101de44:	3440260e 	bge	r6,r17,101dee0 <__s2b+0x110>
 101de48:	3021883a 	mov	r16,r6
 101de4c:	99ab883a 	add	r21,r19,r6
 101de50:	9c05883a 	add	r2,r19,r16
 101de54:	11c00007 	ldb	r7,0(r2)
 101de58:	400b883a 	mov	r5,r8
 101de5c:	9009883a 	mov	r4,r18
 101de60:	39fff404 	addi	r7,r7,-48
 101de64:	01800284 	movi	r6,10
 101de68:	101dbb00 	call	101dbb0 <__multadd>
 101de6c:	84000044 	addi	r16,r16,1
 101de70:	1011883a 	mov	r8,r2
 101de74:	8c3ff61e 	bne	r17,r16,101de50 <__s2b+0x80>
 101de78:	ac45883a 	add	r2,r21,r17
 101de7c:	117ffe04 	addi	r5,r2,-8
 101de80:	880d883a 	mov	r6,r17
 101de84:	35000c0e 	bge	r6,r20,101deb8 <__s2b+0xe8>
 101de88:	a185c83a 	sub	r2,r20,r6
 101de8c:	2821883a 	mov	r16,r5
 101de90:	28a3883a 	add	r17,r5,r2
 101de94:	81c00007 	ldb	r7,0(r16)
 101de98:	400b883a 	mov	r5,r8
 101de9c:	9009883a 	mov	r4,r18
 101dea0:	39fff404 	addi	r7,r7,-48
 101dea4:	01800284 	movi	r6,10
 101dea8:	101dbb00 	call	101dbb0 <__multadd>
 101deac:	84000044 	addi	r16,r16,1
 101deb0:	1011883a 	mov	r8,r2
 101deb4:	847ff71e 	bne	r16,r17,101de94 <__s2b+0xc4>
 101deb8:	4005883a 	mov	r2,r8
 101debc:	dfc00617 	ldw	ra,24(sp)
 101dec0:	dd400517 	ldw	r21,20(sp)
 101dec4:	dd000417 	ldw	r20,16(sp)
 101dec8:	dcc00317 	ldw	r19,12(sp)
 101decc:	dc800217 	ldw	r18,8(sp)
 101ded0:	dc400117 	ldw	r17,4(sp)
 101ded4:	dc000017 	ldw	r16,0(sp)
 101ded8:	dec00704 	addi	sp,sp,28
 101dedc:	f800283a 	ret
 101dee0:	99400284 	addi	r5,r19,10
 101dee4:	003fe706 	br	101de84 <__s2b+0xb4>
 101dee8:	000b883a 	mov	r5,zero
 101deec:	003fcd06 	br	101de24 <__s2b+0x54>

0101def0 <putc>:
 101def0:	defffc04 	addi	sp,sp,-16
 101def4:	dc800215 	stw	r18,8(sp)
 101def8:	048040f4 	movhi	r18,259
 101defc:	949bed04 	addi	r18,r18,28596
 101df00:	90c00017 	ldw	r3,0(r18)
 101df04:	dc400115 	stw	r17,4(sp)
 101df08:	dc000015 	stw	r16,0(sp)
 101df0c:	dfc00315 	stw	ra,12(sp)
 101df10:	2023883a 	mov	r17,r4
 101df14:	2821883a 	mov	r16,r5
 101df18:	18000226 	beq	r3,zero,101df24 <putc+0x34>
 101df1c:	18800e17 	ldw	r2,56(r3)
 101df20:	10001126 	beq	r2,zero,101df68 <putc+0x78>
 101df24:	80800217 	ldw	r2,8(r16)
 101df28:	10ffffc4 	addi	r3,r2,-1
 101df2c:	80c00215 	stw	r3,8(r16)
 101df30:	18001316 	blt	r3,zero,101df80 <putc+0x90>
 101df34:	80800017 	ldw	r2,0(r16)
 101df38:	14400005 	stb	r17,0(r2)
 101df3c:	80c00017 	ldw	r3,0(r16)
 101df40:	18800044 	addi	r2,r3,1
 101df44:	18c00003 	ldbu	r3,0(r3)
 101df48:	80800015 	stw	r2,0(r16)
 101df4c:	1805883a 	mov	r2,r3
 101df50:	dfc00317 	ldw	ra,12(sp)
 101df54:	dc800217 	ldw	r18,8(sp)
 101df58:	dc400117 	ldw	r17,4(sp)
 101df5c:	dc000017 	ldw	r16,0(sp)
 101df60:	dec00404 	addi	sp,sp,16
 101df64:	f800283a 	ret
 101df68:	1809883a 	mov	r4,r3
 101df6c:	1013f500 	call	1013f50 <__sinit>
 101df70:	80800217 	ldw	r2,8(r16)
 101df74:	10ffffc4 	addi	r3,r2,-1
 101df78:	80c00215 	stw	r3,8(r16)
 101df7c:	183fed0e 	bge	r3,zero,101df34 <putc+0x44>
 101df80:	80800617 	ldw	r2,24(r16)
 101df84:	18800f16 	blt	r3,r2,101dfc4 <putc+0xd4>
 101df88:	80800017 	ldw	r2,0(r16)
 101df8c:	14400005 	stb	r17,0(r2)
 101df90:	81000017 	ldw	r4,0(r16)
 101df94:	00800284 	movi	r2,10
 101df98:	20c00003 	ldbu	r3,0(r4)
 101df9c:	18801226 	beq	r3,r2,101dfe8 <putc+0xf8>
 101dfa0:	20800044 	addi	r2,r4,1
 101dfa4:	80800015 	stw	r2,0(r16)
 101dfa8:	1805883a 	mov	r2,r3
 101dfac:	dfc00317 	ldw	ra,12(sp)
 101dfb0:	dc800217 	ldw	r18,8(sp)
 101dfb4:	dc400117 	ldw	r17,4(sp)
 101dfb8:	dc000017 	ldw	r16,0(sp)
 101dfbc:	dec00404 	addi	sp,sp,16
 101dfc0:	f800283a 	ret
 101dfc4:	91000017 	ldw	r4,0(r18)
 101dfc8:	880b883a 	mov	r5,r17
 101dfcc:	800d883a 	mov	r6,r16
 101dfd0:	dfc00317 	ldw	ra,12(sp)
 101dfd4:	dc800217 	ldw	r18,8(sp)
 101dfd8:	dc400117 	ldw	r17,4(sp)
 101dfdc:	dc000017 	ldw	r16,0(sp)
 101dfe0:	dec00404 	addi	sp,sp,16
 101dfe4:	101fbf81 	jmpi	101fbf8 <__swbuf_r>
 101dfe8:	91000017 	ldw	r4,0(r18)
 101dfec:	180b883a 	mov	r5,r3
 101dff0:	003ff606 	br	101dfcc <putc+0xdc>

0101dff4 <_putc_r>:
 101dff4:	defffc04 	addi	sp,sp,-16
 101dff8:	dc400215 	stw	r17,8(sp)
 101dffc:	dc000115 	stw	r16,4(sp)
 101e000:	dfc00315 	stw	ra,12(sp)
 101e004:	2021883a 	mov	r16,r4
 101e008:	2823883a 	mov	r17,r5
 101e00c:	20000226 	beq	r4,zero,101e018 <_putc_r+0x24>
 101e010:	20800e17 	ldw	r2,56(r4)
 101e014:	10001026 	beq	r2,zero,101e058 <_putc_r+0x64>
 101e018:	30800217 	ldw	r2,8(r6)
 101e01c:	10ffffc4 	addi	r3,r2,-1
 101e020:	30c00215 	stw	r3,8(r6)
 101e024:	18001316 	blt	r3,zero,101e074 <_putc_r+0x80>
 101e028:	30800017 	ldw	r2,0(r6)
 101e02c:	14400005 	stb	r17,0(r2)
 101e030:	30c00017 	ldw	r3,0(r6)
 101e034:	18800044 	addi	r2,r3,1
 101e038:	18c00003 	ldbu	r3,0(r3)
 101e03c:	30800015 	stw	r2,0(r6)
 101e040:	1805883a 	mov	r2,r3
 101e044:	dfc00317 	ldw	ra,12(sp)
 101e048:	dc400217 	ldw	r17,8(sp)
 101e04c:	dc000117 	ldw	r16,4(sp)
 101e050:	dec00404 	addi	sp,sp,16
 101e054:	f800283a 	ret
 101e058:	d9800015 	stw	r6,0(sp)
 101e05c:	1013f500 	call	1013f50 <__sinit>
 101e060:	d9800017 	ldw	r6,0(sp)
 101e064:	30800217 	ldw	r2,8(r6)
 101e068:	10ffffc4 	addi	r3,r2,-1
 101e06c:	30c00215 	stw	r3,8(r6)
 101e070:	183fed0e 	bge	r3,zero,101e028 <_putc_r+0x34>
 101e074:	30800617 	ldw	r2,24(r6)
 101e078:	18800e16 	blt	r3,r2,101e0b4 <_putc_r+0xc0>
 101e07c:	30800017 	ldw	r2,0(r6)
 101e080:	14400005 	stb	r17,0(r2)
 101e084:	31000017 	ldw	r4,0(r6)
 101e088:	00800284 	movi	r2,10
 101e08c:	20c00003 	ldbu	r3,0(r4)
 101e090:	18800f26 	beq	r3,r2,101e0d0 <_putc_r+0xdc>
 101e094:	20800044 	addi	r2,r4,1
 101e098:	30800015 	stw	r2,0(r6)
 101e09c:	1805883a 	mov	r2,r3
 101e0a0:	dfc00317 	ldw	ra,12(sp)
 101e0a4:	dc400217 	ldw	r17,8(sp)
 101e0a8:	dc000117 	ldw	r16,4(sp)
 101e0ac:	dec00404 	addi	sp,sp,16
 101e0b0:	f800283a 	ret
 101e0b4:	8009883a 	mov	r4,r16
 101e0b8:	880b883a 	mov	r5,r17
 101e0bc:	dfc00317 	ldw	ra,12(sp)
 101e0c0:	dc400217 	ldw	r17,8(sp)
 101e0c4:	dc000117 	ldw	r16,4(sp)
 101e0c8:	dec00404 	addi	sp,sp,16
 101e0cc:	101fbf81 	jmpi	101fbf8 <__swbuf_r>
 101e0d0:	8009883a 	mov	r4,r16
 101e0d4:	180b883a 	mov	r5,r3
 101e0d8:	003ff806 	br	101e0bc <_putc_r+0xc8>

0101e0dc <_read_r>:
 101e0dc:	defffd04 	addi	sp,sp,-12
 101e0e0:	dc000015 	stw	r16,0(sp)
 101e0e4:	04004134 	movhi	r16,260
 101e0e8:	84230104 	addi	r16,r16,-29692
 101e0ec:	dc400115 	stw	r17,4(sp)
 101e0f0:	80000015 	stw	zero,0(r16)
 101e0f4:	2023883a 	mov	r17,r4
 101e0f8:	2809883a 	mov	r4,r5
 101e0fc:	300b883a 	mov	r5,r6
 101e100:	380d883a 	mov	r6,r7
 101e104:	dfc00215 	stw	ra,8(sp)
 101e108:	1021f1c0 	call	1021f1c <read>
 101e10c:	1007883a 	mov	r3,r2
 101e110:	00bfffc4 	movi	r2,-1
 101e114:	18800626 	beq	r3,r2,101e130 <_read_r+0x54>
 101e118:	1805883a 	mov	r2,r3
 101e11c:	dfc00217 	ldw	ra,8(sp)
 101e120:	dc400117 	ldw	r17,4(sp)
 101e124:	dc000017 	ldw	r16,0(sp)
 101e128:	dec00304 	addi	sp,sp,12
 101e12c:	f800283a 	ret
 101e130:	80800017 	ldw	r2,0(r16)
 101e134:	103ff826 	beq	r2,zero,101e118 <_read_r+0x3c>
 101e138:	88800015 	stw	r2,0(r17)
 101e13c:	1805883a 	mov	r2,r3
 101e140:	dfc00217 	ldw	ra,8(sp)
 101e144:	dc400117 	ldw	r17,4(sp)
 101e148:	dc000017 	ldw	r16,0(sp)
 101e14c:	dec00304 	addi	sp,sp,12
 101e150:	f800283a 	ret

0101e154 <_realloc_r>:
 101e154:	defff404 	addi	sp,sp,-48
 101e158:	dd800815 	stw	r22,32(sp)
 101e15c:	dc800415 	stw	r18,16(sp)
 101e160:	dc400315 	stw	r17,12(sp)
 101e164:	dfc00b15 	stw	ra,44(sp)
 101e168:	df000a15 	stw	fp,40(sp)
 101e16c:	ddc00915 	stw	r23,36(sp)
 101e170:	dd400715 	stw	r21,28(sp)
 101e174:	dd000615 	stw	r20,24(sp)
 101e178:	dcc00515 	stw	r19,20(sp)
 101e17c:	dc000215 	stw	r16,8(sp)
 101e180:	2825883a 	mov	r18,r5
 101e184:	3023883a 	mov	r17,r6
 101e188:	202d883a 	mov	r22,r4
 101e18c:	2800c926 	beq	r5,zero,101e4b4 <_realloc_r+0x360>
 101e190:	10219800 	call	1021980 <__malloc_lock>
 101e194:	943ffe04 	addi	r16,r18,-8
 101e198:	88c002c4 	addi	r3,r17,11
 101e19c:	00800584 	movi	r2,22
 101e1a0:	82000117 	ldw	r8,4(r16)
 101e1a4:	10c01b2e 	bgeu	r2,r3,101e214 <_realloc_r+0xc0>
 101e1a8:	00bffe04 	movi	r2,-8
 101e1ac:	188e703a 	and	r7,r3,r2
 101e1b0:	3839883a 	mov	fp,r7
 101e1b4:	38001a16 	blt	r7,zero,101e220 <_realloc_r+0xcc>
 101e1b8:	e4401936 	bltu	fp,r17,101e220 <_realloc_r+0xcc>
 101e1bc:	013fff04 	movi	r4,-4
 101e1c0:	4126703a 	and	r19,r8,r4
 101e1c4:	99c02616 	blt	r19,r7,101e260 <_realloc_r+0x10c>
 101e1c8:	802b883a 	mov	r21,r16
 101e1cc:	9829883a 	mov	r20,r19
 101e1d0:	84000204 	addi	r16,r16,8
 101e1d4:	a80f883a 	mov	r7,r21
 101e1d8:	a70dc83a 	sub	r6,r20,fp
 101e1dc:	008003c4 	movi	r2,15
 101e1e0:	1180c136 	bltu	r2,r6,101e4e8 <_realloc_r+0x394>
 101e1e4:	38800117 	ldw	r2,4(r7)
 101e1e8:	a549883a 	add	r4,r20,r21
 101e1ec:	1080004c 	andi	r2,r2,1
 101e1f0:	a084b03a 	or	r2,r20,r2
 101e1f4:	38800115 	stw	r2,4(r7)
 101e1f8:	20c00117 	ldw	r3,4(r4)
 101e1fc:	18c00054 	ori	r3,r3,1
 101e200:	20c00115 	stw	r3,4(r4)
 101e204:	b009883a 	mov	r4,r22
 101e208:	10219a00 	call	10219a0 <__malloc_unlock>
 101e20c:	8023883a 	mov	r17,r16
 101e210:	00000606 	br	101e22c <_realloc_r+0xd8>
 101e214:	01c00404 	movi	r7,16
 101e218:	3839883a 	mov	fp,r7
 101e21c:	e47fe72e 	bgeu	fp,r17,101e1bc <_realloc_r+0x68>
 101e220:	00800304 	movi	r2,12
 101e224:	0023883a 	mov	r17,zero
 101e228:	b0800015 	stw	r2,0(r22)
 101e22c:	8805883a 	mov	r2,r17
 101e230:	dfc00b17 	ldw	ra,44(sp)
 101e234:	df000a17 	ldw	fp,40(sp)
 101e238:	ddc00917 	ldw	r23,36(sp)
 101e23c:	dd800817 	ldw	r22,32(sp)
 101e240:	dd400717 	ldw	r21,28(sp)
 101e244:	dd000617 	ldw	r20,24(sp)
 101e248:	dcc00517 	ldw	r19,20(sp)
 101e24c:	dc800417 	ldw	r18,16(sp)
 101e250:	dc400317 	ldw	r17,12(sp)
 101e254:	dc000217 	ldw	r16,8(sp)
 101e258:	dec00c04 	addi	sp,sp,48
 101e25c:	f800283a 	ret
 101e260:	008040f4 	movhi	r2,259
 101e264:	10963804 	addi	r2,r2,22752
 101e268:	12400217 	ldw	r9,8(r2)
 101e26c:	84cd883a 	add	r6,r16,r19
 101e270:	802b883a 	mov	r21,r16
 101e274:	3240b926 	beq	r6,r9,101e55c <_realloc_r+0x408>
 101e278:	31400117 	ldw	r5,4(r6)
 101e27c:	00bfff84 	movi	r2,-2
 101e280:	2884703a 	and	r2,r5,r2
 101e284:	1185883a 	add	r2,r2,r6
 101e288:	10c00117 	ldw	r3,4(r2)
 101e28c:	18c0004c 	andi	r3,r3,1
 101e290:	1807003a 	cmpeq	r3,r3,zero
 101e294:	1800a326 	beq	r3,zero,101e524 <_realloc_r+0x3d0>
 101e298:	2908703a 	and	r4,r5,r4
 101e29c:	9929883a 	add	r20,r19,r4
 101e2a0:	a1c0a30e 	bge	r20,r7,101e530 <_realloc_r+0x3dc>
 101e2a4:	4080004c 	andi	r2,r8,1
 101e2a8:	1000551e 	bne	r2,zero,101e400 <_realloc_r+0x2ac>
 101e2ac:	80800017 	ldw	r2,0(r16)
 101e2b0:	80afc83a 	sub	r23,r16,r2
 101e2b4:	b8c00117 	ldw	r3,4(r23)
 101e2b8:	00bfff04 	movi	r2,-4
 101e2bc:	1884703a 	and	r2,r3,r2
 101e2c0:	30002e26 	beq	r6,zero,101e37c <_realloc_r+0x228>
 101e2c4:	3240b926 	beq	r6,r9,101e5ac <_realloc_r+0x458>
 101e2c8:	98a9883a 	add	r20,r19,r2
 101e2cc:	2509883a 	add	r4,r4,r20
 101e2d0:	d9000015 	stw	r4,0(sp)
 101e2d4:	21c02a16 	blt	r4,r7,101e380 <_realloc_r+0x22c>
 101e2d8:	30800317 	ldw	r2,12(r6)
 101e2dc:	30c00217 	ldw	r3,8(r6)
 101e2e0:	01400904 	movi	r5,36
 101e2e4:	99bfff04 	addi	r6,r19,-4
 101e2e8:	18800315 	stw	r2,12(r3)
 101e2ec:	10c00215 	stw	r3,8(r2)
 101e2f0:	b9000317 	ldw	r4,12(r23)
 101e2f4:	b8800217 	ldw	r2,8(r23)
 101e2f8:	b82b883a 	mov	r21,r23
 101e2fc:	bc000204 	addi	r16,r23,8
 101e300:	20800215 	stw	r2,8(r4)
 101e304:	11000315 	stw	r4,12(r2)
 101e308:	2980e436 	bltu	r5,r6,101e69c <_realloc_r+0x548>
 101e30c:	008004c4 	movi	r2,19
 101e310:	9009883a 	mov	r4,r18
 101e314:	8011883a 	mov	r8,r16
 101e318:	11800f2e 	bgeu	r2,r6,101e358 <_realloc_r+0x204>
 101e31c:	90800017 	ldw	r2,0(r18)
 101e320:	ba000404 	addi	r8,r23,16
 101e324:	91000204 	addi	r4,r18,8
 101e328:	b8800215 	stw	r2,8(r23)
 101e32c:	90c00117 	ldw	r3,4(r18)
 101e330:	008006c4 	movi	r2,27
 101e334:	b8c00315 	stw	r3,12(r23)
 101e338:	1180072e 	bgeu	r2,r6,101e358 <_realloc_r+0x204>
 101e33c:	90c00217 	ldw	r3,8(r18)
 101e340:	ba000604 	addi	r8,r23,24
 101e344:	91000404 	addi	r4,r18,16
 101e348:	b8c00415 	stw	r3,16(r23)
 101e34c:	90800317 	ldw	r2,12(r18)
 101e350:	b8800515 	stw	r2,20(r23)
 101e354:	3140e726 	beq	r6,r5,101e6f4 <_realloc_r+0x5a0>
 101e358:	20800017 	ldw	r2,0(r4)
 101e35c:	dd000017 	ldw	r20,0(sp)
 101e360:	b80f883a 	mov	r7,r23
 101e364:	40800015 	stw	r2,0(r8)
 101e368:	20c00117 	ldw	r3,4(r4)
 101e36c:	40c00115 	stw	r3,4(r8)
 101e370:	20800217 	ldw	r2,8(r4)
 101e374:	40800215 	stw	r2,8(r8)
 101e378:	003f9706 	br	101e1d8 <_realloc_r+0x84>
 101e37c:	98a9883a 	add	r20,r19,r2
 101e380:	a1c01f16 	blt	r20,r7,101e400 <_realloc_r+0x2ac>
 101e384:	b8c00317 	ldw	r3,12(r23)
 101e388:	b8800217 	ldw	r2,8(r23)
 101e38c:	99bfff04 	addi	r6,r19,-4
 101e390:	01400904 	movi	r5,36
 101e394:	b82b883a 	mov	r21,r23
 101e398:	18800215 	stw	r2,8(r3)
 101e39c:	10c00315 	stw	r3,12(r2)
 101e3a0:	bc000204 	addi	r16,r23,8
 101e3a4:	2980c336 	bltu	r5,r6,101e6b4 <_realloc_r+0x560>
 101e3a8:	008004c4 	movi	r2,19
 101e3ac:	9009883a 	mov	r4,r18
 101e3b0:	8011883a 	mov	r8,r16
 101e3b4:	11800f2e 	bgeu	r2,r6,101e3f4 <_realloc_r+0x2a0>
 101e3b8:	90800017 	ldw	r2,0(r18)
 101e3bc:	ba000404 	addi	r8,r23,16
 101e3c0:	91000204 	addi	r4,r18,8
 101e3c4:	b8800215 	stw	r2,8(r23)
 101e3c8:	90c00117 	ldw	r3,4(r18)
 101e3cc:	008006c4 	movi	r2,27
 101e3d0:	b8c00315 	stw	r3,12(r23)
 101e3d4:	1180072e 	bgeu	r2,r6,101e3f4 <_realloc_r+0x2a0>
 101e3d8:	90c00217 	ldw	r3,8(r18)
 101e3dc:	ba000604 	addi	r8,r23,24
 101e3e0:	91000404 	addi	r4,r18,16
 101e3e4:	b8c00415 	stw	r3,16(r23)
 101e3e8:	90800317 	ldw	r2,12(r18)
 101e3ec:	b8800515 	stw	r2,20(r23)
 101e3f0:	3140c726 	beq	r6,r5,101e710 <_realloc_r+0x5bc>
 101e3f4:	20800017 	ldw	r2,0(r4)
 101e3f8:	b80f883a 	mov	r7,r23
 101e3fc:	003fd906 	br	101e364 <_realloc_r+0x210>
 101e400:	880b883a 	mov	r5,r17
 101e404:	b009883a 	mov	r4,r22
 101e408:	1014b340 	call	1014b34 <_malloc_r>
 101e40c:	1023883a 	mov	r17,r2
 101e410:	10002526 	beq	r2,zero,101e4a8 <_realloc_r+0x354>
 101e414:	80800117 	ldw	r2,4(r16)
 101e418:	00ffff84 	movi	r3,-2
 101e41c:	893ffe04 	addi	r4,r17,-8
 101e420:	10c4703a 	and	r2,r2,r3
 101e424:	8085883a 	add	r2,r16,r2
 101e428:	20809526 	beq	r4,r2,101e680 <_realloc_r+0x52c>
 101e42c:	99bfff04 	addi	r6,r19,-4
 101e430:	01c00904 	movi	r7,36
 101e434:	39804536 	bltu	r7,r6,101e54c <_realloc_r+0x3f8>
 101e438:	008004c4 	movi	r2,19
 101e43c:	9009883a 	mov	r4,r18
 101e440:	880b883a 	mov	r5,r17
 101e444:	11800f2e 	bgeu	r2,r6,101e484 <_realloc_r+0x330>
 101e448:	90800017 	ldw	r2,0(r18)
 101e44c:	89400204 	addi	r5,r17,8
 101e450:	91000204 	addi	r4,r18,8
 101e454:	88800015 	stw	r2,0(r17)
 101e458:	90c00117 	ldw	r3,4(r18)
 101e45c:	008006c4 	movi	r2,27
 101e460:	88c00115 	stw	r3,4(r17)
 101e464:	1180072e 	bgeu	r2,r6,101e484 <_realloc_r+0x330>
 101e468:	90c00217 	ldw	r3,8(r18)
 101e46c:	89400404 	addi	r5,r17,16
 101e470:	91000404 	addi	r4,r18,16
 101e474:	88c00215 	stw	r3,8(r17)
 101e478:	90800317 	ldw	r2,12(r18)
 101e47c:	88800315 	stw	r2,12(r17)
 101e480:	31c09126 	beq	r6,r7,101e6c8 <_realloc_r+0x574>
 101e484:	20800017 	ldw	r2,0(r4)
 101e488:	28800015 	stw	r2,0(r5)
 101e48c:	20c00117 	ldw	r3,4(r4)
 101e490:	28c00115 	stw	r3,4(r5)
 101e494:	20800217 	ldw	r2,8(r4)
 101e498:	28800215 	stw	r2,8(r5)
 101e49c:	900b883a 	mov	r5,r18
 101e4a0:	b009883a 	mov	r4,r22
 101e4a4:	101b9340 	call	101b934 <_free_r>
 101e4a8:	b009883a 	mov	r4,r22
 101e4ac:	10219a00 	call	10219a0 <__malloc_unlock>
 101e4b0:	003f5e06 	br	101e22c <_realloc_r+0xd8>
 101e4b4:	300b883a 	mov	r5,r6
 101e4b8:	dfc00b17 	ldw	ra,44(sp)
 101e4bc:	df000a17 	ldw	fp,40(sp)
 101e4c0:	ddc00917 	ldw	r23,36(sp)
 101e4c4:	dd800817 	ldw	r22,32(sp)
 101e4c8:	dd400717 	ldw	r21,28(sp)
 101e4cc:	dd000617 	ldw	r20,24(sp)
 101e4d0:	dcc00517 	ldw	r19,20(sp)
 101e4d4:	dc800417 	ldw	r18,16(sp)
 101e4d8:	dc400317 	ldw	r17,12(sp)
 101e4dc:	dc000217 	ldw	r16,8(sp)
 101e4e0:	dec00c04 	addi	sp,sp,48
 101e4e4:	1014b341 	jmpi	1014b34 <_malloc_r>
 101e4e8:	38800117 	ldw	r2,4(r7)
 101e4ec:	e54b883a 	add	r5,fp,r21
 101e4f0:	31000054 	ori	r4,r6,1
 101e4f4:	1080004c 	andi	r2,r2,1
 101e4f8:	1704b03a 	or	r2,r2,fp
 101e4fc:	38800115 	stw	r2,4(r7)
 101e500:	29000115 	stw	r4,4(r5)
 101e504:	2987883a 	add	r3,r5,r6
 101e508:	18800117 	ldw	r2,4(r3)
 101e50c:	29400204 	addi	r5,r5,8
 101e510:	b009883a 	mov	r4,r22
 101e514:	10800054 	ori	r2,r2,1
 101e518:	18800115 	stw	r2,4(r3)
 101e51c:	101b9340 	call	101b934 <_free_r>
 101e520:	003f3806 	br	101e204 <_realloc_r+0xb0>
 101e524:	000d883a 	mov	r6,zero
 101e528:	0009883a 	mov	r4,zero
 101e52c:	003f5d06 	br	101e2a4 <_realloc_r+0x150>
 101e530:	30c00217 	ldw	r3,8(r6)
 101e534:	30800317 	ldw	r2,12(r6)
 101e538:	800f883a 	mov	r7,r16
 101e53c:	84000204 	addi	r16,r16,8
 101e540:	10c00215 	stw	r3,8(r2)
 101e544:	18800315 	stw	r2,12(r3)
 101e548:	003f2306 	br	101e1d8 <_realloc_r+0x84>
 101e54c:	8809883a 	mov	r4,r17
 101e550:	900b883a 	mov	r5,r18
 101e554:	10153140 	call	1015314 <memmove>
 101e558:	003fd006 	br	101e49c <_realloc_r+0x348>
 101e55c:	30800117 	ldw	r2,4(r6)
 101e560:	e0c00404 	addi	r3,fp,16
 101e564:	1108703a 	and	r4,r2,r4
 101e568:	9905883a 	add	r2,r19,r4
 101e56c:	10ff4d16 	blt	r2,r3,101e2a4 <_realloc_r+0x150>
 101e570:	1705c83a 	sub	r2,r2,fp
 101e574:	870b883a 	add	r5,r16,fp
 101e578:	10800054 	ori	r2,r2,1
 101e57c:	28800115 	stw	r2,4(r5)
 101e580:	80c00117 	ldw	r3,4(r16)
 101e584:	008040f4 	movhi	r2,259
 101e588:	10963804 	addi	r2,r2,22752
 101e58c:	b009883a 	mov	r4,r22
 101e590:	18c0004c 	andi	r3,r3,1
 101e594:	e0c6b03a 	or	r3,fp,r3
 101e598:	11400215 	stw	r5,8(r2)
 101e59c:	80c00115 	stw	r3,4(r16)
 101e5a0:	10219a00 	call	10219a0 <__malloc_unlock>
 101e5a4:	84400204 	addi	r17,r16,8
 101e5a8:	003f2006 	br	101e22c <_realloc_r+0xd8>
 101e5ac:	98a9883a 	add	r20,r19,r2
 101e5b0:	2509883a 	add	r4,r4,r20
 101e5b4:	e0800404 	addi	r2,fp,16
 101e5b8:	d9000115 	stw	r4,4(sp)
 101e5bc:	20bf7016 	blt	r4,r2,101e380 <_realloc_r+0x22c>
 101e5c0:	b8c00317 	ldw	r3,12(r23)
 101e5c4:	b8800217 	ldw	r2,8(r23)
 101e5c8:	99bfff04 	addi	r6,r19,-4
 101e5cc:	01400904 	movi	r5,36
 101e5d0:	18800215 	stw	r2,8(r3)
 101e5d4:	10c00315 	stw	r3,12(r2)
 101e5d8:	bc400204 	addi	r17,r23,8
 101e5dc:	29804136 	bltu	r5,r6,101e6e4 <_realloc_r+0x590>
 101e5e0:	008004c4 	movi	r2,19
 101e5e4:	9009883a 	mov	r4,r18
 101e5e8:	880f883a 	mov	r7,r17
 101e5ec:	11800f2e 	bgeu	r2,r6,101e62c <_realloc_r+0x4d8>
 101e5f0:	90800017 	ldw	r2,0(r18)
 101e5f4:	b9c00404 	addi	r7,r23,16
 101e5f8:	91000204 	addi	r4,r18,8
 101e5fc:	b8800215 	stw	r2,8(r23)
 101e600:	90c00117 	ldw	r3,4(r18)
 101e604:	008006c4 	movi	r2,27
 101e608:	b8c00315 	stw	r3,12(r23)
 101e60c:	1180072e 	bgeu	r2,r6,101e62c <_realloc_r+0x4d8>
 101e610:	90c00217 	ldw	r3,8(r18)
 101e614:	b9c00604 	addi	r7,r23,24
 101e618:	91000404 	addi	r4,r18,16
 101e61c:	b8c00415 	stw	r3,16(r23)
 101e620:	90800317 	ldw	r2,12(r18)
 101e624:	b8800515 	stw	r2,20(r23)
 101e628:	31404026 	beq	r6,r5,101e72c <_realloc_r+0x5d8>
 101e62c:	20800017 	ldw	r2,0(r4)
 101e630:	38800015 	stw	r2,0(r7)
 101e634:	20c00117 	ldw	r3,4(r4)
 101e638:	38c00115 	stw	r3,4(r7)
 101e63c:	20800217 	ldw	r2,8(r4)
 101e640:	38800215 	stw	r2,8(r7)
 101e644:	d8c00117 	ldw	r3,4(sp)
 101e648:	bf0b883a 	add	r5,r23,fp
 101e64c:	b009883a 	mov	r4,r22
 101e650:	1f05c83a 	sub	r2,r3,fp
 101e654:	10800054 	ori	r2,r2,1
 101e658:	28800115 	stw	r2,4(r5)
 101e65c:	b8c00117 	ldw	r3,4(r23)
 101e660:	008040f4 	movhi	r2,259
 101e664:	10963804 	addi	r2,r2,22752
 101e668:	11400215 	stw	r5,8(r2)
 101e66c:	18c0004c 	andi	r3,r3,1
 101e670:	e0c6b03a 	or	r3,fp,r3
 101e674:	b8c00115 	stw	r3,4(r23)
 101e678:	10219a00 	call	10219a0 <__malloc_unlock>
 101e67c:	003eeb06 	br	101e22c <_realloc_r+0xd8>
 101e680:	20800117 	ldw	r2,4(r4)
 101e684:	00ffff04 	movi	r3,-4
 101e688:	800f883a 	mov	r7,r16
 101e68c:	10c4703a 	and	r2,r2,r3
 101e690:	98a9883a 	add	r20,r19,r2
 101e694:	84000204 	addi	r16,r16,8
 101e698:	003ecf06 	br	101e1d8 <_realloc_r+0x84>
 101e69c:	900b883a 	mov	r5,r18
 101e6a0:	8009883a 	mov	r4,r16
 101e6a4:	10153140 	call	1015314 <memmove>
 101e6a8:	dd000017 	ldw	r20,0(sp)
 101e6ac:	b80f883a 	mov	r7,r23
 101e6b0:	003ec906 	br	101e1d8 <_realloc_r+0x84>
 101e6b4:	900b883a 	mov	r5,r18
 101e6b8:	8009883a 	mov	r4,r16
 101e6bc:	10153140 	call	1015314 <memmove>
 101e6c0:	b80f883a 	mov	r7,r23
 101e6c4:	003ec406 	br	101e1d8 <_realloc_r+0x84>
 101e6c8:	90c00417 	ldw	r3,16(r18)
 101e6cc:	89400604 	addi	r5,r17,24
 101e6d0:	91000604 	addi	r4,r18,24
 101e6d4:	88c00415 	stw	r3,16(r17)
 101e6d8:	90800517 	ldw	r2,20(r18)
 101e6dc:	88800515 	stw	r2,20(r17)
 101e6e0:	003f6806 	br	101e484 <_realloc_r+0x330>
 101e6e4:	900b883a 	mov	r5,r18
 101e6e8:	8809883a 	mov	r4,r17
 101e6ec:	10153140 	call	1015314 <memmove>
 101e6f0:	003fd406 	br	101e644 <_realloc_r+0x4f0>
 101e6f4:	90c00417 	ldw	r3,16(r18)
 101e6f8:	91000604 	addi	r4,r18,24
 101e6fc:	ba000804 	addi	r8,r23,32
 101e700:	b8c00615 	stw	r3,24(r23)
 101e704:	90800517 	ldw	r2,20(r18)
 101e708:	b8800715 	stw	r2,28(r23)
 101e70c:	003f1206 	br	101e358 <_realloc_r+0x204>
 101e710:	90c00417 	ldw	r3,16(r18)
 101e714:	91000604 	addi	r4,r18,24
 101e718:	ba000804 	addi	r8,r23,32
 101e71c:	b8c00615 	stw	r3,24(r23)
 101e720:	90800517 	ldw	r2,20(r18)
 101e724:	b8800715 	stw	r2,28(r23)
 101e728:	003f3206 	br	101e3f4 <_realloc_r+0x2a0>
 101e72c:	90c00417 	ldw	r3,16(r18)
 101e730:	91000604 	addi	r4,r18,24
 101e734:	b9c00804 	addi	r7,r23,32
 101e738:	b8c00615 	stw	r3,24(r23)
 101e73c:	90800517 	ldw	r2,20(r18)
 101e740:	b8800715 	stw	r2,28(r23)
 101e744:	003fb906 	br	101e62c <_realloc_r+0x4d8>

0101e748 <__isinfd>:
 101e748:	200d883a 	mov	r6,r4
 101e74c:	0109c83a 	sub	r4,zero,r4
 101e750:	2188b03a 	or	r4,r4,r6
 101e754:	2008d7fa 	srli	r4,r4,31
 101e758:	00a00034 	movhi	r2,32768
 101e75c:	10bfffc4 	addi	r2,r2,-1
 101e760:	1144703a 	and	r2,r2,r5
 101e764:	2088b03a 	or	r4,r4,r2
 101e768:	009ffc34 	movhi	r2,32752
 101e76c:	1105c83a 	sub	r2,r2,r4
 101e770:	0087c83a 	sub	r3,zero,r2
 101e774:	10c4b03a 	or	r2,r2,r3
 101e778:	1004d7fa 	srli	r2,r2,31
 101e77c:	00c00044 	movi	r3,1
 101e780:	1885c83a 	sub	r2,r3,r2
 101e784:	f800283a 	ret

0101e788 <_raise_r>:
 101e788:	defffd04 	addi	sp,sp,-12
 101e78c:	008007c4 	movi	r2,31
 101e790:	dc400115 	stw	r17,4(sp)
 101e794:	dc000015 	stw	r16,0(sp)
 101e798:	dfc00215 	stw	ra,8(sp)
 101e79c:	2821883a 	mov	r16,r5
 101e7a0:	2023883a 	mov	r17,r4
 101e7a4:	11402736 	bltu	r2,r5,101e844 <_raise_r+0xbc>
 101e7a8:	20c0b717 	ldw	r3,732(r4)
 101e7ac:	18001326 	beq	r3,zero,101e7fc <_raise_r+0x74>
 101e7b0:	2945883a 	add	r2,r5,r5
 101e7b4:	1085883a 	add	r2,r2,r2
 101e7b8:	188b883a 	add	r5,r3,r2
 101e7bc:	28c00017 	ldw	r3,0(r5)
 101e7c0:	18000e26 	beq	r3,zero,101e7fc <_raise_r+0x74>
 101e7c4:	01000044 	movi	r4,1
 101e7c8:	19000526 	beq	r3,r4,101e7e0 <_raise_r+0x58>
 101e7cc:	00bfffc4 	movi	r2,-1
 101e7d0:	18801326 	beq	r3,r2,101e820 <_raise_r+0x98>
 101e7d4:	28000015 	stw	zero,0(r5)
 101e7d8:	8009883a 	mov	r4,r16
 101e7dc:	183ee83a 	callr	r3
 101e7e0:	0007883a 	mov	r3,zero
 101e7e4:	1805883a 	mov	r2,r3
 101e7e8:	dfc00217 	ldw	ra,8(sp)
 101e7ec:	dc400117 	ldw	r17,4(sp)
 101e7f0:	dc000017 	ldw	r16,0(sp)
 101e7f4:	dec00304 	addi	sp,sp,12
 101e7f8:	f800283a 	ret
 101e7fc:	101ea600 	call	101ea60 <_getpid_r>
 101e800:	100b883a 	mov	r5,r2
 101e804:	8809883a 	mov	r4,r17
 101e808:	800d883a 	mov	r6,r16
 101e80c:	dfc00217 	ldw	ra,8(sp)
 101e810:	dc400117 	ldw	r17,4(sp)
 101e814:	dc000017 	ldw	r16,0(sp)
 101e818:	dec00304 	addi	sp,sp,12
 101e81c:	101ea641 	jmpi	101ea64 <_kill_r>
 101e820:	2007883a 	mov	r3,r4
 101e824:	00800584 	movi	r2,22
 101e828:	88800015 	stw	r2,0(r17)
 101e82c:	1805883a 	mov	r2,r3
 101e830:	dfc00217 	ldw	ra,8(sp)
 101e834:	dc400117 	ldw	r17,4(sp)
 101e838:	dc000017 	ldw	r16,0(sp)
 101e83c:	dec00304 	addi	sp,sp,12
 101e840:	f800283a 	ret
 101e844:	00800584 	movi	r2,22
 101e848:	00ffffc4 	movi	r3,-1
 101e84c:	20800015 	stw	r2,0(r4)
 101e850:	003fe406 	br	101e7e4 <_raise_r+0x5c>

0101e854 <raise>:
 101e854:	008040f4 	movhi	r2,259
 101e858:	109bed04 	addi	r2,r2,28596
 101e85c:	200b883a 	mov	r5,r4
 101e860:	11000017 	ldw	r4,0(r2)
 101e864:	101e7881 	jmpi	101e788 <_raise_r>

0101e868 <_init_signal_r>:
 101e868:	2080b717 	ldw	r2,732(r4)
 101e86c:	defffe04 	addi	sp,sp,-8
 101e870:	dc000015 	stw	r16,0(sp)
 101e874:	dfc00115 	stw	ra,4(sp)
 101e878:	2021883a 	mov	r16,r4
 101e87c:	10000526 	beq	r2,zero,101e894 <_init_signal_r+0x2c>
 101e880:	0005883a 	mov	r2,zero
 101e884:	dfc00117 	ldw	ra,4(sp)
 101e888:	dc000017 	ldw	r16,0(sp)
 101e88c:	dec00204 	addi	sp,sp,8
 101e890:	f800283a 	ret
 101e894:	01402004 	movi	r5,128
 101e898:	1014b340 	call	1014b34 <_malloc_r>
 101e89c:	1009883a 	mov	r4,r2
 101e8a0:	8080b715 	stw	r2,732(r16)
 101e8a4:	10000726 	beq	r2,zero,101e8c4 <_init_signal_r+0x5c>
 101e8a8:	0007883a 	mov	r3,zero
 101e8ac:	01402004 	movi	r5,128
 101e8b0:	20c5883a 	add	r2,r4,r3
 101e8b4:	18c00104 	addi	r3,r3,4
 101e8b8:	10000015 	stw	zero,0(r2)
 101e8bc:	197ffc1e 	bne	r3,r5,101e8b0 <_init_signal_r+0x48>
 101e8c0:	003fef06 	br	101e880 <_init_signal_r+0x18>
 101e8c4:	00bfffc4 	movi	r2,-1
 101e8c8:	003fee06 	br	101e884 <_init_signal_r+0x1c>

0101e8cc <_init_signal>:
 101e8cc:	008040f4 	movhi	r2,259
 101e8d0:	109bed04 	addi	r2,r2,28596
 101e8d4:	11000017 	ldw	r4,0(r2)
 101e8d8:	101e8681 	jmpi	101e868 <_init_signal_r>

0101e8dc <__sigtramp_r>:
 101e8dc:	defffd04 	addi	sp,sp,-12
 101e8e0:	008007c4 	movi	r2,31
 101e8e4:	dc000115 	stw	r16,4(sp)
 101e8e8:	dfc00215 	stw	ra,8(sp)
 101e8ec:	2021883a 	mov	r16,r4
 101e8f0:	11401336 	bltu	r2,r5,101e940 <__sigtramp_r+0x64>
 101e8f4:	20c0b717 	ldw	r3,732(r4)
 101e8f8:	18001f26 	beq	r3,zero,101e978 <__sigtramp_r+0x9c>
 101e8fc:	2945883a 	add	r2,r5,r5
 101e900:	1085883a 	add	r2,r2,r2
 101e904:	10c9883a 	add	r4,r2,r3
 101e908:	20c00017 	ldw	r3,0(r4)
 101e90c:	18001626 	beq	r3,zero,101e968 <__sigtramp_r+0x8c>
 101e910:	00bfffc4 	movi	r2,-1
 101e914:	18801626 	beq	r3,r2,101e970 <__sigtramp_r+0x94>
 101e918:	00800044 	movi	r2,1
 101e91c:	18800d26 	beq	r3,r2,101e954 <__sigtramp_r+0x78>
 101e920:	20000015 	stw	zero,0(r4)
 101e924:	2809883a 	mov	r4,r5
 101e928:	183ee83a 	callr	r3
 101e92c:	0005883a 	mov	r2,zero
 101e930:	dfc00217 	ldw	ra,8(sp)
 101e934:	dc000117 	ldw	r16,4(sp)
 101e938:	dec00304 	addi	sp,sp,12
 101e93c:	f800283a 	ret
 101e940:	00bfffc4 	movi	r2,-1
 101e944:	dfc00217 	ldw	ra,8(sp)
 101e948:	dc000117 	ldw	r16,4(sp)
 101e94c:	dec00304 	addi	sp,sp,12
 101e950:	f800283a 	ret
 101e954:	008000c4 	movi	r2,3
 101e958:	dfc00217 	ldw	ra,8(sp)
 101e95c:	dc000117 	ldw	r16,4(sp)
 101e960:	dec00304 	addi	sp,sp,12
 101e964:	f800283a 	ret
 101e968:	00800044 	movi	r2,1
 101e96c:	003ff006 	br	101e930 <__sigtramp_r+0x54>
 101e970:	00800084 	movi	r2,2
 101e974:	003fee06 	br	101e930 <__sigtramp_r+0x54>
 101e978:	d9400015 	stw	r5,0(sp)
 101e97c:	101e8680 	call	101e868 <_init_signal_r>
 101e980:	d9400017 	ldw	r5,0(sp)
 101e984:	103fee1e 	bne	r2,zero,101e940 <__sigtramp_r+0x64>
 101e988:	80c0b717 	ldw	r3,732(r16)
 101e98c:	003fdb06 	br	101e8fc <__sigtramp_r+0x20>

0101e990 <__sigtramp>:
 101e990:	008040f4 	movhi	r2,259
 101e994:	109bed04 	addi	r2,r2,28596
 101e998:	200b883a 	mov	r5,r4
 101e99c:	11000017 	ldw	r4,0(r2)
 101e9a0:	101e8dc1 	jmpi	101e8dc <__sigtramp_r>

0101e9a4 <_signal_r>:
 101e9a4:	defffc04 	addi	sp,sp,-16
 101e9a8:	008007c4 	movi	r2,31
 101e9ac:	dc800215 	stw	r18,8(sp)
 101e9b0:	dc400115 	stw	r17,4(sp)
 101e9b4:	dc000015 	stw	r16,0(sp)
 101e9b8:	dfc00315 	stw	ra,12(sp)
 101e9bc:	2823883a 	mov	r17,r5
 101e9c0:	00ffffc4 	movi	r3,-1
 101e9c4:	3025883a 	mov	r18,r6
 101e9c8:	2021883a 	mov	r16,r4
 101e9cc:	1140092e 	bgeu	r2,r5,101e9f4 <_signal_r+0x50>
 101e9d0:	00800584 	movi	r2,22
 101e9d4:	20800015 	stw	r2,0(r4)
 101e9d8:	1805883a 	mov	r2,r3
 101e9dc:	dfc00317 	ldw	ra,12(sp)
 101e9e0:	dc800217 	ldw	r18,8(sp)
 101e9e4:	dc400117 	ldw	r17,4(sp)
 101e9e8:	dc000017 	ldw	r16,0(sp)
 101e9ec:	dec00404 	addi	sp,sp,16
 101e9f0:	f800283a 	ret
 101e9f4:	2140b717 	ldw	r5,732(r4)
 101e9f8:	28000c26 	beq	r5,zero,101ea2c <_signal_r+0x88>
 101e9fc:	8c45883a 	add	r2,r17,r17
 101ea00:	1085883a 	add	r2,r2,r2
 101ea04:	1145883a 	add	r2,r2,r5
 101ea08:	10c00017 	ldw	r3,0(r2)
 101ea0c:	14800015 	stw	r18,0(r2)
 101ea10:	1805883a 	mov	r2,r3
 101ea14:	dfc00317 	ldw	ra,12(sp)
 101ea18:	dc800217 	ldw	r18,8(sp)
 101ea1c:	dc400117 	ldw	r17,4(sp)
 101ea20:	dc000017 	ldw	r16,0(sp)
 101ea24:	dec00404 	addi	sp,sp,16
 101ea28:	f800283a 	ret
 101ea2c:	101e8680 	call	101e868 <_init_signal_r>
 101ea30:	1000021e 	bne	r2,zero,101ea3c <_signal_r+0x98>
 101ea34:	8140b717 	ldw	r5,732(r16)
 101ea38:	003ff006 	br	101e9fc <_signal_r+0x58>
 101ea3c:	00ffffc4 	movi	r3,-1
 101ea40:	003fe506 	br	101e9d8 <_signal_r+0x34>

0101ea44 <signal>:
 101ea44:	018040f4 	movhi	r6,259
 101ea48:	319bed04 	addi	r6,r6,28596
 101ea4c:	2007883a 	mov	r3,r4
 101ea50:	31000017 	ldw	r4,0(r6)
 101ea54:	280d883a 	mov	r6,r5
 101ea58:	180b883a 	mov	r5,r3
 101ea5c:	101e9a41 	jmpi	101e9a4 <_signal_r>

0101ea60 <_getpid_r>:
 101ea60:	10213f81 	jmpi	10213f8 <getpid>

0101ea64 <_kill_r>:
 101ea64:	defffd04 	addi	sp,sp,-12
 101ea68:	dc000015 	stw	r16,0(sp)
 101ea6c:	04004134 	movhi	r16,260
 101ea70:	84230104 	addi	r16,r16,-29692
 101ea74:	dc400115 	stw	r17,4(sp)
 101ea78:	80000015 	stw	zero,0(r16)
 101ea7c:	2023883a 	mov	r17,r4
 101ea80:	2809883a 	mov	r4,r5
 101ea84:	300b883a 	mov	r5,r6
 101ea88:	dfc00215 	stw	ra,8(sp)
 101ea8c:	10215380 	call	1021538 <kill>
 101ea90:	1007883a 	mov	r3,r2
 101ea94:	00bfffc4 	movi	r2,-1
 101ea98:	18800626 	beq	r3,r2,101eab4 <_kill_r+0x50>
 101ea9c:	1805883a 	mov	r2,r3
 101eaa0:	dfc00217 	ldw	ra,8(sp)
 101eaa4:	dc400117 	ldw	r17,4(sp)
 101eaa8:	dc000017 	ldw	r16,0(sp)
 101eaac:	dec00304 	addi	sp,sp,12
 101eab0:	f800283a 	ret
 101eab4:	80800017 	ldw	r2,0(r16)
 101eab8:	103ff826 	beq	r2,zero,101ea9c <_kill_r+0x38>
 101eabc:	88800015 	stw	r2,0(r17)
 101eac0:	1805883a 	mov	r2,r3
 101eac4:	dfc00217 	ldw	ra,8(sp)
 101eac8:	dc400117 	ldw	r17,4(sp)
 101eacc:	dc000017 	ldw	r16,0(sp)
 101ead0:	dec00304 	addi	sp,sp,12
 101ead4:	f800283a 	ret

0101ead8 <__sprint_r>:
 101ead8:	30800217 	ldw	r2,8(r6)
 101eadc:	defffe04 	addi	sp,sp,-8
 101eae0:	dc000015 	stw	r16,0(sp)
 101eae4:	dfc00115 	stw	ra,4(sp)
 101eae8:	3021883a 	mov	r16,r6
 101eaec:	0007883a 	mov	r3,zero
 101eaf0:	1000061e 	bne	r2,zero,101eb0c <__sprint_r+0x34>
 101eaf4:	1805883a 	mov	r2,r3
 101eaf8:	30000115 	stw	zero,4(r6)
 101eafc:	dfc00117 	ldw	ra,4(sp)
 101eb00:	dc000017 	ldw	r16,0(sp)
 101eb04:	dec00204 	addi	sp,sp,8
 101eb08:	f800283a 	ret
 101eb0c:	101bc480 	call	101bc48 <__sfvwrite_r>
 101eb10:	1007883a 	mov	r3,r2
 101eb14:	1805883a 	mov	r2,r3
 101eb18:	80000115 	stw	zero,4(r16)
 101eb1c:	80000215 	stw	zero,8(r16)
 101eb20:	dfc00117 	ldw	ra,4(sp)
 101eb24:	dc000017 	ldw	r16,0(sp)
 101eb28:	dec00204 	addi	sp,sp,8
 101eb2c:	f800283a 	ret

0101eb30 <___vfiprintf_internal_r>:
 101eb30:	defeb604 	addi	sp,sp,-1320
 101eb34:	dd814615 	stw	r22,1304(sp)
 101eb38:	dd414515 	stw	r21,1300(sp)
 101eb3c:	dc014015 	stw	r16,1280(sp)
 101eb40:	dfc14915 	stw	ra,1316(sp)
 101eb44:	df014815 	stw	fp,1312(sp)
 101eb48:	ddc14715 	stw	r23,1308(sp)
 101eb4c:	dd014415 	stw	r20,1296(sp)
 101eb50:	dcc14315 	stw	r19,1292(sp)
 101eb54:	dc814215 	stw	r18,1288(sp)
 101eb58:	dc414115 	stw	r17,1284(sp)
 101eb5c:	202d883a 	mov	r22,r4
 101eb60:	282b883a 	mov	r21,r5
 101eb64:	3021883a 	mov	r16,r6
 101eb68:	20000226 	beq	r4,zero,101eb74 <___vfiprintf_internal_r+0x44>
 101eb6c:	20800e17 	ldw	r2,56(r4)
 101eb70:	1001bc26 	beq	r2,zero,101f264 <___vfiprintf_internal_r+0x734>
 101eb74:	a880030b 	ldhu	r2,12(r21)
 101eb78:	1080020c 	andi	r2,r2,8
 101eb7c:	1001cb26 	beq	r2,zero,101f2ac <___vfiprintf_internal_r+0x77c>
 101eb80:	a8800417 	ldw	r2,16(r21)
 101eb84:	1001c926 	beq	r2,zero,101f2ac <___vfiprintf_internal_r+0x77c>
 101eb88:	aa00030b 	ldhu	r8,12(r21)
 101eb8c:	00800284 	movi	r2,10
 101eb90:	40c0068c 	andi	r3,r8,26
 101eb94:	18802f1e 	bne	r3,r2,101ec54 <___vfiprintf_internal_r+0x124>
 101eb98:	a880038f 	ldh	r2,14(r21)
 101eb9c:	10002d16 	blt	r2,zero,101ec54 <___vfiprintf_internal_r+0x124>
 101eba0:	aa40038b 	ldhu	r9,14(r21)
 101eba4:	aa800717 	ldw	r10,28(r21)
 101eba8:	aac00917 	ldw	r11,36(r21)
 101ebac:	dc401e04 	addi	r17,sp,120
 101ebb0:	d8803504 	addi	r2,sp,212
 101ebb4:	00c10004 	movi	r3,1024
 101ebb8:	423fff4c 	andi	r8,r8,65533
 101ebbc:	800d883a 	mov	r6,r16
 101ebc0:	b009883a 	mov	r4,r22
 101ebc4:	880b883a 	mov	r5,r17
 101ebc8:	da00210d 	sth	r8,132(sp)
 101ebcc:	da40218d 	sth	r9,134(sp)
 101ebd0:	da802515 	stw	r10,148(sp)
 101ebd4:	dac02715 	stw	r11,156(sp)
 101ebd8:	d8802215 	stw	r2,136(sp)
 101ebdc:	d8c02315 	stw	r3,140(sp)
 101ebe0:	d8801e15 	stw	r2,120(sp)
 101ebe4:	d8c02015 	stw	r3,128(sp)
 101ebe8:	d8002415 	stw	zero,144(sp)
 101ebec:	101eb300 	call	101eb30 <___vfiprintf_internal_r>
 101ebf0:	d8813a15 	stw	r2,1256(sp)
 101ebf4:	10000416 	blt	r2,zero,101ec08 <___vfiprintf_internal_r+0xd8>
 101ebf8:	b009883a 	mov	r4,r22
 101ebfc:	880b883a 	mov	r5,r17
 101ec00:	101b5380 	call	101b538 <_fflush_r>
 101ec04:	1001b01e 	bne	r2,zero,101f2c8 <___vfiprintf_internal_r+0x798>
 101ec08:	d880210b 	ldhu	r2,132(sp)
 101ec0c:	1080100c 	andi	r2,r2,64
 101ec10:	10000326 	beq	r2,zero,101ec20 <___vfiprintf_internal_r+0xf0>
 101ec14:	a880030b 	ldhu	r2,12(r21)
 101ec18:	10801014 	ori	r2,r2,64
 101ec1c:	a880030d 	sth	r2,12(r21)
 101ec20:	d8813a17 	ldw	r2,1256(sp)
 101ec24:	dfc14917 	ldw	ra,1316(sp)
 101ec28:	df014817 	ldw	fp,1312(sp)
 101ec2c:	ddc14717 	ldw	r23,1308(sp)
 101ec30:	dd814617 	ldw	r22,1304(sp)
 101ec34:	dd414517 	ldw	r21,1300(sp)
 101ec38:	dd014417 	ldw	r20,1296(sp)
 101ec3c:	dcc14317 	ldw	r19,1292(sp)
 101ec40:	dc814217 	ldw	r18,1288(sp)
 101ec44:	dc414117 	ldw	r17,1284(sp)
 101ec48:	dc014017 	ldw	r16,1280(sp)
 101ec4c:	dec14a04 	addi	sp,sp,1320
 101ec50:	f800283a 	ret
 101ec54:	d8c00e04 	addi	r3,sp,56
 101ec58:	8029883a 	mov	r20,r16
 101ec5c:	d8c00115 	stw	r3,4(sp)
 101ec60:	d8000315 	stw	zero,12(sp)
 101ec64:	d8000215 	stw	zero,8(sp)
 101ec68:	1825883a 	mov	r18,r3
 101ec6c:	d8013a15 	stw	zero,1256(sp)
 101ec70:	d8013615 	stw	zero,1240(sp)
 101ec74:	a0800007 	ldb	r2,0(r20)
 101ec78:	10001926 	beq	r2,zero,101ece0 <___vfiprintf_internal_r+0x1b0>
 101ec7c:	00c00944 	movi	r3,37
 101ec80:	10c01726 	beq	r2,r3,101ece0 <___vfiprintf_internal_r+0x1b0>
 101ec84:	a021883a 	mov	r16,r20
 101ec88:	00000106 	br	101ec90 <___vfiprintf_internal_r+0x160>
 101ec8c:	10c00326 	beq	r2,r3,101ec9c <___vfiprintf_internal_r+0x16c>
 101ec90:	84000044 	addi	r16,r16,1
 101ec94:	80800007 	ldb	r2,0(r16)
 101ec98:	103ffc1e 	bne	r2,zero,101ec8c <___vfiprintf_internal_r+0x15c>
 101ec9c:	8523c83a 	sub	r17,r16,r20
 101eca0:	88000e26 	beq	r17,zero,101ecdc <___vfiprintf_internal_r+0x1ac>
 101eca4:	d9400317 	ldw	r5,12(sp)
 101eca8:	d9000217 	ldw	r4,8(sp)
 101ecac:	008001c4 	movi	r2,7
 101ecb0:	2c4b883a 	add	r5,r5,r17
 101ecb4:	21000044 	addi	r4,r4,1
 101ecb8:	95000015 	stw	r20,0(r18)
 101ecbc:	d9400315 	stw	r5,12(sp)
 101ecc0:	94400115 	stw	r17,4(r18)
 101ecc4:	d9000215 	stw	r4,8(sp)
 101ecc8:	1101e816 	blt	r2,r4,101f46c <___vfiprintf_internal_r+0x93c>
 101eccc:	94800204 	addi	r18,r18,8
 101ecd0:	d9013a17 	ldw	r4,1256(sp)
 101ecd4:	2449883a 	add	r4,r4,r17
 101ecd8:	d9013a15 	stw	r4,1256(sp)
 101ecdc:	8029883a 	mov	r20,r16
 101ece0:	a0800007 	ldb	r2,0(r20)
 101ece4:	10012e26 	beq	r2,zero,101f1a0 <___vfiprintf_internal_r+0x670>
 101ece8:	a5000044 	addi	r20,r20,1
 101ecec:	d8000005 	stb	zero,0(sp)
 101ecf0:	a0c00007 	ldb	r3,0(r20)
 101ecf4:	05ffffc4 	movi	r23,-1
 101ecf8:	d8013915 	stw	zero,1252(sp)
 101ecfc:	d8013b15 	stw	zero,1260(sp)
 101ed00:	180b883a 	mov	r5,r3
 101ed04:	a5000044 	addi	r20,r20,1
 101ed08:	28fff804 	addi	r3,r5,-32
 101ed0c:	00801604 	movi	r2,88
 101ed10:	10c06036 	bltu	r2,r3,101ee94 <___vfiprintf_internal_r+0x364>
 101ed14:	18c5883a 	add	r2,r3,r3
 101ed18:	1085883a 	add	r2,r2,r2
 101ed1c:	00c040b4 	movhi	r3,258
 101ed20:	18fb4c04 	addi	r3,r3,-4816
 101ed24:	10c5883a 	add	r2,r2,r3
 101ed28:	11000017 	ldw	r4,0(r2)
 101ed2c:	2000683a 	jmp	r4
 101ed30:	0101f598 	cmpnei	r4,zero,2006
 101ed34:	0101ee94 	movui	r4,1978
 101ed38:	0101ee94 	movui	r4,1978
 101ed3c:	0101f640 	call	101f64 <__alt_mem_onchip_memory2_0+0x101f64>
 101ed40:	0101ee94 	movui	r4,1978
 101ed44:	0101ee94 	movui	r4,1978
 101ed48:	0101ee94 	movui	r4,1978
 101ed4c:	0101ee94 	movui	r4,1978
 101ed50:	0101ee94 	movui	r4,1978
 101ed54:	0101ee94 	movui	r4,1978
 101ed58:	0101f520 	cmpeqi	r4,zero,2004
 101ed5c:	0101f654 	movui	r4,2009
 101ed60:	0101ee94 	movui	r4,1978
 101ed64:	0101f538 	rdprs	r4,zero,2004
 101ed68:	0101f5f0 	cmpltui	r4,zero,2007
 101ed6c:	0101ee94 	movui	r4,1978
 101ed70:	0101f5dc 	xori	r4,zero,2007
 101ed74:	0101f5b0 	cmpltui	r4,zero,2006
 101ed78:	0101f5b0 	cmpltui	r4,zero,2006
 101ed7c:	0101f5b0 	cmpltui	r4,zero,2006
 101ed80:	0101f5b0 	cmpltui	r4,zero,2006
 101ed84:	0101f5b0 	cmpltui	r4,zero,2006
 101ed88:	0101f5b0 	cmpltui	r4,zero,2006
 101ed8c:	0101f5b0 	cmpltui	r4,zero,2006
 101ed90:	0101f5b0 	cmpltui	r4,zero,2006
 101ed94:	0101f5b0 	cmpltui	r4,zero,2006
 101ed98:	0101ee94 	movui	r4,1978
 101ed9c:	0101ee94 	movui	r4,1978
 101eda0:	0101ee94 	movui	r4,1978
 101eda4:	0101ee94 	movui	r4,1978
 101eda8:	0101ee94 	movui	r4,1978
 101edac:	0101ee94 	movui	r4,1978
 101edb0:	0101ee94 	movui	r4,1978
 101edb4:	0101ee94 	movui	r4,1978
 101edb8:	0101ee94 	movui	r4,1978
 101edbc:	0101ee94 	movui	r4,1978
 101edc0:	0101f2fc 	xorhi	r4,zero,1995
 101edc4:	0101ee94 	movui	r4,1978
 101edc8:	0101ee94 	movui	r4,1978
 101edcc:	0101ee94 	movui	r4,1978
 101edd0:	0101ee94 	movui	r4,1978
 101edd4:	0101ee94 	movui	r4,1978
 101edd8:	0101ee94 	movui	r4,1978
 101eddc:	0101ee94 	movui	r4,1978
 101ede0:	0101ee94 	movui	r4,1978
 101ede4:	0101ee94 	movui	r4,1978
 101ede8:	0101ee94 	movui	r4,1978
 101edec:	0101f3b0 	cmpltui	r4,zero,1998
 101edf0:	0101ee94 	movui	r4,1978
 101edf4:	0101ee94 	movui	r4,1978
 101edf8:	0101ee94 	movui	r4,1978
 101edfc:	0101ee94 	movui	r4,1978
 101ee00:	0101ee94 	movui	r4,1978
 101ee04:	0101f3fc 	xorhi	r4,zero,1999
 101ee08:	0101ee94 	movui	r4,1978
 101ee0c:	0101ee94 	movui	r4,1978
 101ee10:	0101f6ec 	andhi	r4,zero,2011
 101ee14:	0101ee94 	movui	r4,1978
 101ee18:	0101ee94 	movui	r4,1978
 101ee1c:	0101ee94 	movui	r4,1978
 101ee20:	0101ee94 	movui	r4,1978
 101ee24:	0101ee94 	movui	r4,1978
 101ee28:	0101ee94 	movui	r4,1978
 101ee2c:	0101ee94 	movui	r4,1978
 101ee30:	0101ee94 	movui	r4,1978
 101ee34:	0101ee94 	movui	r4,1978
 101ee38:	0101ee94 	movui	r4,1978
 101ee3c:	0101f6c4 	movi	r4,2011
 101ee40:	0101f308 	cmpgei	r4,zero,1996
 101ee44:	0101ee94 	movui	r4,1978
 101ee48:	0101ee94 	movui	r4,1978
 101ee4c:	0101ee94 	movui	r4,1978
 101ee50:	0101f7d0 	cmplti	r4,zero,2015
 101ee54:	0101f308 	cmpgei	r4,zero,1996
 101ee58:	0101ee94 	movui	r4,1978
 101ee5c:	0101ee94 	movui	r4,1978
 101ee60:	0101f724 	muli	r4,zero,2012
 101ee64:	0101ee94 	movui	r4,1978
 101ee68:	0101f6fc 	xorhi	r4,zero,2011
 101ee6c:	0101f3bc 	xorhi	r4,zero,1998
 101ee70:	0101f78c 	andi	r4,zero,2014
 101ee74:	0101f7e4 	muli	r4,zero,2015
 101ee78:	0101ee94 	movui	r4,1978
 101ee7c:	0101f740 	call	101f74 <__alt_mem_onchip_memory2_0+0x101f74>
 101ee80:	0101ee94 	movui	r4,1978
 101ee84:	0101f408 	cmpgei	r4,zero,2000
 101ee88:	0101ee94 	movui	r4,1978
 101ee8c:	0101ee94 	movui	r4,1978
 101ee90:	0101f664 	muli	r4,zero,2009
 101ee94:	2800c226 	beq	r5,zero,101f1a0 <___vfiprintf_internal_r+0x670>
 101ee98:	07000044 	movi	fp,1
 101ee9c:	d9000404 	addi	r4,sp,16
 101eea0:	d9c13515 	stw	r7,1236(sp)
 101eea4:	d9013c15 	stw	r4,1264(sp)
 101eea8:	df013715 	stw	fp,1244(sp)
 101eeac:	d9400405 	stb	r5,16(sp)
 101eeb0:	d8000005 	stb	zero,0(sp)
 101eeb4:	d8013815 	stw	zero,1248(sp)
 101eeb8:	d9813b17 	ldw	r6,1260(sp)
 101eebc:	3080008c 	andi	r2,r6,2
 101eec0:	1005003a 	cmpeq	r2,r2,zero
 101eec4:	d8813e15 	stw	r2,1272(sp)
 101eec8:	1000011e 	bne	r2,zero,101eed0 <___vfiprintf_internal_r+0x3a0>
 101eecc:	e7000084 	addi	fp,fp,2
 101eed0:	d8813b17 	ldw	r2,1260(sp)
 101eed4:	1080210c 	andi	r2,r2,132
 101eed8:	d8813d15 	stw	r2,1268(sp)
 101eedc:	10002a1e 	bne	r2,zero,101ef88 <___vfiprintf_internal_r+0x458>
 101eee0:	d8c13917 	ldw	r3,1252(sp)
 101eee4:	1f21c83a 	sub	r16,r3,fp
 101eee8:	0400270e 	bge	zero,r16,101ef88 <___vfiprintf_internal_r+0x458>
 101eeec:	00800404 	movi	r2,16
 101eef0:	1402c80e 	bge	r2,r16,101fa14 <___vfiprintf_internal_r+0xee4>
 101eef4:	d9400317 	ldw	r5,12(sp)
 101eef8:	d9000217 	ldw	r4,8(sp)
 101eefc:	1023883a 	mov	r17,r2
 101ef00:	05c040f4 	movhi	r23,259
 101ef04:	bdd4d004 	addi	r23,r23,21312
 101ef08:	04c001c4 	movi	r19,7
 101ef0c:	00000306 	br	101ef1c <___vfiprintf_internal_r+0x3ec>
 101ef10:	843ffc04 	addi	r16,r16,-16
 101ef14:	94800204 	addi	r18,r18,8
 101ef18:	8c00110e 	bge	r17,r16,101ef60 <___vfiprintf_internal_r+0x430>
 101ef1c:	29400404 	addi	r5,r5,16
 101ef20:	21000044 	addi	r4,r4,1
 101ef24:	95c00015 	stw	r23,0(r18)
 101ef28:	94400115 	stw	r17,4(r18)
 101ef2c:	d9400315 	stw	r5,12(sp)
 101ef30:	d9000215 	stw	r4,8(sp)
 101ef34:	993ff60e 	bge	r19,r4,101ef10 <___vfiprintf_internal_r+0x3e0>
 101ef38:	b009883a 	mov	r4,r22
 101ef3c:	a80b883a 	mov	r5,r21
 101ef40:	d9800104 	addi	r6,sp,4
 101ef44:	101ead80 	call	101ead8 <__sprint_r>
 101ef48:	1000981e 	bne	r2,zero,101f1ac <___vfiprintf_internal_r+0x67c>
 101ef4c:	843ffc04 	addi	r16,r16,-16
 101ef50:	d9400317 	ldw	r5,12(sp)
 101ef54:	d9000217 	ldw	r4,8(sp)
 101ef58:	dc800e04 	addi	r18,sp,56
 101ef5c:	8c3fef16 	blt	r17,r16,101ef1c <___vfiprintf_internal_r+0x3ec>
 101ef60:	2c0b883a 	add	r5,r5,r16
 101ef64:	21000044 	addi	r4,r4,1
 101ef68:	008001c4 	movi	r2,7
 101ef6c:	95c00015 	stw	r23,0(r18)
 101ef70:	94000115 	stw	r16,4(r18)
 101ef74:	d9400315 	stw	r5,12(sp)
 101ef78:	d9000215 	stw	r4,8(sp)
 101ef7c:	11015616 	blt	r2,r4,101f4d8 <___vfiprintf_internal_r+0x9a8>
 101ef80:	94800204 	addi	r18,r18,8
 101ef84:	00000206 	br	101ef90 <___vfiprintf_internal_r+0x460>
 101ef88:	d9400317 	ldw	r5,12(sp)
 101ef8c:	d9000217 	ldw	r4,8(sp)
 101ef90:	d8800007 	ldb	r2,0(sp)
 101ef94:	10000a26 	beq	r2,zero,101efc0 <___vfiprintf_internal_r+0x490>
 101ef98:	00800044 	movi	r2,1
 101ef9c:	29400044 	addi	r5,r5,1
 101efa0:	21000044 	addi	r4,r4,1
 101efa4:	90800115 	stw	r2,4(r18)
 101efa8:	008001c4 	movi	r2,7
 101efac:	96c00015 	stw	sp,0(r18)
 101efb0:	d9400315 	stw	r5,12(sp)
 101efb4:	d9000215 	stw	r4,8(sp)
 101efb8:	11013516 	blt	r2,r4,101f490 <___vfiprintf_internal_r+0x960>
 101efbc:	94800204 	addi	r18,r18,8
 101efc0:	d9813e17 	ldw	r6,1272(sp)
 101efc4:	30000b1e 	bne	r6,zero,101eff4 <___vfiprintf_internal_r+0x4c4>
 101efc8:	d8800044 	addi	r2,sp,1
 101efcc:	29400084 	addi	r5,r5,2
 101efd0:	21000044 	addi	r4,r4,1
 101efd4:	90800015 	stw	r2,0(r18)
 101efd8:	00c00084 	movi	r3,2
 101efdc:	008001c4 	movi	r2,7
 101efe0:	90c00115 	stw	r3,4(r18)
 101efe4:	d9400315 	stw	r5,12(sp)
 101efe8:	d9000215 	stw	r4,8(sp)
 101efec:	11013116 	blt	r2,r4,101f4b4 <___vfiprintf_internal_r+0x984>
 101eff0:	94800204 	addi	r18,r18,8
 101eff4:	d8c13d17 	ldw	r3,1268(sp)
 101eff8:	00802004 	movi	r2,128
 101effc:	18807126 	beq	r3,r2,101f1c4 <___vfiprintf_internal_r+0x694>
 101f000:	d8813817 	ldw	r2,1248(sp)
 101f004:	d8c13717 	ldw	r3,1244(sp)
 101f008:	10e1c83a 	sub	r16,r2,r3
 101f00c:	0400240e 	bge	zero,r16,101f0a0 <___vfiprintf_internal_r+0x570>
 101f010:	00800404 	movi	r2,16
 101f014:	1402510e 	bge	r2,r16,101f95c <___vfiprintf_internal_r+0xe2c>
 101f018:	1023883a 	mov	r17,r2
 101f01c:	05c040f4 	movhi	r23,259
 101f020:	bdd4cc04 	addi	r23,r23,21296
 101f024:	04c001c4 	movi	r19,7
 101f028:	00000306 	br	101f038 <___vfiprintf_internal_r+0x508>
 101f02c:	843ffc04 	addi	r16,r16,-16
 101f030:	94800204 	addi	r18,r18,8
 101f034:	8c00110e 	bge	r17,r16,101f07c <___vfiprintf_internal_r+0x54c>
 101f038:	29400404 	addi	r5,r5,16
 101f03c:	21000044 	addi	r4,r4,1
 101f040:	95c00015 	stw	r23,0(r18)
 101f044:	94400115 	stw	r17,4(r18)
 101f048:	d9400315 	stw	r5,12(sp)
 101f04c:	d9000215 	stw	r4,8(sp)
 101f050:	993ff60e 	bge	r19,r4,101f02c <___vfiprintf_internal_r+0x4fc>
 101f054:	b009883a 	mov	r4,r22
 101f058:	a80b883a 	mov	r5,r21
 101f05c:	d9800104 	addi	r6,sp,4
 101f060:	101ead80 	call	101ead8 <__sprint_r>
 101f064:	1000511e 	bne	r2,zero,101f1ac <___vfiprintf_internal_r+0x67c>
 101f068:	843ffc04 	addi	r16,r16,-16
 101f06c:	d9400317 	ldw	r5,12(sp)
 101f070:	d9000217 	ldw	r4,8(sp)
 101f074:	dc800e04 	addi	r18,sp,56
 101f078:	8c3fef16 	blt	r17,r16,101f038 <___vfiprintf_internal_r+0x508>
 101f07c:	2c0b883a 	add	r5,r5,r16
 101f080:	21000044 	addi	r4,r4,1
 101f084:	008001c4 	movi	r2,7
 101f088:	95c00015 	stw	r23,0(r18)
 101f08c:	94000115 	stw	r16,4(r18)
 101f090:	d9400315 	stw	r5,12(sp)
 101f094:	d9000215 	stw	r4,8(sp)
 101f098:	1100eb16 	blt	r2,r4,101f448 <___vfiprintf_internal_r+0x918>
 101f09c:	94800204 	addi	r18,r18,8
 101f0a0:	d9813717 	ldw	r6,1244(sp)
 101f0a4:	d8813c17 	ldw	r2,1264(sp)
 101f0a8:	21000044 	addi	r4,r4,1
 101f0ac:	298b883a 	add	r5,r5,r6
 101f0b0:	90800015 	stw	r2,0(r18)
 101f0b4:	008001c4 	movi	r2,7
 101f0b8:	91800115 	stw	r6,4(r18)
 101f0bc:	d9400315 	stw	r5,12(sp)
 101f0c0:	d9000215 	stw	r4,8(sp)
 101f0c4:	11006b16 	blt	r2,r4,101f274 <___vfiprintf_internal_r+0x744>
 101f0c8:	90c00204 	addi	r3,r18,8
 101f0cc:	d9013b17 	ldw	r4,1260(sp)
 101f0d0:	2080010c 	andi	r2,r4,4
 101f0d4:	10002726 	beq	r2,zero,101f174 <___vfiprintf_internal_r+0x644>
 101f0d8:	d9813917 	ldw	r6,1252(sp)
 101f0dc:	3721c83a 	sub	r16,r6,fp
 101f0e0:	0400240e 	bge	zero,r16,101f174 <___vfiprintf_internal_r+0x644>
 101f0e4:	00800404 	movi	r2,16
 101f0e8:	1402720e 	bge	r2,r16,101fab4 <___vfiprintf_internal_r+0xf84>
 101f0ec:	d9000217 	ldw	r4,8(sp)
 101f0f0:	1023883a 	mov	r17,r2
 101f0f4:	05c040f4 	movhi	r23,259
 101f0f8:	bdd4d004 	addi	r23,r23,21312
 101f0fc:	048001c4 	movi	r18,7
 101f100:	00000306 	br	101f110 <___vfiprintf_internal_r+0x5e0>
 101f104:	843ffc04 	addi	r16,r16,-16
 101f108:	18c00204 	addi	r3,r3,8
 101f10c:	8c00110e 	bge	r17,r16,101f154 <___vfiprintf_internal_r+0x624>
 101f110:	29400404 	addi	r5,r5,16
 101f114:	21000044 	addi	r4,r4,1
 101f118:	1dc00015 	stw	r23,0(r3)
 101f11c:	1c400115 	stw	r17,4(r3)
 101f120:	d9400315 	stw	r5,12(sp)
 101f124:	d9000215 	stw	r4,8(sp)
 101f128:	913ff60e 	bge	r18,r4,101f104 <___vfiprintf_internal_r+0x5d4>
 101f12c:	b009883a 	mov	r4,r22
 101f130:	a80b883a 	mov	r5,r21
 101f134:	d9800104 	addi	r6,sp,4
 101f138:	101ead80 	call	101ead8 <__sprint_r>
 101f13c:	10001b1e 	bne	r2,zero,101f1ac <___vfiprintf_internal_r+0x67c>
 101f140:	843ffc04 	addi	r16,r16,-16
 101f144:	d9400317 	ldw	r5,12(sp)
 101f148:	d9000217 	ldw	r4,8(sp)
 101f14c:	d8c00e04 	addi	r3,sp,56
 101f150:	8c3fef16 	blt	r17,r16,101f110 <___vfiprintf_internal_r+0x5e0>
 101f154:	2c0b883a 	add	r5,r5,r16
 101f158:	21000044 	addi	r4,r4,1
 101f15c:	008001c4 	movi	r2,7
 101f160:	1dc00015 	stw	r23,0(r3)
 101f164:	1c000115 	stw	r16,4(r3)
 101f168:	d9400315 	stw	r5,12(sp)
 101f16c:	d9000215 	stw	r4,8(sp)
 101f170:	11005b16 	blt	r2,r4,101f2e0 <___vfiprintf_internal_r+0x7b0>
 101f174:	d8813917 	ldw	r2,1252(sp)
 101f178:	1700010e 	bge	r2,fp,101f180 <___vfiprintf_internal_r+0x650>
 101f17c:	e005883a 	mov	r2,fp
 101f180:	d8c13a17 	ldw	r3,1256(sp)
 101f184:	1887883a 	add	r3,r3,r2
 101f188:	d8c13a15 	stw	r3,1256(sp)
 101f18c:	2800411e 	bne	r5,zero,101f294 <___vfiprintf_internal_r+0x764>
 101f190:	d9c13517 	ldw	r7,1236(sp)
 101f194:	dc800e04 	addi	r18,sp,56
 101f198:	d8000215 	stw	zero,8(sp)
 101f19c:	003eb506 	br	101ec74 <___vfiprintf_internal_r+0x144>
 101f1a0:	d8800317 	ldw	r2,12(sp)
 101f1a4:	1002521e 	bne	r2,zero,101faf0 <___vfiprintf_internal_r+0xfc0>
 101f1a8:	d8000215 	stw	zero,8(sp)
 101f1ac:	a880030b 	ldhu	r2,12(r21)
 101f1b0:	1080100c 	andi	r2,r2,64
 101f1b4:	103e9a26 	beq	r2,zero,101ec20 <___vfiprintf_internal_r+0xf0>
 101f1b8:	013fffc4 	movi	r4,-1
 101f1bc:	d9013a15 	stw	r4,1256(sp)
 101f1c0:	003e9706 	br	101ec20 <___vfiprintf_internal_r+0xf0>
 101f1c4:	d9813917 	ldw	r6,1252(sp)
 101f1c8:	3721c83a 	sub	r16,r6,fp
 101f1cc:	043f8c0e 	bge	zero,r16,101f000 <___vfiprintf_internal_r+0x4d0>
 101f1d0:	00800404 	movi	r2,16
 101f1d4:	14024c0e 	bge	r2,r16,101fb08 <___vfiprintf_internal_r+0xfd8>
 101f1d8:	1023883a 	mov	r17,r2
 101f1dc:	05c040f4 	movhi	r23,259
 101f1e0:	bdd4cc04 	addi	r23,r23,21296
 101f1e4:	04c001c4 	movi	r19,7
 101f1e8:	00000306 	br	101f1f8 <___vfiprintf_internal_r+0x6c8>
 101f1ec:	843ffc04 	addi	r16,r16,-16
 101f1f0:	94800204 	addi	r18,r18,8
 101f1f4:	8c00110e 	bge	r17,r16,101f23c <___vfiprintf_internal_r+0x70c>
 101f1f8:	29400404 	addi	r5,r5,16
 101f1fc:	21000044 	addi	r4,r4,1
 101f200:	95c00015 	stw	r23,0(r18)
 101f204:	94400115 	stw	r17,4(r18)
 101f208:	d9400315 	stw	r5,12(sp)
 101f20c:	d9000215 	stw	r4,8(sp)
 101f210:	993ff60e 	bge	r19,r4,101f1ec <___vfiprintf_internal_r+0x6bc>
 101f214:	b009883a 	mov	r4,r22
 101f218:	a80b883a 	mov	r5,r21
 101f21c:	d9800104 	addi	r6,sp,4
 101f220:	101ead80 	call	101ead8 <__sprint_r>
 101f224:	103fe11e 	bne	r2,zero,101f1ac <___vfiprintf_internal_r+0x67c>
 101f228:	843ffc04 	addi	r16,r16,-16
 101f22c:	d9400317 	ldw	r5,12(sp)
 101f230:	d9000217 	ldw	r4,8(sp)
 101f234:	dc800e04 	addi	r18,sp,56
 101f238:	8c3fef16 	blt	r17,r16,101f1f8 <___vfiprintf_internal_r+0x6c8>
 101f23c:	2c0b883a 	add	r5,r5,r16
 101f240:	21000044 	addi	r4,r4,1
 101f244:	008001c4 	movi	r2,7
 101f248:	95c00015 	stw	r23,0(r18)
 101f24c:	94000115 	stw	r16,4(r18)
 101f250:	d9400315 	stw	r5,12(sp)
 101f254:	d9000215 	stw	r4,8(sp)
 101f258:	1100a816 	blt	r2,r4,101f4fc <___vfiprintf_internal_r+0x9cc>
 101f25c:	94800204 	addi	r18,r18,8
 101f260:	003f6706 	br	101f000 <___vfiprintf_internal_r+0x4d0>
 101f264:	d9c13f15 	stw	r7,1276(sp)
 101f268:	1013f500 	call	1013f50 <__sinit>
 101f26c:	d9c13f17 	ldw	r7,1276(sp)
 101f270:	003e4006 	br	101eb74 <___vfiprintf_internal_r+0x44>
 101f274:	b009883a 	mov	r4,r22
 101f278:	a80b883a 	mov	r5,r21
 101f27c:	d9800104 	addi	r6,sp,4
 101f280:	101ead80 	call	101ead8 <__sprint_r>
 101f284:	103fc91e 	bne	r2,zero,101f1ac <___vfiprintf_internal_r+0x67c>
 101f288:	d9400317 	ldw	r5,12(sp)
 101f28c:	d8c00e04 	addi	r3,sp,56
 101f290:	003f8e06 	br	101f0cc <___vfiprintf_internal_r+0x59c>
 101f294:	b009883a 	mov	r4,r22
 101f298:	a80b883a 	mov	r5,r21
 101f29c:	d9800104 	addi	r6,sp,4
 101f2a0:	101ead80 	call	101ead8 <__sprint_r>
 101f2a4:	103fba26 	beq	r2,zero,101f190 <___vfiprintf_internal_r+0x660>
 101f2a8:	003fc006 	br	101f1ac <___vfiprintf_internal_r+0x67c>
 101f2ac:	b009883a 	mov	r4,r22
 101f2b0:	a80b883a 	mov	r5,r21
 101f2b4:	d9c13f15 	stw	r7,1276(sp)
 101f2b8:	1019a840 	call	1019a84 <__swsetup_r>
 101f2bc:	d9c13f17 	ldw	r7,1276(sp)
 101f2c0:	103e3126 	beq	r2,zero,101eb88 <___vfiprintf_internal_r+0x58>
 101f2c4:	003fbc06 	br	101f1b8 <___vfiprintf_internal_r+0x688>
 101f2c8:	00bfffc4 	movi	r2,-1
 101f2cc:	d8813a15 	stw	r2,1256(sp)
 101f2d0:	d880210b 	ldhu	r2,132(sp)
 101f2d4:	1080100c 	andi	r2,r2,64
 101f2d8:	103e4e1e 	bne	r2,zero,101ec14 <___vfiprintf_internal_r+0xe4>
 101f2dc:	003e5006 	br	101ec20 <___vfiprintf_internal_r+0xf0>
 101f2e0:	b009883a 	mov	r4,r22
 101f2e4:	a80b883a 	mov	r5,r21
 101f2e8:	d9800104 	addi	r6,sp,4
 101f2ec:	101ead80 	call	101ead8 <__sprint_r>
 101f2f0:	103fae1e 	bne	r2,zero,101f1ac <___vfiprintf_internal_r+0x67c>
 101f2f4:	d9400317 	ldw	r5,12(sp)
 101f2f8:	003f9e06 	br	101f174 <___vfiprintf_internal_r+0x644>
 101f2fc:	d8813b17 	ldw	r2,1260(sp)
 101f300:	10800414 	ori	r2,r2,16
 101f304:	d8813b15 	stw	r2,1260(sp)
 101f308:	d8c13b17 	ldw	r3,1260(sp)
 101f30c:	1880080c 	andi	r2,r3,32
 101f310:	10009c1e 	bne	r2,zero,101f584 <___vfiprintf_internal_r+0xa54>
 101f314:	d9413b17 	ldw	r5,1260(sp)
 101f318:	2880040c 	andi	r2,r5,16
 101f31c:	1001b21e 	bne	r2,zero,101f9e8 <___vfiprintf_internal_r+0xeb8>
 101f320:	d9813b17 	ldw	r6,1260(sp)
 101f324:	3080100c 	andi	r2,r6,64
 101f328:	1001af26 	beq	r2,zero,101f9e8 <___vfiprintf_internal_r+0xeb8>
 101f32c:	3880000f 	ldh	r2,0(r7)
 101f330:	39c00104 	addi	r7,r7,4
 101f334:	d9c13515 	stw	r7,1236(sp)
 101f338:	1023d7fa 	srai	r17,r2,31
 101f33c:	1021883a 	mov	r16,r2
 101f340:	8801e016 	blt	r17,zero,101fac4 <___vfiprintf_internal_r+0xf94>
 101f344:	01000044 	movi	r4,1
 101f348:	b8000416 	blt	r23,zero,101f35c <___vfiprintf_internal_r+0x82c>
 101f34c:	d9413b17 	ldw	r5,1260(sp)
 101f350:	00bfdfc4 	movi	r2,-129
 101f354:	288a703a 	and	r5,r5,r2
 101f358:	d9413b15 	stw	r5,1260(sp)
 101f35c:	8444b03a 	or	r2,r16,r17
 101f360:	1001271e 	bne	r2,zero,101f800 <___vfiprintf_internal_r+0xcd0>
 101f364:	b801261e 	bne	r23,zero,101f800 <___vfiprintf_internal_r+0xcd0>
 101f368:	20803fcc 	andi	r2,r4,255
 101f36c:	10017e26 	beq	r2,zero,101f968 <___vfiprintf_internal_r+0xe38>
 101f370:	d8c00e04 	addi	r3,sp,56
 101f374:	df000404 	addi	fp,sp,16
 101f378:	d8c13c15 	stw	r3,1264(sp)
 101f37c:	d8c13c17 	ldw	r3,1264(sp)
 101f380:	ddc13815 	stw	r23,1248(sp)
 101f384:	e0c5c83a 	sub	r2,fp,r3
 101f388:	10800a04 	addi	r2,r2,40
 101f38c:	d8813715 	stw	r2,1244(sp)
 101f390:	df013817 	ldw	fp,1248(sp)
 101f394:	d9413717 	ldw	r5,1244(sp)
 101f398:	e140010e 	bge	fp,r5,101f3a0 <___vfiprintf_internal_r+0x870>
 101f39c:	2839883a 	mov	fp,r5
 101f3a0:	d8800007 	ldb	r2,0(sp)
 101f3a4:	103ec426 	beq	r2,zero,101eeb8 <___vfiprintf_internal_r+0x388>
 101f3a8:	e7000044 	addi	fp,fp,1
 101f3ac:	003ec206 	br	101eeb8 <___vfiprintf_internal_r+0x388>
 101f3b0:	d9813b17 	ldw	r6,1260(sp)
 101f3b4:	31800414 	ori	r6,r6,16
 101f3b8:	d9813b15 	stw	r6,1260(sp)
 101f3bc:	d8c13b17 	ldw	r3,1260(sp)
 101f3c0:	1880080c 	andi	r2,r3,32
 101f3c4:	1000681e 	bne	r2,zero,101f568 <___vfiprintf_internal_r+0xa38>
 101f3c8:	d9413b17 	ldw	r5,1260(sp)
 101f3cc:	2880040c 	andi	r2,r5,16
 101f3d0:	1001771e 	bne	r2,zero,101f9b0 <___vfiprintf_internal_r+0xe80>
 101f3d4:	d9813b17 	ldw	r6,1260(sp)
 101f3d8:	3080100c 	andi	r2,r6,64
 101f3dc:	10017426 	beq	r2,zero,101f9b0 <___vfiprintf_internal_r+0xe80>
 101f3e0:	3c00000b 	ldhu	r16,0(r7)
 101f3e4:	0009883a 	mov	r4,zero
 101f3e8:	39c00104 	addi	r7,r7,4
 101f3ec:	0023883a 	mov	r17,zero
 101f3f0:	d9c13515 	stw	r7,1236(sp)
 101f3f4:	d8000005 	stb	zero,0(sp)
 101f3f8:	003fd306 	br	101f348 <___vfiprintf_internal_r+0x818>
 101f3fc:	d8813b17 	ldw	r2,1260(sp)
 101f400:	10800414 	ori	r2,r2,16
 101f404:	d8813b15 	stw	r2,1260(sp)
 101f408:	d8c13b17 	ldw	r3,1260(sp)
 101f40c:	1880080c 	andi	r2,r3,32
 101f410:	10004e1e 	bne	r2,zero,101f54c <___vfiprintf_internal_r+0xa1c>
 101f414:	d9413b17 	ldw	r5,1260(sp)
 101f418:	2880040c 	andi	r2,r5,16
 101f41c:	10016b1e 	bne	r2,zero,101f9cc <___vfiprintf_internal_r+0xe9c>
 101f420:	d9813b17 	ldw	r6,1260(sp)
 101f424:	3080100c 	andi	r2,r6,64
 101f428:	10016826 	beq	r2,zero,101f9cc <___vfiprintf_internal_r+0xe9c>
 101f42c:	3c00000b 	ldhu	r16,0(r7)
 101f430:	01000044 	movi	r4,1
 101f434:	39c00104 	addi	r7,r7,4
 101f438:	0023883a 	mov	r17,zero
 101f43c:	d9c13515 	stw	r7,1236(sp)
 101f440:	d8000005 	stb	zero,0(sp)
 101f444:	003fc006 	br	101f348 <___vfiprintf_internal_r+0x818>
 101f448:	b009883a 	mov	r4,r22
 101f44c:	a80b883a 	mov	r5,r21
 101f450:	d9800104 	addi	r6,sp,4
 101f454:	101ead80 	call	101ead8 <__sprint_r>
 101f458:	103f541e 	bne	r2,zero,101f1ac <___vfiprintf_internal_r+0x67c>
 101f45c:	d9400317 	ldw	r5,12(sp)
 101f460:	d9000217 	ldw	r4,8(sp)
 101f464:	dc800e04 	addi	r18,sp,56
 101f468:	003f0d06 	br	101f0a0 <___vfiprintf_internal_r+0x570>
 101f46c:	b009883a 	mov	r4,r22
 101f470:	a80b883a 	mov	r5,r21
 101f474:	d9800104 	addi	r6,sp,4
 101f478:	d9c13f15 	stw	r7,1276(sp)
 101f47c:	101ead80 	call	101ead8 <__sprint_r>
 101f480:	d9c13f17 	ldw	r7,1276(sp)
 101f484:	103f491e 	bne	r2,zero,101f1ac <___vfiprintf_internal_r+0x67c>
 101f488:	dc800e04 	addi	r18,sp,56
 101f48c:	003e1006 	br	101ecd0 <___vfiprintf_internal_r+0x1a0>
 101f490:	b009883a 	mov	r4,r22
 101f494:	a80b883a 	mov	r5,r21
 101f498:	d9800104 	addi	r6,sp,4
 101f49c:	101ead80 	call	101ead8 <__sprint_r>
 101f4a0:	103f421e 	bne	r2,zero,101f1ac <___vfiprintf_internal_r+0x67c>
 101f4a4:	d9400317 	ldw	r5,12(sp)
 101f4a8:	d9000217 	ldw	r4,8(sp)
 101f4ac:	dc800e04 	addi	r18,sp,56
 101f4b0:	003ec306 	br	101efc0 <___vfiprintf_internal_r+0x490>
 101f4b4:	b009883a 	mov	r4,r22
 101f4b8:	a80b883a 	mov	r5,r21
 101f4bc:	d9800104 	addi	r6,sp,4
 101f4c0:	101ead80 	call	101ead8 <__sprint_r>
 101f4c4:	103f391e 	bne	r2,zero,101f1ac <___vfiprintf_internal_r+0x67c>
 101f4c8:	d9400317 	ldw	r5,12(sp)
 101f4cc:	d9000217 	ldw	r4,8(sp)
 101f4d0:	dc800e04 	addi	r18,sp,56
 101f4d4:	003ec706 	br	101eff4 <___vfiprintf_internal_r+0x4c4>
 101f4d8:	b009883a 	mov	r4,r22
 101f4dc:	a80b883a 	mov	r5,r21
 101f4e0:	d9800104 	addi	r6,sp,4
 101f4e4:	101ead80 	call	101ead8 <__sprint_r>
 101f4e8:	103f301e 	bne	r2,zero,101f1ac <___vfiprintf_internal_r+0x67c>
 101f4ec:	d9400317 	ldw	r5,12(sp)
 101f4f0:	d9000217 	ldw	r4,8(sp)
 101f4f4:	dc800e04 	addi	r18,sp,56
 101f4f8:	003ea506 	br	101ef90 <___vfiprintf_internal_r+0x460>
 101f4fc:	b009883a 	mov	r4,r22
 101f500:	a80b883a 	mov	r5,r21
 101f504:	d9800104 	addi	r6,sp,4
 101f508:	101ead80 	call	101ead8 <__sprint_r>
 101f50c:	103f271e 	bne	r2,zero,101f1ac <___vfiprintf_internal_r+0x67c>
 101f510:	d9400317 	ldw	r5,12(sp)
 101f514:	d9000217 	ldw	r4,8(sp)
 101f518:	dc800e04 	addi	r18,sp,56
 101f51c:	003eb806 	br	101f000 <___vfiprintf_internal_r+0x4d0>
 101f520:	38c00017 	ldw	r3,0(r7)
 101f524:	39c00104 	addi	r7,r7,4
 101f528:	d8c13915 	stw	r3,1252(sp)
 101f52c:	1800b20e 	bge	r3,zero,101f7f8 <___vfiprintf_internal_r+0xcc8>
 101f530:	00c7c83a 	sub	r3,zero,r3
 101f534:	d8c13915 	stw	r3,1252(sp)
 101f538:	d9013b17 	ldw	r4,1260(sp)
 101f53c:	a0c00007 	ldb	r3,0(r20)
 101f540:	21000114 	ori	r4,r4,4
 101f544:	d9013b15 	stw	r4,1260(sp)
 101f548:	003ded06 	br	101ed00 <___vfiprintf_internal_r+0x1d0>
 101f54c:	3c000017 	ldw	r16,0(r7)
 101f550:	3c400117 	ldw	r17,4(r7)
 101f554:	39000204 	addi	r4,r7,8
 101f558:	d9013515 	stw	r4,1236(sp)
 101f55c:	01000044 	movi	r4,1
 101f560:	d8000005 	stb	zero,0(sp)
 101f564:	003f7806 	br	101f348 <___vfiprintf_internal_r+0x818>
 101f568:	3c000017 	ldw	r16,0(r7)
 101f56c:	3c400117 	ldw	r17,4(r7)
 101f570:	39000204 	addi	r4,r7,8
 101f574:	d9013515 	stw	r4,1236(sp)
 101f578:	0009883a 	mov	r4,zero
 101f57c:	d8000005 	stb	zero,0(sp)
 101f580:	003f7106 	br	101f348 <___vfiprintf_internal_r+0x818>
 101f584:	3c000017 	ldw	r16,0(r7)
 101f588:	3c400117 	ldw	r17,4(r7)
 101f58c:	39000204 	addi	r4,r7,8
 101f590:	d9013515 	stw	r4,1236(sp)
 101f594:	003f6a06 	br	101f340 <___vfiprintf_internal_r+0x810>
 101f598:	d8800007 	ldb	r2,0(sp)
 101f59c:	1000961e 	bne	r2,zero,101f7f8 <___vfiprintf_internal_r+0xcc8>
 101f5a0:	00800804 	movi	r2,32
 101f5a4:	d8800005 	stb	r2,0(sp)
 101f5a8:	a0c00007 	ldb	r3,0(r20)
 101f5ac:	003dd406 	br	101ed00 <___vfiprintf_internal_r+0x1d0>
 101f5b0:	0007883a 	mov	r3,zero
 101f5b4:	01000244 	movi	r4,9
 101f5b8:	188002a4 	muli	r2,r3,10
 101f5bc:	2885883a 	add	r2,r5,r2
 101f5c0:	a1400007 	ldb	r5,0(r20)
 101f5c4:	10fff404 	addi	r3,r2,-48
 101f5c8:	a5000044 	addi	r20,r20,1
 101f5cc:	28bff404 	addi	r2,r5,-48
 101f5d0:	20bff92e 	bgeu	r4,r2,101f5b8 <___vfiprintf_internal_r+0xa88>
 101f5d4:	d8c13915 	stw	r3,1252(sp)
 101f5d8:	003dcb06 	br	101ed08 <___vfiprintf_internal_r+0x1d8>
 101f5dc:	d9413b17 	ldw	r5,1260(sp)
 101f5e0:	a0c00007 	ldb	r3,0(r20)
 101f5e4:	29402014 	ori	r5,r5,128
 101f5e8:	d9413b15 	stw	r5,1260(sp)
 101f5ec:	003dc406 	br	101ed00 <___vfiprintf_internal_r+0x1d0>
 101f5f0:	a0c00007 	ldb	r3,0(r20)
 101f5f4:	00800a84 	movi	r2,42
 101f5f8:	a5000044 	addi	r20,r20,1
 101f5fc:	18816f26 	beq	r3,r2,101fbbc <___vfiprintf_internal_r+0x108c>
 101f600:	180b883a 	mov	r5,r3
 101f604:	18bff404 	addi	r2,r3,-48
 101f608:	00c00244 	movi	r3,9
 101f60c:	18816936 	bltu	r3,r2,101fbb4 <___vfiprintf_internal_r+0x1084>
 101f610:	000d883a 	mov	r6,zero
 101f614:	308002a4 	muli	r2,r6,10
 101f618:	1145883a 	add	r2,r2,r5
 101f61c:	a1400007 	ldb	r5,0(r20)
 101f620:	11bff404 	addi	r6,r2,-48
 101f624:	a5000044 	addi	r20,r20,1
 101f628:	28bff404 	addi	r2,r5,-48
 101f62c:	18bff92e 	bgeu	r3,r2,101f614 <___vfiprintf_internal_r+0xae4>
 101f630:	302f883a 	mov	r23,r6
 101f634:	303db40e 	bge	r6,zero,101ed08 <___vfiprintf_internal_r+0x1d8>
 101f638:	05ffffc4 	movi	r23,-1
 101f63c:	003db206 	br	101ed08 <___vfiprintf_internal_r+0x1d8>
 101f640:	d8813b17 	ldw	r2,1260(sp)
 101f644:	a0c00007 	ldb	r3,0(r20)
 101f648:	10800054 	ori	r2,r2,1
 101f64c:	d8813b15 	stw	r2,1260(sp)
 101f650:	003dab06 	br	101ed00 <___vfiprintf_internal_r+0x1d0>
 101f654:	00800ac4 	movi	r2,43
 101f658:	d8800005 	stb	r2,0(sp)
 101f65c:	a0c00007 	ldb	r3,0(r20)
 101f660:	003da706 	br	101ed00 <___vfiprintf_internal_r+0x1d0>
 101f664:	018040f4 	movhi	r6,259
 101f668:	3193a804 	addi	r6,r6,20128
 101f66c:	d9813615 	stw	r6,1240(sp)
 101f670:	d8c13b17 	ldw	r3,1260(sp)
 101f674:	1880080c 	andi	r2,r3,32
 101f678:	1000c226 	beq	r2,zero,101f984 <___vfiprintf_internal_r+0xe54>
 101f67c:	3c000017 	ldw	r16,0(r7)
 101f680:	3c400117 	ldw	r17,4(r7)
 101f684:	39000204 	addi	r4,r7,8
 101f688:	d9013515 	stw	r4,1236(sp)
 101f68c:	d9013b17 	ldw	r4,1260(sp)
 101f690:	2080004c 	andi	r2,r4,1
 101f694:	1005003a 	cmpeq	r2,r2,zero
 101f698:	1000931e 	bne	r2,zero,101f8e8 <___vfiprintf_internal_r+0xdb8>
 101f69c:	8444b03a 	or	r2,r16,r17
 101f6a0:	10009126 	beq	r2,zero,101f8e8 <___vfiprintf_internal_r+0xdb8>
 101f6a4:	21000094 	ori	r4,r4,2
 101f6a8:	d9013b15 	stw	r4,1260(sp)
 101f6ac:	00800c04 	movi	r2,48
 101f6b0:	01000084 	movi	r4,2
 101f6b4:	d8800045 	stb	r2,1(sp)
 101f6b8:	d9400085 	stb	r5,2(sp)
 101f6bc:	d8000005 	stb	zero,0(sp)
 101f6c0:	003f2106 	br	101f348 <___vfiprintf_internal_r+0x818>
 101f6c4:	38800017 	ldw	r2,0(r7)
 101f6c8:	07000044 	movi	fp,1
 101f6cc:	39c00104 	addi	r7,r7,4
 101f6d0:	d9800404 	addi	r6,sp,16
 101f6d4:	d9c13515 	stw	r7,1236(sp)
 101f6d8:	d9813c15 	stw	r6,1264(sp)
 101f6dc:	df013715 	stw	fp,1244(sp)
 101f6e0:	d8800405 	stb	r2,16(sp)
 101f6e4:	d8000005 	stb	zero,0(sp)
 101f6e8:	003df206 	br	101eeb4 <___vfiprintf_internal_r+0x384>
 101f6ec:	008040f4 	movhi	r2,259
 101f6f0:	1093b304 	addi	r2,r2,20172
 101f6f4:	d8813615 	stw	r2,1240(sp)
 101f6f8:	003fdd06 	br	101f670 <___vfiprintf_internal_r+0xb40>
 101f6fc:	d8c13b17 	ldw	r3,1260(sp)
 101f700:	1880080c 	andi	r2,r3,32
 101f704:	1000e326 	beq	r2,zero,101fa94 <___vfiprintf_internal_r+0xf64>
 101f708:	d9013a17 	ldw	r4,1256(sp)
 101f70c:	38800017 	ldw	r2,0(r7)
 101f710:	39c00104 	addi	r7,r7,4
 101f714:	2007d7fa 	srai	r3,r4,31
 101f718:	11000015 	stw	r4,0(r2)
 101f71c:	10c00115 	stw	r3,4(r2)
 101f720:	003d5406 	br	101ec74 <___vfiprintf_internal_r+0x144>
 101f724:	a0c00007 	ldb	r3,0(r20)
 101f728:	00801b04 	movi	r2,108
 101f72c:	1880f926 	beq	r3,r2,101fb14 <___vfiprintf_internal_r+0xfe4>
 101f730:	d9013b17 	ldw	r4,1260(sp)
 101f734:	21000414 	ori	r4,r4,16
 101f738:	d9013b15 	stw	r4,1260(sp)
 101f73c:	003d7006 	br	101ed00 <___vfiprintf_internal_r+0x1d0>
 101f740:	d8000005 	stb	zero,0(sp)
 101f744:	39000017 	ldw	r4,0(r7)
 101f748:	39c00104 	addi	r7,r7,4
 101f74c:	d9c13515 	stw	r7,1236(sp)
 101f750:	d9013c15 	stw	r4,1264(sp)
 101f754:	20010226 	beq	r4,zero,101fb60 <___vfiprintf_internal_r+0x1030>
 101f758:	b800fc16 	blt	r23,zero,101fb4c <___vfiprintf_internal_r+0x101c>
 101f75c:	d9013c17 	ldw	r4,1264(sp)
 101f760:	000b883a 	mov	r5,zero
 101f764:	b80d883a 	mov	r6,r23
 101f768:	101ce180 	call	101ce18 <memchr>
 101f76c:	10000426 	beq	r2,zero,101f780 <___vfiprintf_internal_r+0xc50>
 101f770:	d9813c17 	ldw	r6,1264(sp)
 101f774:	1185c83a 	sub	r2,r2,r6
 101f778:	d8813715 	stw	r2,1244(sp)
 101f77c:	b880010e 	bge	r23,r2,101f784 <___vfiprintf_internal_r+0xc54>
 101f780:	ddc13715 	stw	r23,1244(sp)
 101f784:	d8013815 	stw	zero,1248(sp)
 101f788:	003f0106 	br	101f390 <___vfiprintf_internal_r+0x860>
 101f78c:	d8813b17 	ldw	r2,1260(sp)
 101f790:	3c000017 	ldw	r16,0(r7)
 101f794:	00c040f4 	movhi	r3,259
 101f798:	18d3a804 	addi	r3,r3,20128
 101f79c:	10800094 	ori	r2,r2,2
 101f7a0:	d8813b15 	stw	r2,1260(sp)
 101f7a4:	39c00104 	addi	r7,r7,4
 101f7a8:	d8c13615 	stw	r3,1240(sp)
 101f7ac:	00800c04 	movi	r2,48
 101f7b0:	00c01e04 	movi	r3,120
 101f7b4:	0023883a 	mov	r17,zero
 101f7b8:	01000084 	movi	r4,2
 101f7bc:	d9c13515 	stw	r7,1236(sp)
 101f7c0:	d8800045 	stb	r2,1(sp)
 101f7c4:	d8c00085 	stb	r3,2(sp)
 101f7c8:	d8000005 	stb	zero,0(sp)
 101f7cc:	003ede06 	br	101f348 <___vfiprintf_internal_r+0x818>
 101f7d0:	d9813b17 	ldw	r6,1260(sp)
 101f7d4:	a0c00007 	ldb	r3,0(r20)
 101f7d8:	31801014 	ori	r6,r6,64
 101f7dc:	d9813b15 	stw	r6,1260(sp)
 101f7e0:	003d4706 	br	101ed00 <___vfiprintf_internal_r+0x1d0>
 101f7e4:	d9413b17 	ldw	r5,1260(sp)
 101f7e8:	a0c00007 	ldb	r3,0(r20)
 101f7ec:	29400814 	ori	r5,r5,32
 101f7f0:	d9413b15 	stw	r5,1260(sp)
 101f7f4:	003d4206 	br	101ed00 <___vfiprintf_internal_r+0x1d0>
 101f7f8:	a0c00007 	ldb	r3,0(r20)
 101f7fc:	003d4006 	br	101ed00 <___vfiprintf_internal_r+0x1d0>
 101f800:	20c03fcc 	andi	r3,r4,255
 101f804:	00800044 	movi	r2,1
 101f808:	18802b26 	beq	r3,r2,101f8b8 <___vfiprintf_internal_r+0xd88>
 101f80c:	18800b36 	bltu	r3,r2,101f83c <___vfiprintf_internal_r+0xd0c>
 101f810:	00800084 	movi	r2,2
 101f814:	18808426 	beq	r3,r2,101fa28 <___vfiprintf_internal_r+0xef8>
 101f818:	010040f4 	movhi	r4,259
 101f81c:	2113b804 	addi	r4,r4,20192
 101f820:	ddc13815 	stw	r23,1248(sp)
 101f824:	1015cfc0 	call	1015cfc <strlen>
 101f828:	d8813715 	stw	r2,1244(sp)
 101f82c:	008040f4 	movhi	r2,259
 101f830:	1093b804 	addi	r2,r2,20192
 101f834:	d8813c15 	stw	r2,1264(sp)
 101f838:	003ed506 	br	101f390 <___vfiprintf_internal_r+0x860>
 101f83c:	d8800e04 	addi	r2,sp,56
 101f840:	df000404 	addi	fp,sp,16
 101f844:	d8813c15 	stw	r2,1264(sp)
 101f848:	880a977a 	slli	r5,r17,29
 101f84c:	8004d0fa 	srli	r2,r16,3
 101f850:	8806d0fa 	srli	r3,r17,3
 101f854:	810001cc 	andi	r4,r16,7
 101f858:	2884b03a 	or	r2,r5,r2
 101f85c:	d9413c17 	ldw	r5,1264(sp)
 101f860:	21000c04 	addi	r4,r4,48
 101f864:	1021883a 	mov	r16,r2
 101f868:	297fffc4 	addi	r5,r5,-1
 101f86c:	d9413c15 	stw	r5,1264(sp)
 101f870:	29000005 	stb	r4,0(r5)
 101f874:	10cab03a 	or	r5,r2,r3
 101f878:	1823883a 	mov	r17,r3
 101f87c:	283ff21e 	bne	r5,zero,101f848 <___vfiprintf_internal_r+0xd18>
 101f880:	d9813b17 	ldw	r6,1260(sp)
 101f884:	3080004c 	andi	r2,r6,1
 101f888:	1005003a 	cmpeq	r2,r2,zero
 101f88c:	103ebb1e 	bne	r2,zero,101f37c <___vfiprintf_internal_r+0x84c>
 101f890:	20803fcc 	andi	r2,r4,255
 101f894:	1080201c 	xori	r2,r2,128
 101f898:	10bfe004 	addi	r2,r2,-128
 101f89c:	00c00c04 	movi	r3,48
 101f8a0:	10feb626 	beq	r2,r3,101f37c <___vfiprintf_internal_r+0x84c>
 101f8a4:	d8813c17 	ldw	r2,1264(sp)
 101f8a8:	10bfffc4 	addi	r2,r2,-1
 101f8ac:	d8813c15 	stw	r2,1264(sp)
 101f8b0:	10c00005 	stb	r3,0(r2)
 101f8b4:	003eb106 	br	101f37c <___vfiprintf_internal_r+0x84c>
 101f8b8:	88800068 	cmpgeui	r2,r17,1
 101f8bc:	10000d1e 	bne	r2,zero,101f8f4 <___vfiprintf_internal_r+0xdc4>
 101f8c0:	8800021e 	bne	r17,zero,101f8cc <___vfiprintf_internal_r+0xd9c>
 101f8c4:	00800244 	movi	r2,9
 101f8c8:	14000a36 	bltu	r2,r16,101f8f4 <___vfiprintf_internal_r+0xdc4>
 101f8cc:	d9800dc4 	addi	r6,sp,55
 101f8d0:	df000404 	addi	fp,sp,16
 101f8d4:	d9813c15 	stw	r6,1264(sp)
 101f8d8:	d8c13c17 	ldw	r3,1264(sp)
 101f8dc:	80800c04 	addi	r2,r16,48
 101f8e0:	18800005 	stb	r2,0(r3)
 101f8e4:	003ea506 	br	101f37c <___vfiprintf_internal_r+0x84c>
 101f8e8:	01000084 	movi	r4,2
 101f8ec:	d8000005 	stb	zero,0(sp)
 101f8f0:	003e9506 	br	101f348 <___vfiprintf_internal_r+0x818>
 101f8f4:	df000404 	addi	fp,sp,16
 101f8f8:	dcc00e04 	addi	r19,sp,56
 101f8fc:	8009883a 	mov	r4,r16
 101f900:	880b883a 	mov	r5,r17
 101f904:	01800284 	movi	r6,10
 101f908:	000f883a 	mov	r7,zero
 101f90c:	10204780 	call	1020478 <__umoddi3>
 101f910:	12000c04 	addi	r8,r2,48
 101f914:	9cffffc4 	addi	r19,r19,-1
 101f918:	8009883a 	mov	r4,r16
 101f91c:	880b883a 	mov	r5,r17
 101f920:	01800284 	movi	r6,10
 101f924:	000f883a 	mov	r7,zero
 101f928:	9a000005 	stb	r8,0(r19)
 101f92c:	101fe9c0 	call	101fe9c <__udivdi3>
 101f930:	1009883a 	mov	r4,r2
 101f934:	1021883a 	mov	r16,r2
 101f938:	18800068 	cmpgeui	r2,r3,1
 101f93c:	1823883a 	mov	r17,r3
 101f940:	103fee1e 	bne	r2,zero,101f8fc <___vfiprintf_internal_r+0xdcc>
 101f944:	1800021e 	bne	r3,zero,101f950 <___vfiprintf_internal_r+0xe20>
 101f948:	00800244 	movi	r2,9
 101f94c:	113feb36 	bltu	r2,r4,101f8fc <___vfiprintf_internal_r+0xdcc>
 101f950:	9cffffc4 	addi	r19,r19,-1
 101f954:	dcc13c15 	stw	r19,1264(sp)
 101f958:	003fdf06 	br	101f8d8 <___vfiprintf_internal_r+0xda8>
 101f95c:	05c040f4 	movhi	r23,259
 101f960:	bdd4cc04 	addi	r23,r23,21296
 101f964:	003dc506 	br	101f07c <___vfiprintf_internal_r+0x54c>
 101f968:	d9013b17 	ldw	r4,1260(sp)
 101f96c:	2080004c 	andi	r2,r4,1
 101f970:	1000421e 	bne	r2,zero,101fa7c <___vfiprintf_internal_r+0xf4c>
 101f974:	d9400e04 	addi	r5,sp,56
 101f978:	df000404 	addi	fp,sp,16
 101f97c:	d9413c15 	stw	r5,1264(sp)
 101f980:	003e7e06 	br	101f37c <___vfiprintf_internal_r+0x84c>
 101f984:	d9813b17 	ldw	r6,1260(sp)
 101f988:	3080040c 	andi	r2,r6,16
 101f98c:	10001c1e 	bne	r2,zero,101fa00 <___vfiprintf_internal_r+0xed0>
 101f990:	d8c13b17 	ldw	r3,1260(sp)
 101f994:	1880100c 	andi	r2,r3,64
 101f998:	10001926 	beq	r2,zero,101fa00 <___vfiprintf_internal_r+0xed0>
 101f99c:	3c00000b 	ldhu	r16,0(r7)
 101f9a0:	0023883a 	mov	r17,zero
 101f9a4:	39c00104 	addi	r7,r7,4
 101f9a8:	d9c13515 	stw	r7,1236(sp)
 101f9ac:	003f3706 	br	101f68c <___vfiprintf_internal_r+0xb5c>
 101f9b0:	3c000017 	ldw	r16,0(r7)
 101f9b4:	0009883a 	mov	r4,zero
 101f9b8:	39c00104 	addi	r7,r7,4
 101f9bc:	0023883a 	mov	r17,zero
 101f9c0:	d9c13515 	stw	r7,1236(sp)
 101f9c4:	d8000005 	stb	zero,0(sp)
 101f9c8:	003e5f06 	br	101f348 <___vfiprintf_internal_r+0x818>
 101f9cc:	3c000017 	ldw	r16,0(r7)
 101f9d0:	01000044 	movi	r4,1
 101f9d4:	39c00104 	addi	r7,r7,4
 101f9d8:	0023883a 	mov	r17,zero
 101f9dc:	d9c13515 	stw	r7,1236(sp)
 101f9e0:	d8000005 	stb	zero,0(sp)
 101f9e4:	003e5806 	br	101f348 <___vfiprintf_internal_r+0x818>
 101f9e8:	38800017 	ldw	r2,0(r7)
 101f9ec:	39c00104 	addi	r7,r7,4
 101f9f0:	d9c13515 	stw	r7,1236(sp)
 101f9f4:	1023d7fa 	srai	r17,r2,31
 101f9f8:	1021883a 	mov	r16,r2
 101f9fc:	003e5006 	br	101f340 <___vfiprintf_internal_r+0x810>
 101fa00:	3c000017 	ldw	r16,0(r7)
 101fa04:	0023883a 	mov	r17,zero
 101fa08:	39c00104 	addi	r7,r7,4
 101fa0c:	d9c13515 	stw	r7,1236(sp)
 101fa10:	003f1e06 	br	101f68c <___vfiprintf_internal_r+0xb5c>
 101fa14:	d9400317 	ldw	r5,12(sp)
 101fa18:	d9000217 	ldw	r4,8(sp)
 101fa1c:	05c040f4 	movhi	r23,259
 101fa20:	bdd4d004 	addi	r23,r23,21312
 101fa24:	003d4e06 	br	101ef60 <___vfiprintf_internal_r+0x430>
 101fa28:	d9000e04 	addi	r4,sp,56
 101fa2c:	df000404 	addi	fp,sp,16
 101fa30:	d9013c15 	stw	r4,1264(sp)
 101fa34:	d9813617 	ldw	r6,1240(sp)
 101fa38:	880a973a 	slli	r5,r17,28
 101fa3c:	8004d13a 	srli	r2,r16,4
 101fa40:	810003cc 	andi	r4,r16,15
 101fa44:	3109883a 	add	r4,r6,r4
 101fa48:	2884b03a 	or	r2,r5,r2
 101fa4c:	21400003 	ldbu	r5,0(r4)
 101fa50:	d9013c17 	ldw	r4,1264(sp)
 101fa54:	8806d13a 	srli	r3,r17,4
 101fa58:	1021883a 	mov	r16,r2
 101fa5c:	213fffc4 	addi	r4,r4,-1
 101fa60:	d9013c15 	stw	r4,1264(sp)
 101fa64:	d9813c17 	ldw	r6,1264(sp)
 101fa68:	10c8b03a 	or	r4,r2,r3
 101fa6c:	1823883a 	mov	r17,r3
 101fa70:	31400005 	stb	r5,0(r6)
 101fa74:	203fef1e 	bne	r4,zero,101fa34 <___vfiprintf_internal_r+0xf04>
 101fa78:	003e4006 	br	101f37c <___vfiprintf_internal_r+0x84c>
 101fa7c:	00800c04 	movi	r2,48
 101fa80:	d9800dc4 	addi	r6,sp,55
 101fa84:	df000404 	addi	fp,sp,16
 101fa88:	d8800dc5 	stb	r2,55(sp)
 101fa8c:	d9813c15 	stw	r6,1264(sp)
 101fa90:	003e3a06 	br	101f37c <___vfiprintf_internal_r+0x84c>
 101fa94:	d9413b17 	ldw	r5,1260(sp)
 101fa98:	2880040c 	andi	r2,r5,16
 101fa9c:	10002326 	beq	r2,zero,101fb2c <___vfiprintf_internal_r+0xffc>
 101faa0:	38800017 	ldw	r2,0(r7)
 101faa4:	d9813a17 	ldw	r6,1256(sp)
 101faa8:	39c00104 	addi	r7,r7,4
 101faac:	11800015 	stw	r6,0(r2)
 101fab0:	003c7006 	br	101ec74 <___vfiprintf_internal_r+0x144>
 101fab4:	d9000217 	ldw	r4,8(sp)
 101fab8:	05c040f4 	movhi	r23,259
 101fabc:	bdd4d004 	addi	r23,r23,21312
 101fac0:	003da406 	br	101f154 <___vfiprintf_internal_r+0x624>
 101fac4:	0005883a 	mov	r2,zero
 101fac8:	1409c83a 	sub	r4,r2,r16
 101facc:	1105803a 	cmpltu	r2,r2,r4
 101fad0:	044bc83a 	sub	r5,zero,r17
 101fad4:	2885c83a 	sub	r2,r5,r2
 101fad8:	2021883a 	mov	r16,r4
 101fadc:	1023883a 	mov	r17,r2
 101fae0:	01000044 	movi	r4,1
 101fae4:	00800b44 	movi	r2,45
 101fae8:	d8800005 	stb	r2,0(sp)
 101faec:	003e1606 	br	101f348 <___vfiprintf_internal_r+0x818>
 101faf0:	b009883a 	mov	r4,r22
 101faf4:	a80b883a 	mov	r5,r21
 101faf8:	d9800104 	addi	r6,sp,4
 101fafc:	101ead80 	call	101ead8 <__sprint_r>
 101fb00:	103daa1e 	bne	r2,zero,101f1ac <___vfiprintf_internal_r+0x67c>
 101fb04:	003da806 	br	101f1a8 <___vfiprintf_internal_r+0x678>
 101fb08:	05c040f4 	movhi	r23,259
 101fb0c:	bdd4cc04 	addi	r23,r23,21296
 101fb10:	003dca06 	br	101f23c <___vfiprintf_internal_r+0x70c>
 101fb14:	d8813b17 	ldw	r2,1260(sp)
 101fb18:	a5000044 	addi	r20,r20,1
 101fb1c:	a0c00007 	ldb	r3,0(r20)
 101fb20:	10800814 	ori	r2,r2,32
 101fb24:	d8813b15 	stw	r2,1260(sp)
 101fb28:	003c7506 	br	101ed00 <___vfiprintf_internal_r+0x1d0>
 101fb2c:	d8c13b17 	ldw	r3,1260(sp)
 101fb30:	1880100c 	andi	r2,r3,64
 101fb34:	10001a26 	beq	r2,zero,101fba0 <___vfiprintf_internal_r+0x1070>
 101fb38:	38800017 	ldw	r2,0(r7)
 101fb3c:	d9013a17 	ldw	r4,1256(sp)
 101fb40:	39c00104 	addi	r7,r7,4
 101fb44:	1100000d 	sth	r4,0(r2)
 101fb48:	003c4a06 	br	101ec74 <___vfiprintf_internal_r+0x144>
 101fb4c:	d9013c17 	ldw	r4,1264(sp)
 101fb50:	1015cfc0 	call	1015cfc <strlen>
 101fb54:	d8813715 	stw	r2,1244(sp)
 101fb58:	d8013815 	stw	zero,1248(sp)
 101fb5c:	003e0c06 	br	101f390 <___vfiprintf_internal_r+0x860>
 101fb60:	00800184 	movi	r2,6
 101fb64:	15c00836 	bltu	r2,r23,101fb88 <___vfiprintf_internal_r+0x1058>
 101fb68:	b839883a 	mov	fp,r23
 101fb6c:	b800010e 	bge	r23,zero,101fb74 <___vfiprintf_internal_r+0x1044>
 101fb70:	0039883a 	mov	fp,zero
 101fb74:	014040f4 	movhi	r5,259
 101fb78:	2953b104 	addi	r5,r5,20164
 101fb7c:	ddc13715 	stw	r23,1244(sp)
 101fb80:	d9413c15 	stw	r5,1264(sp)
 101fb84:	003ccb06 	br	101eeb4 <___vfiprintf_internal_r+0x384>
 101fb88:	014040f4 	movhi	r5,259
 101fb8c:	2953b104 	addi	r5,r5,20164
 101fb90:	1039883a 	mov	fp,r2
 101fb94:	d9413c15 	stw	r5,1264(sp)
 101fb98:	d8813715 	stw	r2,1244(sp)
 101fb9c:	003cc506 	br	101eeb4 <___vfiprintf_internal_r+0x384>
 101fba0:	38800017 	ldw	r2,0(r7)
 101fba4:	d9413a17 	ldw	r5,1256(sp)
 101fba8:	39c00104 	addi	r7,r7,4
 101fbac:	11400015 	stw	r5,0(r2)
 101fbb0:	003c3006 	br	101ec74 <___vfiprintf_internal_r+0x144>
 101fbb4:	002f883a 	mov	r23,zero
 101fbb8:	003c5306 	br	101ed08 <___vfiprintf_internal_r+0x1d8>
 101fbbc:	3dc00017 	ldw	r23,0(r7)
 101fbc0:	39c00104 	addi	r7,r7,4
 101fbc4:	b83f0c0e 	bge	r23,zero,101f7f8 <___vfiprintf_internal_r+0xcc8>
 101fbc8:	a0c00007 	ldb	r3,0(r20)
 101fbcc:	05ffffc4 	movi	r23,-1
 101fbd0:	003c4b06 	br	101ed00 <___vfiprintf_internal_r+0x1d0>

0101fbd4 <__vfiprintf_internal>:
 101fbd4:	008040f4 	movhi	r2,259
 101fbd8:	109bed04 	addi	r2,r2,28596
 101fbdc:	2013883a 	mov	r9,r4
 101fbe0:	11000017 	ldw	r4,0(r2)
 101fbe4:	2805883a 	mov	r2,r5
 101fbe8:	300f883a 	mov	r7,r6
 101fbec:	480b883a 	mov	r5,r9
 101fbf0:	100d883a 	mov	r6,r2
 101fbf4:	101eb301 	jmpi	101eb30 <___vfiprintf_internal_r>

0101fbf8 <__swbuf_r>:
 101fbf8:	defffc04 	addi	sp,sp,-16
 101fbfc:	dc400215 	stw	r17,8(sp)
 101fc00:	dc000115 	stw	r16,4(sp)
 101fc04:	dfc00315 	stw	ra,12(sp)
 101fc08:	2023883a 	mov	r17,r4
 101fc0c:	2821883a 	mov	r16,r5
 101fc10:	20000226 	beq	r4,zero,101fc1c <__swbuf_r+0x24>
 101fc14:	20800e17 	ldw	r2,56(r4)
 101fc18:	10002f26 	beq	r2,zero,101fcd8 <__swbuf_r+0xe0>
 101fc1c:	3080030b 	ldhu	r2,12(r6)
 101fc20:	30c00617 	ldw	r3,24(r6)
 101fc24:	1080020c 	andi	r2,r2,8
 101fc28:	30c00215 	stw	r3,8(r6)
 101fc2c:	10002226 	beq	r2,zero,101fcb8 <__swbuf_r+0xc0>
 101fc30:	30c00417 	ldw	r3,16(r6)
 101fc34:	18002026 	beq	r3,zero,101fcb8 <__swbuf_r+0xc0>
 101fc38:	31000017 	ldw	r4,0(r6)
 101fc3c:	30800517 	ldw	r2,20(r6)
 101fc40:	20c7c83a 	sub	r3,r4,r3
 101fc44:	18802f0e 	bge	r3,r2,101fd04 <__swbuf_r+0x10c>
 101fc48:	19400044 	addi	r5,r3,1
 101fc4c:	30800217 	ldw	r2,8(r6)
 101fc50:	84003fcc 	andi	r16,r16,255
 101fc54:	20c00044 	addi	r3,r4,1
 101fc58:	10bfffc4 	addi	r2,r2,-1
 101fc5c:	30800215 	stw	r2,8(r6)
 101fc60:	24000005 	stb	r16,0(r4)
 101fc64:	30800517 	ldw	r2,20(r6)
 101fc68:	30c00015 	stw	r3,0(r6)
 101fc6c:	11400c26 	beq	r2,r5,101fca0 <__swbuf_r+0xa8>
 101fc70:	3080030b 	ldhu	r2,12(r6)
 101fc74:	1080004c 	andi	r2,r2,1
 101fc78:	1005003a 	cmpeq	r2,r2,zero
 101fc7c:	10000626 	beq	r2,zero,101fc98 <__swbuf_r+0xa0>
 101fc80:	8005883a 	mov	r2,r16
 101fc84:	dfc00317 	ldw	ra,12(sp)
 101fc88:	dc400217 	ldw	r17,8(sp)
 101fc8c:	dc000117 	ldw	r16,4(sp)
 101fc90:	dec00404 	addi	sp,sp,16
 101fc94:	f800283a 	ret
 101fc98:	00800284 	movi	r2,10
 101fc9c:	80bff81e 	bne	r16,r2,101fc80 <__swbuf_r+0x88>
 101fca0:	8809883a 	mov	r4,r17
 101fca4:	300b883a 	mov	r5,r6
 101fca8:	101b5380 	call	101b538 <_fflush_r>
 101fcac:	103ff426 	beq	r2,zero,101fc80 <__swbuf_r+0x88>
 101fcb0:	043fffc4 	movi	r16,-1
 101fcb4:	003ff206 	br	101fc80 <__swbuf_r+0x88>
 101fcb8:	300b883a 	mov	r5,r6
 101fcbc:	8809883a 	mov	r4,r17
 101fcc0:	d9800015 	stw	r6,0(sp)
 101fcc4:	1019a840 	call	1019a84 <__swsetup_r>
 101fcc8:	d9800017 	ldw	r6,0(sp)
 101fccc:	1000061e 	bne	r2,zero,101fce8 <__swbuf_r+0xf0>
 101fcd0:	30c00417 	ldw	r3,16(r6)
 101fcd4:	003fd806 	br	101fc38 <__swbuf_r+0x40>
 101fcd8:	d9800015 	stw	r6,0(sp)
 101fcdc:	1013f500 	call	1013f50 <__sinit>
 101fce0:	d9800017 	ldw	r6,0(sp)
 101fce4:	003fcd06 	br	101fc1c <__swbuf_r+0x24>
 101fce8:	3080030b 	ldhu	r2,12(r6)
 101fcec:	00c00244 	movi	r3,9
 101fcf0:	043fffc4 	movi	r16,-1
 101fcf4:	10801014 	ori	r2,r2,64
 101fcf8:	3080030d 	sth	r2,12(r6)
 101fcfc:	88c00015 	stw	r3,0(r17)
 101fd00:	003fdf06 	br	101fc80 <__swbuf_r+0x88>
 101fd04:	300b883a 	mov	r5,r6
 101fd08:	8809883a 	mov	r4,r17
 101fd0c:	d9800015 	stw	r6,0(sp)
 101fd10:	101b5380 	call	101b538 <_fflush_r>
 101fd14:	d9800017 	ldw	r6,0(sp)
 101fd18:	103fe51e 	bne	r2,zero,101fcb0 <__swbuf_r+0xb8>
 101fd1c:	31000017 	ldw	r4,0(r6)
 101fd20:	01400044 	movi	r5,1
 101fd24:	003fc906 	br	101fc4c <__swbuf_r+0x54>

0101fd28 <__swbuf>:
 101fd28:	018040f4 	movhi	r6,259
 101fd2c:	319bed04 	addi	r6,r6,28596
 101fd30:	2007883a 	mov	r3,r4
 101fd34:	31000017 	ldw	r4,0(r6)
 101fd38:	280d883a 	mov	r6,r5
 101fd3c:	180b883a 	mov	r5,r3
 101fd40:	101fbf81 	jmpi	101fbf8 <__swbuf_r>

0101fd44 <_calloc_r>:
 101fd44:	298b383a 	mul	r5,r5,r6
 101fd48:	defffe04 	addi	sp,sp,-8
 101fd4c:	dc000015 	stw	r16,0(sp)
 101fd50:	dfc00115 	stw	ra,4(sp)
 101fd54:	1014b340 	call	1014b34 <_malloc_r>
 101fd58:	1021883a 	mov	r16,r2
 101fd5c:	01c00904 	movi	r7,36
 101fd60:	10000d26 	beq	r2,zero,101fd98 <_calloc_r+0x54>
 101fd64:	10ffff17 	ldw	r3,-4(r2)
 101fd68:	1009883a 	mov	r4,r2
 101fd6c:	00bfff04 	movi	r2,-4
 101fd70:	1886703a 	and	r3,r3,r2
 101fd74:	1887883a 	add	r3,r3,r2
 101fd78:	180d883a 	mov	r6,r3
 101fd7c:	000b883a 	mov	r5,zero
 101fd80:	38c01736 	bltu	r7,r3,101fde0 <_calloc_r+0x9c>
 101fd84:	008004c4 	movi	r2,19
 101fd88:	10c00836 	bltu	r2,r3,101fdac <_calloc_r+0x68>
 101fd8c:	20000215 	stw	zero,8(r4)
 101fd90:	20000015 	stw	zero,0(r4)
 101fd94:	20000115 	stw	zero,4(r4)
 101fd98:	8005883a 	mov	r2,r16
 101fd9c:	dfc00117 	ldw	ra,4(sp)
 101fda0:	dc000017 	ldw	r16,0(sp)
 101fda4:	dec00204 	addi	sp,sp,8
 101fda8:	f800283a 	ret
 101fdac:	008006c4 	movi	r2,27
 101fdb0:	80000015 	stw	zero,0(r16)
 101fdb4:	80000115 	stw	zero,4(r16)
 101fdb8:	81000204 	addi	r4,r16,8
 101fdbc:	10fff32e 	bgeu	r2,r3,101fd8c <_calloc_r+0x48>
 101fdc0:	80000215 	stw	zero,8(r16)
 101fdc4:	80000315 	stw	zero,12(r16)
 101fdc8:	81000404 	addi	r4,r16,16
 101fdcc:	19ffef1e 	bne	r3,r7,101fd8c <_calloc_r+0x48>
 101fdd0:	81000604 	addi	r4,r16,24
 101fdd4:	80000415 	stw	zero,16(r16)
 101fdd8:	80000515 	stw	zero,20(r16)
 101fddc:	003feb06 	br	101fd8c <_calloc_r+0x48>
 101fde0:	10153f40 	call	10153f4 <memset>
 101fde4:	8005883a 	mov	r2,r16
 101fde8:	dfc00117 	ldw	ra,4(sp)
 101fdec:	dc000017 	ldw	r16,0(sp)
 101fdf0:	dec00204 	addi	sp,sp,8
 101fdf4:	f800283a 	ret

0101fdf8 <__fixunsdfsi>:
 101fdf8:	defffb04 	addi	sp,sp,-20
 101fdfc:	dc400115 	stw	r17,4(sp)
 101fe00:	dc000015 	stw	r16,0(sp)
 101fe04:	04507834 	movhi	r17,16864
 101fe08:	0021883a 	mov	r16,zero
 101fe0c:	800d883a 	mov	r6,r16
 101fe10:	880f883a 	mov	r7,r17
 101fe14:	dcc00315 	stw	r19,12(sp)
 101fe18:	dc800215 	stw	r18,8(sp)
 101fe1c:	2827883a 	mov	r19,r5
 101fe20:	2025883a 	mov	r18,r4
 101fe24:	dfc00415 	stw	ra,16(sp)
 101fe28:	10131c00 	call	10131c0 <__gedf2>
 101fe2c:	000d883a 	mov	r6,zero
 101fe30:	880f883a 	mov	r7,r17
 101fe34:	980b883a 	mov	r5,r19
 101fe38:	9009883a 	mov	r4,r18
 101fe3c:	10000d16 	blt	r2,zero,101fe74 <__fixunsdfsi+0x7c>
 101fe40:	10129a00 	call	10129a0 <__subdf3>
 101fe44:	180b883a 	mov	r5,r3
 101fe48:	1009883a 	mov	r4,r2
 101fe4c:	10133c80 	call	10133c8 <__fixdfsi>
 101fe50:	00e00034 	movhi	r3,32768
 101fe54:	10c5883a 	add	r2,r2,r3
 101fe58:	dfc00417 	ldw	ra,16(sp)
 101fe5c:	dcc00317 	ldw	r19,12(sp)
 101fe60:	dc800217 	ldw	r18,8(sp)
 101fe64:	dc400117 	ldw	r17,4(sp)
 101fe68:	dc000017 	ldw	r16,0(sp)
 101fe6c:	dec00504 	addi	sp,sp,20
 101fe70:	f800283a 	ret
 101fe74:	980b883a 	mov	r5,r19
 101fe78:	9009883a 	mov	r4,r18
 101fe7c:	10133c80 	call	10133c8 <__fixdfsi>
 101fe80:	dfc00417 	ldw	ra,16(sp)
 101fe84:	dcc00317 	ldw	r19,12(sp)
 101fe88:	dc800217 	ldw	r18,8(sp)
 101fe8c:	dc400117 	ldw	r17,4(sp)
 101fe90:	dc000017 	ldw	r16,0(sp)
 101fe94:	dec00504 	addi	sp,sp,20
 101fe98:	f800283a 	ret

0101fe9c <__udivdi3>:
 101fe9c:	defff004 	addi	sp,sp,-64
 101fea0:	2005883a 	mov	r2,r4
 101fea4:	3011883a 	mov	r8,r6
 101fea8:	df000e15 	stw	fp,56(sp)
 101feac:	dd000a15 	stw	r20,40(sp)
 101feb0:	dc000615 	stw	r16,24(sp)
 101feb4:	dfc00f15 	stw	ra,60(sp)
 101feb8:	ddc00d15 	stw	r23,52(sp)
 101febc:	dd800c15 	stw	r22,48(sp)
 101fec0:	dd400b15 	stw	r21,44(sp)
 101fec4:	dcc00915 	stw	r19,36(sp)
 101fec8:	dc800815 	stw	r18,32(sp)
 101fecc:	dc400715 	stw	r17,28(sp)
 101fed0:	4021883a 	mov	r16,r8
 101fed4:	1039883a 	mov	fp,r2
 101fed8:	2829883a 	mov	r20,r5
 101fedc:	38003b1e 	bne	r7,zero,101ffcc <__udivdi3+0x130>
 101fee0:	2a005c36 	bltu	r5,r8,1020054 <__udivdi3+0x1b8>
 101fee4:	4000a626 	beq	r8,zero,1020180 <__udivdi3+0x2e4>
 101fee8:	00bfffd4 	movui	r2,65535
 101feec:	14009e36 	bltu	r2,r16,1020168 <__udivdi3+0x2cc>
 101fef0:	00803fc4 	movi	r2,255
 101fef4:	14013d36 	bltu	r2,r16,10203ec <__udivdi3+0x550>
 101fef8:	000b883a 	mov	r5,zero
 101fefc:	0005883a 	mov	r2,zero
 101ff00:	8084d83a 	srl	r2,r16,r2
 101ff04:	010040f4 	movhi	r4,259
 101ff08:	21134804 	addi	r4,r4,19744
 101ff0c:	01800804 	movi	r6,32
 101ff10:	1105883a 	add	r2,r2,r4
 101ff14:	10c00003 	ldbu	r3,0(r2)
 101ff18:	28c7883a 	add	r3,r5,r3
 101ff1c:	30edc83a 	sub	r22,r6,r3
 101ff20:	b000ee1e 	bne	r22,zero,10202dc <__udivdi3+0x440>
 101ff24:	802ad43a 	srli	r21,r16,16
 101ff28:	00800044 	movi	r2,1
 101ff2c:	a423c83a 	sub	r17,r20,r16
 101ff30:	85ffffcc 	andi	r23,r16,65535
 101ff34:	d8800315 	stw	r2,12(sp)
 101ff38:	8809883a 	mov	r4,r17
 101ff3c:	a80b883a 	mov	r5,r21
 101ff40:	10136140 	call	1013614 <__udivsi3>
 101ff44:	8809883a 	mov	r4,r17
 101ff48:	a80b883a 	mov	r5,r21
 101ff4c:	102d883a 	mov	r22,r2
 101ff50:	101361c0 	call	101361c <__umodsi3>
 101ff54:	1004943a 	slli	r2,r2,16
 101ff58:	e006d43a 	srli	r3,fp,16
 101ff5c:	bda3383a 	mul	r17,r23,r22
 101ff60:	10c4b03a 	or	r2,r2,r3
 101ff64:	1440042e 	bgeu	r2,r17,101ff78 <__udivdi3+0xdc>
 101ff68:	1405883a 	add	r2,r2,r16
 101ff6c:	b5bfffc4 	addi	r22,r22,-1
 101ff70:	14000136 	bltu	r2,r16,101ff78 <__udivdi3+0xdc>
 101ff74:	14413d36 	bltu	r2,r17,102046c <__udivdi3+0x5d0>
 101ff78:	1463c83a 	sub	r17,r2,r17
 101ff7c:	8809883a 	mov	r4,r17
 101ff80:	a80b883a 	mov	r5,r21
 101ff84:	10136140 	call	1013614 <__udivsi3>
 101ff88:	8809883a 	mov	r4,r17
 101ff8c:	a80b883a 	mov	r5,r21
 101ff90:	1029883a 	mov	r20,r2
 101ff94:	101361c0 	call	101361c <__umodsi3>
 101ff98:	1004943a 	slli	r2,r2,16
 101ff9c:	bd09383a 	mul	r4,r23,r20
 101ffa0:	e0ffffcc 	andi	r3,fp,65535
 101ffa4:	10c4b03a 	or	r2,r2,r3
 101ffa8:	1100042e 	bgeu	r2,r4,101ffbc <__udivdi3+0x120>
 101ffac:	8085883a 	add	r2,r16,r2
 101ffb0:	a53fffc4 	addi	r20,r20,-1
 101ffb4:	14000136 	bltu	r2,r16,101ffbc <__udivdi3+0x120>
 101ffb8:	11012036 	bltu	r2,r4,102043c <__udivdi3+0x5a0>
 101ffbc:	b004943a 	slli	r2,r22,16
 101ffc0:	d9000317 	ldw	r4,12(sp)
 101ffc4:	a084b03a 	or	r2,r20,r2
 101ffc8:	00001506 	br	1020020 <__udivdi3+0x184>
 101ffcc:	380d883a 	mov	r6,r7
 101ffd0:	29c06236 	bltu	r5,r7,102015c <__udivdi3+0x2c0>
 101ffd4:	00bfffd4 	movui	r2,65535
 101ffd8:	11c05a36 	bltu	r2,r7,1020144 <__udivdi3+0x2a8>
 101ffdc:	00803fc4 	movi	r2,255
 101ffe0:	11c0fc36 	bltu	r2,r7,10203d4 <__udivdi3+0x538>
 101ffe4:	000b883a 	mov	r5,zero
 101ffe8:	0005883a 	mov	r2,zero
 101ffec:	3084d83a 	srl	r2,r6,r2
 101fff0:	010040f4 	movhi	r4,259
 101fff4:	21134804 	addi	r4,r4,19744
 101fff8:	01c00804 	movi	r7,32
 101fffc:	1105883a 	add	r2,r2,r4
 1020000:	10c00003 	ldbu	r3,0(r2)
 1020004:	28c7883a 	add	r3,r5,r3
 1020008:	38efc83a 	sub	r23,r7,r3
 102000c:	b800691e 	bne	r23,zero,10201b4 <__udivdi3+0x318>
 1020010:	35000136 	bltu	r6,r20,1020018 <__udivdi3+0x17c>
 1020014:	e4005136 	bltu	fp,r16,102015c <__udivdi3+0x2c0>
 1020018:	00800044 	movi	r2,1
 102001c:	0009883a 	mov	r4,zero
 1020020:	2007883a 	mov	r3,r4
 1020024:	dfc00f17 	ldw	ra,60(sp)
 1020028:	df000e17 	ldw	fp,56(sp)
 102002c:	ddc00d17 	ldw	r23,52(sp)
 1020030:	dd800c17 	ldw	r22,48(sp)
 1020034:	dd400b17 	ldw	r21,44(sp)
 1020038:	dd000a17 	ldw	r20,40(sp)
 102003c:	dcc00917 	ldw	r19,36(sp)
 1020040:	dc800817 	ldw	r18,32(sp)
 1020044:	dc400717 	ldw	r17,28(sp)
 1020048:	dc000617 	ldw	r16,24(sp)
 102004c:	dec01004 	addi	sp,sp,64
 1020050:	f800283a 	ret
 1020054:	00bfffd4 	movui	r2,65535
 1020058:	12005036 	bltu	r2,r8,102019c <__udivdi3+0x300>
 102005c:	00803fc4 	movi	r2,255
 1020060:	1200e836 	bltu	r2,r8,1020404 <__udivdi3+0x568>
 1020064:	000b883a 	mov	r5,zero
 1020068:	0005883a 	mov	r2,zero
 102006c:	8084d83a 	srl	r2,r16,r2
 1020070:	010040f4 	movhi	r4,259
 1020074:	21134804 	addi	r4,r4,19744
 1020078:	01800804 	movi	r6,32
 102007c:	1105883a 	add	r2,r2,r4
 1020080:	10c00003 	ldbu	r3,0(r2)
 1020084:	28c7883a 	add	r3,r5,r3
 1020088:	30cbc83a 	sub	r5,r6,r3
 102008c:	28000626 	beq	r5,zero,10200a8 <__udivdi3+0x20c>
 1020090:	3145c83a 	sub	r2,r6,r5
 1020094:	e084d83a 	srl	r2,fp,r2
 1020098:	a146983a 	sll	r3,r20,r5
 102009c:	e178983a 	sll	fp,fp,r5
 10200a0:	8160983a 	sll	r16,r16,r5
 10200a4:	18a8b03a 	or	r20,r3,r2
 10200a8:	802ad43a 	srli	r21,r16,16
 10200ac:	a009883a 	mov	r4,r20
 10200b0:	85ffffcc 	andi	r23,r16,65535
 10200b4:	a80b883a 	mov	r5,r21
 10200b8:	10136140 	call	1013614 <__udivsi3>
 10200bc:	a009883a 	mov	r4,r20
 10200c0:	a80b883a 	mov	r5,r21
 10200c4:	102d883a 	mov	r22,r2
 10200c8:	101361c0 	call	101361c <__umodsi3>
 10200cc:	1004943a 	slli	r2,r2,16
 10200d0:	e006d43a 	srli	r3,fp,16
 10200d4:	bda3383a 	mul	r17,r23,r22
 10200d8:	10c4b03a 	or	r2,r2,r3
 10200dc:	1440042e 	bgeu	r2,r17,10200f0 <__udivdi3+0x254>
 10200e0:	1405883a 	add	r2,r2,r16
 10200e4:	b5bfffc4 	addi	r22,r22,-1
 10200e8:	14000136 	bltu	r2,r16,10200f0 <__udivdi3+0x254>
 10200ec:	1440d536 	bltu	r2,r17,1020444 <__udivdi3+0x5a8>
 10200f0:	1463c83a 	sub	r17,r2,r17
 10200f4:	8809883a 	mov	r4,r17
 10200f8:	a80b883a 	mov	r5,r21
 10200fc:	10136140 	call	1013614 <__udivsi3>
 1020100:	8809883a 	mov	r4,r17
 1020104:	a80b883a 	mov	r5,r21
 1020108:	1029883a 	mov	r20,r2
 102010c:	101361c0 	call	101361c <__umodsi3>
 1020110:	1004943a 	slli	r2,r2,16
 1020114:	bd09383a 	mul	r4,r23,r20
 1020118:	e0ffffcc 	andi	r3,fp,65535
 102011c:	10c4b03a 	or	r2,r2,r3
 1020120:	1100042e 	bgeu	r2,r4,1020134 <__udivdi3+0x298>
 1020124:	8085883a 	add	r2,r16,r2
 1020128:	a53fffc4 	addi	r20,r20,-1
 102012c:	14000136 	bltu	r2,r16,1020134 <__udivdi3+0x298>
 1020130:	1100c736 	bltu	r2,r4,1020450 <__udivdi3+0x5b4>
 1020134:	b004943a 	slli	r2,r22,16
 1020138:	0009883a 	mov	r4,zero
 102013c:	a084b03a 	or	r2,r20,r2
 1020140:	003fb706 	br	1020020 <__udivdi3+0x184>
 1020144:	00804034 	movhi	r2,256
 1020148:	10bfffc4 	addi	r2,r2,-1
 102014c:	11c0a436 	bltu	r2,r7,10203e0 <__udivdi3+0x544>
 1020150:	01400404 	movi	r5,16
 1020154:	2805883a 	mov	r2,r5
 1020158:	003fa406 	br	101ffec <__udivdi3+0x150>
 102015c:	0005883a 	mov	r2,zero
 1020160:	0009883a 	mov	r4,zero
 1020164:	003fae06 	br	1020020 <__udivdi3+0x184>
 1020168:	00804034 	movhi	r2,256
 102016c:	10bfffc4 	addi	r2,r2,-1
 1020170:	1400a136 	bltu	r2,r16,10203f8 <__udivdi3+0x55c>
 1020174:	01400404 	movi	r5,16
 1020178:	2805883a 	mov	r2,r5
 102017c:	003f6006 	br	101ff00 <__udivdi3+0x64>
 1020180:	01000044 	movi	r4,1
 1020184:	000b883a 	mov	r5,zero
 1020188:	10136140 	call	1013614 <__udivsi3>
 102018c:	1021883a 	mov	r16,r2
 1020190:	00bfffd4 	movui	r2,65535
 1020194:	143ff436 	bltu	r2,r16,1020168 <__udivdi3+0x2cc>
 1020198:	003f5506 	br	101fef0 <__udivdi3+0x54>
 102019c:	00804034 	movhi	r2,256
 10201a0:	10bfffc4 	addi	r2,r2,-1
 10201a4:	12009a36 	bltu	r2,r8,1020410 <__udivdi3+0x574>
 10201a8:	01400404 	movi	r5,16
 10201ac:	2805883a 	mov	r2,r5
 10201b0:	003fae06 	br	102006c <__udivdi3+0x1d0>
 10201b4:	3dc5c83a 	sub	r2,r7,r23
 10201b8:	35c8983a 	sll	r4,r6,r23
 10201bc:	8086d83a 	srl	r3,r16,r2
 10201c0:	a0a2d83a 	srl	r17,r20,r2
 10201c4:	e084d83a 	srl	r2,fp,r2
 10201c8:	20eab03a 	or	r21,r4,r3
 10201cc:	a82cd43a 	srli	r22,r21,16
 10201d0:	a5c6983a 	sll	r3,r20,r23
 10201d4:	8809883a 	mov	r4,r17
 10201d8:	b00b883a 	mov	r5,r22
 10201dc:	1886b03a 	or	r3,r3,r2
 10201e0:	d8c00215 	stw	r3,8(sp)
 10201e4:	10136140 	call	1013614 <__udivsi3>
 10201e8:	8809883a 	mov	r4,r17
 10201ec:	b00b883a 	mov	r5,r22
 10201f0:	1029883a 	mov	r20,r2
 10201f4:	101361c0 	call	101361c <__umodsi3>
 10201f8:	a8ffffcc 	andi	r3,r21,65535
 10201fc:	d8c00515 	stw	r3,20(sp)
 1020200:	d9000217 	ldw	r4,8(sp)
 1020204:	d9400517 	ldw	r5,20(sp)
 1020208:	1004943a 	slli	r2,r2,16
 102020c:	2006d43a 	srli	r3,r4,16
 1020210:	85e0983a 	sll	r16,r16,r23
 1020214:	2d23383a 	mul	r17,r5,r20
 1020218:	10c4b03a 	or	r2,r2,r3
 102021c:	dc000015 	stw	r16,0(sp)
 1020220:	1440032e 	bgeu	r2,r17,1020230 <__udivdi3+0x394>
 1020224:	1545883a 	add	r2,r2,r21
 1020228:	a53fffc4 	addi	r20,r20,-1
 102022c:	15407f2e 	bgeu	r2,r21,102042c <__udivdi3+0x590>
 1020230:	1463c83a 	sub	r17,r2,r17
 1020234:	8809883a 	mov	r4,r17
 1020238:	b00b883a 	mov	r5,r22
 102023c:	10136140 	call	1013614 <__udivsi3>
 1020240:	8809883a 	mov	r4,r17
 1020244:	b00b883a 	mov	r5,r22
 1020248:	1021883a 	mov	r16,r2
 102024c:	101361c0 	call	101361c <__umodsi3>
 1020250:	d8c00517 	ldw	r3,20(sp)
 1020254:	d9000217 	ldw	r4,8(sp)
 1020258:	1004943a 	slli	r2,r2,16
 102025c:	1c0f383a 	mul	r7,r3,r16
 1020260:	20ffffcc 	andi	r3,r4,65535
 1020264:	10e2b03a 	or	r17,r2,r3
 1020268:	89c0032e 	bgeu	r17,r7,1020278 <__udivdi3+0x3dc>
 102026c:	8d63883a 	add	r17,r17,r21
 1020270:	843fffc4 	addi	r16,r16,-1
 1020274:	8d40692e 	bgeu	r17,r21,102041c <__udivdi3+0x580>
 1020278:	a008943a 	slli	r4,r20,16
 102027c:	d9400017 	ldw	r5,0(sp)
 1020280:	89e3c83a 	sub	r17,r17,r7
 1020284:	8110b03a 	or	r8,r16,r4
 1020288:	280cd43a 	srli	r6,r5,16
 102028c:	28ffffcc 	andi	r3,r5,65535
 1020290:	40bfffcc 	andi	r2,r8,65535
 1020294:	400ad43a 	srli	r5,r8,16
 1020298:	10d3383a 	mul	r9,r2,r3
 102029c:	1185383a 	mul	r2,r2,r6
 10202a0:	28c7383a 	mul	r3,r5,r3
 10202a4:	4808d43a 	srli	r4,r9,16
 10202a8:	298b383a 	mul	r5,r5,r6
 10202ac:	10c5883a 	add	r2,r2,r3
 10202b0:	2089883a 	add	r4,r4,r2
 10202b4:	20c0022e 	bgeu	r4,r3,10202c0 <__udivdi3+0x424>
 10202b8:	00800074 	movhi	r2,1
 10202bc:	288b883a 	add	r5,r5,r2
 10202c0:	2004d43a 	srli	r2,r4,16
 10202c4:	288b883a 	add	r5,r5,r2
 10202c8:	89403f36 	bltu	r17,r5,10203c8 <__udivdi3+0x52c>
 10202cc:	89403926 	beq	r17,r5,10203b4 <__udivdi3+0x518>
 10202d0:	4005883a 	mov	r2,r8
 10202d4:	0009883a 	mov	r4,zero
 10202d8:	003f5106 	br	1020020 <__udivdi3+0x184>
 10202dc:	85a0983a 	sll	r16,r16,r22
 10202e0:	3585c83a 	sub	r2,r6,r22
 10202e4:	a0a2d83a 	srl	r17,r20,r2
 10202e8:	802ad43a 	srli	r21,r16,16
 10202ec:	e084d83a 	srl	r2,fp,r2
 10202f0:	a586983a 	sll	r3,r20,r22
 10202f4:	8809883a 	mov	r4,r17
 10202f8:	a80b883a 	mov	r5,r21
 10202fc:	1886b03a 	or	r3,r3,r2
 1020300:	d8c00115 	stw	r3,4(sp)
 1020304:	10136140 	call	1013614 <__udivsi3>
 1020308:	8809883a 	mov	r4,r17
 102030c:	a80b883a 	mov	r5,r21
 1020310:	d8800415 	stw	r2,16(sp)
 1020314:	101361c0 	call	101361c <__umodsi3>
 1020318:	d9000117 	ldw	r4,4(sp)
 102031c:	d9400417 	ldw	r5,16(sp)
 1020320:	1004943a 	slli	r2,r2,16
 1020324:	85ffffcc 	andi	r23,r16,65535
 1020328:	2006d43a 	srli	r3,r4,16
 102032c:	b963383a 	mul	r17,r23,r5
 1020330:	10c4b03a 	or	r2,r2,r3
 1020334:	1440042e 	bgeu	r2,r17,1020348 <__udivdi3+0x4ac>
 1020338:	297fffc4 	addi	r5,r5,-1
 102033c:	1405883a 	add	r2,r2,r16
 1020340:	d9400415 	stw	r5,16(sp)
 1020344:	1400442e 	bgeu	r2,r16,1020458 <__udivdi3+0x5bc>
 1020348:	1463c83a 	sub	r17,r2,r17
 102034c:	8809883a 	mov	r4,r17
 1020350:	a80b883a 	mov	r5,r21
 1020354:	10136140 	call	1013614 <__udivsi3>
 1020358:	8809883a 	mov	r4,r17
 102035c:	a80b883a 	mov	r5,r21
 1020360:	1029883a 	mov	r20,r2
 1020364:	101361c0 	call	101361c <__umodsi3>
 1020368:	d9400117 	ldw	r5,4(sp)
 102036c:	1004943a 	slli	r2,r2,16
 1020370:	bd09383a 	mul	r4,r23,r20
 1020374:	28ffffcc 	andi	r3,r5,65535
 1020378:	10c6b03a 	or	r3,r2,r3
 102037c:	1900062e 	bgeu	r3,r4,1020398 <__udivdi3+0x4fc>
 1020380:	1c07883a 	add	r3,r3,r16
 1020384:	a53fffc4 	addi	r20,r20,-1
 1020388:	1c000336 	bltu	r3,r16,1020398 <__udivdi3+0x4fc>
 102038c:	1900022e 	bgeu	r3,r4,1020398 <__udivdi3+0x4fc>
 1020390:	a53fffc4 	addi	r20,r20,-1
 1020394:	1c07883a 	add	r3,r3,r16
 1020398:	d9400417 	ldw	r5,16(sp)
 102039c:	e5b8983a 	sll	fp,fp,r22
 10203a0:	1923c83a 	sub	r17,r3,r4
 10203a4:	2804943a 	slli	r2,r5,16
 10203a8:	a0a8b03a 	or	r20,r20,r2
 10203ac:	dd000315 	stw	r20,12(sp)
 10203b0:	003ee106 	br	101ff38 <__udivdi3+0x9c>
 10203b4:	2004943a 	slli	r2,r4,16
 10203b8:	e5c8983a 	sll	r4,fp,r23
 10203bc:	48ffffcc 	andi	r3,r9,65535
 10203c0:	10c5883a 	add	r2,r2,r3
 10203c4:	20bfc22e 	bgeu	r4,r2,10202d0 <__udivdi3+0x434>
 10203c8:	40bfffc4 	addi	r2,r8,-1
 10203cc:	0009883a 	mov	r4,zero
 10203d0:	003f1306 	br	1020020 <__udivdi3+0x184>
 10203d4:	01400204 	movi	r5,8
 10203d8:	2805883a 	mov	r2,r5
 10203dc:	003f0306 	br	101ffec <__udivdi3+0x150>
 10203e0:	01400604 	movi	r5,24
 10203e4:	2805883a 	mov	r2,r5
 10203e8:	003f0006 	br	101ffec <__udivdi3+0x150>
 10203ec:	01400204 	movi	r5,8
 10203f0:	2805883a 	mov	r2,r5
 10203f4:	003ec206 	br	101ff00 <__udivdi3+0x64>
 10203f8:	01400604 	movi	r5,24
 10203fc:	2805883a 	mov	r2,r5
 1020400:	003ebf06 	br	101ff00 <__udivdi3+0x64>
 1020404:	01400204 	movi	r5,8
 1020408:	2805883a 	mov	r2,r5
 102040c:	003f1706 	br	102006c <__udivdi3+0x1d0>
 1020410:	01400604 	movi	r5,24
 1020414:	2805883a 	mov	r2,r5
 1020418:	003f1406 	br	102006c <__udivdi3+0x1d0>
 102041c:	89ff962e 	bgeu	r17,r7,1020278 <__udivdi3+0x3dc>
 1020420:	8d63883a 	add	r17,r17,r21
 1020424:	843fffc4 	addi	r16,r16,-1
 1020428:	003f9306 	br	1020278 <__udivdi3+0x3dc>
 102042c:	147f802e 	bgeu	r2,r17,1020230 <__udivdi3+0x394>
 1020430:	a53fffc4 	addi	r20,r20,-1
 1020434:	1545883a 	add	r2,r2,r21
 1020438:	003f7d06 	br	1020230 <__udivdi3+0x394>
 102043c:	a53fffc4 	addi	r20,r20,-1
 1020440:	003ede06 	br	101ffbc <__udivdi3+0x120>
 1020444:	b5bfffc4 	addi	r22,r22,-1
 1020448:	1405883a 	add	r2,r2,r16
 102044c:	003f2806 	br	10200f0 <__udivdi3+0x254>
 1020450:	a53fffc4 	addi	r20,r20,-1
 1020454:	003f3706 	br	1020134 <__udivdi3+0x298>
 1020458:	147fbb2e 	bgeu	r2,r17,1020348 <__udivdi3+0x4ac>
 102045c:	297fffc4 	addi	r5,r5,-1
 1020460:	1405883a 	add	r2,r2,r16
 1020464:	d9400415 	stw	r5,16(sp)
 1020468:	003fb706 	br	1020348 <__udivdi3+0x4ac>
 102046c:	b5bfffc4 	addi	r22,r22,-1
 1020470:	1405883a 	add	r2,r2,r16
 1020474:	003ec006 	br	101ff78 <__udivdi3+0xdc>

01020478 <__umoddi3>:
 1020478:	defff104 	addi	sp,sp,-60
 102047c:	dd800b15 	stw	r22,44(sp)
 1020480:	dd000915 	stw	r20,36(sp)
 1020484:	dc000515 	stw	r16,20(sp)
 1020488:	dfc00e15 	stw	ra,56(sp)
 102048c:	df000d15 	stw	fp,52(sp)
 1020490:	ddc00c15 	stw	r23,48(sp)
 1020494:	dd400a15 	stw	r21,40(sp)
 1020498:	dcc00815 	stw	r19,32(sp)
 102049c:	dc800715 	stw	r18,28(sp)
 10204a0:	dc400615 	stw	r17,24(sp)
 10204a4:	3021883a 	mov	r16,r6
 10204a8:	202d883a 	mov	r22,r4
 10204ac:	2829883a 	mov	r20,r5
 10204b0:	38002b1e 	bne	r7,zero,1020560 <__umoddi3+0xe8>
 10204b4:	29805036 	bltu	r5,r6,10205f8 <__umoddi3+0x180>
 10204b8:	30008a26 	beq	r6,zero,10206e4 <__umoddi3+0x26c>
 10204bc:	00bfffd4 	movui	r2,65535
 10204c0:	14008236 	bltu	r2,r16,10206cc <__umoddi3+0x254>
 10204c4:	00803fc4 	movi	r2,255
 10204c8:	14013636 	bltu	r2,r16,10209a4 <__umoddi3+0x52c>
 10204cc:	000b883a 	mov	r5,zero
 10204d0:	0005883a 	mov	r2,zero
 10204d4:	8084d83a 	srl	r2,r16,r2
 10204d8:	010040f4 	movhi	r4,259
 10204dc:	21134804 	addi	r4,r4,19744
 10204e0:	01800804 	movi	r6,32
 10204e4:	1105883a 	add	r2,r2,r4
 10204e8:	10c00003 	ldbu	r3,0(r2)
 10204ec:	28c7883a 	add	r3,r5,r3
 10204f0:	30efc83a 	sub	r23,r6,r3
 10204f4:	b800941e 	bne	r23,zero,1020748 <__umoddi3+0x2d0>
 10204f8:	802ad43a 	srli	r21,r16,16
 10204fc:	a423c83a 	sub	r17,r20,r16
 1020500:	0039883a 	mov	fp,zero
 1020504:	853fffcc 	andi	r20,r16,65535
 1020508:	8809883a 	mov	r4,r17
 102050c:	a80b883a 	mov	r5,r21
 1020510:	10136140 	call	1013614 <__udivsi3>
 1020514:	8809883a 	mov	r4,r17
 1020518:	a80b883a 	mov	r5,r21
 102051c:	a0a3383a 	mul	r17,r20,r2
 1020520:	101361c0 	call	101361c <__umodsi3>
 1020524:	1004943a 	slli	r2,r2,16
 1020528:	b006d43a 	srli	r3,r22,16
 102052c:	10c4b03a 	or	r2,r2,r3
 1020530:	1440032e 	bgeu	r2,r17,1020540 <__umoddi3+0xc8>
 1020534:	1405883a 	add	r2,r2,r16
 1020538:	14000136 	bltu	r2,r16,1020540 <__umoddi3+0xc8>
 102053c:	14413536 	bltu	r2,r17,1020a14 <__umoddi3+0x59c>
 1020540:	1463c83a 	sub	r17,r2,r17
 1020544:	8809883a 	mov	r4,r17
 1020548:	a80b883a 	mov	r5,r21
 102054c:	10136140 	call	1013614 <__udivsi3>
 1020550:	8809883a 	mov	r4,r17
 1020554:	a0a3383a 	mul	r17,r20,r2
 1020558:	a80b883a 	mov	r5,r21
 102055c:	00004d06 	br	1020694 <__umoddi3+0x21c>
 1020560:	380d883a 	mov	r6,r7
 1020564:	29c0102e 	bgeu	r5,r7,10205a8 <__umoddi3+0x130>
 1020568:	2011883a 	mov	r8,r4
 102056c:	2813883a 	mov	r9,r5
 1020570:	4005883a 	mov	r2,r8
 1020574:	4807883a 	mov	r3,r9
 1020578:	dfc00e17 	ldw	ra,56(sp)
 102057c:	df000d17 	ldw	fp,52(sp)
 1020580:	ddc00c17 	ldw	r23,48(sp)
 1020584:	dd800b17 	ldw	r22,44(sp)
 1020588:	dd400a17 	ldw	r21,40(sp)
 102058c:	dd000917 	ldw	r20,36(sp)
 1020590:	dcc00817 	ldw	r19,32(sp)
 1020594:	dc800717 	ldw	r18,28(sp)
 1020598:	dc400617 	ldw	r17,24(sp)
 102059c:	dc000517 	ldw	r16,20(sp)
 10205a0:	dec00f04 	addi	sp,sp,60
 10205a4:	f800283a 	ret
 10205a8:	00bfffd4 	movui	r2,65535
 10205ac:	11c05a36 	bltu	r2,r7,1020718 <__umoddi3+0x2a0>
 10205b0:	00803fc4 	movi	r2,255
 10205b4:	11c0fe36 	bltu	r2,r7,10209b0 <__umoddi3+0x538>
 10205b8:	000b883a 	mov	r5,zero
 10205bc:	0005883a 	mov	r2,zero
 10205c0:	3084d83a 	srl	r2,r6,r2
 10205c4:	010040f4 	movhi	r4,259
 10205c8:	21134804 	addi	r4,r4,19744
 10205cc:	01c00804 	movi	r7,32
 10205d0:	1105883a 	add	r2,r2,r4
 10205d4:	10c00003 	ldbu	r3,0(r2)
 10205d8:	28c7883a 	add	r3,r5,r3
 10205dc:	38ebc83a 	sub	r21,r7,r3
 10205e0:	a800851e 	bne	r21,zero,10207f8 <__umoddi3+0x380>
 10205e4:	35005236 	bltu	r6,r20,1020730 <__umoddi3+0x2b8>
 10205e8:	b400512e 	bgeu	r22,r16,1020730 <__umoddi3+0x2b8>
 10205ec:	b011883a 	mov	r8,r22
 10205f0:	a013883a 	mov	r9,r20
 10205f4:	003fde06 	br	1020570 <__umoddi3+0xf8>
 10205f8:	00bfffd4 	movui	r2,65535
 10205fc:	11804036 	bltu	r2,r6,1020700 <__umoddi3+0x288>
 1020600:	00803fc4 	movi	r2,255
 1020604:	1180ed36 	bltu	r2,r6,10209bc <__umoddi3+0x544>
 1020608:	000b883a 	mov	r5,zero
 102060c:	0005883a 	mov	r2,zero
 1020610:	8084d83a 	srl	r2,r16,r2
 1020614:	010040f4 	movhi	r4,259
 1020618:	21134804 	addi	r4,r4,19744
 102061c:	01800804 	movi	r6,32
 1020620:	1105883a 	add	r2,r2,r4
 1020624:	10c00003 	ldbu	r3,0(r2)
 1020628:	28c7883a 	add	r3,r5,r3
 102062c:	30c7c83a 	sub	r3,r6,r3
 1020630:	1800bf1e 	bne	r3,zero,1020930 <__umoddi3+0x4b8>
 1020634:	0039883a 	mov	fp,zero
 1020638:	802ad43a 	srli	r21,r16,16
 102063c:	a009883a 	mov	r4,r20
 1020640:	85ffffcc 	andi	r23,r16,65535
 1020644:	a80b883a 	mov	r5,r21
 1020648:	10136140 	call	1013614 <__udivsi3>
 102064c:	a009883a 	mov	r4,r20
 1020650:	a80b883a 	mov	r5,r21
 1020654:	b8a3383a 	mul	r17,r23,r2
 1020658:	101361c0 	call	101361c <__umodsi3>
 102065c:	1004943a 	slli	r2,r2,16
 1020660:	b006d43a 	srli	r3,r22,16
 1020664:	10c4b03a 	or	r2,r2,r3
 1020668:	1440032e 	bgeu	r2,r17,1020678 <__umoddi3+0x200>
 102066c:	1405883a 	add	r2,r2,r16
 1020670:	14000136 	bltu	r2,r16,1020678 <__umoddi3+0x200>
 1020674:	1440e536 	bltu	r2,r17,1020a0c <__umoddi3+0x594>
 1020678:	1463c83a 	sub	r17,r2,r17
 102067c:	8809883a 	mov	r4,r17
 1020680:	a80b883a 	mov	r5,r21
 1020684:	10136140 	call	1013614 <__udivsi3>
 1020688:	8809883a 	mov	r4,r17
 102068c:	b8a3383a 	mul	r17,r23,r2
 1020690:	a80b883a 	mov	r5,r21
 1020694:	101361c0 	call	101361c <__umodsi3>
 1020698:	1004943a 	slli	r2,r2,16
 102069c:	b0ffffcc 	andi	r3,r22,65535
 10206a0:	10c4b03a 	or	r2,r2,r3
 10206a4:	1440042e 	bgeu	r2,r17,10206b8 <__umoddi3+0x240>
 10206a8:	1405883a 	add	r2,r2,r16
 10206ac:	14000236 	bltu	r2,r16,10206b8 <__umoddi3+0x240>
 10206b0:	1440012e 	bgeu	r2,r17,10206b8 <__umoddi3+0x240>
 10206b4:	1405883a 	add	r2,r2,r16
 10206b8:	1445c83a 	sub	r2,r2,r17
 10206bc:	1724d83a 	srl	r18,r2,fp
 10206c0:	0013883a 	mov	r9,zero
 10206c4:	9011883a 	mov	r8,r18
 10206c8:	003fa906 	br	1020570 <__umoddi3+0xf8>
 10206cc:	00804034 	movhi	r2,256
 10206d0:	10bfffc4 	addi	r2,r2,-1
 10206d4:	1400b036 	bltu	r2,r16,1020998 <__umoddi3+0x520>
 10206d8:	01400404 	movi	r5,16
 10206dc:	2805883a 	mov	r2,r5
 10206e0:	003f7c06 	br	10204d4 <__umoddi3+0x5c>
 10206e4:	01000044 	movi	r4,1
 10206e8:	000b883a 	mov	r5,zero
 10206ec:	10136140 	call	1013614 <__udivsi3>
 10206f0:	1021883a 	mov	r16,r2
 10206f4:	00bfffd4 	movui	r2,65535
 10206f8:	143ff436 	bltu	r2,r16,10206cc <__umoddi3+0x254>
 10206fc:	003f7106 	br	10204c4 <__umoddi3+0x4c>
 1020700:	00804034 	movhi	r2,256
 1020704:	10bfffc4 	addi	r2,r2,-1
 1020708:	1180af36 	bltu	r2,r6,10209c8 <__umoddi3+0x550>
 102070c:	01400404 	movi	r5,16
 1020710:	2805883a 	mov	r2,r5
 1020714:	003fbe06 	br	1020610 <__umoddi3+0x198>
 1020718:	00804034 	movhi	r2,256
 102071c:	10bfffc4 	addi	r2,r2,-1
 1020720:	11c0ac36 	bltu	r2,r7,10209d4 <__umoddi3+0x55c>
 1020724:	01400404 	movi	r5,16
 1020728:	2805883a 	mov	r2,r5
 102072c:	003fa406 	br	10205c0 <__umoddi3+0x148>
 1020730:	b409c83a 	sub	r4,r22,r16
 1020734:	b105803a 	cmpltu	r2,r22,r4
 1020738:	a187c83a 	sub	r3,r20,r6
 102073c:	18a9c83a 	sub	r20,r3,r2
 1020740:	202d883a 	mov	r22,r4
 1020744:	003fa906 	br	10205ec <__umoddi3+0x174>
 1020748:	85e0983a 	sll	r16,r16,r23
 102074c:	35c5c83a 	sub	r2,r6,r23
 1020750:	a0a2d83a 	srl	r17,r20,r2
 1020754:	802ad43a 	srli	r21,r16,16
 1020758:	b084d83a 	srl	r2,r22,r2
 102075c:	a5c6983a 	sll	r3,r20,r23
 1020760:	8809883a 	mov	r4,r17
 1020764:	a80b883a 	mov	r5,r21
 1020768:	1886b03a 	or	r3,r3,r2
 102076c:	d8c00115 	stw	r3,4(sp)
 1020770:	853fffcc 	andi	r20,r16,65535
 1020774:	10136140 	call	1013614 <__udivsi3>
 1020778:	8809883a 	mov	r4,r17
 102077c:	a80b883a 	mov	r5,r21
 1020780:	a0a3383a 	mul	r17,r20,r2
 1020784:	101361c0 	call	101361c <__umodsi3>
 1020788:	d9000117 	ldw	r4,4(sp)
 102078c:	1004943a 	slli	r2,r2,16
 1020790:	b839883a 	mov	fp,r23
 1020794:	2006d43a 	srli	r3,r4,16
 1020798:	10c4b03a 	or	r2,r2,r3
 102079c:	1440022e 	bgeu	r2,r17,10207a8 <__umoddi3+0x330>
 10207a0:	1405883a 	add	r2,r2,r16
 10207a4:	1400962e 	bgeu	r2,r16,1020a00 <__umoddi3+0x588>
 10207a8:	1463c83a 	sub	r17,r2,r17
 10207ac:	8809883a 	mov	r4,r17
 10207b0:	a80b883a 	mov	r5,r21
 10207b4:	10136140 	call	1013614 <__udivsi3>
 10207b8:	8809883a 	mov	r4,r17
 10207bc:	a80b883a 	mov	r5,r21
 10207c0:	a0a3383a 	mul	r17,r20,r2
 10207c4:	101361c0 	call	101361c <__umodsi3>
 10207c8:	d9400117 	ldw	r5,4(sp)
 10207cc:	1004943a 	slli	r2,r2,16
 10207d0:	28ffffcc 	andi	r3,r5,65535
 10207d4:	10c4b03a 	or	r2,r2,r3
 10207d8:	1440042e 	bgeu	r2,r17,10207ec <__umoddi3+0x374>
 10207dc:	1405883a 	add	r2,r2,r16
 10207e0:	14000236 	bltu	r2,r16,10207ec <__umoddi3+0x374>
 10207e4:	1440012e 	bgeu	r2,r17,10207ec <__umoddi3+0x374>
 10207e8:	1405883a 	add	r2,r2,r16
 10207ec:	b5ec983a 	sll	r22,r22,r23
 10207f0:	1463c83a 	sub	r17,r2,r17
 10207f4:	003f4406 	br	1020508 <__umoddi3+0x90>
 10207f8:	3d4fc83a 	sub	r7,r7,r21
 10207fc:	3546983a 	sll	r3,r6,r21
 1020800:	81c4d83a 	srl	r2,r16,r7
 1020804:	a1e2d83a 	srl	r17,r20,r7
 1020808:	a54c983a 	sll	r6,r20,r21
 102080c:	18aeb03a 	or	r23,r3,r2
 1020810:	b828d43a 	srli	r20,r23,16
 1020814:	b1c4d83a 	srl	r2,r22,r7
 1020818:	8809883a 	mov	r4,r17
 102081c:	a00b883a 	mov	r5,r20
 1020820:	308cb03a 	or	r6,r6,r2
 1020824:	d9c00315 	stw	r7,12(sp)
 1020828:	d9800215 	stw	r6,8(sp)
 102082c:	10136140 	call	1013614 <__udivsi3>
 1020830:	8809883a 	mov	r4,r17
 1020834:	a00b883a 	mov	r5,r20
 1020838:	1039883a 	mov	fp,r2
 102083c:	101361c0 	call	101361c <__umodsi3>
 1020840:	b8ffffcc 	andi	r3,r23,65535
 1020844:	d8c00415 	stw	r3,16(sp)
 1020848:	d9000217 	ldw	r4,8(sp)
 102084c:	d9400417 	ldw	r5,16(sp)
 1020850:	1004943a 	slli	r2,r2,16
 1020854:	2006d43a 	srli	r3,r4,16
 1020858:	8560983a 	sll	r16,r16,r21
 102085c:	2f23383a 	mul	r17,r5,fp
 1020860:	10c4b03a 	or	r2,r2,r3
 1020864:	dc000015 	stw	r16,0(sp)
 1020868:	b56c983a 	sll	r22,r22,r21
 102086c:	1440032e 	bgeu	r2,r17,102087c <__umoddi3+0x404>
 1020870:	15c5883a 	add	r2,r2,r23
 1020874:	e73fffc4 	addi	fp,fp,-1
 1020878:	15c05d2e 	bgeu	r2,r23,10209f0 <__umoddi3+0x578>
 102087c:	1463c83a 	sub	r17,r2,r17
 1020880:	8809883a 	mov	r4,r17
 1020884:	a00b883a 	mov	r5,r20
 1020888:	10136140 	call	1013614 <__udivsi3>
 102088c:	8809883a 	mov	r4,r17
 1020890:	a00b883a 	mov	r5,r20
 1020894:	1021883a 	mov	r16,r2
 1020898:	101361c0 	call	101361c <__umodsi3>
 102089c:	d8c00417 	ldw	r3,16(sp)
 10208a0:	d9000217 	ldw	r4,8(sp)
 10208a4:	1004943a 	slli	r2,r2,16
 10208a8:	1c23383a 	mul	r17,r3,r16
 10208ac:	20ffffcc 	andi	r3,r4,65535
 10208b0:	10ceb03a 	or	r7,r2,r3
 10208b4:	3c40032e 	bgeu	r7,r17,10208c4 <__umoddi3+0x44c>
 10208b8:	3dcf883a 	add	r7,r7,r23
 10208bc:	843fffc4 	addi	r16,r16,-1
 10208c0:	3dc0472e 	bgeu	r7,r23,10209e0 <__umoddi3+0x568>
 10208c4:	e004943a 	slli	r2,fp,16
 10208c8:	d9400017 	ldw	r5,0(sp)
 10208cc:	3c4fc83a 	sub	r7,r7,r17
 10208d0:	8084b03a 	or	r2,r16,r2
 10208d4:	28ffffcc 	andi	r3,r5,65535
 10208d8:	280cd43a 	srli	r6,r5,16
 10208dc:	100ad43a 	srli	r5,r2,16
 10208e0:	10bfffcc 	andi	r2,r2,65535
 10208e4:	10d1383a 	mul	r8,r2,r3
 10208e8:	28c7383a 	mul	r3,r5,r3
 10208ec:	1185383a 	mul	r2,r2,r6
 10208f0:	4008d43a 	srli	r4,r8,16
 10208f4:	298b383a 	mul	r5,r5,r6
 10208f8:	10c5883a 	add	r2,r2,r3
 10208fc:	2089883a 	add	r4,r4,r2
 1020900:	20c0022e 	bgeu	r4,r3,102090c <__umoddi3+0x494>
 1020904:	00800074 	movhi	r2,1
 1020908:	288b883a 	add	r5,r5,r2
 102090c:	2004d43a 	srli	r2,r4,16
 1020910:	2008943a 	slli	r4,r4,16
 1020914:	40ffffcc 	andi	r3,r8,65535
 1020918:	288b883a 	add	r5,r5,r2
 102091c:	20c9883a 	add	r4,r4,r3
 1020920:	39400b36 	bltu	r7,r5,1020950 <__umoddi3+0x4d8>
 1020924:	39403d26 	beq	r7,r5,1020a1c <__umoddi3+0x5a4>
 1020928:	394bc83a 	sub	r5,r7,r5
 102092c:	00000f06 	br	102096c <__umoddi3+0x4f4>
 1020930:	30c5c83a 	sub	r2,r6,r3
 1020934:	1839883a 	mov	fp,r3
 1020938:	b084d83a 	srl	r2,r22,r2
 102093c:	a0c6983a 	sll	r3,r20,r3
 1020940:	8720983a 	sll	r16,r16,fp
 1020944:	b72c983a 	sll	r22,r22,fp
 1020948:	18a8b03a 	or	r20,r3,r2
 102094c:	003f3a06 	br	1020638 <__umoddi3+0x1c0>
 1020950:	d8c00017 	ldw	r3,0(sp)
 1020954:	20c5c83a 	sub	r2,r4,r3
 1020958:	2089803a 	cmpltu	r4,r4,r2
 102095c:	2dc7c83a 	sub	r3,r5,r23
 1020960:	1907c83a 	sub	r3,r3,r4
 1020964:	38cbc83a 	sub	r5,r7,r3
 1020968:	1009883a 	mov	r4,r2
 102096c:	b105c83a 	sub	r2,r22,r4
 1020970:	b087803a 	cmpltu	r3,r22,r2
 1020974:	28c7c83a 	sub	r3,r5,r3
 1020978:	d9400317 	ldw	r5,12(sp)
 102097c:	1544d83a 	srl	r2,r2,r21
 1020980:	1948983a 	sll	r4,r3,r5
 1020984:	1d46d83a 	srl	r3,r3,r21
 1020988:	20a4b03a 	or	r18,r4,r2
 102098c:	9011883a 	mov	r8,r18
 1020990:	1813883a 	mov	r9,r3
 1020994:	003ef606 	br	1020570 <__umoddi3+0xf8>
 1020998:	01400604 	movi	r5,24
 102099c:	2805883a 	mov	r2,r5
 10209a0:	003ecc06 	br	10204d4 <__umoddi3+0x5c>
 10209a4:	01400204 	movi	r5,8
 10209a8:	2805883a 	mov	r2,r5
 10209ac:	003ec906 	br	10204d4 <__umoddi3+0x5c>
 10209b0:	01400204 	movi	r5,8
 10209b4:	2805883a 	mov	r2,r5
 10209b8:	003f0106 	br	10205c0 <__umoddi3+0x148>
 10209bc:	01400204 	movi	r5,8
 10209c0:	2805883a 	mov	r2,r5
 10209c4:	003f1206 	br	1020610 <__umoddi3+0x198>
 10209c8:	01400604 	movi	r5,24
 10209cc:	2805883a 	mov	r2,r5
 10209d0:	003f0f06 	br	1020610 <__umoddi3+0x198>
 10209d4:	01400604 	movi	r5,24
 10209d8:	2805883a 	mov	r2,r5
 10209dc:	003ef806 	br	10205c0 <__umoddi3+0x148>
 10209e0:	3c7fb82e 	bgeu	r7,r17,10208c4 <__umoddi3+0x44c>
 10209e4:	843fffc4 	addi	r16,r16,-1
 10209e8:	3dcf883a 	add	r7,r7,r23
 10209ec:	003fb506 	br	10208c4 <__umoddi3+0x44c>
 10209f0:	147fa22e 	bgeu	r2,r17,102087c <__umoddi3+0x404>
 10209f4:	e73fffc4 	addi	fp,fp,-1
 10209f8:	15c5883a 	add	r2,r2,r23
 10209fc:	003f9f06 	br	102087c <__umoddi3+0x404>
 1020a00:	147f692e 	bgeu	r2,r17,10207a8 <__umoddi3+0x330>
 1020a04:	1405883a 	add	r2,r2,r16
 1020a08:	003f6706 	br	10207a8 <__umoddi3+0x330>
 1020a0c:	1405883a 	add	r2,r2,r16
 1020a10:	003f1906 	br	1020678 <__umoddi3+0x200>
 1020a14:	1405883a 	add	r2,r2,r16
 1020a18:	003ec906 	br	1020540 <__umoddi3+0xc8>
 1020a1c:	b13fcc36 	bltu	r22,r4,1020950 <__umoddi3+0x4d8>
 1020a20:	000b883a 	mov	r5,zero
 1020a24:	003fd106 	br	102096c <__umoddi3+0x4f4>

01020a28 <__nesf2>:
 1020a28:	defff304 	addi	sp,sp,-52
 1020a2c:	dc400b15 	stw	r17,44(sp)
 1020a30:	dc400204 	addi	r17,sp,8
 1020a34:	dc000a15 	stw	r16,40(sp)
 1020a38:	d9000015 	stw	r4,0(sp)
 1020a3c:	d9400115 	stw	r5,4(sp)
 1020a40:	d809883a 	mov	r4,sp
 1020a44:	880b883a 	mov	r5,r17
 1020a48:	dc000604 	addi	r16,sp,24
 1020a4c:	dfc00c15 	stw	ra,48(sp)
 1020a50:	101373c0 	call	101373c <__unpack_f>
 1020a54:	d9000104 	addi	r4,sp,4
 1020a58:	800b883a 	mov	r5,r16
 1020a5c:	101373c0 	call	101373c <__unpack_f>
 1020a60:	d8800217 	ldw	r2,8(sp)
 1020a64:	00c00044 	movi	r3,1
 1020a68:	180d883a 	mov	r6,r3
 1020a6c:	1880062e 	bgeu	r3,r2,1020a88 <__nesf2+0x60>
 1020a70:	d8800617 	ldw	r2,24(sp)
 1020a74:	8809883a 	mov	r4,r17
 1020a78:	800b883a 	mov	r5,r16
 1020a7c:	1880022e 	bgeu	r3,r2,1020a88 <__nesf2+0x60>
 1020a80:	1020ea80 	call	1020ea8 <__fpcmp_parts_f>
 1020a84:	100d883a 	mov	r6,r2
 1020a88:	3005883a 	mov	r2,r6
 1020a8c:	dfc00c17 	ldw	ra,48(sp)
 1020a90:	dc400b17 	ldw	r17,44(sp)
 1020a94:	dc000a17 	ldw	r16,40(sp)
 1020a98:	dec00d04 	addi	sp,sp,52
 1020a9c:	f800283a 	ret

01020aa0 <__gtsf2>:
 1020aa0:	defff304 	addi	sp,sp,-52
 1020aa4:	dc400b15 	stw	r17,44(sp)
 1020aa8:	dc400204 	addi	r17,sp,8
 1020aac:	dc000a15 	stw	r16,40(sp)
 1020ab0:	d9000015 	stw	r4,0(sp)
 1020ab4:	d9400115 	stw	r5,4(sp)
 1020ab8:	d809883a 	mov	r4,sp
 1020abc:	880b883a 	mov	r5,r17
 1020ac0:	dc000604 	addi	r16,sp,24
 1020ac4:	dfc00c15 	stw	ra,48(sp)
 1020ac8:	101373c0 	call	101373c <__unpack_f>
 1020acc:	d9000104 	addi	r4,sp,4
 1020ad0:	800b883a 	mov	r5,r16
 1020ad4:	101373c0 	call	101373c <__unpack_f>
 1020ad8:	d8800217 	ldw	r2,8(sp)
 1020adc:	00c00044 	movi	r3,1
 1020ae0:	01bfffc4 	movi	r6,-1
 1020ae4:	1880062e 	bgeu	r3,r2,1020b00 <__gtsf2+0x60>
 1020ae8:	d8800617 	ldw	r2,24(sp)
 1020aec:	8809883a 	mov	r4,r17
 1020af0:	800b883a 	mov	r5,r16
 1020af4:	1880022e 	bgeu	r3,r2,1020b00 <__gtsf2+0x60>
 1020af8:	1020ea80 	call	1020ea8 <__fpcmp_parts_f>
 1020afc:	100d883a 	mov	r6,r2
 1020b00:	3005883a 	mov	r2,r6
 1020b04:	dfc00c17 	ldw	ra,48(sp)
 1020b08:	dc400b17 	ldw	r17,44(sp)
 1020b0c:	dc000a17 	ldw	r16,40(sp)
 1020b10:	dec00d04 	addi	sp,sp,52
 1020b14:	f800283a 	ret

01020b18 <__ltsf2>:
 1020b18:	defff304 	addi	sp,sp,-52
 1020b1c:	dc400b15 	stw	r17,44(sp)
 1020b20:	dc400204 	addi	r17,sp,8
 1020b24:	dc000a15 	stw	r16,40(sp)
 1020b28:	d9000015 	stw	r4,0(sp)
 1020b2c:	d9400115 	stw	r5,4(sp)
 1020b30:	d809883a 	mov	r4,sp
 1020b34:	880b883a 	mov	r5,r17
 1020b38:	dc000604 	addi	r16,sp,24
 1020b3c:	dfc00c15 	stw	ra,48(sp)
 1020b40:	101373c0 	call	101373c <__unpack_f>
 1020b44:	d9000104 	addi	r4,sp,4
 1020b48:	800b883a 	mov	r5,r16
 1020b4c:	101373c0 	call	101373c <__unpack_f>
 1020b50:	d8800217 	ldw	r2,8(sp)
 1020b54:	00c00044 	movi	r3,1
 1020b58:	180d883a 	mov	r6,r3
 1020b5c:	1880062e 	bgeu	r3,r2,1020b78 <__ltsf2+0x60>
 1020b60:	d8800617 	ldw	r2,24(sp)
 1020b64:	8809883a 	mov	r4,r17
 1020b68:	800b883a 	mov	r5,r16
 1020b6c:	1880022e 	bgeu	r3,r2,1020b78 <__ltsf2+0x60>
 1020b70:	1020ea80 	call	1020ea8 <__fpcmp_parts_f>
 1020b74:	100d883a 	mov	r6,r2
 1020b78:	3005883a 	mov	r2,r6
 1020b7c:	dfc00c17 	ldw	ra,48(sp)
 1020b80:	dc400b17 	ldw	r17,44(sp)
 1020b84:	dc000a17 	ldw	r16,40(sp)
 1020b88:	dec00d04 	addi	sp,sp,52
 1020b8c:	f800283a 	ret

01020b90 <__nedf2>:
 1020b90:	deffef04 	addi	sp,sp,-68
 1020b94:	dc400f15 	stw	r17,60(sp)
 1020b98:	dc400404 	addi	r17,sp,16
 1020b9c:	2005883a 	mov	r2,r4
 1020ba0:	2807883a 	mov	r3,r5
 1020ba4:	dc000e15 	stw	r16,56(sp)
 1020ba8:	d809883a 	mov	r4,sp
 1020bac:	880b883a 	mov	r5,r17
 1020bb0:	dc000904 	addi	r16,sp,36
 1020bb4:	d8c00115 	stw	r3,4(sp)
 1020bb8:	d8800015 	stw	r2,0(sp)
 1020bbc:	d9800215 	stw	r6,8(sp)
 1020bc0:	dfc01015 	stw	ra,64(sp)
 1020bc4:	d9c00315 	stw	r7,12(sp)
 1020bc8:	1013b180 	call	1013b18 <__unpack_d>
 1020bcc:	d9000204 	addi	r4,sp,8
 1020bd0:	800b883a 	mov	r5,r16
 1020bd4:	1013b180 	call	1013b18 <__unpack_d>
 1020bd8:	d8800417 	ldw	r2,16(sp)
 1020bdc:	00c00044 	movi	r3,1
 1020be0:	180d883a 	mov	r6,r3
 1020be4:	1880062e 	bgeu	r3,r2,1020c00 <__nedf2+0x70>
 1020be8:	d8800917 	ldw	r2,36(sp)
 1020bec:	8809883a 	mov	r4,r17
 1020bf0:	800b883a 	mov	r5,r16
 1020bf4:	1880022e 	bgeu	r3,r2,1020c00 <__nedf2+0x70>
 1020bf8:	1013c500 	call	1013c50 <__fpcmp_parts_d>
 1020bfc:	100d883a 	mov	r6,r2
 1020c00:	3005883a 	mov	r2,r6
 1020c04:	dfc01017 	ldw	ra,64(sp)
 1020c08:	dc400f17 	ldw	r17,60(sp)
 1020c0c:	dc000e17 	ldw	r16,56(sp)
 1020c10:	dec01104 	addi	sp,sp,68
 1020c14:	f800283a 	ret

01020c18 <__ledf2>:
 1020c18:	deffef04 	addi	sp,sp,-68
 1020c1c:	dc400f15 	stw	r17,60(sp)
 1020c20:	dc400404 	addi	r17,sp,16
 1020c24:	2005883a 	mov	r2,r4
 1020c28:	2807883a 	mov	r3,r5
 1020c2c:	dc000e15 	stw	r16,56(sp)
 1020c30:	d809883a 	mov	r4,sp
 1020c34:	880b883a 	mov	r5,r17
 1020c38:	dc000904 	addi	r16,sp,36
 1020c3c:	d8c00115 	stw	r3,4(sp)
 1020c40:	d8800015 	stw	r2,0(sp)
 1020c44:	d9800215 	stw	r6,8(sp)
 1020c48:	dfc01015 	stw	ra,64(sp)
 1020c4c:	d9c00315 	stw	r7,12(sp)
 1020c50:	1013b180 	call	1013b18 <__unpack_d>
 1020c54:	d9000204 	addi	r4,sp,8
 1020c58:	800b883a 	mov	r5,r16
 1020c5c:	1013b180 	call	1013b18 <__unpack_d>
 1020c60:	d8800417 	ldw	r2,16(sp)
 1020c64:	00c00044 	movi	r3,1
 1020c68:	180d883a 	mov	r6,r3
 1020c6c:	1880062e 	bgeu	r3,r2,1020c88 <__ledf2+0x70>
 1020c70:	d8800917 	ldw	r2,36(sp)
 1020c74:	8809883a 	mov	r4,r17
 1020c78:	800b883a 	mov	r5,r16
 1020c7c:	1880022e 	bgeu	r3,r2,1020c88 <__ledf2+0x70>
 1020c80:	1013c500 	call	1013c50 <__fpcmp_parts_d>
 1020c84:	100d883a 	mov	r6,r2
 1020c88:	3005883a 	mov	r2,r6
 1020c8c:	dfc01017 	ldw	ra,64(sp)
 1020c90:	dc400f17 	ldw	r17,60(sp)
 1020c94:	dc000e17 	ldw	r16,56(sp)
 1020c98:	dec01104 	addi	sp,sp,68
 1020c9c:	f800283a 	ret

01020ca0 <__truncdfsf2>:
 1020ca0:	defff804 	addi	sp,sp,-32
 1020ca4:	2005883a 	mov	r2,r4
 1020ca8:	2807883a 	mov	r3,r5
 1020cac:	d809883a 	mov	r4,sp
 1020cb0:	d9400204 	addi	r5,sp,8
 1020cb4:	d8c00115 	stw	r3,4(sp)
 1020cb8:	d8800015 	stw	r2,0(sp)
 1020cbc:	dfc00715 	stw	ra,28(sp)
 1020cc0:	1013b180 	call	1013b18 <__unpack_d>
 1020cc4:	d9c00517 	ldw	r7,20(sp)
 1020cc8:	da000617 	ldw	r8,24(sp)
 1020ccc:	02d00034 	movhi	r11,16384
 1020cd0:	5affffc4 	addi	r11,r11,-1
 1020cd4:	3812d7ba 	srli	r9,r7,30
 1020cd8:	401a90ba 	slli	r13,r8,2
 1020cdc:	3ac4703a 	and	r2,r7,r11
 1020ce0:	0007883a 	mov	r3,zero
 1020ce4:	6a52b03a 	or	r9,r13,r9
 1020ce8:	10c4b03a 	or	r2,r2,r3
 1020cec:	d9000217 	ldw	r4,8(sp)
 1020cf0:	d9400317 	ldw	r5,12(sp)
 1020cf4:	d9800417 	ldw	r6,16(sp)
 1020cf8:	480f883a 	mov	r7,r9
 1020cfc:	10000126 	beq	r2,zero,1020d04 <__truncdfsf2+0x64>
 1020d00:	49c00054 	ori	r7,r9,1
 1020d04:	1020f500 	call	1020f50 <__make_fp>
 1020d08:	dfc00717 	ldw	ra,28(sp)
 1020d0c:	dec00804 	addi	sp,sp,32
 1020d10:	f800283a 	ret

01020d14 <__floatunsidf>:
 1020d14:	defff204 	addi	sp,sp,-56
 1020d18:	dfc00d15 	stw	ra,52(sp)
 1020d1c:	ddc00c15 	stw	r23,48(sp)
 1020d20:	dd800b15 	stw	r22,44(sp)
 1020d24:	dd400a15 	stw	r21,40(sp)
 1020d28:	dd000915 	stw	r20,36(sp)
 1020d2c:	dcc00815 	stw	r19,32(sp)
 1020d30:	dc800715 	stw	r18,28(sp)
 1020d34:	dc400615 	stw	r17,24(sp)
 1020d38:	dc000515 	stw	r16,20(sp)
 1020d3c:	d8000115 	stw	zero,4(sp)
 1020d40:	20000f1e 	bne	r4,zero,1020d80 <__floatunsidf+0x6c>
 1020d44:	00800084 	movi	r2,2
 1020d48:	d8800015 	stw	r2,0(sp)
 1020d4c:	d809883a 	mov	r4,sp
 1020d50:	10138040 	call	1013804 <__pack_d>
 1020d54:	dfc00d17 	ldw	ra,52(sp)
 1020d58:	ddc00c17 	ldw	r23,48(sp)
 1020d5c:	dd800b17 	ldw	r22,44(sp)
 1020d60:	dd400a17 	ldw	r21,40(sp)
 1020d64:	dd000917 	ldw	r20,36(sp)
 1020d68:	dcc00817 	ldw	r19,32(sp)
 1020d6c:	dc800717 	ldw	r18,28(sp)
 1020d70:	dc400617 	ldw	r17,24(sp)
 1020d74:	dc000517 	ldw	r16,20(sp)
 1020d78:	dec00e04 	addi	sp,sp,56
 1020d7c:	f800283a 	ret
 1020d80:	008000c4 	movi	r2,3
 1020d84:	00c00f04 	movi	r3,60
 1020d88:	002f883a 	mov	r23,zero
 1020d8c:	202d883a 	mov	r22,r4
 1020d90:	d8800015 	stw	r2,0(sp)
 1020d94:	d8c00215 	stw	r3,8(sp)
 1020d98:	d9000315 	stw	r4,12(sp)
 1020d9c:	ddc00415 	stw	r23,16(sp)
 1020da0:	10136bc0 	call	10136bc <__clzsi2>
 1020da4:	12400744 	addi	r9,r2,29
 1020da8:	48000b16 	blt	r9,zero,1020dd8 <__floatunsidf+0xc4>
 1020dac:	483fe726 	beq	r9,zero,1020d4c <__floatunsidf+0x38>
 1020db0:	10bfff44 	addi	r2,r2,-3
 1020db4:	10002e16 	blt	r2,zero,1020e70 <__floatunsidf+0x15c>
 1020db8:	b0a2983a 	sll	r17,r22,r2
 1020dbc:	0021883a 	mov	r16,zero
 1020dc0:	d8800217 	ldw	r2,8(sp)
 1020dc4:	dc400415 	stw	r17,16(sp)
 1020dc8:	dc000315 	stw	r16,12(sp)
 1020dcc:	1245c83a 	sub	r2,r2,r9
 1020dd0:	d8800215 	stw	r2,8(sp)
 1020dd4:	003fdd06 	br	1020d4c <__floatunsidf+0x38>
 1020dd8:	0255c83a 	sub	r10,zero,r9
 1020ddc:	51bff804 	addi	r6,r10,-32
 1020de0:	30001b16 	blt	r6,zero,1020e50 <__floatunsidf+0x13c>
 1020de4:	b9a8d83a 	srl	r20,r23,r6
 1020de8:	002b883a 	mov	r21,zero
 1020dec:	000f883a 	mov	r7,zero
 1020df0:	01000044 	movi	r4,1
 1020df4:	0011883a 	mov	r8,zero
 1020df8:	30002516 	blt	r6,zero,1020e90 <__floatunsidf+0x17c>
 1020dfc:	21a6983a 	sll	r19,r4,r6
 1020e00:	0025883a 	mov	r18,zero
 1020e04:	00bfffc4 	movi	r2,-1
 1020e08:	9089883a 	add	r4,r18,r2
 1020e0c:	988b883a 	add	r5,r19,r2
 1020e10:	248d803a 	cmpltu	r6,r4,r18
 1020e14:	314b883a 	add	r5,r6,r5
 1020e18:	b104703a 	and	r2,r22,r4
 1020e1c:	b946703a 	and	r3,r23,r5
 1020e20:	10c4b03a 	or	r2,r2,r3
 1020e24:	10000226 	beq	r2,zero,1020e30 <__floatunsidf+0x11c>
 1020e28:	01c00044 	movi	r7,1
 1020e2c:	0011883a 	mov	r8,zero
 1020e30:	d9000217 	ldw	r4,8(sp)
 1020e34:	a1c4b03a 	or	r2,r20,r7
 1020e38:	aa06b03a 	or	r3,r21,r8
 1020e3c:	2249c83a 	sub	r4,r4,r9
 1020e40:	d8c00415 	stw	r3,16(sp)
 1020e44:	d9000215 	stw	r4,8(sp)
 1020e48:	d8800315 	stw	r2,12(sp)
 1020e4c:	003fbf06 	br	1020d4c <__floatunsidf+0x38>
 1020e50:	bdc7883a 	add	r3,r23,r23
 1020e54:	008007c4 	movi	r2,31
 1020e58:	1285c83a 	sub	r2,r2,r10
 1020e5c:	1886983a 	sll	r3,r3,r2
 1020e60:	b2a8d83a 	srl	r20,r22,r10
 1020e64:	baaad83a 	srl	r21,r23,r10
 1020e68:	1d28b03a 	or	r20,r3,r20
 1020e6c:	003fdf06 	br	1020dec <__floatunsidf+0xd8>
 1020e70:	b006d07a 	srli	r3,r22,1
 1020e74:	008007c4 	movi	r2,31
 1020e78:	1245c83a 	sub	r2,r2,r9
 1020e7c:	1886d83a 	srl	r3,r3,r2
 1020e80:	ba62983a 	sll	r17,r23,r9
 1020e84:	b260983a 	sll	r16,r22,r9
 1020e88:	1c62b03a 	or	r17,r3,r17
 1020e8c:	003fcc06 	br	1020dc0 <__floatunsidf+0xac>
 1020e90:	2006d07a 	srli	r3,r4,1
 1020e94:	008007c4 	movi	r2,31
 1020e98:	1285c83a 	sub	r2,r2,r10
 1020e9c:	18a6d83a 	srl	r19,r3,r2
 1020ea0:	22a4983a 	sll	r18,r4,r10
 1020ea4:	003fd706 	br	1020e04 <__floatunsidf+0xf0>

01020ea8 <__fpcmp_parts_f>:
 1020ea8:	21800017 	ldw	r6,0(r4)
 1020eac:	00c00044 	movi	r3,1
 1020eb0:	19800a2e 	bgeu	r3,r6,1020edc <__fpcmp_parts_f+0x34>
 1020eb4:	28800017 	ldw	r2,0(r5)
 1020eb8:	1880082e 	bgeu	r3,r2,1020edc <__fpcmp_parts_f+0x34>
 1020ebc:	00c00104 	movi	r3,4
 1020ec0:	30c01e26 	beq	r6,r3,1020f3c <__fpcmp_parts_f+0x94>
 1020ec4:	10c01a26 	beq	r2,r3,1020f30 <__fpcmp_parts_f+0x88>
 1020ec8:	00c00084 	movi	r3,2
 1020ecc:	30c00526 	beq	r6,r3,1020ee4 <__fpcmp_parts_f+0x3c>
 1020ed0:	10c0071e 	bne	r2,r3,1020ef0 <__fpcmp_parts_f+0x48>
 1020ed4:	20800117 	ldw	r2,4(r4)
 1020ed8:	1000091e 	bne	r2,zero,1020f00 <__fpcmp_parts_f+0x58>
 1020edc:	00800044 	movi	r2,1
 1020ee0:	f800283a 	ret
 1020ee4:	10c0121e 	bne	r2,r3,1020f30 <__fpcmp_parts_f+0x88>
 1020ee8:	0005883a 	mov	r2,zero
 1020eec:	f800283a 	ret
 1020ef0:	20c00117 	ldw	r3,4(r4)
 1020ef4:	28800117 	ldw	r2,4(r5)
 1020ef8:	18800326 	beq	r3,r2,1020f08 <__fpcmp_parts_f+0x60>
 1020efc:	183ff726 	beq	r3,zero,1020edc <__fpcmp_parts_f+0x34>
 1020f00:	00bfffc4 	movi	r2,-1
 1020f04:	f800283a 	ret
 1020f08:	21800217 	ldw	r6,8(r4)
 1020f0c:	28800217 	ldw	r2,8(r5)
 1020f10:	11bffa16 	blt	r2,r6,1020efc <__fpcmp_parts_f+0x54>
 1020f14:	30800416 	blt	r6,r2,1020f28 <__fpcmp_parts_f+0x80>
 1020f18:	21000317 	ldw	r4,12(r4)
 1020f1c:	29400317 	ldw	r5,12(r5)
 1020f20:	293ff636 	bltu	r5,r4,1020efc <__fpcmp_parts_f+0x54>
 1020f24:	217ff02e 	bgeu	r4,r5,1020ee8 <__fpcmp_parts_f+0x40>
 1020f28:	183fec1e 	bne	r3,zero,1020edc <__fpcmp_parts_f+0x34>
 1020f2c:	003ff406 	br	1020f00 <__fpcmp_parts_f+0x58>
 1020f30:	28800117 	ldw	r2,4(r5)
 1020f34:	103fe91e 	bne	r2,zero,1020edc <__fpcmp_parts_f+0x34>
 1020f38:	003ff106 	br	1020f00 <__fpcmp_parts_f+0x58>
 1020f3c:	11bfe51e 	bne	r2,r6,1020ed4 <__fpcmp_parts_f+0x2c>
 1020f40:	28c00117 	ldw	r3,4(r5)
 1020f44:	20800117 	ldw	r2,4(r4)
 1020f48:	1885c83a 	sub	r2,r3,r2
 1020f4c:	f800283a 	ret

01020f50 <__make_fp>:
 1020f50:	defffb04 	addi	sp,sp,-20
 1020f54:	d9000015 	stw	r4,0(sp)
 1020f58:	d809883a 	mov	r4,sp
 1020f5c:	dfc00415 	stw	ra,16(sp)
 1020f60:	d9400115 	stw	r5,4(sp)
 1020f64:	d9800215 	stw	r6,8(sp)
 1020f68:	d9c00315 	stw	r7,12(sp)
 1020f6c:	1020f7c0 	call	1020f7c <__pack_f>
 1020f70:	dfc00417 	ldw	ra,16(sp)
 1020f74:	dec00504 	addi	sp,sp,20
 1020f78:	f800283a 	ret

01020f7c <__pack_f>:
 1020f7c:	20c00017 	ldw	r3,0(r4)
 1020f80:	01c00044 	movi	r7,1
 1020f84:	21800317 	ldw	r6,12(r4)
 1020f88:	21400117 	ldw	r5,4(r4)
 1020f8c:	38c02d2e 	bgeu	r7,r3,1021044 <__pack_f+0xc8>
 1020f90:	00800104 	movi	r2,4
 1020f94:	18802826 	beq	r3,r2,1021038 <__pack_f+0xbc>
 1020f98:	00800084 	movi	r2,2
 1020f9c:	18800126 	beq	r3,r2,1020fa4 <__pack_f+0x28>
 1020fa0:	3000101e 	bne	r6,zero,1020fe4 <__pack_f+0x68>
 1020fa4:	000d883a 	mov	r6,zero
 1020fa8:	0007883a 	mov	r3,zero
 1020fac:	19003fcc 	andi	r4,r3,255
 1020fb0:	200895fa 	slli	r4,r4,23
 1020fb4:	00c02034 	movhi	r3,128
 1020fb8:	18ffffc4 	addi	r3,r3,-1
 1020fbc:	30c6703a 	and	r3,r6,r3
 1020fc0:	10a0002c 	andhi	r2,r2,32768
 1020fc4:	10c4b03a 	or	r2,r2,r3
 1020fc8:	280a97fa 	slli	r5,r5,31
 1020fcc:	1104b03a 	or	r2,r2,r4
 1020fd0:	00e00034 	movhi	r3,32768
 1020fd4:	18ffffc4 	addi	r3,r3,-1
 1020fd8:	10c4703a 	and	r2,r2,r3
 1020fdc:	1144b03a 	or	r2,r2,r5
 1020fe0:	f800283a 	ret
 1020fe4:	21000217 	ldw	r4,8(r4)
 1020fe8:	00bfe084 	movi	r2,-126
 1020fec:	20801b16 	blt	r4,r2,102105c <__pack_f+0xe0>
 1020ff0:	00801fc4 	movi	r2,127
 1020ff4:	11001016 	blt	r2,r4,1021038 <__pack_f+0xbc>
 1020ff8:	308e703a 	and	r7,r6,r2
 1020ffc:	2087883a 	add	r3,r4,r2
 1021000:	00801004 	movi	r2,64
 1021004:	38800526 	beq	r7,r2,102101c <__pack_f+0xa0>
 1021008:	31800fc4 	addi	r6,r6,63
 102100c:	30000716 	blt	r6,zero,102102c <__pack_f+0xb0>
 1021010:	300490ba 	slli	r2,r6,2
 1021014:	100cd27a 	srli	r6,r2,9
 1021018:	003fe406 	br	1020fac <__pack_f+0x30>
 102101c:	3080200c 	andi	r2,r6,128
 1021020:	103ffa26 	beq	r2,zero,102100c <__pack_f+0x90>
 1021024:	31cd883a 	add	r6,r6,r7
 1021028:	003ff806 	br	102100c <__pack_f+0x90>
 102102c:	300cd07a 	srli	r6,r6,1
 1021030:	18c00044 	addi	r3,r3,1
 1021034:	003ff606 	br	1021010 <__pack_f+0x94>
 1021038:	000d883a 	mov	r6,zero
 102103c:	00ffffc4 	movi	r3,-1
 1021040:	003fda06 	br	1020fac <__pack_f+0x30>
 1021044:	31800434 	orhi	r6,r6,16
 1021048:	00802034 	movhi	r2,128
 102104c:	10bfffc4 	addi	r2,r2,-1
 1021050:	308c703a 	and	r6,r6,r2
 1021054:	00ffffc4 	movi	r3,-1
 1021058:	003fd406 	br	1020fac <__pack_f+0x30>
 102105c:	1109c83a 	sub	r4,r2,r4
 1021060:	00800644 	movi	r2,25
 1021064:	11001216 	blt	r2,r4,10210b0 <__pack_f+0x134>
 1021068:	3904983a 	sll	r2,r7,r4
 102106c:	3106d83a 	srl	r3,r6,r4
 1021070:	10bfffc4 	addi	r2,r2,-1
 1021074:	3084703a 	and	r2,r6,r2
 1021078:	1004c03a 	cmpne	r2,r2,zero
 102107c:	1886b03a 	or	r3,r3,r2
 1021080:	19001fcc 	andi	r4,r3,127
 1021084:	00801004 	movi	r2,64
 1021088:	20800c26 	beq	r4,r2,10210bc <__pack_f+0x140>
 102108c:	18c00fc4 	addi	r3,r3,63
 1021090:	00900034 	movhi	r2,16384
 1021094:	10bfffc4 	addi	r2,r2,-1
 1021098:	180cd1fa 	srli	r6,r3,7
 102109c:	10c7803a 	cmpltu	r3,r2,r3
 10210a0:	00802034 	movhi	r2,128
 10210a4:	10bfffc4 	addi	r2,r2,-1
 10210a8:	308c703a 	and	r6,r6,r2
 10210ac:	003fbf06 	br	1020fac <__pack_f+0x30>
 10210b0:	0007883a 	mov	r3,zero
 10210b4:	000d883a 	mov	r6,zero
 10210b8:	003ff906 	br	10210a0 <__pack_f+0x124>
 10210bc:	1880200c 	andi	r2,r3,128
 10210c0:	10000126 	beq	r2,zero,10210c8 <__pack_f+0x14c>
 10210c4:	1907883a 	add	r3,r3,r4
 10210c8:	180cd1fa 	srli	r6,r3,7
 10210cc:	00900034 	movhi	r2,16384
 10210d0:	10bfffc4 	addi	r2,r2,-1
 10210d4:	10c7803a 	cmpltu	r3,r2,r3
 10210d8:	003ff106 	br	10210a0 <__pack_f+0x124>

010210dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10210dc:	defff804 	addi	sp,sp,-32
 10210e0:	dfc00715 	stw	ra,28(sp)
 10210e4:	df000615 	stw	fp,24(sp)
 10210e8:	df000604 	addi	fp,sp,24
 10210ec:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10210f0:	e0bffc17 	ldw	r2,-16(fp)
 10210f4:	1004803a 	cmplt	r2,r2,zero
 10210f8:	1000081e 	bne	r2,zero,102111c <close+0x40>
 10210fc:	e0bffc17 	ldw	r2,-16(fp)
 1021100:	10800324 	muli	r2,r2,12
 1021104:	1007883a 	mov	r3,r2
 1021108:	008040f4 	movhi	r2,259
 102110c:	10975104 	addi	r2,r2,23876
 1021110:	1887883a 	add	r3,r3,r2
 1021114:	e0ffff15 	stw	r3,-4(fp)
 1021118:	00000106 	br	1021120 <close+0x44>
 102111c:	e03fff15 	stw	zero,-4(fp)
 1021120:	e0bfff17 	ldw	r2,-4(fp)
 1021124:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1021128:	e0bffb17 	ldw	r2,-20(fp)
 102112c:	1005003a 	cmpeq	r2,r2,zero
 1021130:	10001d1e 	bne	r2,zero,10211a8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1021134:	e0bffb17 	ldw	r2,-20(fp)
 1021138:	10800017 	ldw	r2,0(r2)
 102113c:	10800417 	ldw	r2,16(r2)
 1021140:	1005003a 	cmpeq	r2,r2,zero
 1021144:	1000071e 	bne	r2,zero,1021164 <close+0x88>
 1021148:	e0bffb17 	ldw	r2,-20(fp)
 102114c:	10800017 	ldw	r2,0(r2)
 1021150:	10800417 	ldw	r2,16(r2)
 1021154:	e13ffb17 	ldw	r4,-20(fp)
 1021158:	103ee83a 	callr	r2
 102115c:	e0bffe15 	stw	r2,-8(fp)
 1021160:	00000106 	br	1021168 <close+0x8c>
 1021164:	e03ffe15 	stw	zero,-8(fp)
 1021168:	e0bffe17 	ldw	r2,-8(fp)
 102116c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1021170:	e13ffc17 	ldw	r4,-16(fp)
 1021174:	102209c0 	call	102209c <alt_release_fd>
    if (rval < 0)
 1021178:	e0bffa17 	ldw	r2,-24(fp)
 102117c:	1004403a 	cmpge	r2,r2,zero
 1021180:	1000071e 	bne	r2,zero,10211a0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 1021184:	10211d80 	call	10211d8 <alt_get_errno>
 1021188:	e0fffa17 	ldw	r3,-24(fp)
 102118c:	00c7c83a 	sub	r3,zero,r3
 1021190:	10c00015 	stw	r3,0(r2)
      return -1;
 1021194:	00bfffc4 	movi	r2,-1
 1021198:	e0bffd15 	stw	r2,-12(fp)
 102119c:	00000806 	br	10211c0 <close+0xe4>
    }
    return 0;
 10211a0:	e03ffd15 	stw	zero,-12(fp)
 10211a4:	00000606 	br	10211c0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10211a8:	10211d80 	call	10211d8 <alt_get_errno>
 10211ac:	1007883a 	mov	r3,r2
 10211b0:	00801444 	movi	r2,81
 10211b4:	18800015 	stw	r2,0(r3)
    return -1;
 10211b8:	00bfffc4 	movi	r2,-1
 10211bc:	e0bffd15 	stw	r2,-12(fp)
 10211c0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 10211c4:	e037883a 	mov	sp,fp
 10211c8:	dfc00117 	ldw	ra,4(sp)
 10211cc:	df000017 	ldw	fp,0(sp)
 10211d0:	dec00204 	addi	sp,sp,8
 10211d4:	f800283a 	ret

010211d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10211d8:	defffd04 	addi	sp,sp,-12
 10211dc:	dfc00215 	stw	ra,8(sp)
 10211e0:	df000115 	stw	fp,4(sp)
 10211e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10211e8:	008040f4 	movhi	r2,259
 10211ec:	109bf904 	addi	r2,r2,28644
 10211f0:	10800017 	ldw	r2,0(r2)
 10211f4:	1005003a 	cmpeq	r2,r2,zero
 10211f8:	1000061e 	bne	r2,zero,1021214 <alt_get_errno+0x3c>
 10211fc:	008040f4 	movhi	r2,259
 1021200:	109bf904 	addi	r2,r2,28644
 1021204:	10800017 	ldw	r2,0(r2)
 1021208:	103ee83a 	callr	r2
 102120c:	e0bfff15 	stw	r2,-4(fp)
 1021210:	00000306 	br	1021220 <alt_get_errno+0x48>
 1021214:	00804134 	movhi	r2,260
 1021218:	10a30104 	addi	r2,r2,-29692
 102121c:	e0bfff15 	stw	r2,-4(fp)
 1021220:	e0bfff17 	ldw	r2,-4(fp)
}
 1021224:	e037883a 	mov	sp,fp
 1021228:	dfc00117 	ldw	ra,4(sp)
 102122c:	df000017 	ldw	fp,0(sp)
 1021230:	dec00204 	addi	sp,sp,8
 1021234:	f800283a 	ret

01021238 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1021238:	defffc04 	addi	sp,sp,-16
 102123c:	df000315 	stw	fp,12(sp)
 1021240:	df000304 	addi	fp,sp,12
 1021244:	e13ffd15 	stw	r4,-12(fp)
 1021248:	e17ffe15 	stw	r5,-8(fp)
 102124c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1021250:	e0bfff17 	ldw	r2,-4(fp)
}
 1021254:	e037883a 	mov	sp,fp
 1021258:	df000017 	ldw	fp,0(sp)
 102125c:	dec00104 	addi	sp,sp,4
 1021260:	f800283a 	ret

01021264 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1021264:	defffd04 	addi	sp,sp,-12
 1021268:	df000215 	stw	fp,8(sp)
 102126c:	df000204 	addi	fp,sp,8
 1021270:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1021274:	e0bfff17 	ldw	r2,-4(fp)
 1021278:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 102127c:	e0bffe17 	ldw	r2,-8(fp)
 1021280:	1005003a 	cmpeq	r2,r2,zero
 1021284:	1000021e 	bne	r2,zero,1021290 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1021288:	002af070 	cmpltui	zero,zero,43969
 102128c:	00000106 	br	1021294 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1021290:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1021294:	e037883a 	mov	sp,fp
 1021298:	df000017 	ldw	fp,0(sp)
 102129c:	dec00104 	addi	sp,sp,4
 10212a0:	f800283a 	ret

010212a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 10212a4:	defffd04 	addi	sp,sp,-12
 10212a8:	dfc00215 	stw	ra,8(sp)
 10212ac:	df000115 	stw	fp,4(sp)
 10212b0:	df000104 	addi	fp,sp,4
 10212b4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 10212b8:	e13fff17 	ldw	r4,-4(fp)
 10212bc:	10212640 	call	1021264 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 10212c0:	003fff06 	br	10212c0 <_exit+0x1c>

010212c4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 10212c4:	defff904 	addi	sp,sp,-28
 10212c8:	dfc00615 	stw	ra,24(sp)
 10212cc:	df000515 	stw	fp,20(sp)
 10212d0:	df000504 	addi	fp,sp,20
 10212d4:	e13ffc15 	stw	r4,-16(fp)
 10212d8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10212dc:	e0bffc17 	ldw	r2,-16(fp)
 10212e0:	1004803a 	cmplt	r2,r2,zero
 10212e4:	1000081e 	bne	r2,zero,1021308 <fstat+0x44>
 10212e8:	e0bffc17 	ldw	r2,-16(fp)
 10212ec:	10800324 	muli	r2,r2,12
 10212f0:	1007883a 	mov	r3,r2
 10212f4:	008040f4 	movhi	r2,259
 10212f8:	10975104 	addi	r2,r2,23876
 10212fc:	1887883a 	add	r3,r3,r2
 1021300:	e0ffff15 	stw	r3,-4(fp)
 1021304:	00000106 	br	102130c <fstat+0x48>
 1021308:	e03fff15 	stw	zero,-4(fp)
 102130c:	e0bfff17 	ldw	r2,-4(fp)
 1021310:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1021314:	e0bffb17 	ldw	r2,-20(fp)
 1021318:	1005003a 	cmpeq	r2,r2,zero
 102131c:	1000121e 	bne	r2,zero,1021368 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1021320:	e0bffb17 	ldw	r2,-20(fp)
 1021324:	10800017 	ldw	r2,0(r2)
 1021328:	10800817 	ldw	r2,32(r2)
 102132c:	1005003a 	cmpeq	r2,r2,zero
 1021330:	1000081e 	bne	r2,zero,1021354 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 1021334:	e0bffb17 	ldw	r2,-20(fp)
 1021338:	10800017 	ldw	r2,0(r2)
 102133c:	10800817 	ldw	r2,32(r2)
 1021340:	e13ffb17 	ldw	r4,-20(fp)
 1021344:	e17ffd17 	ldw	r5,-12(fp)
 1021348:	103ee83a 	callr	r2
 102134c:	e0bffe15 	stw	r2,-8(fp)
 1021350:	00000b06 	br	1021380 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1021354:	e0fffd17 	ldw	r3,-12(fp)
 1021358:	00880004 	movi	r2,8192
 102135c:	18800115 	stw	r2,4(r3)
      return 0;
 1021360:	e03ffe15 	stw	zero,-8(fp)
 1021364:	00000606 	br	1021380 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1021368:	10213980 	call	1021398 <alt_get_errno>
 102136c:	1007883a 	mov	r3,r2
 1021370:	00801444 	movi	r2,81
 1021374:	18800015 	stw	r2,0(r3)
    return -1;
 1021378:	00bfffc4 	movi	r2,-1
 102137c:	e0bffe15 	stw	r2,-8(fp)
 1021380:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1021384:	e037883a 	mov	sp,fp
 1021388:	dfc00117 	ldw	ra,4(sp)
 102138c:	df000017 	ldw	fp,0(sp)
 1021390:	dec00204 	addi	sp,sp,8
 1021394:	f800283a 	ret

01021398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1021398:	defffd04 	addi	sp,sp,-12
 102139c:	dfc00215 	stw	ra,8(sp)
 10213a0:	df000115 	stw	fp,4(sp)
 10213a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10213a8:	008040f4 	movhi	r2,259
 10213ac:	109bf904 	addi	r2,r2,28644
 10213b0:	10800017 	ldw	r2,0(r2)
 10213b4:	1005003a 	cmpeq	r2,r2,zero
 10213b8:	1000061e 	bne	r2,zero,10213d4 <alt_get_errno+0x3c>
 10213bc:	008040f4 	movhi	r2,259
 10213c0:	109bf904 	addi	r2,r2,28644
 10213c4:	10800017 	ldw	r2,0(r2)
 10213c8:	103ee83a 	callr	r2
 10213cc:	e0bfff15 	stw	r2,-4(fp)
 10213d0:	00000306 	br	10213e0 <alt_get_errno+0x48>
 10213d4:	00804134 	movhi	r2,260
 10213d8:	10a30104 	addi	r2,r2,-29692
 10213dc:	e0bfff15 	stw	r2,-4(fp)
 10213e0:	e0bfff17 	ldw	r2,-4(fp)
}
 10213e4:	e037883a 	mov	sp,fp
 10213e8:	dfc00117 	ldw	ra,4(sp)
 10213ec:	df000017 	ldw	fp,0(sp)
 10213f0:	dec00204 	addi	sp,sp,8
 10213f4:	f800283a 	ret

010213f8 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 10213f8:	deffff04 	addi	sp,sp,-4
 10213fc:	df000015 	stw	fp,0(sp)
 1021400:	d839883a 	mov	fp,sp
  return 0;
 1021404:	0005883a 	mov	r2,zero
}
 1021408:	e037883a 	mov	sp,fp
 102140c:	df000017 	ldw	fp,0(sp)
 1021410:	dec00104 	addi	sp,sp,4
 1021414:	f800283a 	ret

01021418 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1021418:	deffeb04 	addi	sp,sp,-84
 102141c:	dfc01415 	stw	ra,80(sp)
 1021420:	df001315 	stw	fp,76(sp)
 1021424:	df001304 	addi	fp,sp,76
 1021428:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 102142c:	e0bffd17 	ldw	r2,-12(fp)
 1021430:	1004803a 	cmplt	r2,r2,zero
 1021434:	1000081e 	bne	r2,zero,1021458 <isatty+0x40>
 1021438:	e0bffd17 	ldw	r2,-12(fp)
 102143c:	10800324 	muli	r2,r2,12
 1021440:	1007883a 	mov	r3,r2
 1021444:	008040f4 	movhi	r2,259
 1021448:	10975104 	addi	r2,r2,23876
 102144c:	1887883a 	add	r3,r3,r2
 1021450:	e0ffff15 	stw	r3,-4(fp)
 1021454:	00000106 	br	102145c <isatty+0x44>
 1021458:	e03fff15 	stw	zero,-4(fp)
 102145c:	e0bfff17 	ldw	r2,-4(fp)
 1021460:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1021464:	e0bfed17 	ldw	r2,-76(fp)
 1021468:	1005003a 	cmpeq	r2,r2,zero
 102146c:	10000f1e 	bne	r2,zero,10214ac <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1021470:	e0bfed17 	ldw	r2,-76(fp)
 1021474:	10800017 	ldw	r2,0(r2)
 1021478:	10800817 	ldw	r2,32(r2)
 102147c:	1004c03a 	cmpne	r2,r2,zero
 1021480:	1000031e 	bne	r2,zero,1021490 <isatty+0x78>
    {
      return 1;
 1021484:	00800044 	movi	r2,1
 1021488:	e0bffe15 	stw	r2,-8(fp)
 102148c:	00000c06 	br	10214c0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1021490:	e17fee04 	addi	r5,fp,-72
 1021494:	e13ffd17 	ldw	r4,-12(fp)
 1021498:	10212c40 	call	10212c4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 102149c:	e0bfef17 	ldw	r2,-68(fp)
 10214a0:	10880020 	cmpeqi	r2,r2,8192
 10214a4:	e0bffe15 	stw	r2,-8(fp)
 10214a8:	00000506 	br	10214c0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10214ac:	10214d80 	call	10214d8 <alt_get_errno>
 10214b0:	1007883a 	mov	r3,r2
 10214b4:	00801444 	movi	r2,81
 10214b8:	18800015 	stw	r2,0(r3)
    return 0;
 10214bc:	e03ffe15 	stw	zero,-8(fp)
 10214c0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 10214c4:	e037883a 	mov	sp,fp
 10214c8:	dfc00117 	ldw	ra,4(sp)
 10214cc:	df000017 	ldw	fp,0(sp)
 10214d0:	dec00204 	addi	sp,sp,8
 10214d4:	f800283a 	ret

010214d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10214d8:	defffd04 	addi	sp,sp,-12
 10214dc:	dfc00215 	stw	ra,8(sp)
 10214e0:	df000115 	stw	fp,4(sp)
 10214e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10214e8:	008040f4 	movhi	r2,259
 10214ec:	109bf904 	addi	r2,r2,28644
 10214f0:	10800017 	ldw	r2,0(r2)
 10214f4:	1005003a 	cmpeq	r2,r2,zero
 10214f8:	1000061e 	bne	r2,zero,1021514 <alt_get_errno+0x3c>
 10214fc:	008040f4 	movhi	r2,259
 1021500:	109bf904 	addi	r2,r2,28644
 1021504:	10800017 	ldw	r2,0(r2)
 1021508:	103ee83a 	callr	r2
 102150c:	e0bfff15 	stw	r2,-4(fp)
 1021510:	00000306 	br	1021520 <alt_get_errno+0x48>
 1021514:	00804134 	movhi	r2,260
 1021518:	10a30104 	addi	r2,r2,-29692
 102151c:	e0bfff15 	stw	r2,-4(fp)
 1021520:	e0bfff17 	ldw	r2,-4(fp)
}
 1021524:	e037883a 	mov	sp,fp
 1021528:	dfc00117 	ldw	ra,4(sp)
 102152c:	df000017 	ldw	fp,0(sp)
 1021530:	dec00204 	addi	sp,sp,8
 1021534:	f800283a 	ret

01021538 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 1021538:	defffa04 	addi	sp,sp,-24
 102153c:	dfc00515 	stw	ra,20(sp)
 1021540:	df000415 	stw	fp,16(sp)
 1021544:	df000404 	addi	fp,sp,16
 1021548:	e13ffd15 	stw	r4,-12(fp)
 102154c:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 1021550:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 1021554:	e0bffd17 	ldw	r2,-12(fp)
 1021558:	10800048 	cmpgei	r2,r2,1
 102155c:	1000301e 	bne	r2,zero,1021620 <kill+0xe8>
  {
    switch (sig)
 1021560:	e0bffe17 	ldw	r2,-8(fp)
 1021564:	10800828 	cmpgeui	r2,r2,32
 1021568:	10002a1e 	bne	r2,zero,1021614 <kill+0xdc>
 102156c:	e0bffe17 	ldw	r2,-8(fp)
 1021570:	1085883a 	add	r2,r2,r2
 1021574:	1087883a 	add	r3,r2,r2
 1021578:	008040b4 	movhi	r2,258
 102157c:	10856304 	addi	r2,r2,5516
 1021580:	1885883a 	add	r2,r3,r2
 1021584:	10800017 	ldw	r2,0(r2)
 1021588:	1000683a 	jmp	r2
 102158c:	01021634 	movhi	r4,2136
 1021590:	01021614 	movui	r4,2136
 1021594:	01021614 	movui	r4,2136
 1021598:	0102160c 	andi	r4,zero,2136
 102159c:	0102160c 	andi	r4,zero,2136
 10215a0:	0102160c 	andi	r4,zero,2136
 10215a4:	0102160c 	andi	r4,zero,2136
 10215a8:	01021614 	movui	r4,2136
 10215ac:	0102160c 	andi	r4,zero,2136
 10215b0:	0102160c 	andi	r4,zero,2136
 10215b4:	0102160c 	andi	r4,zero,2136
 10215b8:	0102160c 	andi	r4,zero,2136
 10215bc:	0102160c 	andi	r4,zero,2136
 10215c0:	0102160c 	andi	r4,zero,2136
 10215c4:	0102160c 	andi	r4,zero,2136
 10215c8:	0102160c 	andi	r4,zero,2136
 10215cc:	01021634 	movhi	r4,2136
 10215d0:	01021614 	movui	r4,2136
 10215d4:	01021614 	movui	r4,2136
 10215d8:	01021614 	movui	r4,2136
 10215dc:	01021634 	movhi	r4,2136
 10215e0:	01021614 	movui	r4,2136
 10215e4:	01021614 	movui	r4,2136
 10215e8:	0102160c 	andi	r4,zero,2136
 10215ec:	0102160c 	andi	r4,zero,2136
 10215f0:	0102160c 	andi	r4,zero,2136
 10215f4:	0102160c 	andi	r4,zero,2136
 10215f8:	0102160c 	andi	r4,zero,2136
 10215fc:	01021614 	movui	r4,2136
 1021600:	01021614 	movui	r4,2136
 1021604:	0102160c 	andi	r4,zero,2136
 1021608:	0102160c 	andi	r4,zero,2136
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 102160c:	0009883a 	mov	r4,zero
 1021610:	10212a40 	call	10212a4 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 1021614:	00800584 	movi	r2,22
 1021618:	e0bffc15 	stw	r2,-16(fp)
 102161c:	00000506 	br	1021634 <kill+0xfc>
    }
  }

  else if (pid > 0)
 1021620:	e0bffd17 	ldw	r2,-12(fp)
 1021624:	10800050 	cmplti	r2,r2,1
 1021628:	1000021e 	bne	r2,zero,1021634 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 102162c:	008000c4 	movi	r2,3
 1021630:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 1021634:	e0bffc17 	ldw	r2,-16(fp)
 1021638:	1005003a 	cmpeq	r2,r2,zero
 102163c:	1000071e 	bne	r2,zero,102165c <kill+0x124>
  {
    ALT_ERRNO = status;
 1021640:	10216780 	call	1021678 <alt_get_errno>
 1021644:	1007883a 	mov	r3,r2
 1021648:	e0bffc17 	ldw	r2,-16(fp)
 102164c:	18800015 	stw	r2,0(r3)
    return -1;
 1021650:	00bfffc4 	movi	r2,-1
 1021654:	e0bfff15 	stw	r2,-4(fp)
 1021658:	00000106 	br	1021660 <kill+0x128>
  }

  return 0;
 102165c:	e03fff15 	stw	zero,-4(fp)
 1021660:	e0bfff17 	ldw	r2,-4(fp)
}
 1021664:	e037883a 	mov	sp,fp
 1021668:	dfc00117 	ldw	ra,4(sp)
 102166c:	df000017 	ldw	fp,0(sp)
 1021670:	dec00204 	addi	sp,sp,8
 1021674:	f800283a 	ret

01021678 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1021678:	defffd04 	addi	sp,sp,-12
 102167c:	dfc00215 	stw	ra,8(sp)
 1021680:	df000115 	stw	fp,4(sp)
 1021684:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1021688:	008040f4 	movhi	r2,259
 102168c:	109bf904 	addi	r2,r2,28644
 1021690:	10800017 	ldw	r2,0(r2)
 1021694:	1005003a 	cmpeq	r2,r2,zero
 1021698:	1000061e 	bne	r2,zero,10216b4 <alt_get_errno+0x3c>
 102169c:	008040f4 	movhi	r2,259
 10216a0:	109bf904 	addi	r2,r2,28644
 10216a4:	10800017 	ldw	r2,0(r2)
 10216a8:	103ee83a 	callr	r2
 10216ac:	e0bfff15 	stw	r2,-4(fp)
 10216b0:	00000306 	br	10216c0 <alt_get_errno+0x48>
 10216b4:	00804134 	movhi	r2,260
 10216b8:	10a30104 	addi	r2,r2,-29692
 10216bc:	e0bfff15 	stw	r2,-4(fp)
 10216c0:	e0bfff17 	ldw	r2,-4(fp)
}
 10216c4:	e037883a 	mov	sp,fp
 10216c8:	dfc00117 	ldw	ra,4(sp)
 10216cc:	df000017 	ldw	fp,0(sp)
 10216d0:	dec00204 	addi	sp,sp,8
 10216d4:	f800283a 	ret

010216d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 10216d8:	defffe04 	addi	sp,sp,-8
 10216dc:	dfc00115 	stw	ra,4(sp)
 10216e0:	df000015 	stw	fp,0(sp)
 10216e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 10216e8:	010040f4 	movhi	r4,259
 10216ec:	211bfe04 	addi	r4,r4,28664
 10216f0:	014040f4 	movhi	r5,259
 10216f4:	29550e04 	addi	r5,r5,21560
 10216f8:	018040f4 	movhi	r6,259
 10216fc:	319bfe04 	addi	r6,r6,28664
 1021700:	10217580 	call	1021758 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1021704:	01004034 	movhi	r4,256
 1021708:	21000804 	addi	r4,r4,32
 102170c:	01404034 	movhi	r5,256
 1021710:	29400804 	addi	r5,r5,32
 1021714:	01804034 	movhi	r6,256
 1021718:	31806e04 	addi	r6,r6,440
 102171c:	10217580 	call	1021758 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1021720:	010040f4 	movhi	r4,259
 1021724:	21242204 	addi	r4,r4,-28536
 1021728:	014040f4 	movhi	r5,259
 102172c:	29642204 	addi	r5,r5,-28536
 1021730:	018040f4 	movhi	r6,259
 1021734:	31950e04 	addi	r6,r6,21560
 1021738:	10217580 	call	1021758 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 102173c:	10282d00 	call	10282d0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1021740:	102875c0 	call	102875c <alt_icache_flush_all>
}
 1021744:	e037883a 	mov	sp,fp
 1021748:	dfc00117 	ldw	ra,4(sp)
 102174c:	df000017 	ldw	fp,0(sp)
 1021750:	dec00204 	addi	sp,sp,8
 1021754:	f800283a 	ret

01021758 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1021758:	defffc04 	addi	sp,sp,-16
 102175c:	df000315 	stw	fp,12(sp)
 1021760:	df000304 	addi	fp,sp,12
 1021764:	e13ffd15 	stw	r4,-12(fp)
 1021768:	e17ffe15 	stw	r5,-8(fp)
 102176c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1021770:	e0fffe17 	ldw	r3,-8(fp)
 1021774:	e0bffd17 	ldw	r2,-12(fp)
 1021778:	18800e26 	beq	r3,r2,10217b4 <alt_load_section+0x5c>
  {
    while( to != end )
 102177c:	00000a06 	br	10217a8 <alt_load_section+0x50>
    {
      *to++ = *from++;
 1021780:	e0bffd17 	ldw	r2,-12(fp)
 1021784:	10c00017 	ldw	r3,0(r2)
 1021788:	e0bffe17 	ldw	r2,-8(fp)
 102178c:	10c00015 	stw	r3,0(r2)
 1021790:	e0bffe17 	ldw	r2,-8(fp)
 1021794:	10800104 	addi	r2,r2,4
 1021798:	e0bffe15 	stw	r2,-8(fp)
 102179c:	e0bffd17 	ldw	r2,-12(fp)
 10217a0:	10800104 	addi	r2,r2,4
 10217a4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 10217a8:	e0fffe17 	ldw	r3,-8(fp)
 10217ac:	e0bfff17 	ldw	r2,-4(fp)
 10217b0:	18bff31e 	bne	r3,r2,1021780 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 10217b4:	e037883a 	mov	sp,fp
 10217b8:	df000017 	ldw	fp,0(sp)
 10217bc:	dec00104 	addi	sp,sp,4
 10217c0:	f800283a 	ret

010217c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 10217c4:	defff804 	addi	sp,sp,-32
 10217c8:	dfc00715 	stw	ra,28(sp)
 10217cc:	df000615 	stw	fp,24(sp)
 10217d0:	df000604 	addi	fp,sp,24
 10217d4:	e13ffc15 	stw	r4,-16(fp)
 10217d8:	e17ffd15 	stw	r5,-12(fp)
 10217dc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 10217e0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10217e4:	e0bffc17 	ldw	r2,-16(fp)
 10217e8:	1004803a 	cmplt	r2,r2,zero
 10217ec:	1000081e 	bne	r2,zero,1021810 <lseek+0x4c>
 10217f0:	e0bffc17 	ldw	r2,-16(fp)
 10217f4:	10800324 	muli	r2,r2,12
 10217f8:	1007883a 	mov	r3,r2
 10217fc:	008040f4 	movhi	r2,259
 1021800:	10975104 	addi	r2,r2,23876
 1021804:	1887883a 	add	r3,r3,r2
 1021808:	e0ffff15 	stw	r3,-4(fp)
 102180c:	00000106 	br	1021814 <lseek+0x50>
 1021810:	e03fff15 	stw	zero,-4(fp)
 1021814:	e0bfff17 	ldw	r2,-4(fp)
 1021818:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 102181c:	e0bffb17 	ldw	r2,-20(fp)
 1021820:	1005003a 	cmpeq	r2,r2,zero
 1021824:	1000111e 	bne	r2,zero,102186c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1021828:	e0bffb17 	ldw	r2,-20(fp)
 102182c:	10800017 	ldw	r2,0(r2)
 1021830:	10800717 	ldw	r2,28(r2)
 1021834:	1005003a 	cmpeq	r2,r2,zero
 1021838:	1000091e 	bne	r2,zero,1021860 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 102183c:	e0bffb17 	ldw	r2,-20(fp)
 1021840:	10800017 	ldw	r2,0(r2)
 1021844:	10800717 	ldw	r2,28(r2)
 1021848:	e13ffb17 	ldw	r4,-20(fp)
 102184c:	e17ffd17 	ldw	r5,-12(fp)
 1021850:	e1bffe17 	ldw	r6,-8(fp)
 1021854:	103ee83a 	callr	r2
 1021858:	e0bffa15 	stw	r2,-24(fp)
 102185c:	00000506 	br	1021874 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1021860:	00bfde84 	movi	r2,-134
 1021864:	e0bffa15 	stw	r2,-24(fp)
 1021868:	00000206 	br	1021874 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 102186c:	00bfebc4 	movi	r2,-81
 1021870:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 1021874:	e0bffa17 	ldw	r2,-24(fp)
 1021878:	1004403a 	cmpge	r2,r2,zero
 102187c:	1000071e 	bne	r2,zero,102189c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 1021880:	10218b40 	call	10218b4 <alt_get_errno>
 1021884:	1007883a 	mov	r3,r2
 1021888:	e0bffa17 	ldw	r2,-24(fp)
 102188c:	0085c83a 	sub	r2,zero,r2
 1021890:	18800015 	stw	r2,0(r3)
    rc = -1;
 1021894:	00bfffc4 	movi	r2,-1
 1021898:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 102189c:	e0bffa17 	ldw	r2,-24(fp)
}
 10218a0:	e037883a 	mov	sp,fp
 10218a4:	dfc00117 	ldw	ra,4(sp)
 10218a8:	df000017 	ldw	fp,0(sp)
 10218ac:	dec00204 	addi	sp,sp,8
 10218b0:	f800283a 	ret

010218b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10218b4:	defffd04 	addi	sp,sp,-12
 10218b8:	dfc00215 	stw	ra,8(sp)
 10218bc:	df000115 	stw	fp,4(sp)
 10218c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10218c4:	008040f4 	movhi	r2,259
 10218c8:	109bf904 	addi	r2,r2,28644
 10218cc:	10800017 	ldw	r2,0(r2)
 10218d0:	1005003a 	cmpeq	r2,r2,zero
 10218d4:	1000061e 	bne	r2,zero,10218f0 <alt_get_errno+0x3c>
 10218d8:	008040f4 	movhi	r2,259
 10218dc:	109bf904 	addi	r2,r2,28644
 10218e0:	10800017 	ldw	r2,0(r2)
 10218e4:	103ee83a 	callr	r2
 10218e8:	e0bfff15 	stw	r2,-4(fp)
 10218ec:	00000306 	br	10218fc <alt_get_errno+0x48>
 10218f0:	00804134 	movhi	r2,260
 10218f4:	10a30104 	addi	r2,r2,-29692
 10218f8:	e0bfff15 	stw	r2,-4(fp)
 10218fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1021900:	e037883a 	mov	sp,fp
 1021904:	dfc00117 	ldw	ra,4(sp)
 1021908:	df000017 	ldw	fp,0(sp)
 102190c:	dec00204 	addi	sp,sp,8
 1021910:	f800283a 	ret

01021914 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1021914:	defffd04 	addi	sp,sp,-12
 1021918:	dfc00215 	stw	ra,8(sp)
 102191c:	df000115 	stw	fp,4(sp)
 1021920:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1021924:	0009883a 	mov	r4,zero
 1021928:	10223680 	call	1022368 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 102192c:	102239c0 	call	102239c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1021930:	010040f4 	movhi	r4,259
 1021934:	2114d704 	addi	r4,r4,21340
 1021938:	014040f4 	movhi	r5,259
 102193c:	2954d704 	addi	r5,r5,21340
 1021940:	018040f4 	movhi	r6,259
 1021944:	3194d704 	addi	r6,r6,21340
 1021948:	10288500 	call	1028850 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 102194c:	10284280 	call	1028428 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1021950:	010040f4 	movhi	r4,259
 1021954:	21212304 	addi	r4,r4,-31604
 1021958:	1028cdc0 	call	1028cdc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 102195c:	d1271e17 	ldw	r4,-25480(gp)
 1021960:	d1671f17 	ldw	r5,-25476(gp)
 1021964:	d1a72017 	ldw	r6,-25472(gp)
 1021968:	100ed040 	call	100ed04 <main>
 102196c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1021970:	01000044 	movi	r4,1
 1021974:	10210dc0 	call	10210dc <close>
  exit (result);
 1021978:	e13fff17 	ldw	r4,-4(fp)
 102197c:	1028cf00 	call	1028cf0 <exit>

01021980 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1021980:	defffe04 	addi	sp,sp,-8
 1021984:	df000115 	stw	fp,4(sp)
 1021988:	df000104 	addi	fp,sp,4
 102198c:	e13fff15 	stw	r4,-4(fp)
}
 1021990:	e037883a 	mov	sp,fp
 1021994:	df000017 	ldw	fp,0(sp)
 1021998:	dec00104 	addi	sp,sp,4
 102199c:	f800283a 	ret

010219a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 10219a0:	defffe04 	addi	sp,sp,-8
 10219a4:	df000115 	stw	fp,4(sp)
 10219a8:	df000104 	addi	fp,sp,4
 10219ac:	e13fff15 	stw	r4,-4(fp)
}
 10219b0:	e037883a 	mov	sp,fp
 10219b4:	df000017 	ldw	fp,0(sp)
 10219b8:	dec00104 	addi	sp,sp,4
 10219bc:	f800283a 	ret

010219c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 10219c0:	defffc04 	addi	sp,sp,-16
 10219c4:	df000315 	stw	fp,12(sp)
 10219c8:	df000304 	addi	fp,sp,12
 10219cc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10219d0:	e0bffe17 	ldw	r2,-8(fp)
 10219d4:	10800217 	ldw	r2,8(r2)
 10219d8:	10d00034 	orhi	r3,r2,16384
 10219dc:	e0bffe17 	ldw	r2,-8(fp)
 10219e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10219e4:	e03ffd15 	stw	zero,-12(fp)
 10219e8:	00002006 	br	1021a6c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10219ec:	e0bffd17 	ldw	r2,-12(fp)
 10219f0:	00c040f4 	movhi	r3,259
 10219f4:	18d75104 	addi	r3,r3,23876
 10219f8:	10800324 	muli	r2,r2,12
 10219fc:	10c5883a 	add	r2,r2,r3
 1021a00:	10c00017 	ldw	r3,0(r2)
 1021a04:	e0bffe17 	ldw	r2,-8(fp)
 1021a08:	10800017 	ldw	r2,0(r2)
 1021a0c:	1880141e 	bne	r3,r2,1021a60 <alt_file_locked+0xa0>
 1021a10:	e0bffd17 	ldw	r2,-12(fp)
 1021a14:	00c040f4 	movhi	r3,259
 1021a18:	18d75104 	addi	r3,r3,23876
 1021a1c:	10800324 	muli	r2,r2,12
 1021a20:	10c5883a 	add	r2,r2,r3
 1021a24:	10800204 	addi	r2,r2,8
 1021a28:	10800017 	ldw	r2,0(r2)
 1021a2c:	1004403a 	cmpge	r2,r2,zero
 1021a30:	10000b1e 	bne	r2,zero,1021a60 <alt_file_locked+0xa0>
 1021a34:	e0bffd17 	ldw	r2,-12(fp)
 1021a38:	10800324 	muli	r2,r2,12
 1021a3c:	1007883a 	mov	r3,r2
 1021a40:	008040f4 	movhi	r2,259
 1021a44:	10975104 	addi	r2,r2,23876
 1021a48:	1887883a 	add	r3,r3,r2
 1021a4c:	e0bffe17 	ldw	r2,-8(fp)
 1021a50:	18800326 	beq	r3,r2,1021a60 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1021a54:	00bffcc4 	movi	r2,-13
 1021a58:	e0bfff15 	stw	r2,-4(fp)
 1021a5c:	00000a06 	br	1021a88 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1021a60:	e0bffd17 	ldw	r2,-12(fp)
 1021a64:	10800044 	addi	r2,r2,1
 1021a68:	e0bffd15 	stw	r2,-12(fp)
 1021a6c:	008040f4 	movhi	r2,259
 1021a70:	109bf804 	addi	r2,r2,28640
 1021a74:	10800017 	ldw	r2,0(r2)
 1021a78:	1007883a 	mov	r3,r2
 1021a7c:	e0bffd17 	ldw	r2,-12(fp)
 1021a80:	18bfda2e 	bgeu	r3,r2,10219ec <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1021a84:	e03fff15 	stw	zero,-4(fp)
 1021a88:	e0bfff17 	ldw	r2,-4(fp)
}
 1021a8c:	e037883a 	mov	sp,fp
 1021a90:	df000017 	ldw	fp,0(sp)
 1021a94:	dec00104 	addi	sp,sp,4
 1021a98:	f800283a 	ret

01021a9c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1021a9c:	defff404 	addi	sp,sp,-48
 1021aa0:	dfc00b15 	stw	ra,44(sp)
 1021aa4:	df000a15 	stw	fp,40(sp)
 1021aa8:	df000a04 	addi	fp,sp,40
 1021aac:	e13ffb15 	stw	r4,-20(fp)
 1021ab0:	e17ffc15 	stw	r5,-16(fp)
 1021ab4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1021ab8:	00bfffc4 	movi	r2,-1
 1021abc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1021ac0:	00bffb44 	movi	r2,-19
 1021ac4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1021ac8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1021acc:	e13ffb17 	ldw	r4,-20(fp)
 1021ad0:	014040f4 	movhi	r5,259
 1021ad4:	295bf604 	addi	r5,r5,28632
 1021ad8:	10284f00 	call	10284f0 <alt_find_dev>
 1021adc:	e0bffa15 	stw	r2,-24(fp)
 1021ae0:	e0bffa17 	ldw	r2,-24(fp)
 1021ae4:	1004c03a 	cmpne	r2,r2,zero
 1021ae8:	1000051e 	bne	r2,zero,1021b00 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1021aec:	e13ffb17 	ldw	r4,-20(fp)
 1021af0:	10285840 	call	1028584 <alt_find_file>
 1021af4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1021af8:	00800044 	movi	r2,1
 1021afc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1021b00:	e0bffa17 	ldw	r2,-24(fp)
 1021b04:	1005003a 	cmpeq	r2,r2,zero
 1021b08:	1000301e 	bne	r2,zero,1021bcc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1021b0c:	e13ffa17 	ldw	r4,-24(fp)
 1021b10:	10286a40 	call	10286a4 <alt_get_fd>
 1021b14:	e0bff815 	stw	r2,-32(fp)
 1021b18:	e0bff817 	ldw	r2,-32(fp)
 1021b1c:	1004403a 	cmpge	r2,r2,zero
 1021b20:	1000031e 	bne	r2,zero,1021b30 <open+0x94>
    {
      status = index;
 1021b24:	e0bff817 	ldw	r2,-32(fp)
 1021b28:	e0bff715 	stw	r2,-36(fp)
 1021b2c:	00002906 	br	1021bd4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 1021b30:	e0bff817 	ldw	r2,-32(fp)
 1021b34:	10800324 	muli	r2,r2,12
 1021b38:	1007883a 	mov	r3,r2
 1021b3c:	008040f4 	movhi	r2,259
 1021b40:	10975104 	addi	r2,r2,23876
 1021b44:	1885883a 	add	r2,r3,r2
 1021b48:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1021b4c:	e0fffc17 	ldw	r3,-16(fp)
 1021b50:	00900034 	movhi	r2,16384
 1021b54:	10bfffc4 	addi	r2,r2,-1
 1021b58:	1886703a 	and	r3,r3,r2
 1021b5c:	e0bff917 	ldw	r2,-28(fp)
 1021b60:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1021b64:	e0bff617 	ldw	r2,-40(fp)
 1021b68:	1004c03a 	cmpne	r2,r2,zero
 1021b6c:	1000061e 	bne	r2,zero,1021b88 <open+0xec>
 1021b70:	e13ff917 	ldw	r4,-28(fp)
 1021b74:	10219c00 	call	10219c0 <alt_file_locked>
 1021b78:	e0bff715 	stw	r2,-36(fp)
 1021b7c:	e0bff717 	ldw	r2,-36(fp)
 1021b80:	1004803a 	cmplt	r2,r2,zero
 1021b84:	1000131e 	bne	r2,zero,1021bd4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1021b88:	e0bffa17 	ldw	r2,-24(fp)
 1021b8c:	10800317 	ldw	r2,12(r2)
 1021b90:	1005003a 	cmpeq	r2,r2,zero
 1021b94:	1000091e 	bne	r2,zero,1021bbc <open+0x120>
 1021b98:	e0bffa17 	ldw	r2,-24(fp)
 1021b9c:	10800317 	ldw	r2,12(r2)
 1021ba0:	e13ff917 	ldw	r4,-28(fp)
 1021ba4:	e17ffb17 	ldw	r5,-20(fp)
 1021ba8:	e1bffc17 	ldw	r6,-16(fp)
 1021bac:	e1fffd17 	ldw	r7,-12(fp)
 1021bb0:	103ee83a 	callr	r2
 1021bb4:	e0bfff15 	stw	r2,-4(fp)
 1021bb8:	00000106 	br	1021bc0 <open+0x124>
 1021bbc:	e03fff15 	stw	zero,-4(fp)
 1021bc0:	e0bfff17 	ldw	r2,-4(fp)
 1021bc4:	e0bff715 	stw	r2,-36(fp)
 1021bc8:	00000206 	br	1021bd4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1021bcc:	00bffb44 	movi	r2,-19
 1021bd0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1021bd4:	e0bff717 	ldw	r2,-36(fp)
 1021bd8:	1004403a 	cmpge	r2,r2,zero
 1021bdc:	1000091e 	bne	r2,zero,1021c04 <open+0x168>
  {
    alt_release_fd (index);  
 1021be0:	e13ff817 	ldw	r4,-32(fp)
 1021be4:	102209c0 	call	102209c <alt_release_fd>
    ALT_ERRNO = -status;
 1021be8:	1021c240 	call	1021c24 <alt_get_errno>
 1021bec:	e0fff717 	ldw	r3,-36(fp)
 1021bf0:	00c7c83a 	sub	r3,zero,r3
 1021bf4:	10c00015 	stw	r3,0(r2)
    return -1;
 1021bf8:	00bfffc4 	movi	r2,-1
 1021bfc:	e0bffe15 	stw	r2,-8(fp)
 1021c00:	00000206 	br	1021c0c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 1021c04:	e0bff817 	ldw	r2,-32(fp)
 1021c08:	e0bffe15 	stw	r2,-8(fp)
 1021c0c:	e0bffe17 	ldw	r2,-8(fp)
}
 1021c10:	e037883a 	mov	sp,fp
 1021c14:	dfc00117 	ldw	ra,4(sp)
 1021c18:	df000017 	ldw	fp,0(sp)
 1021c1c:	dec00204 	addi	sp,sp,8
 1021c20:	f800283a 	ret

01021c24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1021c24:	defffd04 	addi	sp,sp,-12
 1021c28:	dfc00215 	stw	ra,8(sp)
 1021c2c:	df000115 	stw	fp,4(sp)
 1021c30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1021c34:	008040f4 	movhi	r2,259
 1021c38:	109bf904 	addi	r2,r2,28644
 1021c3c:	10800017 	ldw	r2,0(r2)
 1021c40:	1005003a 	cmpeq	r2,r2,zero
 1021c44:	1000061e 	bne	r2,zero,1021c60 <alt_get_errno+0x3c>
 1021c48:	008040f4 	movhi	r2,259
 1021c4c:	109bf904 	addi	r2,r2,28644
 1021c50:	10800017 	ldw	r2,0(r2)
 1021c54:	103ee83a 	callr	r2
 1021c58:	e0bfff15 	stw	r2,-4(fp)
 1021c5c:	00000306 	br	1021c6c <alt_get_errno+0x48>
 1021c60:	00804134 	movhi	r2,260
 1021c64:	10a30104 	addi	r2,r2,-29692
 1021c68:	e0bfff15 	stw	r2,-4(fp)
 1021c6c:	e0bfff17 	ldw	r2,-4(fp)
}
 1021c70:	e037883a 	mov	sp,fp
 1021c74:	dfc00117 	ldw	ra,4(sp)
 1021c78:	df000017 	ldw	fp,0(sp)
 1021c7c:	dec00204 	addi	sp,sp,8
 1021c80:	f800283a 	ret

01021c84 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 1021c84:	defff204 	addi	sp,sp,-56
 1021c88:	dfc00a15 	stw	ra,40(sp)
 1021c8c:	df000915 	stw	fp,36(sp)
 1021c90:	df000904 	addi	fp,sp,36
 1021c94:	e1400215 	stw	r5,8(fp)
 1021c98:	e1800315 	stw	r6,12(fp)
 1021c9c:	e1c00415 	stw	r7,16(fp)
 1021ca0:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
 1021ca4:	e0800204 	addi	r2,fp,8
 1021ca8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 1021cac:	e0bfff17 	ldw	r2,-4(fp)
 1021cb0:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
 1021cb4:	00007806 	br	1021e98 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 1021cb8:	e0bffc07 	ldb	r2,-16(fp)
 1021cbc:	10800960 	cmpeqi	r2,r2,37
 1021cc0:	1000031e 	bne	r2,zero,1021cd0 <alt_printf+0x4c>
        {
            alt_putchar(c);
 1021cc4:	e13ffc07 	ldb	r4,-16(fp)
 1021cc8:	1021edc0 	call	1021edc <alt_putchar>
 1021ccc:	00007206 	br	1021e98 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 1021cd0:	e0bffd17 	ldw	r2,-12(fp)
 1021cd4:	10800003 	ldbu	r2,0(r2)
 1021cd8:	e0bffc05 	stb	r2,-16(fp)
 1021cdc:	e0bffc07 	ldb	r2,-16(fp)
 1021ce0:	1004c03a 	cmpne	r2,r2,zero
 1021ce4:	1007883a 	mov	r3,r2
 1021ce8:	e0bffd17 	ldw	r2,-12(fp)
 1021cec:	10800044 	addi	r2,r2,1
 1021cf0:	e0bffd15 	stw	r2,-12(fp)
 1021cf4:	18803fcc 	andi	r2,r3,255
 1021cf8:	1005003a 	cmpeq	r2,r2,zero
 1021cfc:	1000721e 	bne	r2,zero,1021ec8 <alt_printf+0x244>
            {
                if (c == '%')
 1021d00:	e0bffc07 	ldb	r2,-16(fp)
 1021d04:	10800958 	cmpnei	r2,r2,37
 1021d08:	1000031e 	bne	r2,zero,1021d18 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 1021d0c:	e13ffc07 	ldb	r4,-16(fp)
 1021d10:	1021edc0 	call	1021edc <alt_putchar>
 1021d14:	00006006 	br	1021e98 <alt_printf+0x214>
                } 
                else if (c == 'c')
 1021d18:	e0bffc07 	ldb	r2,-16(fp)
 1021d1c:	108018d8 	cmpnei	r2,r2,99
 1021d20:	1000091e 	bne	r2,zero,1021d48 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
 1021d24:	e0fffe17 	ldw	r3,-8(fp)
 1021d28:	18800104 	addi	r2,r3,4
 1021d2c:	e0bffe15 	stw	r2,-8(fp)
 1021d30:	1805883a 	mov	r2,r3
 1021d34:	10800017 	ldw	r2,0(r2)
 1021d38:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
 1021d3c:	e13ffb17 	ldw	r4,-20(fp)
 1021d40:	1021edc0 	call	1021edc <alt_putchar>
 1021d44:	00005406 	br	1021e98 <alt_printf+0x214>
                }
                else if (c == 'x')
 1021d48:	e0bffc07 	ldb	r2,-16(fp)
 1021d4c:	10801e18 	cmpnei	r2,r2,120
 1021d50:	1000371e 	bne	r2,zero,1021e30 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 1021d54:	e0fffe17 	ldw	r3,-8(fp)
 1021d58:	18800104 	addi	r2,r3,4
 1021d5c:	e0bffe15 	stw	r2,-8(fp)
 1021d60:	1805883a 	mov	r2,r3
 1021d64:	10800017 	ldw	r2,0(r2)
 1021d68:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 1021d6c:	e0bffa17 	ldw	r2,-24(fp)
 1021d70:	1004c03a 	cmpne	r2,r2,zero
 1021d74:	1000031e 	bne	r2,zero,1021d84 <alt_printf+0x100>
                    {
                        alt_putchar('0');
 1021d78:	01000c04 	movi	r4,48
 1021d7c:	1021edc0 	call	1021edc <alt_putchar>
                        continue;
 1021d80:	00004506 	br	1021e98 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 1021d84:	00800704 	movi	r2,28
 1021d88:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
 1021d8c:	00000306 	br	1021d9c <alt_printf+0x118>
                        digit_shift -= 4;
 1021d90:	e0bff817 	ldw	r2,-32(fp)
 1021d94:	10bfff04 	addi	r2,r2,-4
 1021d98:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 1021d9c:	00c003c4 	movi	r3,15
 1021da0:	e0bff817 	ldw	r2,-32(fp)
 1021da4:	1884983a 	sll	r2,r3,r2
 1021da8:	1007883a 	mov	r3,r2
 1021dac:	e0bffa17 	ldw	r2,-24(fp)
 1021db0:	1884703a 	and	r2,r3,r2
 1021db4:	1005003a 	cmpeq	r2,r2,zero
 1021db8:	103ff51e 	bne	r2,zero,1021d90 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 1021dbc:	00001806 	br	1021e20 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 1021dc0:	00c003c4 	movi	r3,15
 1021dc4:	e0bff817 	ldw	r2,-32(fp)
 1021dc8:	1884983a 	sll	r2,r3,r2
 1021dcc:	1007883a 	mov	r3,r2
 1021dd0:	e0bffa17 	ldw	r2,-24(fp)
 1021dd4:	1886703a 	and	r3,r3,r2
 1021dd8:	e0bff817 	ldw	r2,-32(fp)
 1021ddc:	1884d83a 	srl	r2,r3,r2
 1021de0:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
 1021de4:	e0bff917 	ldw	r2,-28(fp)
 1021de8:	108002a8 	cmpgeui	r2,r2,10
 1021dec:	1000041e 	bne	r2,zero,1021e00 <alt_printf+0x17c>
                            c = '0' + digit;
 1021df0:	e0bff917 	ldw	r2,-28(fp)
 1021df4:	10800c04 	addi	r2,r2,48
 1021df8:	e0bffc05 	stb	r2,-16(fp)
 1021dfc:	00000306 	br	1021e0c <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
 1021e00:	e0bff917 	ldw	r2,-28(fp)
 1021e04:	108015c4 	addi	r2,r2,87
 1021e08:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
 1021e0c:	e13ffc07 	ldb	r4,-16(fp)
 1021e10:	1021edc0 	call	1021edc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 1021e14:	e0bff817 	ldw	r2,-32(fp)
 1021e18:	10bfff04 	addi	r2,r2,-4
 1021e1c:	e0bff815 	stw	r2,-32(fp)
 1021e20:	e0bff817 	ldw	r2,-32(fp)
 1021e24:	1004403a 	cmpge	r2,r2,zero
 1021e28:	103fe51e 	bne	r2,zero,1021dc0 <alt_printf+0x13c>
 1021e2c:	00001a06 	br	1021e98 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 1021e30:	e0bffc07 	ldb	r2,-16(fp)
 1021e34:	10801cd8 	cmpnei	r2,r2,115
 1021e38:	1000171e 	bne	r2,zero,1021e98 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 1021e3c:	e0fffe17 	ldw	r3,-8(fp)
 1021e40:	18800104 	addi	r2,r3,4
 1021e44:	e0bffe15 	stw	r2,-8(fp)
 1021e48:	1805883a 	mov	r2,r3
 1021e4c:	10800017 	ldw	r2,0(r2)
 1021e50:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
 1021e54:	00000906 	br	1021e7c <alt_printf+0x1f8>
                      alt_putchar(*s++);
 1021e58:	e0bff717 	ldw	r2,-36(fp)
 1021e5c:	10800003 	ldbu	r2,0(r2)
 1021e60:	11003fcc 	andi	r4,r2,255
 1021e64:	2100201c 	xori	r4,r4,128
 1021e68:	213fe004 	addi	r4,r4,-128
 1021e6c:	e0bff717 	ldw	r2,-36(fp)
 1021e70:	10800044 	addi	r2,r2,1
 1021e74:	e0bff715 	stw	r2,-36(fp)
 1021e78:	1021edc0 	call	1021edc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 1021e7c:	e0bff717 	ldw	r2,-36(fp)
 1021e80:	10800003 	ldbu	r2,0(r2)
 1021e84:	10803fcc 	andi	r2,r2,255
 1021e88:	1080201c 	xori	r2,r2,128
 1021e8c:	10bfe004 	addi	r2,r2,-128
 1021e90:	1004c03a 	cmpne	r2,r2,zero
 1021e94:	103ff01e 	bne	r2,zero,1021e58 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 1021e98:	e0bffd17 	ldw	r2,-12(fp)
 1021e9c:	10800003 	ldbu	r2,0(r2)
 1021ea0:	e0bffc05 	stb	r2,-16(fp)
 1021ea4:	e0bffc07 	ldb	r2,-16(fp)
 1021ea8:	1004c03a 	cmpne	r2,r2,zero
 1021eac:	1007883a 	mov	r3,r2
 1021eb0:	e0bffd17 	ldw	r2,-12(fp)
 1021eb4:	10800044 	addi	r2,r2,1
 1021eb8:	e0bffd15 	stw	r2,-12(fp)
 1021ebc:	18803fcc 	andi	r2,r3,255
 1021ec0:	1004c03a 	cmpne	r2,r2,zero
 1021ec4:	103f7c1e 	bne	r2,zero,1021cb8 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
 1021ec8:	e037883a 	mov	sp,fp
 1021ecc:	dfc00117 	ldw	ra,4(sp)
 1021ed0:	df000017 	ldw	fp,0(sp)
 1021ed4:	dec00504 	addi	sp,sp,20
 1021ed8:	f800283a 	ret

01021edc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 1021edc:	defffd04 	addi	sp,sp,-12
 1021ee0:	dfc00215 	stw	ra,8(sp)
 1021ee4:	df000115 	stw	fp,4(sp)
 1021ee8:	df000104 	addi	fp,sp,4
 1021eec:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 1021ef0:	008040f4 	movhi	r2,259
 1021ef4:	109bed04 	addi	r2,r2,28596
 1021ef8:	10800017 	ldw	r2,0(r2)
 1021efc:	11400217 	ldw	r5,8(r2)
 1021f00:	e13fff17 	ldw	r4,-4(fp)
 1021f04:	101def00 	call	101def0 <putc>
#endif
}
 1021f08:	e037883a 	mov	sp,fp
 1021f0c:	dfc00117 	ldw	ra,4(sp)
 1021f10:	df000017 	ldw	fp,0(sp)
 1021f14:	dec00204 	addi	sp,sp,8
 1021f18:	f800283a 	ret

01021f1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1021f1c:	defff704 	addi	sp,sp,-36
 1021f20:	dfc00815 	stw	ra,32(sp)
 1021f24:	df000715 	stw	fp,28(sp)
 1021f28:	df000704 	addi	fp,sp,28
 1021f2c:	e13ffb15 	stw	r4,-20(fp)
 1021f30:	e17ffc15 	stw	r5,-16(fp)
 1021f34:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1021f38:	e0bffb17 	ldw	r2,-20(fp)
 1021f3c:	1004803a 	cmplt	r2,r2,zero
 1021f40:	1000081e 	bne	r2,zero,1021f64 <read+0x48>
 1021f44:	e0bffb17 	ldw	r2,-20(fp)
 1021f48:	10800324 	muli	r2,r2,12
 1021f4c:	1007883a 	mov	r3,r2
 1021f50:	008040f4 	movhi	r2,259
 1021f54:	10975104 	addi	r2,r2,23876
 1021f58:	1887883a 	add	r3,r3,r2
 1021f5c:	e0ffff15 	stw	r3,-4(fp)
 1021f60:	00000106 	br	1021f68 <read+0x4c>
 1021f64:	e03fff15 	stw	zero,-4(fp)
 1021f68:	e0bfff17 	ldw	r2,-4(fp)
 1021f6c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1021f70:	e0bffa17 	ldw	r2,-24(fp)
 1021f74:	1005003a 	cmpeq	r2,r2,zero
 1021f78:	1000241e 	bne	r2,zero,102200c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1021f7c:	e0bffa17 	ldw	r2,-24(fp)
 1021f80:	10800217 	ldw	r2,8(r2)
 1021f84:	108000cc 	andi	r2,r2,3
 1021f88:	10800060 	cmpeqi	r2,r2,1
 1021f8c:	10001a1e 	bne	r2,zero,1021ff8 <read+0xdc>
 1021f90:	e0bffa17 	ldw	r2,-24(fp)
 1021f94:	10800017 	ldw	r2,0(r2)
 1021f98:	10800517 	ldw	r2,20(r2)
 1021f9c:	1005003a 	cmpeq	r2,r2,zero
 1021fa0:	1000151e 	bne	r2,zero,1021ff8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1021fa4:	e0bffa17 	ldw	r2,-24(fp)
 1021fa8:	10800017 	ldw	r2,0(r2)
 1021fac:	10800517 	ldw	r2,20(r2)
 1021fb0:	e17ffc17 	ldw	r5,-16(fp)
 1021fb4:	e1bffd17 	ldw	r6,-12(fp)
 1021fb8:	e13ffa17 	ldw	r4,-24(fp)
 1021fbc:	103ee83a 	callr	r2
 1021fc0:	e0bff915 	stw	r2,-28(fp)
 1021fc4:	e0bff917 	ldw	r2,-28(fp)
 1021fc8:	1004403a 	cmpge	r2,r2,zero
 1021fcc:	1000071e 	bne	r2,zero,1021fec <read+0xd0>
        {
          ALT_ERRNO = -rval;
 1021fd0:	102203c0 	call	102203c <alt_get_errno>
 1021fd4:	e0fff917 	ldw	r3,-28(fp)
 1021fd8:	00c7c83a 	sub	r3,zero,r3
 1021fdc:	10c00015 	stw	r3,0(r2)
          return -1;
 1021fe0:	00bfffc4 	movi	r2,-1
 1021fe4:	e0bffe15 	stw	r2,-8(fp)
 1021fe8:	00000e06 	br	1022024 <read+0x108>
        }
        return rval;
 1021fec:	e0bff917 	ldw	r2,-28(fp)
 1021ff0:	e0bffe15 	stw	r2,-8(fp)
 1021ff4:	00000b06 	br	1022024 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1021ff8:	102203c0 	call	102203c <alt_get_errno>
 1021ffc:	1007883a 	mov	r3,r2
 1022000:	00800344 	movi	r2,13
 1022004:	18800015 	stw	r2,0(r3)
 1022008:	00000406 	br	102201c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 102200c:	102203c0 	call	102203c <alt_get_errno>
 1022010:	1007883a 	mov	r3,r2
 1022014:	00801444 	movi	r2,81
 1022018:	18800015 	stw	r2,0(r3)
  }
  return -1;
 102201c:	00bfffc4 	movi	r2,-1
 1022020:	e0bffe15 	stw	r2,-8(fp)
 1022024:	e0bffe17 	ldw	r2,-8(fp)
}
 1022028:	e037883a 	mov	sp,fp
 102202c:	dfc00117 	ldw	ra,4(sp)
 1022030:	df000017 	ldw	fp,0(sp)
 1022034:	dec00204 	addi	sp,sp,8
 1022038:	f800283a 	ret

0102203c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 102203c:	defffd04 	addi	sp,sp,-12
 1022040:	dfc00215 	stw	ra,8(sp)
 1022044:	df000115 	stw	fp,4(sp)
 1022048:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 102204c:	008040f4 	movhi	r2,259
 1022050:	109bf904 	addi	r2,r2,28644
 1022054:	10800017 	ldw	r2,0(r2)
 1022058:	1005003a 	cmpeq	r2,r2,zero
 102205c:	1000061e 	bne	r2,zero,1022078 <alt_get_errno+0x3c>
 1022060:	008040f4 	movhi	r2,259
 1022064:	109bf904 	addi	r2,r2,28644
 1022068:	10800017 	ldw	r2,0(r2)
 102206c:	103ee83a 	callr	r2
 1022070:	e0bfff15 	stw	r2,-4(fp)
 1022074:	00000306 	br	1022084 <alt_get_errno+0x48>
 1022078:	00804134 	movhi	r2,260
 102207c:	10a30104 	addi	r2,r2,-29692
 1022080:	e0bfff15 	stw	r2,-4(fp)
 1022084:	e0bfff17 	ldw	r2,-4(fp)
}
 1022088:	e037883a 	mov	sp,fp
 102208c:	dfc00117 	ldw	ra,4(sp)
 1022090:	df000017 	ldw	fp,0(sp)
 1022094:	dec00204 	addi	sp,sp,8
 1022098:	f800283a 	ret

0102209c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 102209c:	defffe04 	addi	sp,sp,-8
 10220a0:	df000115 	stw	fp,4(sp)
 10220a4:	df000104 	addi	fp,sp,4
 10220a8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 10220ac:	e0bfff17 	ldw	r2,-4(fp)
 10220b0:	108000d0 	cmplti	r2,r2,3
 10220b4:	10000d1e 	bne	r2,zero,10220ec <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 10220b8:	e0bfff17 	ldw	r2,-4(fp)
 10220bc:	00c040f4 	movhi	r3,259
 10220c0:	18d75104 	addi	r3,r3,23876
 10220c4:	10800324 	muli	r2,r2,12
 10220c8:	10c5883a 	add	r2,r2,r3
 10220cc:	10800204 	addi	r2,r2,8
 10220d0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10220d4:	e0bfff17 	ldw	r2,-4(fp)
 10220d8:	00c040f4 	movhi	r3,259
 10220dc:	18d75104 	addi	r3,r3,23876
 10220e0:	10800324 	muli	r2,r2,12
 10220e4:	10c5883a 	add	r2,r2,r3
 10220e8:	10000015 	stw	zero,0(r2)
  }
}
 10220ec:	e037883a 	mov	sp,fp
 10220f0:	df000017 	ldw	fp,0(sp)
 10220f4:	dec00104 	addi	sp,sp,4
 10220f8:	f800283a 	ret

010220fc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 10220fc:	defff804 	addi	sp,sp,-32
 1022100:	df000715 	stw	fp,28(sp)
 1022104:	df000704 	addi	fp,sp,28
 1022108:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102210c:	0005303a 	rdctl	r2,status
 1022110:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1022114:	e0fffb17 	ldw	r3,-20(fp)
 1022118:	00bfff84 	movi	r2,-2
 102211c:	1884703a 	and	r2,r3,r2
 1022120:	1001703a 	wrctl	status,r2
  
  return context;
 1022124:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1022128:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 102212c:	d0a01017 	ldw	r2,-32704(gp)
 1022130:	10c000c4 	addi	r3,r2,3
 1022134:	00bfff04 	movi	r2,-4
 1022138:	1884703a 	and	r2,r3,r2
 102213c:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1022140:	d0e01017 	ldw	r3,-32704(gp)
 1022144:	e0bffe17 	ldw	r2,-8(fp)
 1022148:	1887883a 	add	r3,r3,r2
 102214c:	00806034 	movhi	r2,384
 1022150:	10800004 	addi	r2,r2,0
 1022154:	10c0072e 	bgeu	r2,r3,1022174 <sbrk+0x78>
 1022158:	e0bffd17 	ldw	r2,-12(fp)
 102215c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1022160:	e0bffa17 	ldw	r2,-24(fp)
 1022164:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1022168:	00bfffc4 	movi	r2,-1
 102216c:	e0bfff15 	stw	r2,-4(fp)
 1022170:	00000c06 	br	10221a4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1022174:	d0a01017 	ldw	r2,-32704(gp)
 1022178:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 102217c:	d0e01017 	ldw	r3,-32704(gp)
 1022180:	e0bffe17 	ldw	r2,-8(fp)
 1022184:	1885883a 	add	r2,r3,r2
 1022188:	d0a01015 	stw	r2,-32704(gp)
 102218c:	e0bffd17 	ldw	r2,-12(fp)
 1022190:	e0bff915 	stw	r2,-28(fp)
 1022194:	e0bff917 	ldw	r2,-28(fp)
 1022198:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 102219c:	e0bffc17 	ldw	r2,-16(fp)
 10221a0:	e0bfff15 	stw	r2,-4(fp)
 10221a4:	e0bfff17 	ldw	r2,-4(fp)
} 
 10221a8:	e037883a 	mov	sp,fp
 10221ac:	df000017 	ldw	fp,0(sp)
 10221b0:	dec00104 	addi	sp,sp,4
 10221b4:	f800283a 	ret

010221b8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 10221b8:	defffd04 	addi	sp,sp,-12
 10221bc:	dfc00215 	stw	ra,8(sp)
 10221c0:	df000115 	stw	fp,4(sp)
 10221c4:	df000104 	addi	fp,sp,4
 10221c8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 10221cc:	e13fff17 	ldw	r4,-4(fp)
 10221d0:	10281a40 	call	10281a4 <alt_busy_sleep>
}
 10221d4:	e037883a 	mov	sp,fp
 10221d8:	dfc00117 	ldw	ra,4(sp)
 10221dc:	df000017 	ldw	fp,0(sp)
 10221e0:	dec00204 	addi	sp,sp,8
 10221e4:	f800283a 	ret

010221e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 10221e8:	defff704 	addi	sp,sp,-36
 10221ec:	dfc00815 	stw	ra,32(sp)
 10221f0:	df000715 	stw	fp,28(sp)
 10221f4:	df000704 	addi	fp,sp,28
 10221f8:	e13ffb15 	stw	r4,-20(fp)
 10221fc:	e17ffc15 	stw	r5,-16(fp)
 1022200:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1022204:	e0bffb17 	ldw	r2,-20(fp)
 1022208:	1004803a 	cmplt	r2,r2,zero
 102220c:	1000081e 	bne	r2,zero,1022230 <write+0x48>
 1022210:	e0bffb17 	ldw	r2,-20(fp)
 1022214:	10800324 	muli	r2,r2,12
 1022218:	1007883a 	mov	r3,r2
 102221c:	008040f4 	movhi	r2,259
 1022220:	10975104 	addi	r2,r2,23876
 1022224:	1887883a 	add	r3,r3,r2
 1022228:	e0ffff15 	stw	r3,-4(fp)
 102222c:	00000106 	br	1022234 <write+0x4c>
 1022230:	e03fff15 	stw	zero,-4(fp)
 1022234:	e0bfff17 	ldw	r2,-4(fp)
 1022238:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 102223c:	e0bffa17 	ldw	r2,-24(fp)
 1022240:	1005003a 	cmpeq	r2,r2,zero
 1022244:	1000241e 	bne	r2,zero,10222d8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1022248:	e0bffa17 	ldw	r2,-24(fp)
 102224c:	10800217 	ldw	r2,8(r2)
 1022250:	108000cc 	andi	r2,r2,3
 1022254:	1005003a 	cmpeq	r2,r2,zero
 1022258:	10001a1e 	bne	r2,zero,10222c4 <write+0xdc>
 102225c:	e0bffa17 	ldw	r2,-24(fp)
 1022260:	10800017 	ldw	r2,0(r2)
 1022264:	10800617 	ldw	r2,24(r2)
 1022268:	1005003a 	cmpeq	r2,r2,zero
 102226c:	1000151e 	bne	r2,zero,10222c4 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1022270:	e0bffa17 	ldw	r2,-24(fp)
 1022274:	10800017 	ldw	r2,0(r2)
 1022278:	10800617 	ldw	r2,24(r2)
 102227c:	e17ffc17 	ldw	r5,-16(fp)
 1022280:	e1bffd17 	ldw	r6,-12(fp)
 1022284:	e13ffa17 	ldw	r4,-24(fp)
 1022288:	103ee83a 	callr	r2
 102228c:	e0bff915 	stw	r2,-28(fp)
 1022290:	e0bff917 	ldw	r2,-28(fp)
 1022294:	1004403a 	cmpge	r2,r2,zero
 1022298:	1000071e 	bne	r2,zero,10222b8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 102229c:	10223080 	call	1022308 <alt_get_errno>
 10222a0:	e0fff917 	ldw	r3,-28(fp)
 10222a4:	00c7c83a 	sub	r3,zero,r3
 10222a8:	10c00015 	stw	r3,0(r2)
        return -1;
 10222ac:	00bfffc4 	movi	r2,-1
 10222b0:	e0bffe15 	stw	r2,-8(fp)
 10222b4:	00000e06 	br	10222f0 <write+0x108>
      }
      return rval;
 10222b8:	e0bff917 	ldw	r2,-28(fp)
 10222bc:	e0bffe15 	stw	r2,-8(fp)
 10222c0:	00000b06 	br	10222f0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 10222c4:	10223080 	call	1022308 <alt_get_errno>
 10222c8:	1007883a 	mov	r3,r2
 10222cc:	00800344 	movi	r2,13
 10222d0:	18800015 	stw	r2,0(r3)
 10222d4:	00000406 	br	10222e8 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 10222d8:	10223080 	call	1022308 <alt_get_errno>
 10222dc:	1007883a 	mov	r3,r2
 10222e0:	00801444 	movi	r2,81
 10222e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10222e8:	00bfffc4 	movi	r2,-1
 10222ec:	e0bffe15 	stw	r2,-8(fp)
 10222f0:	e0bffe17 	ldw	r2,-8(fp)
}
 10222f4:	e037883a 	mov	sp,fp
 10222f8:	dfc00117 	ldw	ra,4(sp)
 10222fc:	df000017 	ldw	fp,0(sp)
 1022300:	dec00204 	addi	sp,sp,8
 1022304:	f800283a 	ret

01022308 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1022308:	defffd04 	addi	sp,sp,-12
 102230c:	dfc00215 	stw	ra,8(sp)
 1022310:	df000115 	stw	fp,4(sp)
 1022314:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1022318:	008040f4 	movhi	r2,259
 102231c:	109bf904 	addi	r2,r2,28644
 1022320:	10800017 	ldw	r2,0(r2)
 1022324:	1005003a 	cmpeq	r2,r2,zero
 1022328:	1000061e 	bne	r2,zero,1022344 <alt_get_errno+0x3c>
 102232c:	008040f4 	movhi	r2,259
 1022330:	109bf904 	addi	r2,r2,28644
 1022334:	10800017 	ldw	r2,0(r2)
 1022338:	103ee83a 	callr	r2
 102233c:	e0bfff15 	stw	r2,-4(fp)
 1022340:	00000306 	br	1022350 <alt_get_errno+0x48>
 1022344:	00804134 	movhi	r2,260
 1022348:	10a30104 	addi	r2,r2,-29692
 102234c:	e0bfff15 	stw	r2,-4(fp)
 1022350:	e0bfff17 	ldw	r2,-4(fp)
}
 1022354:	e037883a 	mov	sp,fp
 1022358:	dfc00117 	ldw	ra,4(sp)
 102235c:	df000017 	ldw	fp,0(sp)
 1022360:	dec00204 	addi	sp,sp,8
 1022364:	f800283a 	ret

01022368 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1022368:	defffd04 	addi	sp,sp,-12
 102236c:	dfc00215 	stw	ra,8(sp)
 1022370:	df000115 	stw	fp,4(sp)
 1022374:	df000104 	addi	fp,sp,4
 1022378:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 102237c:	1028c2c0 	call	1028c2c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1022380:	00800044 	movi	r2,1
 1022384:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1022388:	e037883a 	mov	sp,fp
 102238c:	dfc00117 	ldw	ra,4(sp)
 1022390:	df000017 	ldw	fp,0(sp)
 1022394:	dec00204 	addi	sp,sp,8
 1022398:	f800283a 	ret

0102239c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 102239c:	defffe04 	addi	sp,sp,-8
 10223a0:	dfc00115 	stw	ra,4(sp)
 10223a4:	df000015 	stw	fp,0(sp)
 10223a8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 10223ac:	01043804 	movi	r4,4320
 10223b0:	000b883a 	mov	r5,zero
 10223b4:	018000c4 	movi	r6,3
 10223b8:	01c0fa04 	movi	r7,1000
 10223bc:	10275980 	call	1027598 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
 10223c0:	00c04134 	movhi	r3,260
 10223c4:	18e31804 	addi	r3,r3,-29600
 10223c8:	00843004 	movi	r2,4288
 10223cc:	18800015 	stw	r2,0(r3)
 10223d0:	00c04134 	movhi	r3,260
 10223d4:	18e31904 	addi	r3,r3,-29596
 10223d8:	0080bef4 	movhi	r2,763
 10223dc:	10bc2004 	addi	r2,r2,-3968
 10223e0:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 10223e4:	010040f4 	movhi	r4,259
 10223e8:	2117bb04 	addi	r4,r4,24300
 10223ec:	000b883a 	mov	r5,zero
 10223f0:	000d883a 	mov	r6,zero
 10223f4:	1026bc40 	call	1026bc4 <altera_avalon_jtag_uart_init>
 10223f8:	010040f4 	movhi	r4,259
 10223fc:	2117b104 	addi	r4,r4,24260
 1022400:	10224480 	call	1022448 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 1022404:	010040f4 	movhi	r4,259
 1022408:	211bc904 	addi	r4,r4,28452
 102240c:	10278380 	call	1027838 <alt_up_character_lcd_init>
 1022410:	010040f4 	movhi	r4,259
 1022414:	211bc904 	addi	r4,r4,28452
 1022418:	10224480 	call	1022448 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 102241c:	010040f4 	movhi	r4,259
 1022420:	211bd404 	addi	r4,r4,28496
 1022424:	10224480 	call	1022448 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 1022428:	010040f4 	movhi	r4,259
 102242c:	211bdf04 	addi	r4,r4,28540
 1022430:	10224480 	call	1022448 <alt_dev_reg>
}
 1022434:	e037883a 	mov	sp,fp
 1022438:	dfc00117 	ldw	ra,4(sp)
 102243c:	df000017 	ldw	fp,0(sp)
 1022440:	dec00204 	addi	sp,sp,8
 1022444:	f800283a 	ret

01022448 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1022448:	defffd04 	addi	sp,sp,-12
 102244c:	dfc00215 	stw	ra,8(sp)
 1022450:	df000115 	stw	fp,4(sp)
 1022454:	df000104 	addi	fp,sp,4
 1022458:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 102245c:	e13fff17 	ldw	r4,-4(fp)
 1022460:	014040f4 	movhi	r5,259
 1022464:	295bf604 	addi	r5,r5,28632
 1022468:	10283140 	call	1028314 <alt_dev_llist_insert>
}
 102246c:	e037883a 	mov	sp,fp
 1022470:	dfc00117 	ldw	ra,4(sp)
 1022474:	df000017 	ldw	fp,0(sp)
 1022478:	dec00204 	addi	sp,sp,8
 102247c:	f800283a 	ret

01022480 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 1022480:	defffa04 	addi	sp,sp,-24
 1022484:	dfc00515 	stw	ra,20(sp)
 1022488:	df000415 	stw	fp,16(sp)
 102248c:	df000404 	addi	fp,sp,16
 1022490:	e13ffe15 	stw	r4,-8(fp)
 1022494:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 1022498:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
 102249c:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 10224a0:	1005003a 	cmpeq	r2,r2,zero
 10224a4:	1000221e 	bne	r2,zero,1022530 <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
 10224a8:	00803fc4 	movi	r2,255
 10224ac:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 10224b0:	d0a72717 	ldw	r2,-25444(gp)
 10224b4:	1009883a 	mov	r4,r2
 10224b8:	e0fffe17 	ldw	r3,-8(fp)
 10224bc:	e0bfff17 	ldw	r2,-4(fp)
 10224c0:	1885883a 	add	r2,r3,r2
 10224c4:	1006927a 	slli	r3,r2,9
 10224c8:	2005883a 	mov	r2,r4
 10224cc:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 10224d0:	d0a72617 	ldw	r2,-25448(gp)
 10224d4:	1007883a 	mov	r3,r2
 10224d8:	00800604 	movi	r2,24
 10224dc:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 10224e0:	d0a72317 	ldw	r2,-25460(gp)
 10224e4:	1080002b 	ldhuio	r2,0(r2)
 10224e8:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
 10224ec:	e0bffc0b 	ldhu	r2,-16(fp)
 10224f0:	10bfffcc 	andi	r2,r2,65535
 10224f4:	1080010c 	andi	r2,r2,4
 10224f8:	1004c03a 	cmpne	r2,r2,zero
 10224fc:	103ff81e 	bne	r2,zero,10224e0 <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 1022500:	e0bffc0b 	ldhu	r2,-16(fp)
 1022504:	10bfffcc 	andi	r2,r2,65535
 1022508:	1080040c 	andi	r2,r2,16
 102250c:	1004c03a 	cmpne	r2,r2,zero
 1022510:	1000071e 	bne	r2,zero,1022530 <Write_Sector_Data+0xb0>
			result = true;
 1022514:	00800044 	movi	r2,1
 1022518:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
 102251c:	d0272c15 	stw	zero,-25424(gp)
			current_sector_index = sector_index + partition_offset;
 1022520:	e0fffe17 	ldw	r3,-8(fp)
 1022524:	e0bfff17 	ldw	r2,-4(fp)
 1022528:	1885883a 	add	r2,r3,r2
 102252c:	d0a72d15 	stw	r2,-25420(gp)
		}
	}
	return result;
 1022530:	e0bffd17 	ldw	r2,-12(fp)
}
 1022534:	e037883a 	mov	sp,fp
 1022538:	dfc00117 	ldw	ra,4(sp)
 102253c:	df000017 	ldw	fp,0(sp)
 1022540:	dec00204 	addi	sp,sp,8
 1022544:	f800283a 	ret

01022548 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 1022548:	defffd04 	addi	sp,sp,-12
 102254c:	dfc00215 	stw	ra,8(sp)
 1022550:	df000115 	stw	fp,4(sp)
 1022554:	df000104 	addi	fp,sp,4
	bool result = true;
 1022558:	00800044 	movi	r2,1
 102255c:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
 1022560:	d0a72c17 	ldw	r2,-25424(gp)
 1022564:	1005003a 	cmpeq	r2,r2,zero
 1022568:	1000051e 	bne	r2,zero,1022580 <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
 102256c:	d0a72d17 	ldw	r2,-25420(gp)
 1022570:	1009883a 	mov	r4,r2
 1022574:	000b883a 	mov	r5,zero
 1022578:	10224800 	call	1022480 <Write_Sector_Data>
 102257c:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
 1022580:	e0bfff17 	ldw	r2,-4(fp)
}
 1022584:	e037883a 	mov	sp,fp
 1022588:	dfc00117 	ldw	ra,4(sp)
 102258c:	df000017 	ldw	fp,0(sp)
 1022590:	dec00204 	addi	sp,sp,8
 1022594:	f800283a 	ret

01022598 <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 1022598:	defff904 	addi	sp,sp,-28
 102259c:	dfc00615 	stw	ra,24(sp)
 10225a0:	df000515 	stw	fp,20(sp)
 10225a4:	df000504 	addi	fp,sp,20
 10225a8:	e13ffd15 	stw	r4,-12(fp)
 10225ac:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 10225b0:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 10225b4:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 10225b8:	1005003a 	cmpeq	r2,r2,zero
 10225bc:	10002d1e 	bne	r2,zero,1022674 <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
 10225c0:	00803fc4 	movi	r2,255
 10225c4:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 10225c8:	d0a72c17 	ldw	r2,-25424(gp)
 10225cc:	1005003a 	cmpeq	r2,r2,zero
 10225d0:	1000081e 	bne	r2,zero,10225f4 <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 10225d4:	d0a72d17 	ldw	r2,-25420(gp)
 10225d8:	1009883a 	mov	r4,r2
 10225dc:	000b883a 	mov	r5,zero
 10225e0:	10224800 	call	1022480 <Write_Sector_Data>
 10225e4:	1004c03a 	cmpne	r2,r2,zero
 10225e8:	1000021e 	bne	r2,zero,10225f4 <Read_Sector_Data+0x5c>
				return false;
 10225ec:	e03fff15 	stw	zero,-4(fp)
 10225f0:	00002206 	br	102267c <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 10225f4:	d0a72717 	ldw	r2,-25444(gp)
 10225f8:	1009883a 	mov	r4,r2
 10225fc:	e0fffd17 	ldw	r3,-12(fp)
 1022600:	e0bffe17 	ldw	r2,-8(fp)
 1022604:	1885883a 	add	r2,r3,r2
 1022608:	1006927a 	slli	r3,r2,9
 102260c:	2005883a 	mov	r2,r4
 1022610:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 1022614:	d0a72617 	ldw	r2,-25448(gp)
 1022618:	1007883a 	mov	r3,r2
 102261c:	00800444 	movi	r2,17
 1022620:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 1022624:	d0a72317 	ldw	r2,-25460(gp)
 1022628:	1080002b 	ldhuio	r2,0(r2)
 102262c:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 1022630:	e0bffb0b 	ldhu	r2,-20(fp)
 1022634:	10bfffcc 	andi	r2,r2,65535
 1022638:	1080010c 	andi	r2,r2,4
 102263c:	1004c03a 	cmpne	r2,r2,zero
 1022640:	103ff81e 	bne	r2,zero,1022624 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 1022644:	e0bffb0b 	ldhu	r2,-20(fp)
 1022648:	10bfffcc 	andi	r2,r2,65535
 102264c:	1080040c 	andi	r2,r2,16
 1022650:	1004c03a 	cmpne	r2,r2,zero
 1022654:	1000071e 	bne	r2,zero,1022674 <Read_Sector_Data+0xdc>
			result = true;
 1022658:	00800044 	movi	r2,1
 102265c:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 1022660:	d0272c15 	stw	zero,-25424(gp)
			current_sector_index = sector_index + partition_offset;
 1022664:	e0fffd17 	ldw	r3,-12(fp)
 1022668:	e0bffe17 	ldw	r2,-8(fp)
 102266c:	1885883a 	add	r2,r3,r2
 1022670:	d0a72d15 	stw	r2,-25420(gp)
		}
	}
	return result;
 1022674:	e0bffc17 	ldw	r2,-16(fp)
 1022678:	e0bfff15 	stw	r2,-4(fp)
 102267c:	e0bfff17 	ldw	r2,-4(fp)
}
 1022680:	e037883a 	mov	sp,fp
 1022684:	dfc00117 	ldw	ra,4(sp)
 1022688:	df000017 	ldw	fp,0(sp)
 102268c:	dec00204 	addi	sp,sp,8
 1022690:	f800283a 	ret

01022694 <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 1022694:	defffa04 	addi	sp,sp,-24
 1022698:	dfc00515 	stw	ra,20(sp)
 102269c:	df000415 	stw	fp,16(sp)
 10226a0:	df000404 	addi	fp,sp,16
 10226a4:	e13ffd15 	stw	r4,-12(fp)
 10226a8:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 10226ac:	e0bffd17 	ldw	r2,-12(fp)
 10226b0:	1006d23a 	srli	r3,r2,8
 10226b4:	d0a72917 	ldw	r2,-25436(gp)
 10226b8:	1885883a 	add	r2,r3,r2
 10226bc:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 10226c0:	00804134 	movhi	r2,260
 10226c4:	10a3a204 	addi	r2,r2,-29048
 10226c8:	10c01117 	ldw	r3,68(r2)
 10226cc:	e0bffc17 	ldw	r2,-16(fp)
 10226d0:	10c5883a 	add	r2,r2,r3
 10226d4:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
 10226d8:	d0e72d17 	ldw	r3,-25420(gp)
 10226dc:	e0bffc17 	ldw	r2,-16(fp)
 10226e0:	10c00726 	beq	r2,r3,1022700 <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
 10226e4:	e13ffc17 	ldw	r4,-16(fp)
 10226e8:	000b883a 	mov	r5,zero
 10226ec:	10225980 	call	1022598 <Read_Sector_Data>
 10226f0:	1004c03a 	cmpne	r2,r2,zero
 10226f4:	1000021e 	bne	r2,zero,1022700 <get_cluster_flag+0x6c>
			return false;
 10226f8:	e03fff15 	stw	zero,-4(fp)
 10226fc:	00000d06 	br	1022734 <get_cluster_flag+0xa0>
		}
	}
	*flag =
 1022700:	d0a72b17 	ldw	r2,-25428(gp)
 1022704:	10800a17 	ldw	r2,40(r2)
 1022708:	1007883a 	mov	r3,r2
 102270c:	e0bffd17 	ldw	r2,-12(fp)
 1022710:	10803fcc 	andi	r2,r2,255
 1022714:	1085883a 	add	r2,r2,r2
 1022718:	1885883a 	add	r2,r3,r2
 102271c:	1080002b 	ldhuio	r2,0(r2)
 1022720:	1007883a 	mov	r3,r2
 1022724:	e0bffe17 	ldw	r2,-8(fp)
 1022728:	10c0000d 	sth	r3,0(r2)
			(unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
 102272c:	00800044 	movi	r2,1
 1022730:	e0bfff15 	stw	r2,-4(fp)
 1022734:	e0bfff17 	ldw	r2,-4(fp)
}
 1022738:	e037883a 	mov	sp,fp
 102273c:	dfc00117 	ldw	ra,4(sp)
 1022740:	df000017 	ldw	fp,0(sp)
 1022744:	dec00204 	addi	sp,sp,8
 1022748:	f800283a 	ret

0102274c <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 102274c:	defff904 	addi	sp,sp,-28
 1022750:	dfc00615 	stw	ra,24(sp)
 1022754:	df000515 	stw	fp,20(sp)
 1022758:	df000504 	addi	fp,sp,20
 102275c:	e13ffc15 	stw	r4,-16(fp)
 1022760:	e1bffe15 	stw	r6,-8(fp)
 1022764:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 1022768:	e0bffc17 	ldw	r2,-16(fp)
 102276c:	1006d23a 	srli	r3,r2,8
 1022770:	d0a72917 	ldw	r2,-25436(gp)
 1022774:	1885883a 	add	r2,r3,r2
 1022778:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
 102277c:	e0bffe17 	ldw	r2,-8(fp)
 1022780:	1005003a 	cmpeq	r2,r2,zero
 1022784:	1000071e 	bne	r2,zero,10227a4 <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 1022788:	00804134 	movhi	r2,260
 102278c:	10a3a204 	addi	r2,r2,-29048
 1022790:	10c01117 	ldw	r3,68(r2)
 1022794:	e0bffb17 	ldw	r2,-20(fp)
 1022798:	10c5883a 	add	r2,r2,r3
 102279c:	e0bffb15 	stw	r2,-20(fp)
 10227a0:	00000606 	br	10227bc <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
 10227a4:	00804134 	movhi	r2,260
 10227a8:	10a3a204 	addi	r2,r2,-29048
 10227ac:	10c01217 	ldw	r3,72(r2)
 10227b0:	e0bffb17 	ldw	r2,-20(fp)
 10227b4:	10c5883a 	add	r2,r2,r3
 10227b8:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
 10227bc:	d0e72d17 	ldw	r3,-25420(gp)
 10227c0:	e0bffb17 	ldw	r2,-20(fp)
 10227c4:	10c00726 	beq	r2,r3,10227e4 <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
 10227c8:	e13ffb17 	ldw	r4,-20(fp)
 10227cc:	000b883a 	mov	r5,zero
 10227d0:	10225980 	call	1022598 <Read_Sector_Data>
 10227d4:	1004c03a 	cmpne	r2,r2,zero
 10227d8:	1000021e 	bne	r2,zero,10227e4 <mark_cluster+0x98>
			return false;
 10227dc:	e03fff15 	stw	zero,-4(fp)
 10227e0:	00000d06 	br	1022818 <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 10227e4:	d0a72b17 	ldw	r2,-25428(gp)
 10227e8:	10800a17 	ldw	r2,40(r2)
 10227ec:	1007883a 	mov	r3,r2
 10227f0:	e0bffc17 	ldw	r2,-16(fp)
 10227f4:	10803fcc 	andi	r2,r2,255
 10227f8:	1085883a 	add	r2,r2,r2
 10227fc:	1885883a 	add	r2,r3,r2
 1022800:	e0fffd0f 	ldh	r3,-12(fp)
 1022804:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
 1022808:	00800044 	movi	r2,1
 102280c:	d0a72c15 	stw	r2,-25424(gp)
	return true;
 1022810:	00800044 	movi	r2,1
 1022814:	e0bfff15 	stw	r2,-4(fp)
 1022818:	e0bfff17 	ldw	r2,-4(fp)
}
 102281c:	e037883a 	mov	sp,fp
 1022820:	dfc00117 	ldw	ra,4(sp)
 1022824:	df000017 	ldw	fp,0(sp)
 1022828:	dec00204 	addi	sp,sp,8
 102282c:	f800283a 	ret

01022830 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 1022830:	defff704 	addi	sp,sp,-36
 1022834:	dfc00815 	stw	ra,32(sp)
 1022838:	df000715 	stw	fp,28(sp)
 102283c:	df000704 	addi	fp,sp,28
	bool result = false;
 1022840:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
 1022844:	0009883a 	mov	r4,zero
 1022848:	000b883a 	mov	r5,zero
 102284c:	10269ec0 	call	10269ec <Read_Sector_Data_Attempt_CRC>
 1022850:	1005003a 	cmpeq	r2,r2,zero
 1022854:	10005c1e 	bne	r2,zero,10229c8 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 1022858:	d0a72b17 	ldw	r2,-25428(gp)
 102285c:	10800a17 	ldw	r2,40(r2)
 1022860:	10807f84 	addi	r2,r2,510
 1022864:	1080002b 	ldhuio	r2,0(r2)
 1022868:	10bfffcc 	andi	r2,r2,65535
 102286c:	10a0001c 	xori	r2,r2,32768
 1022870:	10a00004 	addi	r2,r2,-32768
 1022874:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
 1022878:	e0bffd17 	ldw	r2,-12(fp)
 102287c:	10ffffcc 	andi	r3,r2,65535
 1022880:	00aa9554 	movui	r2,43605
 1022884:	1880501e 	bne	r3,r2,10229c8 <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 1022888:	e03ffe15 	stw	zero,-8(fp)
 102288c:	00004b06 	br	10229bc <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
 1022890:	e0bffe17 	ldw	r2,-8(fp)
 1022894:	1004913a 	slli	r2,r2,4
 1022898:	10806f84 	addi	r2,r2,446
 102289c:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type =
 10228a0:	d0a72b17 	ldw	r2,-25428(gp)
 10228a4:	10800a17 	ldw	r2,40(r2)
 10228a8:	1007883a 	mov	r3,r2
 10228ac:	e0bffa17 	ldw	r2,-24(fp)
 10228b0:	1885883a 	add	r2,r3,r2
 10228b4:	10800104 	addi	r2,r2,4
 10228b8:	10800023 	ldbuio	r2,0(r2)
 10228bc:	e0bff905 	stb	r2,-28(fp)
						(unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
 10228c0:	e0bff907 	ldb	r2,-28(fp)
 10228c4:	10800060 	cmpeqi	r2,r2,1
 10228c8:	1000091e 	bne	r2,zero,10228f0 <Check_for_Master_Boot_Record+0xc0>
 10228cc:	e0bff907 	ldb	r2,-28(fp)
 10228d0:	10800120 	cmpeqi	r2,r2,4
 10228d4:	1000061e 	bne	r2,zero,10228f0 <Check_for_Master_Boot_Record+0xc0>
 10228d8:	e0bff907 	ldb	r2,-28(fp)
 10228dc:	108001a0 	cmpeqi	r2,r2,6
 10228e0:	1000031e 	bne	r2,zero,10228f0 <Check_for_Master_Boot_Record+0xc0>
 10228e4:	e0bff907 	ldb	r2,-28(fp)
 10228e8:	10800398 	cmpnei	r2,r2,14
 10228ec:	1000301e 	bne	r2,zero,10229b0 <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset =
 10228f0:	d0a72b17 	ldw	r2,-25428(gp)
 10228f4:	10800a17 	ldw	r2,40(r2)
 10228f8:	1007883a 	mov	r3,r2
 10228fc:	e0bffa17 	ldw	r2,-24(fp)
 1022900:	1885883a 	add	r2,r3,r2
 1022904:	10800284 	addi	r2,r2,10
 1022908:	1080002b 	ldhuio	r2,0(r2)
 102290c:	10bfffcc 	andi	r2,r2,65535
 1022910:	1008943a 	slli	r4,r2,16
 1022914:	d0a72b17 	ldw	r2,-25428(gp)
 1022918:	10800a17 	ldw	r2,40(r2)
 102291c:	1007883a 	mov	r3,r2
 1022920:	e0bffa17 	ldw	r2,-24(fp)
 1022924:	1885883a 	add	r2,r3,r2
 1022928:	10800204 	addi	r2,r2,8
 102292c:	1080002b 	ldhuio	r2,0(r2)
 1022930:	10bfffcc 	andi	r2,r2,65535
 1022934:	2084b03a 	or	r2,r4,r2
 1022938:	e0bffc15 	stw	r2,-16(fp)
							(((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size =
 102293c:	d0a72b17 	ldw	r2,-25428(gp)
 1022940:	10800a17 	ldw	r2,40(r2)
 1022944:	1007883a 	mov	r3,r2
 1022948:	e0bffa17 	ldw	r2,-24(fp)
 102294c:	1885883a 	add	r2,r3,r2
 1022950:	10800384 	addi	r2,r2,14
 1022954:	1080002b 	ldhuio	r2,0(r2)
 1022958:	10bfffcc 	andi	r2,r2,65535
 102295c:	1008943a 	slli	r4,r2,16
 1022960:	d0a72b17 	ldw	r2,-25428(gp)
 1022964:	10800a17 	ldw	r2,40(r2)
 1022968:	1007883a 	mov	r3,r2
 102296c:	e0bffa17 	ldw	r2,-24(fp)
 1022970:	1885883a 	add	r2,r3,r2
 1022974:	10800304 	addi	r2,r2,12
 1022978:	1080002b 	ldhuio	r2,0(r2)
 102297c:	10bfffcc 	andi	r2,r2,65535
 1022980:	2084b03a 	or	r2,r4,r2
 1022984:	e0bffb15 	stw	r2,-20(fp)
							(((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
 1022988:	e0bffb17 	ldw	r2,-20(fp)
 102298c:	10800050 	cmplti	r2,r2,1
 1022990:	1000071e 	bne	r2,zero,10229b0 <Check_for_Master_Boot_Record+0x180>
						result = true;
 1022994:	00800044 	movi	r2,1
 1022998:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 102299c:	e0bffb17 	ldw	r2,-20(fp)
 10229a0:	d0a72a15 	stw	r2,-25432(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 10229a4:	e0bffc17 	ldw	r2,-16(fp)
 10229a8:	d0a72915 	stw	r2,-25436(gp)
						break;
 10229ac:	00000606 	br	10229c8 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 10229b0:	e0bffe17 	ldw	r2,-8(fp)
 10229b4:	10800044 	addi	r2,r2,1
 10229b8:	e0bffe15 	stw	r2,-8(fp)
 10229bc:	e0bffe17 	ldw	r2,-8(fp)
 10229c0:	10800110 	cmplti	r2,r2,4
 10229c4:	103fb21e 	bne	r2,zero,1022890 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
 10229c8:	e0bfff17 	ldw	r2,-4(fp)
}
 10229cc:	e037883a 	mov	sp,fp
 10229d0:	dfc00117 	ldw	ra,4(sp)
 10229d4:	df000017 	ldw	fp,0(sp)
 10229d8:	dec00204 	addi	sp,sp,8
 10229dc:	f800283a 	ret

010229e0 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 10229e0:	defff804 	addi	sp,sp,-32
 10229e4:	dfc00715 	stw	ra,28(sp)
 10229e8:	df000615 	stw	fp,24(sp)
 10229ec:	df000604 	addi	fp,sp,24
 10229f0:	e13ffc15 	stw	r4,-16(fp)
 10229f4:	e17ffd15 	stw	r5,-12(fp)
 10229f8:	e1bffe15 	stw	r6,-8(fp)
 10229fc:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 1022a00:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 1022a04:	e0bffc17 	ldw	r2,-16(fp)
 1022a08:	108007cc 	andi	r2,r2,31
 1022a0c:	1004c03a 	cmpne	r2,r2,zero
 1022a10:	10008e1e 	bne	r2,zero,1022c4c <Read_File_Record_At_Offset+0x26c>
 1022a14:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 1022a18:	1005003a 	cmpeq	r2,r2,zero
 1022a1c:	10008b1e 	bne	r2,zero,1022c4c <Read_File_Record_At_Offset+0x26c>
 1022a20:	d0a72217 	ldw	r2,-25464(gp)
 1022a24:	1005003a 	cmpeq	r2,r2,zero
 1022a28:	1000881e 	bne	r2,zero,1022c4c <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 1022a2c:	e03ffa15 	stw	zero,-24(fp)
 1022a30:	00001006 	br	1022a74 <Read_File_Record_At_Offset+0x94>
			record->name[counter] =
 1022a34:	e17ffa17 	ldw	r5,-24(fp)
 1022a38:	d0a72b17 	ldw	r2,-25428(gp)
 1022a3c:	10800a17 	ldw	r2,40(r2)
 1022a40:	1009883a 	mov	r4,r2
 1022a44:	e0fffc17 	ldw	r3,-16(fp)
 1022a48:	e0bffa17 	ldw	r2,-24(fp)
 1022a4c:	1885883a 	add	r2,r3,r2
 1022a50:	2085883a 	add	r2,r4,r2
 1022a54:	10800023 	ldbuio	r2,0(r2)
 1022a58:	1007883a 	mov	r3,r2
 1022a5c:	e0bffd17 	ldw	r2,-12(fp)
 1022a60:	1145883a 	add	r2,r2,r5
 1022a64:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 1022a68:	e0bffa17 	ldw	r2,-24(fp)
 1022a6c:	10800044 	addi	r2,r2,1
 1022a70:	e0bffa15 	stw	r2,-24(fp)
 1022a74:	e0bffa17 	ldw	r2,-24(fp)
 1022a78:	10800210 	cmplti	r2,r2,8
 1022a7c:	103fed1e 	bne	r2,zero,1022a34 <Read_File_Record_At_Offset+0x54>
			record->name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 1022a80:	e03ffa15 	stw	zero,-24(fp)
 1022a84:	00001206 	br	1022ad0 <Read_File_Record_At_Offset+0xf0>
			record->extension[counter] =
 1022a88:	e17ffa17 	ldw	r5,-24(fp)
 1022a8c:	d0a72b17 	ldw	r2,-25428(gp)
 1022a90:	10800a17 	ldw	r2,40(r2)
 1022a94:	1009883a 	mov	r4,r2
 1022a98:	e0fffc17 	ldw	r3,-16(fp)
 1022a9c:	e0bffa17 	ldw	r2,-24(fp)
 1022aa0:	1885883a 	add	r2,r3,r2
 1022aa4:	2085883a 	add	r2,r4,r2
 1022aa8:	10800204 	addi	r2,r2,8
 1022aac:	10800023 	ldbuio	r2,0(r2)
 1022ab0:	1007883a 	mov	r3,r2
 1022ab4:	e0bffd17 	ldw	r2,-12(fp)
 1022ab8:	2885883a 	add	r2,r5,r2
 1022abc:	10800204 	addi	r2,r2,8
 1022ac0:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 1022ac4:	e0bffa17 	ldw	r2,-24(fp)
 1022ac8:	10800044 	addi	r2,r2,1
 1022acc:	e0bffa15 	stw	r2,-24(fp)
 1022ad0:	e0bffa17 	ldw	r2,-24(fp)
 1022ad4:	108000d0 	cmplti	r2,r2,3
 1022ad8:	103feb1e 	bne	r2,zero,1022a88 <Read_File_Record_At_Offset+0xa8>
			record->extension[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes =
 1022adc:	d0a72b17 	ldw	r2,-25428(gp)
 1022ae0:	10800a17 	ldw	r2,40(r2)
 1022ae4:	1007883a 	mov	r3,r2
 1022ae8:	e0bffc17 	ldw	r2,-16(fp)
 1022aec:	1885883a 	add	r2,r3,r2
 1022af0:	108002c4 	addi	r2,r2,11
 1022af4:	10800023 	ldbuio	r2,0(r2)
 1022af8:	1007883a 	mov	r3,r2
 1022afc:	e0bffd17 	ldw	r2,-12(fp)
 1022b00:	10c002c5 	stb	r3,11(r2)
				(char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time =
 1022b04:	d0a72b17 	ldw	r2,-25428(gp)
 1022b08:	10800a17 	ldw	r2,40(r2)
 1022b0c:	1007883a 	mov	r3,r2
 1022b10:	e0bffc17 	ldw	r2,-16(fp)
 1022b14:	1885883a 	add	r2,r3,r2
 1022b18:	10800384 	addi	r2,r2,14
 1022b1c:	1080002b 	ldhuio	r2,0(r2)
 1022b20:	1007883a 	mov	r3,r2
 1022b24:	e0bffd17 	ldw	r2,-12(fp)
 1022b28:	10c0030d 	sth	r3,12(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date =
 1022b2c:	d0a72b17 	ldw	r2,-25428(gp)
 1022b30:	10800a17 	ldw	r2,40(r2)
 1022b34:	1007883a 	mov	r3,r2
 1022b38:	e0bffc17 	ldw	r2,-16(fp)
 1022b3c:	1885883a 	add	r2,r3,r2
 1022b40:	10800404 	addi	r2,r2,16
 1022b44:	1080002b 	ldhuio	r2,0(r2)
 1022b48:	1007883a 	mov	r3,r2
 1022b4c:	e0bffd17 	ldw	r2,-12(fp)
 1022b50:	10c0038d 	sth	r3,14(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date =
 1022b54:	d0a72b17 	ldw	r2,-25428(gp)
 1022b58:	10800a17 	ldw	r2,40(r2)
 1022b5c:	1007883a 	mov	r3,r2
 1022b60:	e0bffc17 	ldw	r2,-16(fp)
 1022b64:	1885883a 	add	r2,r3,r2
 1022b68:	10800484 	addi	r2,r2,18
 1022b6c:	1080002b 	ldhuio	r2,0(r2)
 1022b70:	1007883a 	mov	r3,r2
 1022b74:	e0bffd17 	ldw	r2,-12(fp)
 1022b78:	10c0040d 	sth	r3,16(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time =
 1022b7c:	d0a72b17 	ldw	r2,-25428(gp)
 1022b80:	10800a17 	ldw	r2,40(r2)
 1022b84:	1007883a 	mov	r3,r2
 1022b88:	e0bffc17 	ldw	r2,-16(fp)
 1022b8c:	1885883a 	add	r2,r3,r2
 1022b90:	10800584 	addi	r2,r2,22
 1022b94:	1080002b 	ldhuio	r2,0(r2)
 1022b98:	1007883a 	mov	r3,r2
 1022b9c:	e0bffd17 	ldw	r2,-12(fp)
 1022ba0:	10c0048d 	sth	r3,18(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date =
 1022ba4:	d0a72b17 	ldw	r2,-25428(gp)
 1022ba8:	10800a17 	ldw	r2,40(r2)
 1022bac:	1007883a 	mov	r3,r2
 1022bb0:	e0bffc17 	ldw	r2,-16(fp)
 1022bb4:	1885883a 	add	r2,r3,r2
 1022bb8:	10800604 	addi	r2,r2,24
 1022bbc:	1080002b 	ldhuio	r2,0(r2)
 1022bc0:	1007883a 	mov	r3,r2
 1022bc4:	e0bffd17 	ldw	r2,-12(fp)
 1022bc8:	10c0050d 	sth	r3,20(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =
 1022bcc:	d0a72b17 	ldw	r2,-25428(gp)
 1022bd0:	10800a17 	ldw	r2,40(r2)
 1022bd4:	1007883a 	mov	r3,r2
 1022bd8:	e0bffc17 	ldw	r2,-16(fp)
 1022bdc:	1885883a 	add	r2,r3,r2
 1022be0:	10800684 	addi	r2,r2,26
 1022be4:	1080002b 	ldhuio	r2,0(r2)
 1022be8:	1007883a 	mov	r3,r2
 1022bec:	e0bffd17 	ldw	r2,-12(fp)
 1022bf0:	10c0058d 	sth	r3,22(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes =
 1022bf4:	d0a72b17 	ldw	r2,-25428(gp)
 1022bf8:	10800a17 	ldw	r2,40(r2)
 1022bfc:	1007883a 	mov	r3,r2
 1022c00:	e0bffc17 	ldw	r2,-16(fp)
 1022c04:	1885883a 	add	r2,r3,r2
 1022c08:	10800704 	addi	r2,r2,28
 1022c0c:	10800037 	ldwio	r2,0(r2)
 1022c10:	1007883a 	mov	r3,r2
 1022c14:	e0bffd17 	ldw	r2,-12(fp)
 1022c18:	10c00615 	stw	r3,24(r2)
				(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
 1022c1c:	e0fffd17 	ldw	r3,-12(fp)
 1022c20:	e0bffe17 	ldw	r2,-8(fp)
 1022c24:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
 1022c28:	e0fffd17 	ldw	r3,-12(fp)
 1022c2c:	e0bfff17 	ldw	r2,-4(fp)
 1022c30:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
 1022c34:	e0bffc17 	ldw	r2,-16(fp)
 1022c38:	1007883a 	mov	r3,r2
 1022c3c:	e0bffd17 	ldw	r2,-12(fp)
 1022c40:	10c00c0d 	sth	r3,48(r2)
		result = true;
 1022c44:	00800044 	movi	r2,1
 1022c48:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 1022c4c:	e0bffb17 	ldw	r2,-20(fp)
}
 1022c50:	e037883a 	mov	sp,fp
 1022c54:	dfc00117 	ldw	ra,4(sp)
 1022c58:	df000017 	ldw	fp,0(sp)
 1022c5c:	dec00204 	addi	sp,sp,8
 1022c60:	f800283a 	ret

01022c64 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 1022c64:	defff904 	addi	sp,sp,-28
 1022c68:	dfc00615 	stw	ra,24(sp)
 1022c6c:	df000515 	stw	fp,20(sp)
 1022c70:	df000504 	addi	fp,sp,20
 1022c74:	e13ffe15 	stw	r4,-8(fp)
 1022c78:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 1022c7c:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 1022c80:	e0bffe17 	ldw	r2,-8(fp)
 1022c84:	108007cc 	andi	r2,r2,31
 1022c88:	1004c03a 	cmpne	r2,r2,zero
 1022c8c:	10009d1e 	bne	r2,zero,1022f04 <Write_File_Record_At_Offset+0x2a0>
 1022c90:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 1022c94:	1005003a 	cmpeq	r2,r2,zero
 1022c98:	10009a1e 	bne	r2,zero,1022f04 <Write_File_Record_At_Offset+0x2a0>
 1022c9c:	d0a72217 	ldw	r2,-25464(gp)
 1022ca0:	1005003a 	cmpeq	r2,r2,zero
 1022ca4:	1000971e 	bne	r2,zero,1022f04 <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 1022ca8:	e03ffc15 	stw	zero,-16(fp)
 1022cac:	00001e06 	br	1022d28 <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
 1022cb0:	e0bffc17 	ldw	r2,-16(fp)
 1022cb4:	10c00044 	addi	r3,r2,1
 1022cb8:	e0bfff17 	ldw	r2,-4(fp)
 1022cbc:	10c5883a 	add	r2,r2,r3
 1022cc0:	10800003 	ldbu	r2,0(r2)
 1022cc4:	10803fcc 	andi	r2,r2,255
 1022cc8:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
 1022ccc:	e0bffb0f 	ldh	r2,-20(fp)
 1022cd0:	1004923a 	slli	r2,r2,8
 1022cd4:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
 1022cd8:	e0fffc17 	ldw	r3,-16(fp)
 1022cdc:	e0bfff17 	ldw	r2,-4(fp)
 1022ce0:	10c5883a 	add	r2,r2,r3
 1022ce4:	10800003 	ldbu	r2,0(r2)
 1022ce8:	10c03fcc 	andi	r3,r2,255
 1022cec:	e0bffb0b 	ldhu	r2,-20(fp)
 1022cf0:	10c4b03a 	or	r2,r2,r3
 1022cf4:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 1022cf8:	d0a72b17 	ldw	r2,-25428(gp)
 1022cfc:	10800a17 	ldw	r2,40(r2)
 1022d00:	1009883a 	mov	r4,r2
 1022d04:	e0fffe17 	ldw	r3,-8(fp)
 1022d08:	e0bffc17 	ldw	r2,-16(fp)
 1022d0c:	1885883a 	add	r2,r3,r2
 1022d10:	2085883a 	add	r2,r4,r2
 1022d14:	e0fffb0f 	ldh	r3,-20(fp)
 1022d18:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 1022d1c:	e0bffc17 	ldw	r2,-16(fp)
 1022d20:	10800084 	addi	r2,r2,2
 1022d24:	e0bffc15 	stw	r2,-16(fp)
 1022d28:	e0bffc17 	ldw	r2,-16(fp)
 1022d2c:	10800210 	cmplti	r2,r2,8
 1022d30:	103fdf1e 	bne	r2,zero,1022cb0 <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 1022d34:	e03ffc15 	stw	zero,-16(fp)
 1022d38:	00001306 	br	1022d88 <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8,
 1022d3c:	d0a72b17 	ldw	r2,-25428(gp)
 1022d40:	10800a17 	ldw	r2,40(r2)
 1022d44:	1009883a 	mov	r4,r2
 1022d48:	e0fffe17 	ldw	r3,-8(fp)
 1022d4c:	e0bffc17 	ldw	r2,-16(fp)
 1022d50:	1885883a 	add	r2,r3,r2
 1022d54:	2085883a 	add	r2,r4,r2
 1022d58:	11000204 	addi	r4,r2,8
 1022d5c:	e0fffc17 	ldw	r3,-16(fp)
 1022d60:	e0bfff17 	ldw	r2,-4(fp)
 1022d64:	1885883a 	add	r2,r3,r2
 1022d68:	10800204 	addi	r2,r2,8
 1022d6c:	10800003 	ldbu	r2,0(r2)
 1022d70:	10c03fcc 	andi	r3,r2,255
 1022d74:	2005883a 	mov	r2,r4
 1022d78:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 1022d7c:	e0bffc17 	ldw	r2,-16(fp)
 1022d80:	10800044 	addi	r2,r2,1
 1022d84:	e0bffc15 	stw	r2,-16(fp)
 1022d88:	e0bffc17 	ldw	r2,-16(fp)
 1022d8c:	108000d0 	cmplti	r2,r2,3
 1022d90:	103fea1e 	bne	r2,zero,1022d3c <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8,
					record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 1022d94:	d0a72b17 	ldw	r2,-25428(gp)
 1022d98:	10800a17 	ldw	r2,40(r2)
 1022d9c:	1007883a 	mov	r3,r2
 1022da0:	e0bffe17 	ldw	r2,-8(fp)
 1022da4:	1885883a 	add	r2,r3,r2
 1022da8:	110002c4 	addi	r4,r2,11
 1022dac:	e0bfff17 	ldw	r2,-4(fp)
 1022db0:	108002c3 	ldbu	r2,11(r2)
 1022db4:	10c03fcc 	andi	r3,r2,255
 1022db8:	2005883a 	mov	r2,r4
 1022dbc:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 1022dc0:	d0a72b17 	ldw	r2,-25428(gp)
 1022dc4:	10800a17 	ldw	r2,40(r2)
 1022dc8:	1007883a 	mov	r3,r2
 1022dcc:	e0bffe17 	ldw	r2,-8(fp)
 1022dd0:	1885883a 	add	r2,r3,r2
 1022dd4:	11000384 	addi	r4,r2,14
 1022dd8:	e0bfff17 	ldw	r2,-4(fp)
 1022ddc:	1080030b 	ldhu	r2,12(r2)
 1022de0:	10ffffcc 	andi	r3,r2,65535
 1022de4:	2005883a 	mov	r2,r4
 1022de8:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 1022dec:	d0a72b17 	ldw	r2,-25428(gp)
 1022df0:	10800a17 	ldw	r2,40(r2)
 1022df4:	1007883a 	mov	r3,r2
 1022df8:	e0bffe17 	ldw	r2,-8(fp)
 1022dfc:	1885883a 	add	r2,r3,r2
 1022e00:	11000404 	addi	r4,r2,16
 1022e04:	e0bfff17 	ldw	r2,-4(fp)
 1022e08:	1080038b 	ldhu	r2,14(r2)
 1022e0c:	10ffffcc 	andi	r3,r2,65535
 1022e10:	2005883a 	mov	r2,r4
 1022e14:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18,
 1022e18:	d0a72b17 	ldw	r2,-25428(gp)
 1022e1c:	10800a17 	ldw	r2,40(r2)
 1022e20:	1007883a 	mov	r3,r2
 1022e24:	e0bffe17 	ldw	r2,-8(fp)
 1022e28:	1885883a 	add	r2,r3,r2
 1022e2c:	11000484 	addi	r4,r2,18
 1022e30:	e0bfff17 	ldw	r2,-4(fp)
 1022e34:	1080040b 	ldhu	r2,16(r2)
 1022e38:	10ffffcc 	andi	r3,r2,65535
 1022e3c:	2005883a 	mov	r2,r4
 1022e40:	10c0002d 	sthio	r3,0(r2)
				record->last_access_date);
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22,
 1022e44:	d0a72b17 	ldw	r2,-25428(gp)
 1022e48:	10800a17 	ldw	r2,40(r2)
 1022e4c:	1007883a 	mov	r3,r2
 1022e50:	e0bffe17 	ldw	r2,-8(fp)
 1022e54:	1885883a 	add	r2,r3,r2
 1022e58:	11000584 	addi	r4,r2,22
 1022e5c:	e0bfff17 	ldw	r2,-4(fp)
 1022e60:	1080048b 	ldhu	r2,18(r2)
 1022e64:	10ffffcc 	andi	r3,r2,65535
 1022e68:	2005883a 	mov	r2,r4
 1022e6c:	10c0002d 	sthio	r3,0(r2)
				record->last_modified_time);
		IOWR_16DIRECT(device_pointer->base, offset+24,
 1022e70:	d0a72b17 	ldw	r2,-25428(gp)
 1022e74:	10800a17 	ldw	r2,40(r2)
 1022e78:	1007883a 	mov	r3,r2
 1022e7c:	e0bffe17 	ldw	r2,-8(fp)
 1022e80:	1885883a 	add	r2,r3,r2
 1022e84:	11000604 	addi	r4,r2,24
 1022e88:	e0bfff17 	ldw	r2,-4(fp)
 1022e8c:	1080050b 	ldhu	r2,20(r2)
 1022e90:	10ffffcc 	andi	r3,r2,65535
 1022e94:	2005883a 	mov	r2,r4
 1022e98:	10c0002d 	sthio	r3,0(r2)
				record->last_modified_date);
		IOWR_16DIRECT(device_pointer->base, offset+26,
 1022e9c:	d0a72b17 	ldw	r2,-25428(gp)
 1022ea0:	10800a17 	ldw	r2,40(r2)
 1022ea4:	1007883a 	mov	r3,r2
 1022ea8:	e0bffe17 	ldw	r2,-8(fp)
 1022eac:	1885883a 	add	r2,r3,r2
 1022eb0:	11000684 	addi	r4,r2,26
 1022eb4:	e0bfff17 	ldw	r2,-4(fp)
 1022eb8:	1080058b 	ldhu	r2,22(r2)
 1022ebc:	10ffffcc 	andi	r3,r2,65535
 1022ec0:	2005883a 	mov	r2,r4
 1022ec4:	10c0002d 	sthio	r3,0(r2)
				record->start_cluster_index);
		IOWR_32DIRECT(device_pointer->base, offset+28,
 1022ec8:	d0a72b17 	ldw	r2,-25428(gp)
 1022ecc:	10800a17 	ldw	r2,40(r2)
 1022ed0:	1007883a 	mov	r3,r2
 1022ed4:	e0bffe17 	ldw	r2,-8(fp)
 1022ed8:	1885883a 	add	r2,r3,r2
 1022edc:	11000704 	addi	r4,r2,28
 1022ee0:	e0bfff17 	ldw	r2,-4(fp)
 1022ee4:	10800617 	ldw	r2,24(r2)
 1022ee8:	1007883a 	mov	r3,r2
 1022eec:	2005883a 	mov	r2,r4
 1022ef0:	10c00035 	stwio	r3,0(r2)
				record->file_size_in_bytes);
		current_sector_modified = true;
 1022ef4:	00800044 	movi	r2,1
 1022ef8:	d0a72c15 	stw	r2,-25424(gp)
		result = true;
 1022efc:	00800044 	movi	r2,1
 1022f00:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
 1022f04:	e0bffd17 	ldw	r2,-12(fp)
}
 1022f08:	e037883a 	mov	sp,fp
 1022f0c:	dfc00117 	ldw	ra,4(sp)
 1022f10:	df000017 	ldw	fp,0(sp)
 1022f14:	dec00204 	addi	sp,sp,8
 1022f18:	f800283a 	ret

01022f1c <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 1022f1c:	defff904 	addi	sp,sp,-28
 1022f20:	dfc00615 	stw	ra,24(sp)
 1022f24:	df000515 	stw	fp,20(sp)
 1022f28:	df000504 	addi	fp,sp,20
 1022f2c:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
 1022f30:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
 1022f34:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
 1022f38:	0009883a 	mov	r4,zero
 1022f3c:	e17fff17 	ldw	r5,-4(fp)
 1022f40:	10269ec0 	call	10269ec <Read_Sector_Data_Attempt_CRC>
 1022f44:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 1022f48:	d0a72b17 	ldw	r2,-25428(gp)
 1022f4c:	10800a17 	ldw	r2,40(r2)
 1022f50:	10807f84 	addi	r2,r2,510
 1022f54:	1080002b 	ldhuio	r2,0(r2)
 1022f58:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 1022f5c:	e0bffc0f 	ldh	r2,-16(fp)
 1022f60:	10ffffcc 	andi	r3,r2,65535
 1022f64:	00aa9554 	movui	r2,43605
 1022f68:	1881751e 	bne	r3,r2,1023540 <Check_for_DOS_FAT+0x624>
 1022f6c:	e0bffe17 	ldw	r2,-8(fp)
 1022f70:	1005003a 	cmpeq	r2,r2,zero
 1022f74:	1001721e 	bne	r2,zero,1023540 <Check_for_DOS_FAT+0x624>
		int num_clusters = 0;
 1022f78:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0] =
 1022f7c:	d0a72b17 	ldw	r2,-25428(gp)
 1022f80:	10800a17 	ldw	r2,40(r2)
 1022f84:	10800023 	ldbuio	r2,0(r2)
 1022f88:	1007883a 	mov	r3,r2
 1022f8c:	00804134 	movhi	r2,260
 1022f90:	10a3a204 	addi	r2,r2,-29048
 1022f94:	10c00005 	stb	r3,0(r2)
				(char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] =
 1022f98:	d0a72b17 	ldw	r2,-25428(gp)
 1022f9c:	10800a17 	ldw	r2,40(r2)
 1022fa0:	10800044 	addi	r2,r2,1
 1022fa4:	10800023 	ldbuio	r2,0(r2)
 1022fa8:	1007883a 	mov	r3,r2
 1022fac:	00804134 	movhi	r2,260
 1022fb0:	10a3a204 	addi	r2,r2,-29048
 1022fb4:	10c00045 	stb	r3,1(r2)
				(char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] =
 1022fb8:	d0a72b17 	ldw	r2,-25428(gp)
 1022fbc:	10800a17 	ldw	r2,40(r2)
 1022fc0:	10800084 	addi	r2,r2,2
 1022fc4:	10800023 	ldbuio	r2,0(r2)
 1022fc8:	1007883a 	mov	r3,r2
 1022fcc:	00804134 	movhi	r2,260
 1022fd0:	10a3a204 	addi	r2,r2,-29048
 1022fd4:	10c00085 	stb	r3,2(r2)
				(char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 1022fd8:	e03ffd15 	stw	zero,-12(fp)
 1022fdc:	00001006 	br	1023020 <Check_for_DOS_FAT+0x104>
			boot_sector_data.OEM_name[counter] =
 1022fe0:	e13ffd17 	ldw	r4,-12(fp)
 1022fe4:	d0a72b17 	ldw	r2,-25428(gp)
 1022fe8:	10800a17 	ldw	r2,40(r2)
 1022fec:	1007883a 	mov	r3,r2
 1022ff0:	e0bffd17 	ldw	r2,-12(fp)
 1022ff4:	1885883a 	add	r2,r3,r2
 1022ff8:	108000c4 	addi	r2,r2,3
 1022ffc:	10800023 	ldbuio	r2,0(r2)
 1023000:	1007883a 	mov	r3,r2
 1023004:	00804134 	movhi	r2,260
 1023008:	10a3a204 	addi	r2,r2,-29048
 102300c:	1105883a 	add	r2,r2,r4
 1023010:	10c000c5 	stb	r3,3(r2)
				(char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] =
				(char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] =
				(char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 1023014:	e0bffd17 	ldw	r2,-12(fp)
 1023018:	10800044 	addi	r2,r2,1
 102301c:	e0bffd15 	stw	r2,-12(fp)
 1023020:	e0bffd17 	ldw	r2,-12(fp)
 1023024:	10800210 	cmplti	r2,r2,8
 1023028:	103fed1e 	bne	r2,zero,1022fe0 <Check_for_DOS_FAT+0xc4>
			boot_sector_data.OEM_name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes =
 102302c:	d0a72b17 	ldw	r2,-25428(gp)
 1023030:	10800a17 	ldw	r2,40(r2)
 1023034:	10800304 	addi	r2,r2,12
 1023038:	10800023 	ldbuio	r2,0(r2)
 102303c:	10803fcc 	andi	r2,r2,255
 1023040:	1004923a 	slli	r2,r2,8
 1023044:	1007883a 	mov	r3,r2
 1023048:	d0a72b17 	ldw	r2,-25428(gp)
 102304c:	10800a17 	ldw	r2,40(r2)
 1023050:	108002c4 	addi	r2,r2,11
 1023054:	10800023 	ldbuio	r2,0(r2)
 1023058:	10803fcc 	andi	r2,r2,255
 102305c:	1080201c 	xori	r2,r2,128
 1023060:	10bfe004 	addi	r2,r2,-128
 1023064:	1884b03a 	or	r2,r3,r2
 1023068:	1007883a 	mov	r3,r2
 102306c:	00804134 	movhi	r2,260
 1023070:	10a3a204 	addi	r2,r2,-29048
 1023074:	10c0030d 	sth	r3,12(r2)
				(((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8)
						| ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster =
 1023078:	d0a72b17 	ldw	r2,-25428(gp)
 102307c:	10800a17 	ldw	r2,40(r2)
 1023080:	10800344 	addi	r2,r2,13
 1023084:	10800023 	ldbuio	r2,0(r2)
 1023088:	1007883a 	mov	r3,r2
 102308c:	00804134 	movhi	r2,260
 1023090:	10a3a204 	addi	r2,r2,-29048
 1023094:	10c00385 	stb	r3,14(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors =
 1023098:	d0a72b17 	ldw	r2,-25428(gp)
 102309c:	10800a17 	ldw	r2,40(r2)
 10230a0:	10800384 	addi	r2,r2,14
 10230a4:	1080002b 	ldhuio	r2,0(r2)
 10230a8:	1007883a 	mov	r3,r2
 10230ac:	00804134 	movhi	r2,260
 10230b0:	10a3a204 	addi	r2,r2,-29048
 10230b4:	10c0040d 	sth	r3,16(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs =
 10230b8:	d0a72b17 	ldw	r2,-25428(gp)
 10230bc:	10800a17 	ldw	r2,40(r2)
 10230c0:	10800404 	addi	r2,r2,16
 10230c4:	10800023 	ldbuio	r2,0(r2)
 10230c8:	1007883a 	mov	r3,r2
 10230cc:	00804134 	movhi	r2,260
 10230d0:	10a3a204 	addi	r2,r2,-29048
 10230d4:	10c00485 	stb	r3,18(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires =
 10230d8:	d0a72b17 	ldw	r2,-25428(gp)
 10230dc:	10800a17 	ldw	r2,40(r2)
 10230e0:	10800484 	addi	r2,r2,18
 10230e4:	10800023 	ldbuio	r2,0(r2)
 10230e8:	10803fcc 	andi	r2,r2,255
 10230ec:	1004923a 	slli	r2,r2,8
 10230f0:	1007883a 	mov	r3,r2
 10230f4:	d0a72b17 	ldw	r2,-25428(gp)
 10230f8:	10800a17 	ldw	r2,40(r2)
 10230fc:	10800444 	addi	r2,r2,17
 1023100:	10800023 	ldbuio	r2,0(r2)
 1023104:	10803fcc 	andi	r2,r2,255
 1023108:	1884b03a 	or	r2,r3,r2
 102310c:	1007883a 	mov	r3,r2
 1023110:	00804134 	movhi	r2,260
 1023114:	10a3a204 	addi	r2,r2,-29048
 1023118:	10c0050d 	sth	r3,20(r2)
				(((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition =
 102311c:	d0a72b17 	ldw	r2,-25428(gp)
 1023120:	10800a17 	ldw	r2,40(r2)
 1023124:	10800504 	addi	r2,r2,20
 1023128:	10800023 	ldbuio	r2,0(r2)
 102312c:	10803fcc 	andi	r2,r2,255
 1023130:	1004923a 	slli	r2,r2,8
 1023134:	1007883a 	mov	r3,r2
 1023138:	d0a72b17 	ldw	r2,-25428(gp)
 102313c:	10800a17 	ldw	r2,40(r2)
 1023140:	108004c4 	addi	r2,r2,19
 1023144:	10800023 	ldbuio	r2,0(r2)
 1023148:	10803fcc 	andi	r2,r2,255
 102314c:	1884b03a 	or	r2,r3,r2
 1023150:	1007883a 	mov	r3,r2
 1023154:	00804134 	movhi	r2,260
 1023158:	10a3a204 	addi	r2,r2,-29048
 102315c:	10c0058d 	sth	r3,22(r2)
				(((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor =
 1023160:	d0a72b17 	ldw	r2,-25428(gp)
 1023164:	10800a17 	ldw	r2,40(r2)
 1023168:	10800544 	addi	r2,r2,21
 102316c:	10800023 	ldbuio	r2,0(r2)
 1023170:	1007883a 	mov	r3,r2
 1023174:	00804134 	movhi	r2,260
 1023178:	10a3a204 	addi	r2,r2,-29048
 102317c:	10c00605 	stb	r3,24(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table =
 1023180:	d0a72b17 	ldw	r2,-25428(gp)
 1023184:	10800a17 	ldw	r2,40(r2)
 1023188:	10800584 	addi	r2,r2,22
 102318c:	1080002b 	ldhuio	r2,0(r2)
 1023190:	1007883a 	mov	r3,r2
 1023194:	00804134 	movhi	r2,260
 1023198:	10a3a204 	addi	r2,r2,-29048
 102319c:	10c0068d 	sth	r3,26(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track =
 10231a0:	d0a72b17 	ldw	r2,-25428(gp)
 10231a4:	10800a17 	ldw	r2,40(r2)
 10231a8:	10800604 	addi	r2,r2,24
 10231ac:	1080002b 	ldhuio	r2,0(r2)
 10231b0:	1007883a 	mov	r3,r2
 10231b4:	00804134 	movhi	r2,260
 10231b8:	10a3a204 	addi	r2,r2,-29048
 10231bc:	10c0070d 	sth	r3,28(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads =
 10231c0:	d0a72b17 	ldw	r2,-25428(gp)
 10231c4:	10800a17 	ldw	r2,40(r2)
 10231c8:	10800684 	addi	r2,r2,26
 10231cc:	1080002b 	ldhuio	r2,0(r2)
 10231d0:	1007883a 	mov	r3,r2
 10231d4:	00804134 	movhi	r2,260
 10231d8:	10a3a204 	addi	r2,r2,-29048
 10231dc:	10c0078d 	sth	r3,30(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors =
 10231e0:	d0a72b17 	ldw	r2,-25428(gp)
 10231e4:	10800a17 	ldw	r2,40(r2)
 10231e8:	10800704 	addi	r2,r2,28
 10231ec:	10800037 	ldwio	r2,0(r2)
 10231f0:	1007883a 	mov	r3,r2
 10231f4:	00804134 	movhi	r2,260
 10231f8:	10a3a204 	addi	r2,r2,-29048
 10231fc:	10c00815 	stw	r3,32(r2)
				((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB =
 1023200:	d0a72b17 	ldw	r2,-25428(gp)
 1023204:	10800a17 	ldw	r2,40(r2)
 1023208:	10800804 	addi	r2,r2,32
 102320c:	10800037 	ldwio	r2,0(r2)
 1023210:	1007883a 	mov	r3,r2
 1023214:	00804134 	movhi	r2,260
 1023218:	10a3a204 	addi	r2,r2,-29048
 102321c:	10c00915 	stw	r3,36(r2)
				((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number =
 1023220:	d0a72b17 	ldw	r2,-25428(gp)
 1023224:	10800a17 	ldw	r2,40(r2)
 1023228:	10800904 	addi	r2,r2,36
 102322c:	10800023 	ldbuio	r2,0(r2)
 1023230:	1007883a 	mov	r3,r2
 1023234:	00804134 	movhi	r2,260
 1023238:	10a3a204 	addi	r2,r2,-29048
 102323c:	10c00a05 	stb	r3,40(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head =
 1023240:	d0a72b17 	ldw	r2,-25428(gp)
 1023244:	10800a17 	ldw	r2,40(r2)
 1023248:	10800944 	addi	r2,r2,37
 102324c:	10800023 	ldbuio	r2,0(r2)
 1023250:	1007883a 	mov	r3,r2
 1023254:	00804134 	movhi	r2,260
 1023258:	10a3a204 	addi	r2,r2,-29048
 102325c:	10c00a45 	stb	r3,41(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature =
 1023260:	d0a72b17 	ldw	r2,-25428(gp)
 1023264:	10800a17 	ldw	r2,40(r2)
 1023268:	10800984 	addi	r2,r2,38
 102326c:	10800023 	ldbuio	r2,0(r2)
 1023270:	1007883a 	mov	r3,r2
 1023274:	00804134 	movhi	r2,260
 1023278:	10a3a204 	addi	r2,r2,-29048
 102327c:	10c00a85 	stb	r3,42(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset =
 1023280:	00804134 	movhi	r2,260
 1023284:	10a3a204 	addi	r2,r2,-29048
 1023288:	1080040b 	ldhu	r2,16(r2)
 102328c:	10ffffcc 	andi	r3,r2,65535
 1023290:	00804134 	movhi	r2,260
 1023294:	10a3a204 	addi	r2,r2,-29048
 1023298:	10c01115 	stw	r3,68(r2)
				boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset =
 102329c:	00804134 	movhi	r2,260
 10232a0:	10a3a204 	addi	r2,r2,-29048
 10232a4:	10c01117 	ldw	r3,68(r2)
 10232a8:	00804134 	movhi	r2,260
 10232ac:	10a3a204 	addi	r2,r2,-29048
 10232b0:	1080068b 	ldhu	r2,26(r2)
 10232b4:	10bfffcc 	andi	r2,r2,65535
 10232b8:	1887883a 	add	r3,r3,r2
 10232bc:	00804134 	movhi	r2,260
 10232c0:	10a3a204 	addi	r2,r2,-29048
 10232c4:	10c01215 	stw	r3,72(r2)
				boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset =
 10232c8:	00804134 	movhi	r2,260
 10232cc:	10a3a204 	addi	r2,r2,-29048
 10232d0:	10c01217 	ldw	r3,72(r2)
 10232d4:	00804134 	movhi	r2,260
 10232d8:	10a3a204 	addi	r2,r2,-29048
 10232dc:	1080068b 	ldhu	r2,26(r2)
 10232e0:	10bfffcc 	andi	r2,r2,65535
 10232e4:	1887883a 	add	r3,r3,r2
 10232e8:	00804134 	movhi	r2,260
 10232ec:	10a3a204 	addi	r2,r2,-29048
 10232f0:	10c01315 	stw	r3,76(r2)
				boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset =
 10232f4:	00804134 	movhi	r2,260
 10232f8:	10a3a204 	addi	r2,r2,-29048
 10232fc:	11001317 	ldw	r4,76(r2)
 1023300:	00804134 	movhi	r2,260
 1023304:	10a3a204 	addi	r2,r2,-29048
 1023308:	1080050b 	ldhu	r2,20(r2)
 102330c:	10bfffcc 	andi	r2,r2,65535
 1023310:	1006917a 	slli	r3,r2,5
 1023314:	00804134 	movhi	r2,260
 1023318:	10a3a204 	addi	r2,r2,-29048
 102331c:	1080030b 	ldhu	r2,12(r2)
 1023320:	10bfffcc 	andi	r2,r2,65535
 1023324:	1885283a 	div	r2,r3,r2
 1023328:	2087883a 	add	r3,r4,r2
 102332c:	00804134 	movhi	r2,260
 1023330:	10a3a204 	addi	r2,r2,-29048
 1023334:	10c01415 	stw	r3,80(r2)
				boot_sector_data.root_directory_sector_offset
						+ (32 * boot_sector_data.max_number_of_dir_entires
								/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
 1023338:	00804134 	movhi	r2,260
 102333c:	10a3a204 	addi	r2,r2,-29048
 1023340:	1080058b 	ldhu	r2,22(r2)
 1023344:	10bfffcc 	andi	r2,r2,65535
 1023348:	1005003a 	cmpeq	r2,r2,zero
 102334c:	10000b1e 	bne	r2,zero,102337c <Check_for_DOS_FAT+0x460>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
 1023350:	00804134 	movhi	r2,260
 1023354:	10a3a204 	addi	r2,r2,-29048
 1023358:	1080058b 	ldhu	r2,22(r2)
 102335c:	10ffffcc 	andi	r3,r2,65535
 1023360:	00804134 	movhi	r2,260
 1023364:	10a3a204 	addi	r2,r2,-29048
 1023368:	10800383 	ldbu	r2,14(r2)
 102336c:	10803fcc 	andi	r2,r2,255
 1023370:	1885283a 	div	r2,r3,r2
 1023374:	e0bffb15 	stw	r2,-20(fp)
 1023378:	00000906 	br	10233a0 <Check_for_DOS_FAT+0x484>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
 102337c:	00804134 	movhi	r2,260
 1023380:	10a3a204 	addi	r2,r2,-29048
 1023384:	10c00917 	ldw	r3,36(r2)
 1023388:	00804134 	movhi	r2,260
 102338c:	10a3a204 	addi	r2,r2,-29048
 1023390:	10800383 	ldbu	r2,14(r2)
 1023394:	10803fcc 	andi	r2,r2,255
 1023398:	1885203a 	divu	r2,r3,r2
 102339c:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
 10233a0:	e0bffb17 	ldw	r2,-20(fp)
 10233a4:	1083fdc8 	cmpgei	r2,r2,4087
 10233a8:	1000051e 	bne	r2,zero,10233c0 <Check_for_DOS_FAT+0x4a4>
			boot_sector_data.bits_for_cluster_index = 12;
 10233ac:	00c04134 	movhi	r3,260
 10233b0:	18e3a204 	addi	r3,r3,-29048
 10233b4:	00800304 	movi	r2,12
 10233b8:	18801085 	stb	r2,66(r3)
 10233bc:	00000c06 	br	10233f0 <Check_for_DOS_FAT+0x4d4>
		} else if (num_clusters <= 65517) {
 10233c0:	e0fffb17 	ldw	r3,-20(fp)
 10233c4:	00bffb54 	movui	r2,65517
 10233c8:	10c00516 	blt	r2,r3,10233e0 <Check_for_DOS_FAT+0x4c4>
			boot_sector_data.bits_for_cluster_index = 16;
 10233cc:	00c04134 	movhi	r3,260
 10233d0:	18e3a204 	addi	r3,r3,-29048
 10233d4:	00800404 	movi	r2,16
 10233d8:	18801085 	stb	r2,66(r3)
 10233dc:	00000406 	br	10233f0 <Check_for_DOS_FAT+0x4d4>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
 10233e0:	00c04134 	movhi	r3,260
 10233e4:	18e3a204 	addi	r3,r3,-29048
 10233e8:	00800804 	movi	r2,32
 10233ec:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
 10233f0:	e03ffd15 	stw	zero,-12(fp)
 10233f4:	00001106 	br	102343c <Check_for_DOS_FAT+0x520>
			boot_sector_data.volume_id[counter] =
 10233f8:	e13ffd17 	ldw	r4,-12(fp)
 10233fc:	d0a72b17 	ldw	r2,-25428(gp)
 1023400:	10800a17 	ldw	r2,40(r2)
 1023404:	1007883a 	mov	r3,r2
 1023408:	e0bffd17 	ldw	r2,-12(fp)
 102340c:	1885883a 	add	r2,r3,r2
 1023410:	108009c4 	addi	r2,r2,39
 1023414:	10800023 	ldbuio	r2,0(r2)
 1023418:	1007883a 	mov	r3,r2
 102341c:	00804134 	movhi	r2,260
 1023420:	10a3a204 	addi	r2,r2,-29048
 1023424:	2085883a 	add	r2,r4,r2
 1023428:	10800a04 	addi	r2,r2,40
 102342c:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
 1023430:	e0bffd17 	ldw	r2,-12(fp)
 1023434:	10800044 	addi	r2,r2,1
 1023438:	e0bffd15 	stw	r2,-12(fp)
 102343c:	e0bffd17 	ldw	r2,-12(fp)
 1023440:	10800110 	cmplti	r2,r2,4
 1023444:	103fec1e 	bne	r2,zero,10233f8 <Check_for_DOS_FAT+0x4dc>
			boot_sector_data.volume_id[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 1023448:	e03ffd15 	stw	zero,-12(fp)
 102344c:	00001106 	br	1023494 <Check_for_DOS_FAT+0x578>
			boot_sector_data.volume_label[counter] =
 1023450:	e13ffd17 	ldw	r4,-12(fp)
 1023454:	d0a72b17 	ldw	r2,-25428(gp)
 1023458:	10800a17 	ldw	r2,40(r2)
 102345c:	1007883a 	mov	r3,r2
 1023460:	e0bffd17 	ldw	r2,-12(fp)
 1023464:	1885883a 	add	r2,r3,r2
 1023468:	10800ac4 	addi	r2,r2,43
 102346c:	10800023 	ldbuio	r2,0(r2)
 1023470:	1007883a 	mov	r3,r2
 1023474:	00804134 	movhi	r2,260
 1023478:	10a3a204 	addi	r2,r2,-29048
 102347c:	2085883a 	add	r2,r4,r2
 1023480:	10800b04 	addi	r2,r2,44
 1023484:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 1023488:	e0bffd17 	ldw	r2,-12(fp)
 102348c:	10800044 	addi	r2,r2,1
 1023490:	e0bffd15 	stw	r2,-12(fp)
 1023494:	e0bffd17 	ldw	r2,-12(fp)
 1023498:	108002d0 	cmplti	r2,r2,11
 102349c:	103fec1e 	bne	r2,zero,1023450 <Check_for_DOS_FAT+0x534>
			boot_sector_data.volume_label[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 10234a0:	e03ffd15 	stw	zero,-12(fp)
 10234a4:	00001106 	br	10234ec <Check_for_DOS_FAT+0x5d0>
			boot_sector_data.file_system_type[counter] =
 10234a8:	e13ffd17 	ldw	r4,-12(fp)
 10234ac:	d0a72b17 	ldw	r2,-25428(gp)
 10234b0:	10800a17 	ldw	r2,40(r2)
 10234b4:	1007883a 	mov	r3,r2
 10234b8:	e0bffd17 	ldw	r2,-12(fp)
 10234bc:	1885883a 	add	r2,r3,r2
 10234c0:	10800d84 	addi	r2,r2,54
 10234c4:	10800023 	ldbuio	r2,0(r2)
 10234c8:	1007883a 	mov	r3,r2
 10234cc:	00804134 	movhi	r2,260
 10234d0:	10a3a204 	addi	r2,r2,-29048
 10234d4:	2085883a 	add	r2,r4,r2
 10234d8:	10800e04 	addi	r2,r2,56
 10234dc:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 10234e0:	e0bffd17 	ldw	r2,-12(fp)
 10234e4:	10800044 	addi	r2,r2,1
 10234e8:	e0bffd15 	stw	r2,-12(fp)
 10234ec:	e0bffd17 	ldw	r2,-12(fp)
 10234f0:	10800210 	cmplti	r2,r2,8
 10234f4:	103fec1e 	bne	r2,zero,10234a8 <Check_for_DOS_FAT+0x58c>
			boot_sector_data.file_system_type[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 10234f8:	e03ffd15 	stw	zero,-12(fp)
 10234fc:	00000a06 	br	1023528 <Check_for_DOS_FAT+0x60c>
			active_files[counter].in_use = false;
 1023500:	e0bffd17 	ldw	r2,-12(fp)
 1023504:	00c04134 	movhi	r3,260
 1023508:	18e3b704 	addi	r3,r3,-28964
 102350c:	100491ba 	slli	r2,r2,6
 1023510:	10c5883a 	add	r2,r2,r3
 1023514:	10800f04 	addi	r2,r2,60
 1023518:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 102351c:	e0bffd17 	ldw	r2,-12(fp)
 1023520:	10800044 	addi	r2,r2,1
 1023524:	e0bffd15 	stw	r2,-12(fp)
 1023528:	e0bffd17 	ldw	r2,-12(fp)
 102352c:	10800510 	cmplti	r2,r2,20
 1023530:	103ff31e 	bne	r2,zero,1023500 <Check_for_DOS_FAT+0x5e4>
			active_files[counter].in_use = false;
		}
		result = true;
 1023534:	00800044 	movi	r2,1
 1023538:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 102353c:	00000106 	br	1023544 <Check_for_DOS_FAT+0x628>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
 1023540:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
 1023544:	e0bffe17 	ldw	r2,-8(fp)
}
 1023548:	e037883a 	mov	sp,fp
 102354c:	dfc00117 	ldw	ra,4(sp)
 1023550:	df000017 	ldw	fp,0(sp)
 1023554:	dec00204 	addi	sp,sp,8
 1023558:	f800283a 	ret

0102355c <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 102355c:	defffc04 	addi	sp,sp,-16
 1023560:	dfc00315 	stw	ra,12(sp)
 1023564:	df000215 	stw	fp,8(sp)
 1023568:	df000204 	addi	fp,sp,8
	bool result = false;
 102356c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 1023570:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 1023574:	1005003a 	cmpeq	r2,r2,zero
 1023578:	1000331e 	bne	r2,zero,1023648 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
 102357c:	0009883a 	mov	r4,zero
 1023580:	000b883a 	mov	r5,zero
 1023584:	10269ec0 	call	10269ec <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
 1023588:	d0a72517 	ldw	r2,-25452(gp)
 102358c:	1080000b 	ldhu	r2,0(r2)
 1023590:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
 1023594:	d0272915 	stw	zero,-25436(gp)
		fat_partition_size_in_512_byte_sectors = 0;
 1023598:	d0272a15 	stw	zero,-25432(gp)

		if (((csd_file_format & 0x8000) == 0)
 102359c:	e0bffe0f 	ldh	r2,-8(fp)
 10235a0:	1004803a 	cmplt	r2,r2,zero
 10235a4:	1000281e 	bne	r2,zero,1023648 <Look_for_FAT16+0xec>
 10235a8:	e0bffe0b 	ldhu	r2,-8(fp)
 10235ac:	10bfffcc 	andi	r2,r2,65535
 10235b0:	1083000c 	andi	r2,r2,3072
 10235b4:	10830020 	cmpeqi	r2,r2,3072
 10235b8:	1000231e 	bne	r2,zero,1023648 <Look_for_FAT16+0xec>
				&& ((csd_file_format & 0x0c00) != 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
 10235bc:	e0bffe0b 	ldhu	r2,-8(fp)
 10235c0:	10bfffcc 	andi	r2,r2,65535
 10235c4:	1083000c 	andi	r2,r2,3072
 10235c8:	10810018 	cmpnei	r2,r2,1024
 10235cc:	1000031e 	bne	r2,zero,10235dc <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 10235d0:	0009883a 	mov	r4,zero
 10235d4:	1022f1c0 	call	1022f1c <Check_for_DOS_FAT>
 10235d8:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
 10235dc:	e0bffe0b 	ldhu	r2,-8(fp)
 10235e0:	10bfffcc 	andi	r2,r2,65535
 10235e4:	1083000c 	andi	r2,r2,3072
 10235e8:	1004c03a 	cmpne	r2,r2,zero
 10235ec:	1000061e 	bne	r2,zero,1023608 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
 10235f0:	10228300 	call	1022830 <Check_for_Master_Boot_Record>
 10235f4:	1005003a 	cmpeq	r2,r2,zero
 10235f8:	1000031e 	bne	r2,zero,1023608 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
 10235fc:	d1272917 	ldw	r4,-25436(gp)
 1023600:	1022f1c0 	call	1022f1c <Check_for_DOS_FAT>
 1023604:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
 1023608:	e0bfff17 	ldw	r2,-4(fp)
 102360c:	10800058 	cmpnei	r2,r2,1
 1023610:	10000d1e 	bne	r2,zero,1023648 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
 1023614:	00804134 	movhi	r2,260
 1023618:	10a3a204 	addi	r2,r2,-29048
 102361c:	10801083 	ldbu	r2,66(r2)
 1023620:	10803fcc 	andi	r2,r2,255
 1023624:	10800420 	cmpeqi	r2,r2,16
 1023628:	1000021e 	bne	r2,zero,1023634 <Look_for_FAT16+0xd8>
					result = false;
 102362c:	e03fff15 	stw	zero,-4(fp)
 1023630:	00000506 	br	1023648 <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors =
 1023634:	00804134 	movhi	r2,260
 1023638:	10a3a204 	addi	r2,r2,-29048
 102363c:	1080058b 	ldhu	r2,22(r2)
 1023640:	10bfffcc 	andi	r2,r2,65535
 1023644:	d0a72a15 	stw	r2,-25432(gp)
							boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
 1023648:	e0bfff17 	ldw	r2,-4(fp)
}
 102364c:	e037883a 	mov	sp,fp
 1023650:	dfc00117 	ldw	ra,4(sp)
 1023654:	df000017 	ldw	fp,0(sp)
 1023658:	dec00204 	addi	sp,sp,8
 102365c:	f800283a 	ret

01023660 <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 1023660:	defffb04 	addi	sp,sp,-20
 1023664:	dfc00415 	stw	ra,16(sp)
 1023668:	df000315 	stw	fp,12(sp)
 102366c:	df000304 	addi	fp,sp,12
 1023670:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
 1023674:	e13fff17 	ldw	r4,-4(fp)
 1023678:	1015cfc0 	call	1015cfc <strlen>
 102367c:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 1023680:	e03ffe15 	stw	zero,-8(fp)
 1023684:	00002206 	br	1023710 <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
 1023688:	e0bffe17 	ldw	r2,-8(fp)
 102368c:	1007883a 	mov	r3,r2
 1023690:	e0bfff17 	ldw	r2,-4(fp)
 1023694:	1885883a 	add	r2,r3,r2
 1023698:	10800003 	ldbu	r2,0(r2)
 102369c:	10803fcc 	andi	r2,r2,255
 10236a0:	1080201c 	xori	r2,r2,128
 10236a4:	10bfe004 	addi	r2,r2,-128
 10236a8:	10801850 	cmplti	r2,r2,97
 10236ac:	1000151e 	bne	r2,zero,1023704 <filename_to_upper_case+0xa4>
 10236b0:	e0bffe17 	ldw	r2,-8(fp)
 10236b4:	1007883a 	mov	r3,r2
 10236b8:	e0bfff17 	ldw	r2,-4(fp)
 10236bc:	1885883a 	add	r2,r3,r2
 10236c0:	10800003 	ldbu	r2,0(r2)
 10236c4:	10803fcc 	andi	r2,r2,255
 10236c8:	1080201c 	xori	r2,r2,128
 10236cc:	10bfe004 	addi	r2,r2,-128
 10236d0:	10801ec8 	cmpgei	r2,r2,123
 10236d4:	10000b1e 	bne	r2,zero,1023704 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
 10236d8:	e0bffe17 	ldw	r2,-8(fp)
 10236dc:	1007883a 	mov	r3,r2
 10236e0:	e0bfff17 	ldw	r2,-4(fp)
 10236e4:	1889883a 	add	r4,r3,r2
 10236e8:	e0bffe17 	ldw	r2,-8(fp)
 10236ec:	1007883a 	mov	r3,r2
 10236f0:	e0bfff17 	ldw	r2,-4(fp)
 10236f4:	1885883a 	add	r2,r3,r2
 10236f8:	10800003 	ldbu	r2,0(r2)
 10236fc:	10bff804 	addi	r2,r2,-32
 1023700:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
 1023704:	e0bffe17 	ldw	r2,-8(fp)
 1023708:	10800044 	addi	r2,r2,1
 102370c:	e0bffe15 	stw	r2,-8(fp)
 1023710:	e0fffe17 	ldw	r3,-8(fp)
 1023714:	e0bffd17 	ldw	r2,-12(fp)
 1023718:	18bfdb16 	blt	r3,r2,1023688 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
 102371c:	e037883a 	mov	sp,fp
 1023720:	dfc00117 	ldw	ra,4(sp)
 1023724:	df000017 	ldw	fp,0(sp)
 1023728:	dec00204 	addi	sp,sp,8
 102372c:	f800283a 	ret

01023730 <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 1023730:	defff804 	addi	sp,sp,-32
 1023734:	dfc00715 	stw	ra,28(sp)
 1023738:	df000615 	stw	fp,24(sp)
 102373c:	df000604 	addi	fp,sp,24
 1023740:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
 1023744:	e13fff17 	ldw	r4,-4(fp)
 1023748:	1015cfc0 	call	1015cfc <strlen>
 102374c:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
 1023750:	00bfffc4 	movi	r2,-1
 1023754:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
 1023758:	00bfffc4 	movi	r2,-1
 102375c:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
 1023760:	00800044 	movi	r2,1
 1023764:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
 1023768:	e03ffd15 	stw	zero,-12(fp)
 102376c:	00007606 	br	1023948 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ')
 1023770:	e0bffd17 	ldw	r2,-12(fp)
 1023774:	1007883a 	mov	r3,r2
 1023778:	e0bfff17 	ldw	r2,-4(fp)
 102377c:	1885883a 	add	r2,r3,r2
 1023780:	10800003 	ldbu	r2,0(r2)
 1023784:	10803fcc 	andi	r2,r2,255
 1023788:	1080201c 	xori	r2,r2,128
 102378c:	10bfe004 	addi	r2,r2,-128
 1023790:	10800820 	cmpeqi	r2,r2,32
 1023794:	1000431e 	bne	r2,zero,10238a4 <check_file_name_for_FAT16_compliance+0x174>
 1023798:	e0bffd17 	ldw	r2,-12(fp)
 102379c:	10ffffc4 	addi	r3,r2,-1
 10237a0:	e0bffc17 	ldw	r2,-16(fp)
 10237a4:	1880141e 	bne	r3,r2,10237f8 <check_file_name_for_FAT16_compliance+0xc8>
 10237a8:	e0bffd17 	ldw	r2,-12(fp)
 10237ac:	1007883a 	mov	r3,r2
 10237b0:	e0bfff17 	ldw	r2,-4(fp)
 10237b4:	1885883a 	add	r2,r3,r2
 10237b8:	10800003 	ldbu	r2,0(r2)
 10237bc:	10803fcc 	andi	r2,r2,255
 10237c0:	1080201c 	xori	r2,r2,128
 10237c4:	10bfe004 	addi	r2,r2,-128
 10237c8:	10801720 	cmpeqi	r2,r2,92
 10237cc:	1000351e 	bne	r2,zero,10238a4 <check_file_name_for_FAT16_compliance+0x174>
 10237d0:	e0bffd17 	ldw	r2,-12(fp)
 10237d4:	1007883a 	mov	r3,r2
 10237d8:	e0bfff17 	ldw	r2,-4(fp)
 10237dc:	1885883a 	add	r2,r3,r2
 10237e0:	10800003 	ldbu	r2,0(r2)
 10237e4:	10803fcc 	andi	r2,r2,255
 10237e8:	1080201c 	xori	r2,r2,128
 10237ec:	10bfe004 	addi	r2,r2,-128
 10237f0:	10800be0 	cmpeqi	r2,r2,47
 10237f4:	10002b1e 	bne	r2,zero,10238a4 <check_file_name_for_FAT16_compliance+0x174>
 10237f8:	e0fffd17 	ldw	r3,-12(fp)
 10237fc:	e0bffb17 	ldw	r2,-20(fp)
 1023800:	1885c83a 	sub	r2,r3,r2
 1023804:	10800258 	cmpnei	r2,r2,9
 1023808:	10000a1e 	bne	r2,zero,1023834 <check_file_name_for_FAT16_compliance+0x104>
 102380c:	e0bffd17 	ldw	r2,-12(fp)
 1023810:	1007883a 	mov	r3,r2
 1023814:	e0bfff17 	ldw	r2,-4(fp)
 1023818:	1885883a 	add	r2,r3,r2
 102381c:	10800003 	ldbu	r2,0(r2)
 1023820:	10803fcc 	andi	r2,r2,255
 1023824:	1080201c 	xori	r2,r2,128
 1023828:	10bfe004 	addi	r2,r2,-128
 102382c:	10800b98 	cmpnei	r2,r2,46
 1023830:	10001c1e 	bne	r2,zero,10238a4 <check_file_name_for_FAT16_compliance+0x174>
 1023834:	e0fffc17 	ldw	r3,-16(fp)
 1023838:	e0bffb17 	ldw	r2,-20(fp)
 102383c:	18801b26 	beq	r3,r2,10238ac <check_file_name_for_FAT16_compliance+0x17c>
 1023840:	e0fffd17 	ldw	r3,-12(fp)
 1023844:	e0bffb17 	ldw	r2,-20(fp)
 1023848:	1885c83a 	sub	r2,r3,r2
 102384c:	10800110 	cmplti	r2,r2,4
 1023850:	1000161e 	bne	r2,zero,10238ac <check_file_name_for_FAT16_compliance+0x17c>
 1023854:	e0bffd17 	ldw	r2,-12(fp)
 1023858:	1007883a 	mov	r3,r2
 102385c:	e0bfff17 	ldw	r2,-4(fp)
 1023860:	1885883a 	add	r2,r3,r2
 1023864:	10800003 	ldbu	r2,0(r2)
 1023868:	10803fcc 	andi	r2,r2,255
 102386c:	1080201c 	xori	r2,r2,128
 1023870:	10bfe004 	addi	r2,r2,-128
 1023874:	10801720 	cmpeqi	r2,r2,92
 1023878:	10000c1e 	bne	r2,zero,10238ac <check_file_name_for_FAT16_compliance+0x17c>
 102387c:	e0bffd17 	ldw	r2,-12(fp)
 1023880:	1007883a 	mov	r3,r2
 1023884:	e0bfff17 	ldw	r2,-4(fp)
 1023888:	1885883a 	add	r2,r3,r2
 102388c:	10800003 	ldbu	r2,0(r2)
 1023890:	10803fcc 	andi	r2,r2,255
 1023894:	1080201c 	xori	r2,r2,128
 1023898:	10bfe004 	addi	r2,r2,-128
 102389c:	10800be0 	cmpeqi	r2,r2,47
 10238a0:	1000021e 	bne	r2,zero,10238ac <check_file_name_for_FAT16_compliance+0x17c>
				|| ((index - last_period == 9) && (file_name[index] != '.'))
				|| ((last_dir_break_position != last_period)
						&& (index - last_period > 3)
						&& (file_name[index] != '\\')
						&& (file_name[index] != '/'))) {
			result = false;
 10238a4:	e03ffa15 	stw	zero,-24(fp)
			break;
 10238a8:	00002a06 	br	1023954 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
 10238ac:	e0bffd17 	ldw	r2,-12(fp)
 10238b0:	1007883a 	mov	r3,r2
 10238b4:	e0bfff17 	ldw	r2,-4(fp)
 10238b8:	1885883a 	add	r2,r3,r2
 10238bc:	10800003 	ldbu	r2,0(r2)
 10238c0:	10803fcc 	andi	r2,r2,255
 10238c4:	1080201c 	xori	r2,r2,128
 10238c8:	10bfe004 	addi	r2,r2,-128
 10238cc:	10801720 	cmpeqi	r2,r2,92
 10238d0:	10000a1e 	bne	r2,zero,10238fc <check_file_name_for_FAT16_compliance+0x1cc>
 10238d4:	e0bffd17 	ldw	r2,-12(fp)
 10238d8:	1007883a 	mov	r3,r2
 10238dc:	e0bfff17 	ldw	r2,-4(fp)
 10238e0:	1885883a 	add	r2,r3,r2
 10238e4:	10800003 	ldbu	r2,0(r2)
 10238e8:	10803fcc 	andi	r2,r2,255
 10238ec:	1080201c 	xori	r2,r2,128
 10238f0:	10bfe004 	addi	r2,r2,-128
 10238f4:	10800bd8 	cmpnei	r2,r2,47
 10238f8:	1000041e 	bne	r2,zero,102390c <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
 10238fc:	e0bffd17 	ldw	r2,-12(fp)
 1023900:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
 1023904:	e0bffd17 	ldw	r2,-12(fp)
 1023908:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
 102390c:	e0bffd17 	ldw	r2,-12(fp)
 1023910:	1007883a 	mov	r3,r2
 1023914:	e0bfff17 	ldw	r2,-4(fp)
 1023918:	1885883a 	add	r2,r3,r2
 102391c:	10800003 	ldbu	r2,0(r2)
 1023920:	10803fcc 	andi	r2,r2,255
 1023924:	1080201c 	xori	r2,r2,128
 1023928:	10bfe004 	addi	r2,r2,-128
 102392c:	10800b98 	cmpnei	r2,r2,46
 1023930:	1000021e 	bne	r2,zero,102393c <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
 1023934:	e0bffd17 	ldw	r2,-12(fp)
 1023938:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
 102393c:	e0bffd17 	ldw	r2,-12(fp)
 1023940:	10800044 	addi	r2,r2,1
 1023944:	e0bffd15 	stw	r2,-12(fp)
 1023948:	e0fffd17 	ldw	r3,-12(fp)
 102394c:	e0bffe17 	ldw	r2,-8(fp)
 1023950:	18bf8716 	blt	r3,r2,1023770 <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
 1023954:	e0fffe17 	ldw	r3,-8(fp)
 1023958:	e0bfff17 	ldw	r2,-4(fp)
 102395c:	1885883a 	add	r2,r3,r2
 1023960:	10bfffc4 	addi	r2,r2,-1
 1023964:	10800003 	ldbu	r2,0(r2)
 1023968:	10803fcc 	andi	r2,r2,255
 102396c:	1080201c 	xori	r2,r2,128
 1023970:	10bfe004 	addi	r2,r2,-128
 1023974:	10801720 	cmpeqi	r2,r2,92
 1023978:	10000a1e 	bne	r2,zero,10239a4 <check_file_name_for_FAT16_compliance+0x274>
 102397c:	e0fffe17 	ldw	r3,-8(fp)
 1023980:	e0bfff17 	ldw	r2,-4(fp)
 1023984:	1885883a 	add	r2,r3,r2
 1023988:	10bfffc4 	addi	r2,r2,-1
 102398c:	10800003 	ldbu	r2,0(r2)
 1023990:	10803fcc 	andi	r2,r2,255
 1023994:	1080201c 	xori	r2,r2,128
 1023998:	10bfe004 	addi	r2,r2,-128
 102399c:	10800bd8 	cmpnei	r2,r2,47
 10239a0:	1000011e 	bne	r2,zero,10239a8 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
 10239a4:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
 10239a8:	e0bffa17 	ldw	r2,-24(fp)
}
 10239ac:	e037883a 	mov	sp,fp
 10239b0:	dfc00117 	ldw	ra,4(sp)
 10239b4:	df000017 	ldw	fp,0(sp)
 10239b8:	dec00204 	addi	sp,sp,8
 10239bc:	f800283a 	ret

010239c0 <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 10239c0:	defffb04 	addi	sp,sp,-20
 10239c4:	dfc00415 	stw	ra,16(sp)
 10239c8:	df000315 	stw	fp,12(sp)
 10239cc:	df000304 	addi	fp,sp,12
 10239d0:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
 10239d4:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
 10239d8:	e13fff17 	ldw	r4,-4(fp)
 10239dc:	1015cfc0 	call	1015cfc <strlen>
 10239e0:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 10239e4:	e03ffe15 	stw	zero,-8(fp)
 10239e8:	00001706 	br	1023a48 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
 10239ec:	e0bffe17 	ldw	r2,-8(fp)
 10239f0:	1007883a 	mov	r3,r2
 10239f4:	e0bfff17 	ldw	r2,-4(fp)
 10239f8:	1885883a 	add	r2,r3,r2
 10239fc:	10800003 	ldbu	r2,0(r2)
 1023a00:	10803fcc 	andi	r2,r2,255
 1023a04:	1080201c 	xori	r2,r2,128
 1023a08:	10bfe004 	addi	r2,r2,-128
 1023a0c:	10801720 	cmpeqi	r2,r2,92
 1023a10:	1000101e 	bne	r2,zero,1023a54 <get_dir_divider_location+0x94>
 1023a14:	e0bffe17 	ldw	r2,-8(fp)
 1023a18:	1007883a 	mov	r3,r2
 1023a1c:	e0bfff17 	ldw	r2,-4(fp)
 1023a20:	1885883a 	add	r2,r3,r2
 1023a24:	10800003 	ldbu	r2,0(r2)
 1023a28:	10803fcc 	andi	r2,r2,255
 1023a2c:	1080201c 	xori	r2,r2,128
 1023a30:	10bfe004 	addi	r2,r2,-128
 1023a34:	10800be0 	cmpeqi	r2,r2,47
 1023a38:	1000061e 	bne	r2,zero,1023a54 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
 1023a3c:	e0bffe17 	ldw	r2,-8(fp)
 1023a40:	10800044 	addi	r2,r2,1
 1023a44:	e0bffe15 	stw	r2,-8(fp)
 1023a48:	e0fffe17 	ldw	r3,-8(fp)
 1023a4c:	e0bffd17 	ldw	r2,-12(fp)
 1023a50:	18bfe616 	blt	r3,r2,10239ec <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
 1023a54:	e0fffe17 	ldw	r3,-8(fp)
 1023a58:	e0bffd17 	ldw	r2,-12(fp)
 1023a5c:	1880021e 	bne	r3,r2,1023a68 <get_dir_divider_location+0xa8>
		index = -1;
 1023a60:	00bfffc4 	movi	r2,-1
 1023a64:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
 1023a68:	e0bffe17 	ldw	r2,-8(fp)
}
 1023a6c:	e037883a 	mov	sp,fp
 1023a70:	dfc00117 	ldw	ra,4(sp)
 1023a74:	df000017 	ldw	fp,0(sp)
 1023a78:	dec00204 	addi	sp,sp,8
 1023a7c:	f800283a 	ret

01023a80 <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 1023a80:	defff604 	addi	sp,sp,-40
 1023a84:	df000915 	stw	fp,36(sp)
 1023a88:	df000904 	addi	fp,sp,36
 1023a8c:	e13ff915 	stw	r4,-28(fp)
 1023a90:	e17ffa15 	stw	r5,-24(fp)
 1023a94:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
 1023a98:	00800044 	movi	r2,1
 1023a9c:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
 1023aa0:	e03ff715 	stw	zero,-36(fp)
 1023aa4:	00005006 	br	1023be8 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
 1023aa8:	e0fff717 	ldw	r3,-36(fp)
 1023aac:	e0bff917 	ldw	r2,-28(fp)
 1023ab0:	10c5883a 	add	r2,r2,r3
 1023ab4:	10800003 	ldbu	r2,0(r2)
 1023ab8:	10803fcc 	andi	r2,r2,255
 1023abc:	10801870 	cmpltui	r2,r2,97
 1023ac0:	1000111e 	bne	r2,zero,1023b08 <match_file_record_to_name_ext+0x88>
 1023ac4:	e0fff717 	ldw	r3,-36(fp)
 1023ac8:	e0bff917 	ldw	r2,-28(fp)
 1023acc:	10c5883a 	add	r2,r2,r3
 1023ad0:	10800003 	ldbu	r2,0(r2)
 1023ad4:	10803fcc 	andi	r2,r2,255
 1023ad8:	10801ee8 	cmpgeui	r2,r2,123
 1023adc:	10000a1e 	bne	r2,zero,1023b08 <match_file_record_to_name_ext+0x88>
 1023ae0:	e0fff717 	ldw	r3,-36(fp)
 1023ae4:	e0bff917 	ldw	r2,-28(fp)
 1023ae8:	10c5883a 	add	r2,r2,r3
 1023aec:	10800003 	ldbu	r2,0(r2)
 1023af0:	10bff804 	addi	r2,r2,-32
 1023af4:	10803fcc 	andi	r2,r2,255
 1023af8:	1080201c 	xori	r2,r2,128
 1023afc:	10bfe004 	addi	r2,r2,-128
 1023b00:	e0bfff15 	stw	r2,-4(fp)
 1023b04:	00000806 	br	1023b28 <match_file_record_to_name_ext+0xa8>
 1023b08:	e0fff717 	ldw	r3,-36(fp)
 1023b0c:	e0bff917 	ldw	r2,-28(fp)
 1023b10:	10c5883a 	add	r2,r2,r3
 1023b14:	10800003 	ldbu	r2,0(r2)
 1023b18:	10803fcc 	andi	r2,r2,255
 1023b1c:	1080201c 	xori	r2,r2,128
 1023b20:	10bfe004 	addi	r2,r2,-128
 1023b24:	e0bfff15 	stw	r2,-4(fp)
 1023b28:	e0bff717 	ldw	r2,-36(fp)
 1023b2c:	1007883a 	mov	r3,r2
 1023b30:	e0bffa17 	ldw	r2,-24(fp)
 1023b34:	1885883a 	add	r2,r3,r2
 1023b38:	10800003 	ldbu	r2,0(r2)
 1023b3c:	10803fcc 	andi	r2,r2,255
 1023b40:	1080201c 	xori	r2,r2,128
 1023b44:	10bfe004 	addi	r2,r2,-128
 1023b48:	10801850 	cmplti	r2,r2,97
 1023b4c:	1000151e 	bne	r2,zero,1023ba4 <match_file_record_to_name_ext+0x124>
 1023b50:	e0bff717 	ldw	r2,-36(fp)
 1023b54:	1007883a 	mov	r3,r2
 1023b58:	e0bffa17 	ldw	r2,-24(fp)
 1023b5c:	1885883a 	add	r2,r3,r2
 1023b60:	10800003 	ldbu	r2,0(r2)
 1023b64:	10803fcc 	andi	r2,r2,255
 1023b68:	1080201c 	xori	r2,r2,128
 1023b6c:	10bfe004 	addi	r2,r2,-128
 1023b70:	10801ec8 	cmpgei	r2,r2,123
 1023b74:	10000b1e 	bne	r2,zero,1023ba4 <match_file_record_to_name_ext+0x124>
 1023b78:	e0bff717 	ldw	r2,-36(fp)
 1023b7c:	1007883a 	mov	r3,r2
 1023b80:	e0bffa17 	ldw	r2,-24(fp)
 1023b84:	1885883a 	add	r2,r3,r2
 1023b88:	10800003 	ldbu	r2,0(r2)
 1023b8c:	10bff804 	addi	r2,r2,-32
 1023b90:	10803fcc 	andi	r2,r2,255
 1023b94:	1080201c 	xori	r2,r2,128
 1023b98:	10bfe004 	addi	r2,r2,-128
 1023b9c:	e0bffe15 	stw	r2,-8(fp)
 1023ba0:	00000906 	br	1023bc8 <match_file_record_to_name_ext+0x148>
 1023ba4:	e0bff717 	ldw	r2,-36(fp)
 1023ba8:	1007883a 	mov	r3,r2
 1023bac:	e0bffa17 	ldw	r2,-24(fp)
 1023bb0:	1885883a 	add	r2,r3,r2
 1023bb4:	10800003 	ldbu	r2,0(r2)
 1023bb8:	10803fcc 	andi	r2,r2,255
 1023bbc:	1080201c 	xori	r2,r2,128
 1023bc0:	10bfe004 	addi	r2,r2,-128
 1023bc4:	e0bffe15 	stw	r2,-8(fp)
 1023bc8:	e0bfff17 	ldw	r2,-4(fp)
 1023bcc:	e0fffe17 	ldw	r3,-8(fp)
 1023bd0:	10c00226 	beq	r2,r3,1023bdc <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
 1023bd4:	e03ff815 	stw	zero,-32(fp)
			break;
 1023bd8:	00000606 	br	1023bf4 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
 1023bdc:	e0bff717 	ldw	r2,-36(fp)
 1023be0:	10800044 	addi	r2,r2,1
 1023be4:	e0bff715 	stw	r2,-36(fp)
 1023be8:	e0bff717 	ldw	r2,-36(fp)
 1023bec:	10800210 	cmplti	r2,r2,8
 1023bf0:	103fad1e 	bne	r2,zero,1023aa8 <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 1023bf4:	e03ff715 	stw	zero,-36(fp)
 1023bf8:	00005406 	br	1023d4c <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
 1023bfc:	e0fff717 	ldw	r3,-36(fp)
 1023c00:	e0bff917 	ldw	r2,-28(fp)
 1023c04:	1885883a 	add	r2,r3,r2
 1023c08:	10800204 	addi	r2,r2,8
 1023c0c:	10800003 	ldbu	r2,0(r2)
 1023c10:	10803fcc 	andi	r2,r2,255
 1023c14:	10801870 	cmpltui	r2,r2,97
 1023c18:	1000131e 	bne	r2,zero,1023c68 <match_file_record_to_name_ext+0x1e8>
 1023c1c:	e0fff717 	ldw	r3,-36(fp)
 1023c20:	e0bff917 	ldw	r2,-28(fp)
 1023c24:	1885883a 	add	r2,r3,r2
 1023c28:	10800204 	addi	r2,r2,8
 1023c2c:	10800003 	ldbu	r2,0(r2)
 1023c30:	10803fcc 	andi	r2,r2,255
 1023c34:	10801ee8 	cmpgeui	r2,r2,123
 1023c38:	10000b1e 	bne	r2,zero,1023c68 <match_file_record_to_name_ext+0x1e8>
 1023c3c:	e0fff717 	ldw	r3,-36(fp)
 1023c40:	e0bff917 	ldw	r2,-28(fp)
 1023c44:	1885883a 	add	r2,r3,r2
 1023c48:	10800204 	addi	r2,r2,8
 1023c4c:	10800003 	ldbu	r2,0(r2)
 1023c50:	10bff804 	addi	r2,r2,-32
 1023c54:	10803fcc 	andi	r2,r2,255
 1023c58:	1080201c 	xori	r2,r2,128
 1023c5c:	10bfe004 	addi	r2,r2,-128
 1023c60:	e0bffd15 	stw	r2,-12(fp)
 1023c64:	00000906 	br	1023c8c <match_file_record_to_name_ext+0x20c>
 1023c68:	e0fff717 	ldw	r3,-36(fp)
 1023c6c:	e0bff917 	ldw	r2,-28(fp)
 1023c70:	1885883a 	add	r2,r3,r2
 1023c74:	10800204 	addi	r2,r2,8
 1023c78:	10800003 	ldbu	r2,0(r2)
 1023c7c:	10803fcc 	andi	r2,r2,255
 1023c80:	1080201c 	xori	r2,r2,128
 1023c84:	10bfe004 	addi	r2,r2,-128
 1023c88:	e0bffd15 	stw	r2,-12(fp)
 1023c8c:	e0bff717 	ldw	r2,-36(fp)
 1023c90:	1007883a 	mov	r3,r2
 1023c94:	e0bffb17 	ldw	r2,-20(fp)
 1023c98:	1885883a 	add	r2,r3,r2
 1023c9c:	10800003 	ldbu	r2,0(r2)
 1023ca0:	10803fcc 	andi	r2,r2,255
 1023ca4:	1080201c 	xori	r2,r2,128
 1023ca8:	10bfe004 	addi	r2,r2,-128
 1023cac:	10801850 	cmplti	r2,r2,97
 1023cb0:	1000151e 	bne	r2,zero,1023d08 <match_file_record_to_name_ext+0x288>
 1023cb4:	e0bff717 	ldw	r2,-36(fp)
 1023cb8:	1007883a 	mov	r3,r2
 1023cbc:	e0bffb17 	ldw	r2,-20(fp)
 1023cc0:	1885883a 	add	r2,r3,r2
 1023cc4:	10800003 	ldbu	r2,0(r2)
 1023cc8:	10803fcc 	andi	r2,r2,255
 1023ccc:	1080201c 	xori	r2,r2,128
 1023cd0:	10bfe004 	addi	r2,r2,-128
 1023cd4:	10801ec8 	cmpgei	r2,r2,123
 1023cd8:	10000b1e 	bne	r2,zero,1023d08 <match_file_record_to_name_ext+0x288>
 1023cdc:	e0bff717 	ldw	r2,-36(fp)
 1023ce0:	1007883a 	mov	r3,r2
 1023ce4:	e0bffb17 	ldw	r2,-20(fp)
 1023ce8:	1885883a 	add	r2,r3,r2
 1023cec:	10800003 	ldbu	r2,0(r2)
 1023cf0:	10bff804 	addi	r2,r2,-32
 1023cf4:	10803fcc 	andi	r2,r2,255
 1023cf8:	1080201c 	xori	r2,r2,128
 1023cfc:	10bfe004 	addi	r2,r2,-128
 1023d00:	e0bffc15 	stw	r2,-16(fp)
 1023d04:	00000906 	br	1023d2c <match_file_record_to_name_ext+0x2ac>
 1023d08:	e0bff717 	ldw	r2,-36(fp)
 1023d0c:	1007883a 	mov	r3,r2
 1023d10:	e0bffb17 	ldw	r2,-20(fp)
 1023d14:	1885883a 	add	r2,r3,r2
 1023d18:	10800003 	ldbu	r2,0(r2)
 1023d1c:	10803fcc 	andi	r2,r2,255
 1023d20:	1080201c 	xori	r2,r2,128
 1023d24:	10bfe004 	addi	r2,r2,-128
 1023d28:	e0bffc15 	stw	r2,-16(fp)
 1023d2c:	e0bffd17 	ldw	r2,-12(fp)
 1023d30:	e0fffc17 	ldw	r3,-16(fp)
 1023d34:	10c00226 	beq	r2,r3,1023d40 <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
 1023d38:	e03ff815 	stw	zero,-32(fp)
			break;
 1023d3c:	00000606 	br	1023d58 <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 1023d40:	e0bff717 	ldw	r2,-36(fp)
 1023d44:	10800044 	addi	r2,r2,1
 1023d48:	e0bff715 	stw	r2,-36(fp)
 1023d4c:	e0bff717 	ldw	r2,-36(fp)
 1023d50:	108000d0 	cmplti	r2,r2,3
 1023d54:	103fa91e 	bne	r2,zero,1023bfc <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
 1023d58:	e0bff817 	ldw	r2,-32(fp)
}
 1023d5c:	e037883a 	mov	sp,fp
 1023d60:	df000017 	ldw	fp,0(sp)
 1023d64:	dec00104 	addi	sp,sp,4
 1023d68:	f800283a 	ret

01023d6c <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 1023d6c:	deffe604 	addi	sp,sp,-104
 1023d70:	dfc01915 	stw	ra,100(sp)
 1023d74:	df001815 	stw	fp,96(sp)
 1023d78:	df001804 	addi	fp,sp,96
 1023d7c:	e13ffc15 	stw	r4,-16(fp)
 1023d80:	e17ffd15 	stw	r5,-12(fp)
 1023d84:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
 1023d88:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
 1023d8c:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
 1023d90:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
 1023d94:	e13ffc17 	ldw	r4,-16(fp)
 1023d98:	10239c00 	call	10239c0 <get_dir_divider_location>
 1023d9c:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
 1023da0:	00012206 	br	102422c <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 1023da4:	00800804 	movi	r2,32
 1023da8:	e0bff805 	stb	r2,-32(fp)
 1023dac:	00800804 	movi	r2,32
 1023db0:	e0bff845 	stb	r2,-31(fp)
 1023db4:	00800804 	movi	r2,32
 1023db8:	e0bff885 	stb	r2,-30(fp)
 1023dbc:	00800804 	movi	r2,32
 1023dc0:	e0bff8c5 	stb	r2,-29(fp)
 1023dc4:	00800804 	movi	r2,32
 1023dc8:	e0bff905 	stb	r2,-28(fp)
 1023dcc:	00800804 	movi	r2,32
 1023dd0:	e0bff945 	stb	r2,-27(fp)
 1023dd4:	00800804 	movi	r2,32
 1023dd8:	e0bff985 	stb	r2,-26(fp)
 1023ddc:	00800804 	movi	r2,32
 1023de0:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
 1023de4:	00800804 	movi	r2,32
 1023de8:	e0bffa05 	stb	r2,-24(fp)
 1023dec:	00800804 	movi	r2,32
 1023df0:	e0bffa45 	stb	r2,-23(fp)
 1023df4:	00800804 	movi	r2,32
 1023df8:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
 1023dfc:	00bfffc4 	movi	r2,-1
 1023e00:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
 1023e04:	e0bff617 	ldw	r2,-40(fp)
 1023e08:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 1023e0c:	e03ff415 	stw	zero,-48(fp)
 1023e10:	00002e06 	br	1023ecc <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
 1023e14:	e0fff417 	ldw	r3,-48(fp)
 1023e18:	e0bff317 	ldw	r2,-52(fp)
 1023e1c:	1885883a 	add	r2,r3,r2
 1023e20:	1007883a 	mov	r3,r2
 1023e24:	e0bffc17 	ldw	r2,-16(fp)
 1023e28:	1885883a 	add	r2,r3,r2
 1023e2c:	10800003 	ldbu	r2,0(r2)
 1023e30:	10803fcc 	andi	r2,r2,255
 1023e34:	1080201c 	xori	r2,r2,128
 1023e38:	10bfe004 	addi	r2,r2,-128
 1023e3c:	10800b98 	cmpnei	r2,r2,46
 1023e40:	1000031e 	bne	r2,zero,1023e50 <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
 1023e44:	e0bff417 	ldw	r2,-48(fp)
 1023e48:	e0bff215 	stw	r2,-56(fp)
 1023e4c:	00001c06 	br	1023ec0 <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
 1023e50:	e0bff217 	ldw	r2,-56(fp)
 1023e54:	1004403a 	cmpge	r2,r2,zero
 1023e58:	10000c1e 	bne	r2,zero,1023e8c <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
 1023e5c:	e13ff417 	ldw	r4,-48(fp)
 1023e60:	e0fff417 	ldw	r3,-48(fp)
 1023e64:	e0bff317 	ldw	r2,-52(fp)
 1023e68:	1885883a 	add	r2,r3,r2
 1023e6c:	1007883a 	mov	r3,r2
 1023e70:	e0bffc17 	ldw	r2,-16(fp)
 1023e74:	1885883a 	add	r2,r3,r2
 1023e78:	10c00003 	ldbu	r3,0(r2)
 1023e7c:	e0bff804 	addi	r2,fp,-32
 1023e80:	1105883a 	add	r2,r2,r4
 1023e84:	10c00005 	stb	r3,0(r2)
 1023e88:	00000d06 	br	1023ec0 <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index] =
 1023e8c:	e0fff417 	ldw	r3,-48(fp)
 1023e90:	e0bff217 	ldw	r2,-56(fp)
 1023e94:	1889c83a 	sub	r4,r3,r2
 1023e98:	e0fff417 	ldw	r3,-48(fp)
 1023e9c:	e0bff317 	ldw	r2,-52(fp)
 1023ea0:	1885883a 	add	r2,r3,r2
 1023ea4:	1007883a 	mov	r3,r2
 1023ea8:	e0bffc17 	ldw	r2,-16(fp)
 1023eac:	1885883a 	add	r2,r3,r2
 1023eb0:	10c00003 	ldbu	r3,0(r2)
 1023eb4:	e0bffa04 	addi	r2,fp,-24
 1023eb8:	1105883a 	add	r2,r2,r4
 1023ebc:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 1023ec0:	e0bff417 	ldw	r2,-48(fp)
 1023ec4:	10800044 	addi	r2,r2,1
 1023ec8:	e0bff415 	stw	r2,-48(fp)
 1023ecc:	e0fff417 	ldw	r3,-48(fp)
 1023ed0:	e0bff517 	ldw	r2,-44(fp)
 1023ed4:	18bfcf16 	blt	r3,r2,1023e14 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index] =
						file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
 1023ed8:	e0bff617 	ldw	r2,-40(fp)
 1023edc:	1004c03a 	cmpne	r2,r2,zero
 1023ee0:	1000551e 	bne	r2,zero,1024038 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 1023ee4:	00804134 	movhi	r2,260
 1023ee8:	10a3a204 	addi	r2,r2,-29048
 1023eec:	1080050b 	ldhu	r2,20(r2)
 1023ef0:	10bfffcc 	andi	r2,r2,65535
 1023ef4:	1006917a 	slli	r3,r2,5
 1023ef8:	00804134 	movhi	r2,260
 1023efc:	10a3a204 	addi	r2,r2,-29048
 1023f00:	1080030b 	ldhu	r2,12(r2)
 1023f04:	10bfffcc 	andi	r2,r2,65535
 1023f08:	1885283a 	div	r2,r3,r2
 1023f0c:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
 1023f10:	e03fef15 	stw	zero,-68(fp)
 1023f14:	00003806 	br	1023ff8 <get_home_directory_cluster_for_file+0x28c>
					sector_index++) {
				if (Read_Sector_Data(
 1023f18:	00804134 	movhi	r2,260
 1023f1c:	10a3a204 	addi	r2,r2,-29048
 1023f20:	10c01317 	ldw	r3,76(r2)
 1023f24:	e0bfef17 	ldw	r2,-68(fp)
 1023f28:	1885883a 	add	r2,r3,r2
 1023f2c:	1009883a 	mov	r4,r2
 1023f30:	d1672917 	ldw	r5,-25436(gp)
 1023f34:	10225980 	call	1022598 <Read_Sector_Data>
 1023f38:	1005003a 	cmpeq	r2,r2,zero
 1023f3c:	1000311e 	bne	r2,zero,1024004 <get_home_directory_cluster_for_file+0x298>
						sector_index
								+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 1023f40:	e03fee15 	stw	zero,-72(fp)
 1023f44:	00002306 	br	1023fd4 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 1023f48:	e0bfee17 	ldw	r2,-72(fp)
 1023f4c:	1008917a 	slli	r4,r2,5
 1023f50:	e1ffef17 	ldw	r7,-68(fp)
 1023f54:	e17ffe17 	ldw	r5,-8(fp)
 1023f58:	000d883a 	mov	r6,zero
 1023f5c:	10229e00 	call	10229e0 <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
 1023f60:	e0bffe17 	ldw	r2,-8(fp)
 1023f64:	10800003 	ldbu	r2,0(r2)
 1023f68:	10803fcc 	andi	r2,r2,255
 1023f6c:	10803960 	cmpeqi	r2,r2,229
 1023f70:	1000151e 	bne	r2,zero,1023fc8 <get_home_directory_cluster_for_file+0x25c>
 1023f74:	e0bffe17 	ldw	r2,-8(fp)
 1023f78:	10800003 	ldbu	r2,0(r2)
 1023f7c:	10803fcc 	andi	r2,r2,255
 1023f80:	1005003a 	cmpeq	r2,r2,zero
 1023f84:	1000101e 	bne	r2,zero,1023fc8 <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 1023f88:	e17ff804 	addi	r5,fp,-32
 1023f8c:	e1bffa04 	addi	r6,fp,-24
 1023f90:	e13ffe17 	ldw	r4,-8(fp)
 1023f94:	1023a800 	call	1023a80 <match_file_record_to_name_ext>
 1023f98:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
 1023f9c:	e0bfed17 	ldw	r2,-76(fp)
 1023fa0:	1005003a 	cmpeq	r2,r2,zero
 1023fa4:	1000081e 	bne	r2,zero,1023fc8 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
 1023fa8:	e0bffe17 	ldw	r2,-8(fp)
 1023fac:	1080058b 	ldhu	r2,22(r2)
 1023fb0:	10bfffcc 	andi	r2,r2,65535
 1023fb4:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 1023fb8:	e0fffe17 	ldw	r3,-8(fp)
 1023fbc:	00800044 	movi	r2,1
 1023fc0:	18800a15 	stw	r2,40(r3)
								break;
 1023fc4:	00000606 	br	1023fe0 <get_home_directory_cluster_for_file+0x274>
						sector_index
								+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 1023fc8:	e0bfee17 	ldw	r2,-72(fp)
 1023fcc:	10800044 	addi	r2,r2,1
 1023fd0:	e0bfee15 	stw	r2,-72(fp)
 1023fd4:	e0bfee17 	ldw	r2,-72(fp)
 1023fd8:	10800410 	cmplti	r2,r2,16
 1023fdc:	103fda1e 	bne	r2,zero,1023f48 <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
 1023fe0:	e0fff117 	ldw	r3,-60(fp)
 1023fe4:	e0bff617 	ldw	r2,-40(fp)
 1023fe8:	1880061e 	bne	r3,r2,1024004 <get_home_directory_cluster_for_file+0x298>
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
					sector_index++) {
 1023fec:	e0bfef17 	ldw	r2,-68(fp)
 1023ff0:	10800044 	addi	r2,r2,1
 1023ff4:	e0bfef15 	stw	r2,-68(fp)
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
 1023ff8:	e0ffef17 	ldw	r3,-68(fp)
 1023ffc:	e0bff017 	ldw	r2,-64(fp)
 1024000:	18bfc516 	blt	r3,r2,1023f18 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
 1024004:	e0fff117 	ldw	r3,-60(fp)
 1024008:	e0bff617 	ldw	r2,-40(fp)
 102400c:	18800826 	beq	r3,r2,1024030 <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 1024010:	e0bff117 	ldw	r2,-60(fp)
 1024014:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 1024018:	e0fff317 	ldw	r3,-52(fp)
 102401c:	e0bff517 	ldw	r2,-44(fp)
 1024020:	1885883a 	add	r2,r3,r2
 1024024:	10800044 	addi	r2,r2,1
 1024028:	e0bff315 	stw	r2,-52(fp)
 102402c:	00007406 	br	1024200 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 1024030:	e03fff15 	stw	zero,-4(fp)
 1024034:	00008c06 	br	1024268 <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
 1024038:	e0bff617 	ldw	r2,-40(fp)
 102403c:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
 1024040:	e0bfec17 	ldw	r2,-80(fp)
 1024044:	10ffff84 	addi	r3,r2,-2
 1024048:	00804134 	movhi	r2,260
 102404c:	10a3a204 	addi	r2,r2,-29048
 1024050:	10800383 	ldbu	r2,14(r2)
 1024054:	10803fcc 	andi	r2,r2,255
 1024058:	1885383a 	mul	r2,r3,r2
 102405c:	1007883a 	mov	r3,r2
 1024060:	00804134 	movhi	r2,260
 1024064:	10a3a204 	addi	r2,r2,-29048
 1024068:	10801417 	ldw	r2,80(r2)
 102406c:	1885883a 	add	r2,r3,r2
 1024070:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0;
 1024074:	e03fea15 	stw	zero,-88(fp)
						sector_index < boot_sector_data.sectors_per_cluster;
 1024078:	00003206 	br	1024144 <get_home_directory_cluster_for_file+0x3d8>
						sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
 102407c:	e0ffea17 	ldw	r3,-88(fp)
 1024080:	e0bfeb17 	ldw	r2,-84(fp)
 1024084:	1889883a 	add	r4,r3,r2
 1024088:	d1672917 	ldw	r5,-25436(gp)
 102408c:	10225980 	call	1022598 <Read_Sector_Data>
 1024090:	1005003a 	cmpeq	r2,r2,zero
 1024094:	1000311e 	bne	r2,zero,102415c <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
 1024098:	e03fe915 	stw	zero,-92(fp)
 102409c:	00002006 	br	1024120 <get_home_directory_cluster_for_file+0x3b4>
								file_counter++) {
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
 10240a0:	e0bfe917 	ldw	r2,-92(fp)
 10240a4:	1008917a 	slli	r4,r2,5
 10240a8:	e1bfec17 	ldw	r6,-80(fp)
 10240ac:	e1ffea17 	ldw	r7,-88(fp)
 10240b0:	e17ffe17 	ldw	r5,-8(fp)
 10240b4:	10229e00 	call	10229e0 <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
 10240b8:	e0bffe17 	ldw	r2,-8(fp)
 10240bc:	10800003 	ldbu	r2,0(r2)
 10240c0:	10803fcc 	andi	r2,r2,255
 10240c4:	10803960 	cmpeqi	r2,r2,229
 10240c8:	1000121e 	bne	r2,zero,1024114 <get_home_directory_cluster_for_file+0x3a8>
 10240cc:	e0bffe17 	ldw	r2,-8(fp)
 10240d0:	10800003 	ldbu	r2,0(r2)
 10240d4:	10803fcc 	andi	r2,r2,255
 10240d8:	1005003a 	cmpeq	r2,r2,zero
 10240dc:	10000d1e 	bne	r2,zero,1024114 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
 10240e0:	e17ff804 	addi	r5,fp,-32
 10240e4:	e1bffa04 	addi	r6,fp,-24
 10240e8:	e13ffe17 	ldw	r4,-8(fp)
 10240ec:	1023a800 	call	1023a80 <match_file_record_to_name_ext>
 10240f0:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
 10240f4:	e0bfe817 	ldw	r2,-96(fp)
 10240f8:	1005003a 	cmpeq	r2,r2,zero
 10240fc:	1000051e 	bne	r2,zero,1024114 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster =
 1024100:	e0bffe17 	ldw	r2,-8(fp)
 1024104:	1080058b 	ldhu	r2,22(r2)
 1024108:	10bfffcc 	andi	r2,r2,65535
 102410c:	e0bff115 	stw	r2,-60(fp)
											file_record->start_cluster_index;
									break;
 1024110:	00000606 	br	102412c <get_home_directory_cluster_for_file+0x3c0>
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
								file_counter++) {
 1024114:	e0bfe917 	ldw	r2,-92(fp)
 1024118:	10800044 	addi	r2,r2,1
 102411c:	e0bfe915 	stw	r2,-92(fp)
						sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
 1024120:	e0bfe917 	ldw	r2,-92(fp)
 1024124:	10800410 	cmplti	r2,r2,16
 1024128:	103fdd1e 	bne	r2,zero,10240a0 <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
 102412c:	e0fff117 	ldw	r3,-60(fp)
 1024130:	e0bff617 	ldw	r2,-40(fp)
 1024134:	1880091e 	bne	r3,r2,102415c <get_home_directory_cluster_for_file+0x3f0>
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0;
						sector_index < boot_sector_data.sectors_per_cluster;
						sector_index++) {
 1024138:	e0bfea17 	ldw	r2,-88(fp)
 102413c:	10800044 	addi	r2,r2,1
 1024140:	e0bfea15 	stw	r2,-88(fp)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0;
						sector_index < boot_sector_data.sectors_per_cluster;
 1024144:	00804134 	movhi	r2,260
 1024148:	10a3a204 	addi	r2,r2,-29048
 102414c:	10800383 	ldbu	r2,14(r2)
 1024150:	10c03fcc 	andi	r3,r2,255
 1024154:	e0bfea17 	ldw	r2,-88(fp)
 1024158:	10ffc816 	blt	r2,r3,102407c <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
 102415c:	e0fff117 	ldw	r3,-60(fp)
 1024160:	e0bff617 	ldw	r2,-40(fp)
 1024164:	1880131e 	bne	r3,r2,10241b4 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
 1024168:	e13ff117 	ldw	r4,-60(fp)
 102416c:	e17ffb04 	addi	r5,fp,-20
 1024170:	10226940 	call	1022694 <get_cluster_flag>
 1024174:	1005003a 	cmpeq	r2,r2,zero
 1024178:	10000c1e 	bne	r2,zero,10241ac <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 102417c:	e0bffb0b 	ldhu	r2,-20(fp)
 1024180:	10bfffcc 	andi	r2,r2,65535
 1024184:	10fffe0c 	andi	r3,r2,65528
 1024188:	00bffe14 	movui	r2,65528
 102418c:	1880021e 	bne	r3,r2,1024198 <get_home_directory_cluster_for_file+0x42c>
							return false;
 1024190:	e03fff15 	stw	zero,-4(fp)
 1024194:	00003406 	br	1024268 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 1024198:	e0bffb0b 	ldhu	r2,-20(fp)
 102419c:	10bfffcc 	andi	r2,r2,65535
 10241a0:	10bffe0c 	andi	r2,r2,65528
 10241a4:	e0bff115 	stw	r2,-60(fp)
 10241a8:	00000206 	br	10241b4 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
 10241ac:	e03fff15 	stw	zero,-4(fp)
 10241b0:	00002d06 	br	1024268 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
 10241b4:	e0ffec17 	ldw	r3,-80(fp)
 10241b8:	00bffdd4 	movui	r2,65527
 10241bc:	10c00316 	blt	r2,r3,10241cc <get_home_directory_cluster_for_file+0x460>
 10241c0:	e0fff117 	ldw	r3,-60(fp)
 10241c4:	e0bff617 	ldw	r2,-40(fp)
 10241c8:	18bf9d26 	beq	r3,r2,1024040 <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
 10241cc:	e0fff117 	ldw	r3,-60(fp)
 10241d0:	e0bff617 	ldw	r2,-40(fp)
 10241d4:	18800826 	beq	r3,r2,10241f8 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 10241d8:	e0bff117 	ldw	r2,-60(fp)
 10241dc:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 10241e0:	e0fff317 	ldw	r3,-52(fp)
 10241e4:	e0bff517 	ldw	r2,-44(fp)
 10241e8:	1885883a 	add	r2,r3,r2
 10241ec:	10800044 	addi	r2,r2,1
 10241f0:	e0bff315 	stw	r2,-52(fp)
 10241f4:	00000206 	br	1024200 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 10241f8:	e03fff15 	stw	zero,-4(fp)
 10241fc:	00001a06 	br	1024268 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
 1024200:	e0bff317 	ldw	r2,-52(fp)
 1024204:	1007883a 	mov	r3,r2
 1024208:	e0bffc17 	ldw	r2,-16(fp)
 102420c:	1889883a 	add	r4,r3,r2
 1024210:	10239c00 	call	10239c0 <get_dir_divider_location>
 1024214:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
 1024218:	e0bff517 	ldw	r2,-44(fp)
 102421c:	1004403a 	cmpge	r2,r2,zero
 1024220:	1000021e 	bne	r2,zero,102422c <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
 1024224:	00800044 	movi	r2,1
 1024228:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
 102422c:	e0bff517 	ldw	r2,-44(fp)
 1024230:	10800048 	cmpgei	r2,r2,1
 1024234:	103edb1e 	bne	r2,zero,1023da4 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
 1024238:	e0fffd17 	ldw	r3,-12(fp)
 102423c:	e0bff617 	ldw	r2,-40(fp)
 1024240:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
 1024244:	e0bff617 	ldw	r2,-40(fp)
 1024248:	1004c03a 	cmpne	r2,r2,zero
 102424c:	1000041e 	bne	r2,zero,1024260 <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
 1024250:	e0bffe17 	ldw	r2,-8(fp)
 1024254:	10000a15 	stw	zero,40(r2)
		result = true;
 1024258:	00800044 	movi	r2,1
 102425c:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
 1024260:	e0bff717 	ldw	r2,-36(fp)
 1024264:	e0bfff15 	stw	r2,-4(fp)
 1024268:	e0bfff17 	ldw	r2,-4(fp)
}
 102426c:	e037883a 	mov	sp,fp
 1024270:	dfc00117 	ldw	ra,4(sp)
 1024274:	df000017 	ldw	fp,0(sp)
 1024278:	dec00204 	addi	sp,sp,8
 102427c:	f800283a 	ret

01024280 <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 1024280:	deffe704 	addi	sp,sp,-100
 1024284:	dfc01815 	stw	ra,96(sp)
 1024288:	df001715 	stw	fp,92(sp)
 102428c:	df001704 	addi	fp,sp,92
 1024290:	e13ffc15 	stw	r4,-16(fp)
 1024294:	e17ffd15 	stw	r5,-12(fp)
 1024298:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
 102429c:	e13ffd17 	ldw	r4,-12(fp)
 10242a0:	10239c00 	call	10239c0 <get_dir_divider_location>
 10242a4:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
 10242a8:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 10242ac:	00800804 	movi	r2,32
 10242b0:	e0bff805 	stb	r2,-32(fp)
 10242b4:	00800804 	movi	r2,32
 10242b8:	e0bff845 	stb	r2,-31(fp)
 10242bc:	00800804 	movi	r2,32
 10242c0:	e0bff885 	stb	r2,-30(fp)
 10242c4:	00800804 	movi	r2,32
 10242c8:	e0bff8c5 	stb	r2,-29(fp)
 10242cc:	00800804 	movi	r2,32
 10242d0:	e0bff905 	stb	r2,-28(fp)
 10242d4:	00800804 	movi	r2,32
 10242d8:	e0bff945 	stb	r2,-27(fp)
 10242dc:	00800804 	movi	r2,32
 10242e0:	e0bff985 	stb	r2,-26(fp)
 10242e4:	00800804 	movi	r2,32
 10242e8:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
 10242ec:	00800804 	movi	r2,32
 10242f0:	e0bffa05 	stb	r2,-24(fp)
 10242f4:	00800804 	movi	r2,32
 10242f8:	e0bffa45 	stb	r2,-23(fp)
 10242fc:	00800804 	movi	r2,32
 1024300:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
 1024304:	00bfffc4 	movi	r2,-1
 1024308:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
 102430c:	e0bffc17 	ldw	r2,-16(fp)
 1024310:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
 1024314:	e13ffd17 	ldw	r4,-12(fp)
 1024318:	1015cfc0 	call	1015cfc <strlen>
 102431c:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
 1024320:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
 1024324:	00000b06 	br	1024354 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
 1024328:	e0fff617 	ldw	r3,-40(fp)
 102432c:	e0bff717 	ldw	r2,-36(fp)
 1024330:	1885883a 	add	r2,r3,r2
 1024334:	10800044 	addi	r2,r2,1
 1024338:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
 102433c:	e0bff617 	ldw	r2,-40(fp)
 1024340:	1007883a 	mov	r3,r2
 1024344:	e0bffd17 	ldw	r2,-12(fp)
 1024348:	1889883a 	add	r4,r3,r2
 102434c:	10239c00 	call	10239c0 <get_dir_divider_location>
 1024350:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
 1024354:	e0bff717 	ldw	r2,-36(fp)
 1024358:	10800048 	cmpgei	r2,r2,1
 102435c:	103ff21e 	bne	r2,zero,1024328 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 1024360:	e0bff617 	ldw	r2,-40(fp)
 1024364:	e0bff315 	stw	r2,-52(fp)
 1024368:	00002b06 	br	1024418 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
 102436c:	e0bff317 	ldw	r2,-52(fp)
 1024370:	1007883a 	mov	r3,r2
 1024374:	e0bffd17 	ldw	r2,-12(fp)
 1024378:	1885883a 	add	r2,r3,r2
 102437c:	10800003 	ldbu	r2,0(r2)
 1024380:	10803fcc 	andi	r2,r2,255
 1024384:	1080201c 	xori	r2,r2,128
 1024388:	10bfe004 	addi	r2,r2,-128
 102438c:	10800b98 	cmpnei	r2,r2,46
 1024390:	1000031e 	bne	r2,zero,10243a0 <find_file_in_directory+0x120>
			ext_index = index;
 1024394:	e0bff317 	ldw	r2,-52(fp)
 1024398:	e0bff515 	stw	r2,-44(fp)
 102439c:	00001b06 	br	102440c <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
 10243a0:	e0bff517 	ldw	r2,-44(fp)
 10243a4:	1004403a 	cmpge	r2,r2,zero
 10243a8:	10000c1e 	bne	r2,zero,10243dc <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
 10243ac:	e0fff317 	ldw	r3,-52(fp)
 10243b0:	e0bff617 	ldw	r2,-40(fp)
 10243b4:	1889c83a 	sub	r4,r3,r2
 10243b8:	e0bff317 	ldw	r2,-52(fp)
 10243bc:	1007883a 	mov	r3,r2
 10243c0:	e0bffd17 	ldw	r2,-12(fp)
 10243c4:	1885883a 	add	r2,r3,r2
 10243c8:	10c00003 	ldbu	r3,0(r2)
 10243cc:	e0bff804 	addi	r2,fp,-32
 10243d0:	1105883a 	add	r2,r2,r4
 10243d4:	10c00005 	stb	r3,0(r2)
 10243d8:	00000c06 	br	102440c <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
 10243dc:	e0fff317 	ldw	r3,-52(fp)
 10243e0:	e0bff517 	ldw	r2,-44(fp)
 10243e4:	1885c83a 	sub	r2,r3,r2
 10243e8:	113fffc4 	addi	r4,r2,-1
 10243ec:	e0bff317 	ldw	r2,-52(fp)
 10243f0:	1007883a 	mov	r3,r2
 10243f4:	e0bffd17 	ldw	r2,-12(fp)
 10243f8:	1885883a 	add	r2,r3,r2
 10243fc:	10c00003 	ldbu	r3,0(r2)
 1024400:	e0bffa04 	addi	r2,fp,-24
 1024404:	1105883a 	add	r2,r2,r4
 1024408:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 102440c:	e0bff317 	ldw	r2,-52(fp)
 1024410:	10800044 	addi	r2,r2,1
 1024414:	e0bff315 	stw	r2,-52(fp)
 1024418:	e0fff317 	ldw	r3,-52(fp)
 102441c:	e0bff217 	ldw	r2,-56(fp)
 1024420:	18bfd216 	blt	r3,r2,102436c <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
 1024424:	e0bffc17 	ldw	r2,-16(fp)
 1024428:	1004c03a 	cmpne	r2,r2,zero
 102442c:	1000441e 	bne	r2,zero,1024540 <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
 1024430:	00804134 	movhi	r2,260
 1024434:	10a3a204 	addi	r2,r2,-29048
 1024438:	1080050b 	ldhu	r2,20(r2)
 102443c:	10bfffcc 	andi	r2,r2,65535
 1024440:	1006917a 	slli	r3,r2,5
 1024444:	00804134 	movhi	r2,260
 1024448:	10a3a204 	addi	r2,r2,-29048
 102444c:	1080030b 	ldhu	r2,12(r2)
 1024450:	10bfffcc 	andi	r2,r2,65535
 1024454:	1885283a 	div	r2,r3,r2
 1024458:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
 102445c:	e03fef15 	stw	zero,-68(fp)
 1024460:	00003306 	br	1024530 <find_file_in_directory+0x2b0>
				sector_index++) {
			if (Read_Sector_Data(
 1024464:	00804134 	movhi	r2,260
 1024468:	10a3a204 	addi	r2,r2,-29048
 102446c:	10c01317 	ldw	r3,76(r2)
 1024470:	e0bfef17 	ldw	r2,-68(fp)
 1024474:	1885883a 	add	r2,r3,r2
 1024478:	1009883a 	mov	r4,r2
 102447c:	d1672917 	ldw	r5,-25436(gp)
 1024480:	10225980 	call	1022598 <Read_Sector_Data>
 1024484:	1005003a 	cmpeq	r2,r2,zero
 1024488:	10008e1e 	bne	r2,zero,10246c4 <find_file_in_directory+0x444>
					sector_index
							+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 102448c:	e03fee15 	stw	zero,-72(fp)
 1024490:	00001e06 	br	102450c <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
 1024494:	e0bfee17 	ldw	r2,-72(fp)
 1024498:	1008917a 	slli	r4,r2,5
 102449c:	e1ffef17 	ldw	r7,-68(fp)
 10244a0:	e17ffe17 	ldw	r5,-8(fp)
 10244a4:	000d883a 	mov	r6,zero
 10244a8:	10229e00 	call	10229e0 <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5)
 10244ac:	e0bffe17 	ldw	r2,-8(fp)
 10244b0:	10800003 	ldbu	r2,0(r2)
 10244b4:	10803fcc 	andi	r2,r2,255
 10244b8:	10803960 	cmpeqi	r2,r2,229
 10244bc:	1000101e 	bne	r2,zero,1024500 <find_file_in_directory+0x280>
 10244c0:	e0bffe17 	ldw	r2,-8(fp)
 10244c4:	10800003 	ldbu	r2,0(r2)
 10244c8:	10803fcc 	andi	r2,r2,255
 10244cc:	1005003a 	cmpeq	r2,r2,zero
 10244d0:	10000b1e 	bne	r2,zero,1024500 <find_file_in_directory+0x280>
							&& (file_record->name[0] != 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
 10244d4:	e17ff804 	addi	r5,fp,-32
 10244d8:	e1bffa04 	addi	r6,fp,-24
 10244dc:	e13ffe17 	ldw	r4,-8(fp)
 10244e0:	1023a800 	call	1023a80 <match_file_record_to_name_ext>
 10244e4:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
 10244e8:	e0bfed17 	ldw	r2,-76(fp)
 10244ec:	1005003a 	cmpeq	r2,r2,zero
 10244f0:	1000031e 	bne	r2,zero,1024500 <find_file_in_directory+0x280>
							result = true;
 10244f4:	00800044 	movi	r2,1
 10244f8:	e0bff115 	stw	r2,-60(fp)
							break;
 10244fc:	00000606 	br	1024518 <find_file_in_directory+0x298>
					sector_index
							+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1024500:	e0bfee17 	ldw	r2,-72(fp)
 1024504:	10800044 	addi	r2,r2,1
 1024508:	e0bfee15 	stw	r2,-72(fp)
 102450c:	e0bfee17 	ldw	r2,-72(fp)
 1024510:	10800410 	cmplti	r2,r2,16
 1024514:	103fdf1e 	bne	r2,zero,1024494 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
 1024518:	e0bff117 	ldw	r2,-60(fp)
 102451c:	1004c03a 	cmpne	r2,r2,zero
 1024520:	1000681e 	bne	r2,zero,10246c4 <find_file_in_directory+0x444>
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
				sector_index++) {
 1024524:	e0bfef17 	ldw	r2,-68(fp)
 1024528:	10800044 	addi	r2,r2,1
 102452c:	e0bfef15 	stw	r2,-68(fp)
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
 1024530:	e0ffef17 	ldw	r3,-68(fp)
 1024534:	e0bff017 	ldw	r2,-64(fp)
 1024538:	18bfca16 	blt	r3,r2,1024464 <find_file_in_directory+0x1e4>
 102453c:	00006106 	br	10246c4 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
 1024540:	e0bff417 	ldw	r2,-48(fp)
 1024544:	10ffff84 	addi	r3,r2,-2
 1024548:	00804134 	movhi	r2,260
 102454c:	10a3a204 	addi	r2,r2,-29048
 1024550:	10800383 	ldbu	r2,14(r2)
 1024554:	10803fcc 	andi	r2,r2,255
 1024558:	1885383a 	mul	r2,r3,r2
 102455c:	1007883a 	mov	r3,r2
 1024560:	00804134 	movhi	r2,260
 1024564:	10a3a204 	addi	r2,r2,-29048
 1024568:	10801417 	ldw	r2,80(r2)
 102456c:	1885883a 	add	r2,r3,r2
 1024570:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0;
 1024574:	e03feb15 	stw	zero,-84(fp)
					sector_index < boot_sector_data.sectors_per_cluster;
 1024578:	00003006 	br	102463c <find_file_in_directory+0x3bc>
					sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
 102457c:	e0ffeb17 	ldw	r3,-84(fp)
 1024580:	e0bfec17 	ldw	r2,-80(fp)
 1024584:	1889883a 	add	r4,r3,r2
 1024588:	d1672917 	ldw	r5,-25436(gp)
 102458c:	10225980 	call	1022598 <Read_Sector_Data>
 1024590:	1005003a 	cmpeq	r2,r2,zero
 1024594:	10002f1e 	bne	r2,zero,1024654 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 1024598:	e03fea15 	stw	zero,-88(fp)
 102459c:	00001e06 	br	1024618 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 10245a0:	e0bfea17 	ldw	r2,-88(fp)
 10245a4:	1008917a 	slli	r4,r2,5
 10245a8:	e1bff417 	ldw	r6,-48(fp)
 10245ac:	e1ffeb17 	ldw	r7,-84(fp)
 10245b0:	e17ffe17 	ldw	r5,-8(fp)
 10245b4:	10229e00 	call	10229e0 <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
 10245b8:	e0bffe17 	ldw	r2,-8(fp)
 10245bc:	10800003 	ldbu	r2,0(r2)
 10245c0:	10803fcc 	andi	r2,r2,255
 10245c4:	10803960 	cmpeqi	r2,r2,229
 10245c8:	1000101e 	bne	r2,zero,102460c <find_file_in_directory+0x38c>
 10245cc:	e0bffe17 	ldw	r2,-8(fp)
 10245d0:	10800003 	ldbu	r2,0(r2)
 10245d4:	10803fcc 	andi	r2,r2,255
 10245d8:	1005003a 	cmpeq	r2,r2,zero
 10245dc:	10000b1e 	bne	r2,zero,102460c <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 10245e0:	e17ff804 	addi	r5,fp,-32
 10245e4:	e1bffa04 	addi	r6,fp,-24
 10245e8:	e13ffe17 	ldw	r4,-8(fp)
 10245ec:	1023a800 	call	1023a80 <match_file_record_to_name_ext>
 10245f0:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
 10245f4:	e0bfe917 	ldw	r2,-92(fp)
 10245f8:	1005003a 	cmpeq	r2,r2,zero
 10245fc:	1000031e 	bne	r2,zero,102460c <find_file_in_directory+0x38c>
								result = true;
 1024600:	00800044 	movi	r2,1
 1024604:	e0bff115 	stw	r2,-60(fp)
								break;
 1024608:	00000606 	br	1024624 <find_file_in_directory+0x3a4>
					sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 102460c:	e0bfea17 	ldw	r2,-88(fp)
 1024610:	10800044 	addi	r2,r2,1
 1024614:	e0bfea15 	stw	r2,-88(fp)
 1024618:	e0bfea17 	ldw	r2,-88(fp)
 102461c:	10800410 	cmplti	r2,r2,16
 1024620:	103fdf1e 	bne	r2,zero,10245a0 <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
 1024624:	e0bff117 	ldw	r2,-60(fp)
 1024628:	1004c03a 	cmpne	r2,r2,zero
 102462c:	1000091e 	bne	r2,zero,1024654 <find_file_in_directory+0x3d4>
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0;
					sector_index < boot_sector_data.sectors_per_cluster;
					sector_index++) {
 1024630:	e0bfeb17 	ldw	r2,-84(fp)
 1024634:	10800044 	addi	r2,r2,1
 1024638:	e0bfeb15 	stw	r2,-84(fp)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0;
					sector_index < boot_sector_data.sectors_per_cluster;
 102463c:	00804134 	movhi	r2,260
 1024640:	10a3a204 	addi	r2,r2,-29048
 1024644:	10800383 	ldbu	r2,14(r2)
 1024648:	10c03fcc 	andi	r3,r2,255
 102464c:	e0bfeb17 	ldw	r2,-84(fp)
 1024650:	10ffca16 	blt	r2,r3,102457c <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
 1024654:	e0bff117 	ldw	r2,-60(fp)
 1024658:	1004c03a 	cmpne	r2,r2,zero
 102465c:	1000131e 	bne	r2,zero,10246ac <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
 1024660:	e13ff417 	ldw	r4,-48(fp)
 1024664:	e17ffb04 	addi	r5,fp,-20
 1024668:	10226940 	call	1022694 <get_cluster_flag>
 102466c:	1005003a 	cmpeq	r2,r2,zero
 1024670:	10000c1e 	bne	r2,zero,10246a4 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 1024674:	e0bffb0b 	ldhu	r2,-20(fp)
 1024678:	10bfffcc 	andi	r2,r2,65535
 102467c:	10fffe0c 	andi	r3,r2,65528
 1024680:	00bffe14 	movui	r2,65528
 1024684:	1880021e 	bne	r3,r2,1024690 <find_file_in_directory+0x410>
						return false;
 1024688:	e03fff15 	stw	zero,-4(fp)
 102468c:	00000f06 	br	10246cc <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
 1024690:	e0bffb0b 	ldhu	r2,-20(fp)
 1024694:	10bfffcc 	andi	r2,r2,65535
 1024698:	10bffe0c 	andi	r2,r2,65528
 102469c:	e0bff415 	stw	r2,-48(fp)
 10246a0:	00000206 	br	10246ac <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
 10246a4:	e03fff15 	stw	zero,-4(fp)
 10246a8:	00000806 	br	10246cc <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
 10246ac:	e0fff417 	ldw	r3,-48(fp)
 10246b0:	00bffdd4 	movui	r2,65527
 10246b4:	10c00316 	blt	r2,r3,10246c4 <find_file_in_directory+0x444>
 10246b8:	e0bff117 	ldw	r2,-60(fp)
 10246bc:	1005003a 	cmpeq	r2,r2,zero
 10246c0:	103f9f1e 	bne	r2,zero,1024540 <find_file_in_directory+0x2c0>
	}

	return result;
 10246c4:	e0bff117 	ldw	r2,-60(fp)
 10246c8:	e0bfff15 	stw	r2,-4(fp)
 10246cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10246d0:	e037883a 	mov	sp,fp
 10246d4:	dfc00117 	ldw	ra,4(sp)
 10246d8:	df000017 	ldw	fp,0(sp)
 10246dc:	dec00204 	addi	sp,sp,8
 10246e0:	f800283a 	ret

010246e4 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 10246e4:	defff504 	addi	sp,sp,-44
 10246e8:	dfc00a15 	stw	ra,40(sp)
 10246ec:	df000915 	stw	fp,36(sp)
 10246f0:	df000904 	addi	fp,sp,36
 10246f4:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
 10246f8:	00804134 	movhi	r2,260
 10246fc:	10a3a204 	addi	r2,r2,-29048
 1024700:	10801117 	ldw	r2,68(r2)
 1024704:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
 1024708:	00800084 	movi	r2,2
 102470c:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
 1024710:	00bfffc4 	movi	r2,-1
 1024714:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
 1024718:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
 102471c:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 1024720:	00804134 	movhi	r2,260
 1024724:	10a3a204 	addi	r2,r2,-29048
 1024728:	10801417 	ldw	r2,80(r2)
 102472c:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 1024730:	00804134 	movhi	r2,260
 1024734:	10a3a204 	addi	r2,r2,-29048
 1024738:	1080058b 	ldhu	r2,22(r2)
 102473c:	10bfffcc 	andi	r2,r2,65535
 1024740:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
 1024744:	00804134 	movhi	r2,260
 1024748:	10a3a204 	addi	r2,r2,-29048
 102474c:	10800917 	ldw	r2,36(r2)
 1024750:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
 1024754:	e0fff817 	ldw	r3,-32(fp)
 1024758:	e0bff717 	ldw	r2,-36(fp)
 102475c:	10c00b2e 	bgeu	r2,r3,102478c <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
 1024760:	e0fff817 	ldw	r3,-32(fp)
 1024764:	e0bff917 	ldw	r2,-28(fp)
 1024768:	1887c83a 	sub	r3,r3,r2
 102476c:	00804134 	movhi	r2,260
 1024770:	10a3a204 	addi	r2,r2,-29048
 1024774:	10800383 	ldbu	r2,14(r2)
 1024778:	10803fcc 	andi	r2,r2,255
 102477c:	1885203a 	divu	r2,r3,r2
 1024780:	10800044 	addi	r2,r2,1
 1024784:	e0bffa15 	stw	r2,-24(fp)
 1024788:	00002906 	br	1024830 <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
 102478c:	e0fff717 	ldw	r3,-36(fp)
 1024790:	e0bff917 	ldw	r2,-28(fp)
 1024794:	1887c83a 	sub	r3,r3,r2
 1024798:	00804134 	movhi	r2,260
 102479c:	10a3a204 	addi	r2,r2,-29048
 10247a0:	10800383 	ldbu	r2,14(r2)
 10247a4:	10803fcc 	andi	r2,r2,255
 10247a8:	1885203a 	divu	r2,r3,r2
 10247ac:	10800044 	addi	r2,r2,1
 10247b0:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 10247b4:	00001e06 	br	1024830 <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector,
 10247b8:	e13ffe17 	ldw	r4,-8(fp)
 10247bc:	d1672917 	ldw	r5,-25436(gp)
 10247c0:	10225980 	call	1022598 <Read_Sector_Data>
 10247c4:	1005003a 	cmpeq	r2,r2,zero
 10247c8:	1000131e 	bne	r2,zero,1024818 <find_first_empty_cluster+0x134>
				fat_partition_offset_in_512_byte_sectors)) {
			do {
				cluster =
 10247cc:	d0a72b17 	ldw	r2,-25428(gp)
 10247d0:	10800a17 	ldw	r2,40(r2)
 10247d4:	1007883a 	mov	r3,r2
 10247d8:	e0bffd17 	ldw	r2,-12(fp)
 10247dc:	10803fcc 	andi	r2,r2,255
 10247e0:	1085883a 	add	r2,r2,r2
 10247e4:	1885883a 	add	r2,r3,r2
 10247e8:	1080002b 	ldhuio	r2,0(r2)
 10247ec:	e0bffc0d 	sth	r2,-16(fp)
						((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
 10247f0:	e0bffc0f 	ldh	r2,-16(fp)
 10247f4:	1005003a 	cmpeq	r2,r2,zero
 10247f8:	1000071e 	bne	r2,zero,1024818 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
 10247fc:	e0bffd17 	ldw	r2,-12(fp)
 1024800:	10800044 	addi	r2,r2,1
 1024804:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
 1024808:	e0bffd17 	ldw	r2,-12(fp)
 102480c:	10803fcc 	andi	r2,r2,255
 1024810:	1004c03a 	cmpne	r2,r2,zero
 1024814:	103fed1e 	bne	r2,zero,10247cc <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
 1024818:	e0bffc0f 	ldh	r2,-16(fp)
 102481c:	1005003a 	cmpeq	r2,r2,zero
 1024820:	1000081e 	bne	r2,zero,1024844 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
 1024824:	e0bffe17 	ldw	r2,-8(fp)
 1024828:	10800044 	addi	r2,r2,1
 102482c:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 1024830:	00804134 	movhi	r2,260
 1024834:	10a3a204 	addi	r2,r2,-29048
 1024838:	10c01217 	ldw	r3,72(r2)
 102483c:	e0bffe17 	ldw	r2,-8(fp)
 1024840:	18bfdd1e 	bne	r3,r2,10247b8 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
 1024844:	e0bffc0f 	ldh	r2,-16(fp)
 1024848:	1004c03a 	cmpne	r2,r2,zero
 102484c:	1000081e 	bne	r2,zero,1024870 <find_first_empty_cluster+0x18c>
 1024850:	e0fffc0f 	ldh	r3,-16(fp)
 1024854:	e0bffa17 	ldw	r2,-24(fp)
 1024858:	10c00536 	bltu	r2,r3,1024870 <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
 102485c:	e0bfff17 	ldw	r2,-4(fp)
 1024860:	e0fffd17 	ldw	r3,-12(fp)
 1024864:	10c00015 	stw	r3,0(r2)
		result = true;
 1024868:	00800044 	movi	r2,1
 102486c:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 1024870:	e0bffb17 	ldw	r2,-20(fp)
}
 1024874:	e037883a 	mov	sp,fp
 1024878:	dfc00117 	ldw	ra,4(sp)
 102487c:	df000017 	ldw	fp,0(sp)
 1024880:	dec00204 	addi	sp,sp,8
 1024884:	f800283a 	ret

01024888 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 1024888:	defff404 	addi	sp,sp,-48
 102488c:	dfc00b15 	stw	ra,44(sp)
 1024890:	df000a15 	stw	fp,40(sp)
 1024894:	df000a04 	addi	fp,sp,40
 1024898:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
 102489c:	00bfffc4 	movi	r2,-1
 10248a0:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
 10248a4:	e0bffe17 	ldw	r2,-8(fp)
 10248a8:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
 10248ac:	e0bffa17 	ldw	r2,-24(fp)
 10248b0:	10ffff84 	addi	r3,r2,-2
 10248b4:	00804134 	movhi	r2,260
 10248b8:	10a3a204 	addi	r2,r2,-29048
 10248bc:	10800383 	ldbu	r2,14(r2)
 10248c0:	10803fcc 	andi	r2,r2,255
 10248c4:	1885383a 	mul	r2,r3,r2
 10248c8:	1007883a 	mov	r3,r2
 10248cc:	00804134 	movhi	r2,260
 10248d0:	10a3a204 	addi	r2,r2,-29048
 10248d4:	10801417 	ldw	r2,80(r2)
 10248d8:	1885883a 	add	r2,r3,r2
 10248dc:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0;
 10248e0:	e03ff815 	stw	zero,-32(fp)
				sector_index < boot_sector_data.sectors_per_cluster;
 10248e4:	00002c06 	br	1024998 <find_first_empty_record_in_a_subdirectory+0x110>
				sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
 10248e8:	e0fff817 	ldw	r3,-32(fp)
 10248ec:	e0bff917 	ldw	r2,-28(fp)
 10248f0:	1889883a 	add	r4,r3,r2
 10248f4:	d1672917 	ldw	r5,-25436(gp)
 10248f8:	10225980 	call	1022598 <Read_Sector_Data>
 10248fc:	1005003a 	cmpeq	r2,r2,zero
 1024900:	10002b1e 	bne	r2,zero,10249b0 <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1024904:	e03ff715 	stw	zero,-36(fp)
 1024908:	00001d06 	br	1024980 <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char =
 102490c:	d0a72b17 	ldw	r2,-25428(gp)
 1024910:	10800a17 	ldw	r2,40(r2)
 1024914:	1007883a 	mov	r3,r2
 1024918:	e0bff717 	ldw	r2,-36(fp)
 102491c:	1004917a 	slli	r2,r2,5
 1024920:	1885883a 	add	r2,r3,r2
 1024924:	10800023 	ldbuio	r2,0(r2)
 1024928:	10803fcc 	andi	r2,r2,255
 102492c:	e0bff60d 	sth	r2,-40(fp)
							((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
 1024930:	e0bff60b 	ldhu	r2,-40(fp)
 1024934:	10803960 	cmpeqi	r2,r2,229
 1024938:	1000031e 	bne	r2,zero,1024948 <find_first_empty_record_in_a_subdirectory+0xc0>
 102493c:	e0bff60b 	ldhu	r2,-40(fp)
 1024940:	1004c03a 	cmpne	r2,r2,zero
 1024944:	10000b1e 	bne	r2,zero,1024974 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
 1024948:	e0bff817 	ldw	r2,-32(fp)
 102494c:	1006913a 	slli	r3,r2,4
 1024950:	e0bff717 	ldw	r2,-36(fp)
 1024954:	1885883a 	add	r2,r3,r2
 1024958:	1006943a 	slli	r3,r2,16
 102495c:	e0bffa17 	ldw	r2,-24(fp)
 1024960:	1884b03a 	or	r2,r3,r2
 1024964:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
 1024968:	e0bffb17 	ldw	r2,-20(fp)
 102496c:	e0bfff15 	stw	r2,-4(fp)
 1024970:	00005206 	br	1024abc <find_first_empty_record_in_a_subdirectory+0x234>
				sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1024974:	e0bff717 	ldw	r2,-36(fp)
 1024978:	10800044 	addi	r2,r2,1
 102497c:	e0bff715 	stw	r2,-36(fp)
 1024980:	e0bff717 	ldw	r2,-36(fp)
 1024984:	10800410 	cmplti	r2,r2,16
 1024988:	103fe01e 	bne	r2,zero,102490c <find_first_empty_record_in_a_subdirectory+0x84>
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0;
				sector_index < boot_sector_data.sectors_per_cluster;
				sector_index++) {
 102498c:	e0bff817 	ldw	r2,-32(fp)
 1024990:	10800044 	addi	r2,r2,1
 1024994:	e0bff815 	stw	r2,-32(fp)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0;
				sector_index < boot_sector_data.sectors_per_cluster;
 1024998:	00804134 	movhi	r2,260
 102499c:	10a3a204 	addi	r2,r2,-29048
 10249a0:	10800383 	ldbu	r2,14(r2)
 10249a4:	10c03fcc 	andi	r3,r2,255
 10249a8:	e0bff817 	ldw	r2,-32(fp)
 10249ac:	10ffce16 	blt	r2,r3,10248e8 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
 10249b0:	e0bffb17 	ldw	r2,-20(fp)
 10249b4:	1004403a 	cmpge	r2,r2,zero
 10249b8:	1000381e 	bne	r2,zero,1024a9c <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
 10249bc:	e13ffa17 	ldw	r4,-24(fp)
 10249c0:	e17ffc04 	addi	r5,fp,-16
 10249c4:	10226940 	call	1022694 <get_cluster_flag>
 10249c8:	1005003a 	cmpeq	r2,r2,zero
 10249cc:	1000311e 	bne	r2,zero,1024a94 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 10249d0:	e0bffc0b 	ldhu	r2,-16(fp)
 10249d4:	10bfffcc 	andi	r2,r2,65535
 10249d8:	10fffe0c 	andi	r3,r2,65528
 10249dc:	00bffe14 	movui	r2,65528
 10249e0:	18802e1e 	bne	r3,r2,1024a9c <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
 10249e4:	e13ffd04 	addi	r4,fp,-12
 10249e8:	10246e40 	call	10246e4 <find_first_empty_cluster>
 10249ec:	1005003a 	cmpeq	r2,r2,zero
 10249f0:	1000231e 	bne	r2,zero,1024a80 <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
 10249f4:	e13ffa17 	ldw	r4,-24(fp)
 10249f8:	e0bffd17 	ldw	r2,-12(fp)
 10249fc:	117fffcc 	andi	r5,r2,65535
 1024a00:	2960001c 	xori	r5,r5,32768
 1024a04:	29600004 	addi	r5,r5,-32768
 1024a08:	01800044 	movi	r6,1
 1024a0c:	102274c0 	call	102274c <mark_cluster>
 1024a10:	1005003a 	cmpeq	r2,r2,zero
 1024a14:	10001a1e 	bne	r2,zero,1024a80 <find_first_empty_record_in_a_subdirectory+0x1f8>
 1024a18:	e0bffd17 	ldw	r2,-12(fp)
 1024a1c:	1009883a 	mov	r4,r2
 1024a20:	017fffc4 	movi	r5,-1
 1024a24:	01800044 	movi	r6,1
 1024a28:	102274c0 	call	102274c <mark_cluster>
 1024a2c:	1005003a 	cmpeq	r2,r2,zero
 1024a30:	1000131e 	bne	r2,zero,1024a80 <find_first_empty_record_in_a_subdirectory+0x1f8>
 1024a34:	e13ffa17 	ldw	r4,-24(fp)
 1024a38:	e0bffd17 	ldw	r2,-12(fp)
 1024a3c:	117fffcc 	andi	r5,r2,65535
 1024a40:	2960001c 	xori	r5,r5,32768
 1024a44:	29600004 	addi	r5,r5,-32768
 1024a48:	000d883a 	mov	r6,zero
 1024a4c:	102274c0 	call	102274c <mark_cluster>
 1024a50:	1005003a 	cmpeq	r2,r2,zero
 1024a54:	10000a1e 	bne	r2,zero,1024a80 <find_first_empty_record_in_a_subdirectory+0x1f8>
 1024a58:	e0bffd17 	ldw	r2,-12(fp)
 1024a5c:	1009883a 	mov	r4,r2
 1024a60:	017fffc4 	movi	r5,-1
 1024a64:	000d883a 	mov	r6,zero
 1024a68:	102274c0 	call	102274c <mark_cluster>
 1024a6c:	1005003a 	cmpeq	r2,r2,zero
 1024a70:	1000031e 	bne	r2,zero,1024a80 <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
 1024a74:	10225480 	call	1022548 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
 1024a78:	e0bffd17 	ldw	r2,-12(fp)
 1024a7c:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 1024a80:	e0bffc0b 	ldhu	r2,-16(fp)
 1024a84:	10bfffcc 	andi	r2,r2,65535
 1024a88:	10bffe0c 	andi	r2,r2,65528
 1024a8c:	e0bffa15 	stw	r2,-24(fp)
 1024a90:	00000206 	br	1024a9c <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
 1024a94:	00bfffc4 	movi	r2,-1
 1024a98:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
 1024a9c:	e0fffa17 	ldw	r3,-24(fp)
 1024aa0:	00bffdd4 	movui	r2,65527
 1024aa4:	10c00316 	blt	r2,r3,1024ab4 <find_first_empty_record_in_a_subdirectory+0x22c>
 1024aa8:	e0bffb17 	ldw	r2,-20(fp)
 1024aac:	10bfffe0 	cmpeqi	r2,r2,-1
 1024ab0:	103f7e1e 	bne	r2,zero,10248ac <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
 1024ab4:	e0bffb17 	ldw	r2,-20(fp)
 1024ab8:	e0bfff15 	stw	r2,-4(fp)
 1024abc:	e0bfff17 	ldw	r2,-4(fp)
}
 1024ac0:	e037883a 	mov	sp,fp
 1024ac4:	dfc00117 	ldw	ra,4(sp)
 1024ac8:	df000017 	ldw	fp,0(sp)
 1024acc:	dec00204 	addi	sp,sp,8
 1024ad0:	f800283a 	ret

01024ad4 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 1024ad4:	defff804 	addi	sp,sp,-32
 1024ad8:	dfc00715 	stw	ra,28(sp)
 1024adc:	df000615 	stw	fp,24(sp)
 1024ae0:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors =
			((32 * boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 1024ae4:	00804134 	movhi	r2,260
 1024ae8:	10a3a204 	addi	r2,r2,-29048
 1024aec:	1080050b 	ldhu	r2,20(r2)
 1024af0:	10bfffcc 	andi	r2,r2,65535
 1024af4:	1006917a 	slli	r3,r2,5
 1024af8:	00804134 	movhi	r2,260
 1024afc:	10a3a204 	addi	r2,r2,-29048
 1024b00:	1080030b 	ldhu	r2,12(r2)
 1024b04:	10bfffcc 	andi	r2,r2,65535
 1024b08:	1885283a 	div	r2,r3,r2
 1024b0c:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
 1024b10:	00bfffc4 	movi	r2,-1
 1024b14:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors;
 1024b18:	e03ffd15 	stw	zero,-12(fp)
 1024b1c:	00002d06 	br	1024bd4 <find_first_empty_record_in_root_directory+0x100>
			sector_index++) {
		if (Read_Sector_Data(
 1024b20:	00804134 	movhi	r2,260
 1024b24:	10a3a204 	addi	r2,r2,-29048
 1024b28:	10c01317 	ldw	r3,76(r2)
 1024b2c:	e0bffd17 	ldw	r2,-12(fp)
 1024b30:	1885883a 	add	r2,r3,r2
 1024b34:	1009883a 	mov	r4,r2
 1024b38:	d1672917 	ldw	r5,-25436(gp)
 1024b3c:	10225980 	call	1022598 <Read_Sector_Data>
 1024b40:	1005003a 	cmpeq	r2,r2,zero
 1024b44:	1000261e 	bne	r2,zero,1024be0 <find_first_empty_record_in_root_directory+0x10c>
				sector_index + boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 1024b48:	e03ffb15 	stw	zero,-20(fp)
 1024b4c:	00001b06 	br	1024bbc <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char =
 1024b50:	d0a72b17 	ldw	r2,-25428(gp)
 1024b54:	10800a17 	ldw	r2,40(r2)
 1024b58:	1007883a 	mov	r3,r2
 1024b5c:	e0bffb17 	ldw	r2,-20(fp)
 1024b60:	1004917a 	slli	r2,r2,5
 1024b64:	1885883a 	add	r2,r3,r2
 1024b68:	10800023 	ldbuio	r2,0(r2)
 1024b6c:	10803fcc 	andi	r2,r2,255
 1024b70:	e0bffa0d 	sth	r2,-24(fp)
						((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
 1024b74:	e0bffa0b 	ldhu	r2,-24(fp)
 1024b78:	10803960 	cmpeqi	r2,r2,229
 1024b7c:	1000031e 	bne	r2,zero,1024b8c <find_first_empty_record_in_root_directory+0xb8>
 1024b80:	e0bffa0b 	ldhu	r2,-24(fp)
 1024b84:	1004c03a 	cmpne	r2,r2,zero
 1024b88:	1000091e 	bne	r2,zero,1024bb0 <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
 1024b8c:	e0bffd17 	ldw	r2,-12(fp)
 1024b90:	1006913a 	slli	r3,r2,4
 1024b94:	e0bffb17 	ldw	r2,-20(fp)
 1024b98:	1885883a 	add	r2,r3,r2
 1024b9c:	1004943a 	slli	r2,r2,16
 1024ba0:	e0bffc15 	stw	r2,-16(fp)
					return result;
 1024ba4:	e0bffc17 	ldw	r2,-16(fp)
 1024ba8:	e0bfff15 	stw	r2,-4(fp)
 1024bac:	00000e06 	br	1024be8 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(
				sector_index + boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 1024bb0:	e0bffb17 	ldw	r2,-20(fp)
 1024bb4:	10800044 	addi	r2,r2,1
 1024bb8:	e0bffb15 	stw	r2,-20(fp)
 1024bbc:	e0bffb17 	ldw	r2,-20(fp)
 1024bc0:	10800410 	cmplti	r2,r2,16
 1024bc4:	103fe21e 	bne	r2,zero,1024b50 <find_first_empty_record_in_root_directory+0x7c>
					/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors;
			sector_index++) {
 1024bc8:	e0bffd17 	ldw	r2,-12(fp)
 1024bcc:	10800044 	addi	r2,r2,1
 1024bd0:	e0bffd15 	stw	r2,-12(fp)
			((32 * boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors;
 1024bd4:	e0fffd17 	ldw	r3,-12(fp)
 1024bd8:	e0bffe17 	ldw	r2,-8(fp)
 1024bdc:	18bfd016 	blt	r3,r2,1024b20 <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
 1024be0:	e0bffc17 	ldw	r2,-16(fp)
 1024be4:	e0bfff15 	stw	r2,-4(fp)
 1024be8:	e0bfff17 	ldw	r2,-4(fp)
}
 1024bec:	e037883a 	mov	sp,fp
 1024bf0:	dfc00117 	ldw	ra,4(sp)
 1024bf4:	df000017 	ldw	fp,0(sp)
 1024bf8:	dec00204 	addi	sp,sp,8
 1024bfc:	f800283a 	ret

01024c00 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
 1024c00:	defffa04 	addi	sp,sp,-24
 1024c04:	df000515 	stw	fp,20(sp)
 1024c08:	df000504 	addi	fp,sp,20
 1024c0c:	e13ffd15 	stw	r4,-12(fp)
 1024c10:	e17ffe15 	stw	r5,-8(fp)
 1024c14:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
 1024c18:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
 1024c1c:	e03ffc15 	stw	zero,-16(fp)
 1024c20:	00002b06 	br	1024cd0 <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
 1024c24:	e0bffb17 	ldw	r2,-20(fp)
 1024c28:	1007883a 	mov	r3,r2
 1024c2c:	e0bffd17 	ldw	r2,-12(fp)
 1024c30:	1885883a 	add	r2,r3,r2
 1024c34:	10800003 	ldbu	r2,0(r2)
 1024c38:	10803fcc 	andi	r2,r2,255
 1024c3c:	1080201c 	xori	r2,r2,128
 1024c40:	10bfe004 	addi	r2,r2,-128
 1024c44:	10800ba0 	cmpeqi	r2,r2,46
 1024c48:	1000181e 	bne	r2,zero,1024cac <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
 1024c4c:	e0bffc17 	ldw	r2,-16(fp)
 1024c50:	1007883a 	mov	r3,r2
 1024c54:	e0bffe17 	ldw	r2,-8(fp)
 1024c58:	1889883a 	add	r4,r3,r2
 1024c5c:	e0bffb17 	ldw	r2,-20(fp)
 1024c60:	1007883a 	mov	r3,r2
 1024c64:	e0bffd17 	ldw	r2,-12(fp)
 1024c68:	1885883a 	add	r2,r3,r2
 1024c6c:	10800003 	ldbu	r2,0(r2)
 1024c70:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
 1024c74:	e0bffb17 	ldw	r2,-20(fp)
 1024c78:	1007883a 	mov	r3,r2
 1024c7c:	e0bffd17 	ldw	r2,-12(fp)
 1024c80:	1885883a 	add	r2,r3,r2
 1024c84:	10800003 	ldbu	r2,0(r2)
 1024c88:	10803fcc 	andi	r2,r2,255
 1024c8c:	1080201c 	xori	r2,r2,128
 1024c90:	10bfe004 	addi	r2,r2,-128
 1024c94:	1005003a 	cmpeq	r2,r2,zero
 1024c98:	10000a1e 	bne	r2,zero,1024cc4 <convert_filename_to_name_extension+0xc4>
				local++;
 1024c9c:	e0bffb17 	ldw	r2,-20(fp)
 1024ca0:	10800044 	addi	r2,r2,1
 1024ca4:	e0bffb15 	stw	r2,-20(fp)
 1024ca8:	00000606 	br	1024cc4 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
 1024cac:	e0bffc17 	ldw	r2,-16(fp)
 1024cb0:	1007883a 	mov	r3,r2
 1024cb4:	e0bffe17 	ldw	r2,-8(fp)
 1024cb8:	1887883a 	add	r3,r3,r2
 1024cbc:	00800804 	movi	r2,32
 1024cc0:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
 1024cc4:	e0bffc17 	ldw	r2,-16(fp)
 1024cc8:	10800044 	addi	r2,r2,1
 1024ccc:	e0bffc15 	stw	r2,-16(fp)
 1024cd0:	e0bffc17 	ldw	r2,-16(fp)
 1024cd4:	10800210 	cmplti	r2,r2,8
 1024cd8:	103fd21e 	bne	r2,zero,1024c24 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
 1024cdc:	e0bffb17 	ldw	r2,-20(fp)
 1024ce0:	1007883a 	mov	r3,r2
 1024ce4:	e0bffd17 	ldw	r2,-12(fp)
 1024ce8:	1885883a 	add	r2,r3,r2
 1024cec:	10800003 	ldbu	r2,0(r2)
 1024cf0:	10803fcc 	andi	r2,r2,255
 1024cf4:	1080201c 	xori	r2,r2,128
 1024cf8:	10bfe004 	addi	r2,r2,-128
 1024cfc:	10800b98 	cmpnei	r2,r2,46
 1024d00:	1000031e 	bne	r2,zero,1024d10 <convert_filename_to_name_extension+0x110>
		local++;
 1024d04:	e0bffb17 	ldw	r2,-20(fp)
 1024d08:	10800044 	addi	r2,r2,1
 1024d0c:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
 1024d10:	e03ffc15 	stw	zero,-16(fp)
 1024d14:	00002106 	br	1024d9c <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
 1024d18:	e0bffb17 	ldw	r2,-20(fp)
 1024d1c:	1007883a 	mov	r3,r2
 1024d20:	e0bffd17 	ldw	r2,-12(fp)
 1024d24:	1885883a 	add	r2,r3,r2
 1024d28:	10800003 	ldbu	r2,0(r2)
 1024d2c:	10803fcc 	andi	r2,r2,255
 1024d30:	1080201c 	xori	r2,r2,128
 1024d34:	10bfe004 	addi	r2,r2,-128
 1024d38:	1005003a 	cmpeq	r2,r2,zero
 1024d3c:	10000e1e 	bne	r2,zero,1024d78 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
 1024d40:	e0bffc17 	ldw	r2,-16(fp)
 1024d44:	1007883a 	mov	r3,r2
 1024d48:	e0bfff17 	ldw	r2,-4(fp)
 1024d4c:	1889883a 	add	r4,r3,r2
 1024d50:	e0bffb17 	ldw	r2,-20(fp)
 1024d54:	1007883a 	mov	r3,r2
 1024d58:	e0bffd17 	ldw	r2,-12(fp)
 1024d5c:	1885883a 	add	r2,r3,r2
 1024d60:	10800003 	ldbu	r2,0(r2)
 1024d64:	20800005 	stb	r2,0(r4)
			local++;
 1024d68:	e0bffb17 	ldw	r2,-20(fp)
 1024d6c:	10800044 	addi	r2,r2,1
 1024d70:	e0bffb15 	stw	r2,-20(fp)
 1024d74:	00000606 	br	1024d90 <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
 1024d78:	e0bffc17 	ldw	r2,-16(fp)
 1024d7c:	1007883a 	mov	r3,r2
 1024d80:	e0bfff17 	ldw	r2,-4(fp)
 1024d84:	1887883a 	add	r3,r3,r2
 1024d88:	00800804 	movi	r2,32
 1024d8c:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
 1024d90:	e0bffc17 	ldw	r2,-16(fp)
 1024d94:	10800044 	addi	r2,r2,1
 1024d98:	e0bffc15 	stw	r2,-16(fp)
 1024d9c:	e0bffc17 	ldw	r2,-16(fp)
 1024da0:	108000d0 	cmplti	r2,r2,3
 1024da4:	103fdc1e 	bne	r2,zero,1024d18 <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
 1024da8:	e037883a 	mov	sp,fp
 1024dac:	df000017 	ldw	fp,0(sp)
 1024db0:	dec00104 	addi	sp,sp,4
 1024db4:	f800283a 	ret

01024db8 <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 1024db8:	defff304 	addi	sp,sp,-52
 1024dbc:	dfc00c15 	stw	ra,48(sp)
 1024dc0:	df000b15 	stw	fp,44(sp)
 1024dc4:	df000b04 	addi	fp,sp,44
 1024dc8:	e13ffb15 	stw	r4,-20(fp)
 1024dcc:	e17ffc15 	stw	r5,-16(fp)
 1024dd0:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
 1024dd4:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
 1024dd8:	e13ffa04 	addi	r4,fp,-24
 1024ddc:	10246e40 	call	10246e4 <find_first_empty_cluster>
 1024de0:	1005003a 	cmpeq	r2,r2,zero
 1024de4:	1000a31e 	bne	r2,zero,1025074 <create_file+0x2bc>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
 1024de8:	e0bffd17 	ldw	r2,-12(fp)
 1024dec:	10800a17 	ldw	r2,40(r2)
 1024df0:	1004c03a 	cmpne	r2,r2,zero
 1024df4:	1000031e 	bne	r2,zero,1024e04 <create_file+0x4c>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
 1024df8:	1024ad40 	call	1024ad4 <find_first_empty_record_in_root_directory>
 1024dfc:	e0bff815 	stw	r2,-32(fp)
 1024e00:	00000506 	br	1024e18 <create_file+0x60>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
 1024e04:	e0bffd17 	ldw	r2,-12(fp)
 1024e08:	1080058b 	ldhu	r2,22(r2)
 1024e0c:	113fffcc 	andi	r4,r2,65535
 1024e10:	10248880 	call	1024888 <find_first_empty_record_in_a_subdirectory>
 1024e14:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
 1024e18:	e0bff817 	ldw	r2,-32(fp)
 1024e1c:	1004803a 	cmplt	r2,r2,zero
 1024e20:	1000941e 	bne	r2,zero,1025074 <create_file+0x2bc>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
 1024e24:	e13ffb17 	ldw	r4,-20(fp)
 1024e28:	10239c00 	call	10239c0 <get_dir_divider_location>
 1024e2c:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
 1024e30:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
 1024e34:	00000b06 	br	1024e64 <create_file+0xac>
				last_dir_separator = last_dir_separator + location + 1;
 1024e38:	e0fff517 	ldw	r3,-44(fp)
 1024e3c:	e0bff617 	ldw	r2,-40(fp)
 1024e40:	1885883a 	add	r2,r3,r2
 1024e44:	10800044 	addi	r2,r2,1
 1024e48:	e0bff515 	stw	r2,-44(fp)
				location = get_dir_divider_location(
 1024e4c:	e0bff517 	ldw	r2,-44(fp)
 1024e50:	1007883a 	mov	r3,r2
 1024e54:	e0bffb17 	ldw	r2,-20(fp)
 1024e58:	1889883a 	add	r4,r3,r2
 1024e5c:	10239c00 	call	10239c0 <get_dir_divider_location>
 1024e60:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
 1024e64:	e0bff617 	ldw	r2,-40(fp)
 1024e68:	10800048 	cmpgei	r2,r2,1
 1024e6c:	103ff21e 	bne	r2,zero,1024e38 <create_file+0x80>
				last_dir_separator = last_dir_separator + location + 1;
				location = get_dir_divider_location(
						&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
 1024e70:	e0bff517 	ldw	r2,-44(fp)
 1024e74:	1007883a 	mov	r3,r2
 1024e78:	e0bffb17 	ldw	r2,-20(fp)
 1024e7c:	1889883a 	add	r4,r3,r2
 1024e80:	e0bffc17 	ldw	r2,-16(fp)
 1024e84:	100b883a 	mov	r5,r2
 1024e88:	e0bffc17 	ldw	r2,-16(fp)
 1024e8c:	10800204 	addi	r2,r2,8
 1024e90:	100d883a 	mov	r6,r2
 1024e94:	1024c000 	call	1024c00 <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
 1024e98:	e0bffc17 	ldw	r2,-16(fp)
 1024e9c:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
 1024ea0:	e0bffc17 	ldw	r2,-16(fp)
 1024ea4:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
 1024ea8:	e0bffc17 	ldw	r2,-16(fp)
 1024eac:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
 1024eb0:	e0bffc17 	ldw	r2,-16(fp)
 1024eb4:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
 1024eb8:	e0bffc17 	ldw	r2,-16(fp)
 1024ebc:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
 1024ec0:	e0bffc17 	ldw	r2,-16(fp)
 1024ec4:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
 1024ec8:	e0bffa17 	ldw	r2,-24(fp)
 1024ecc:	1007883a 	mov	r3,r2
 1024ed0:	e0bffc17 	ldw	r2,-16(fp)
 1024ed4:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
 1024ed8:	e0bffc17 	ldw	r2,-16(fp)
 1024edc:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
 1024ee0:	e0fffa17 	ldw	r3,-24(fp)
 1024ee4:	e0bffc17 	ldw	r2,-16(fp)
 1024ee8:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
 1024eec:	e0bffc17 	ldw	r2,-16(fp)
 1024ef0:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
 1024ef4:	e0bffc17 	ldw	r2,-16(fp)
 1024ef8:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
 1024efc:	e0bff817 	ldw	r2,-32(fp)
 1024f00:	10ffffcc 	andi	r3,r2,65535
 1024f04:	e0bffc17 	ldw	r2,-16(fp)
 1024f08:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
 1024f0c:	e0bff817 	ldw	r2,-32(fp)
 1024f10:	1005d43a 	srai	r2,r2,16
 1024f14:	10bfffcc 	andi	r2,r2,65535
 1024f18:	e0bfff15 	stw	r2,-4(fp)
 1024f1c:	e0ffff17 	ldw	r3,-4(fp)
 1024f20:	1804403a 	cmpge	r2,r3,zero
 1024f24:	1000031e 	bne	r2,zero,1024f34 <create_file+0x17c>
 1024f28:	e0bfff17 	ldw	r2,-4(fp)
 1024f2c:	108003c4 	addi	r2,r2,15
 1024f30:	e0bfff15 	stw	r2,-4(fp)
 1024f34:	e0ffff17 	ldw	r3,-4(fp)
 1024f38:	1805d13a 	srai	r2,r3,4
 1024f3c:	1007883a 	mov	r3,r2
 1024f40:	e0bffc17 	ldw	r2,-16(fp)
 1024f44:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
 1024f48:	e0bff817 	ldw	r2,-32(fp)
 1024f4c:	1005d43a 	srai	r2,r2,16
 1024f50:	108003cc 	andi	r2,r2,15
 1024f54:	1004917a 	slli	r2,r2,5
 1024f58:	1007883a 	mov	r3,r2
 1024f5c:	e0bffc17 	ldw	r2,-16(fp)
 1024f60:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
 1024f64:	e0bffd17 	ldw	r2,-12(fp)
 1024f68:	1080058b 	ldhu	r2,22(r2)
 1024f6c:	10ffffcc 	andi	r3,r2,65535
 1024f70:	e0bffc17 	ldw	r2,-16(fp)
 1024f74:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
 1024f78:	e0fffc17 	ldw	r3,-16(fp)
 1024f7c:	00800044 	movi	r2,1
 1024f80:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
 1024f84:	e0fffc17 	ldw	r3,-16(fp)
 1024f88:	00800044 	movi	r2,1
 1024f8c:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector =
 1024f90:	e0bffc17 	ldw	r2,-16(fp)
 1024f94:	10800a17 	ldw	r2,40(r2)
 1024f98:	1004c03a 	cmpne	r2,r2,zero
 1024f9c:	1000081e 	bne	r2,zero,1024fc0 <create_file+0x208>
 1024fa0:	00804134 	movhi	r2,260
 1024fa4:	10a3a204 	addi	r2,r2,-29048
 1024fa8:	10c01317 	ldw	r3,76(r2)
 1024fac:	e0bffc17 	ldw	r2,-16(fp)
 1024fb0:	10800b17 	ldw	r2,44(r2)
 1024fb4:	1887883a 	add	r3,r3,r2
 1024fb8:	e0fffe15 	stw	r3,-8(fp)
 1024fbc:	00001006 	br	1025000 <create_file+0x248>
 1024fc0:	00804134 	movhi	r2,260
 1024fc4:	10a3a204 	addi	r2,r2,-29048
 1024fc8:	11001417 	ldw	r4,80(r2)
 1024fcc:	e0bffc17 	ldw	r2,-16(fp)
 1024fd0:	10800a17 	ldw	r2,40(r2)
 1024fd4:	10ffff84 	addi	r3,r2,-2
 1024fd8:	00804134 	movhi	r2,260
 1024fdc:	10a3a204 	addi	r2,r2,-29048
 1024fe0:	10800383 	ldbu	r2,14(r2)
 1024fe4:	10803fcc 	andi	r2,r2,255
 1024fe8:	1885383a 	mul	r2,r3,r2
 1024fec:	2087883a 	add	r3,r4,r2
 1024ff0:	e0bffc17 	ldw	r2,-16(fp)
 1024ff4:	10800b17 	ldw	r2,44(r2)
 1024ff8:	1887883a 	add	r3,r3,r2
 1024ffc:	e0fffe15 	stw	r3,-8(fp)
 1025000:	e0bffe17 	ldw	r2,-8(fp)
 1025004:	e0bff715 	stw	r2,-36(fp)
							(boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
 1025008:	e13ff717 	ldw	r4,-36(fp)
 102500c:	d1672917 	ldw	r5,-25436(gp)
 1025010:	10225980 	call	1022598 <Read_Sector_Data>
 1025014:	1005003a 	cmpeq	r2,r2,zero
 1025018:	1000161e 	bne	r2,zero,1025074 <create_file+0x2bc>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(file_record->file_record_offset,
 102501c:	e0bffc17 	ldw	r2,-16(fp)
 1025020:	10800c0b 	ldhu	r2,48(r2)
 1025024:	113fffcc 	andi	r4,r2,65535
 1025028:	2120001c 	xori	r4,r4,32768
 102502c:	21200004 	addi	r4,r4,-32768
 1025030:	e17ffc17 	ldw	r5,-16(fp)
 1025034:	1022c640 	call	1022c64 <Write_File_Record_At_Offset>
 1025038:	1005003a 	cmpeq	r2,r2,zero
 102503c:	10000d1e 	bne	r2,zero,1025074 <create_file+0x2bc>
						file_record)) {
					Save_Modified_Sector();
 1025040:	10225480 	call	1022548 <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
 1025044:	e13ffa17 	ldw	r4,-24(fp)
 1025048:	017fffc4 	movi	r5,-1
 102504c:	01800044 	movi	r6,1
 1025050:	102274c0 	call	102274c <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
 1025054:	e13ffa17 	ldw	r4,-24(fp)
 1025058:	017fffc4 	movi	r5,-1
 102505c:	000d883a 	mov	r6,zero
 1025060:	102274c0 	call	102274c <mark_cluster>
 1025064:	1005003a 	cmpeq	r2,r2,zero
 1025068:	1000021e 	bne	r2,zero,1025074 <create_file+0x2bc>
							false)) {
						result = true;
 102506c:	00800044 	movi	r2,1
 1025070:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
 1025074:	e0bff917 	ldw	r2,-28(fp)
}
 1025078:	e037883a 	mov	sp,fp
 102507c:	dfc00117 	ldw	ra,4(sp)
 1025080:	df000017 	ldw	fp,0(sp)
 1025084:	dec00204 	addi	sp,sp,8
 1025088:	f800283a 	ret

0102508c <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
 102508c:	defffb04 	addi	sp,sp,-20
 1025090:	df000415 	stw	fp,16(sp)
 1025094:	df000404 	addi	fp,sp,16
 1025098:	e13ffe15 	stw	r4,-8(fp)
 102509c:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 10250a0:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 10250a4:	e03ffd15 	stw	zero,-12(fp)
 10250a8:	00001606 	br	1025104 <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
 10250ac:	e0fffd17 	ldw	r3,-12(fp)
 10250b0:	e0bffe17 	ldw	r2,-8(fp)
 10250b4:	10c5883a 	add	r2,r2,r3
 10250b8:	10800003 	ldbu	r2,0(r2)
 10250bc:	10803fcc 	andi	r2,r2,255
 10250c0:	10800820 	cmpeqi	r2,r2,32
 10250c4:	10000c1e 	bne	r2,zero,10250f8 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
 10250c8:	e0bffc17 	ldw	r2,-16(fp)
 10250cc:	1007883a 	mov	r3,r2
 10250d0:	e0bfff17 	ldw	r2,-4(fp)
 10250d4:	1889883a 	add	r4,r3,r2
 10250d8:	e0fffd17 	ldw	r3,-12(fp)
 10250dc:	e0bffe17 	ldw	r2,-8(fp)
 10250e0:	10c5883a 	add	r2,r2,r3
 10250e4:	10800003 	ldbu	r2,0(r2)
 10250e8:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
 10250ec:	e0bffc17 	ldw	r2,-16(fp)
 10250f0:	10800044 	addi	r2,r2,1
 10250f4:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 10250f8:	e0bffd17 	ldw	r2,-12(fp)
 10250fc:	10800044 	addi	r2,r2,1
 1025100:	e0bffd15 	stw	r2,-12(fp)
 1025104:	e0bffd17 	ldw	r2,-12(fp)
 1025108:	10800210 	cmplti	r2,r2,8
 102510c:	103fe71e 	bne	r2,zero,10250ac <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
 1025110:	e0bffe17 	ldw	r2,-8(fp)
 1025114:	10800203 	ldbu	r2,8(r2)
 1025118:	10803fcc 	andi	r2,r2,255
 102511c:	10800820 	cmpeqi	r2,r2,32
 1025120:	1000261e 	bne	r2,zero,10251bc <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
 1025124:	e0bffc17 	ldw	r2,-16(fp)
 1025128:	1007883a 	mov	r3,r2
 102512c:	e0bfff17 	ldw	r2,-4(fp)
 1025130:	1887883a 	add	r3,r3,r2
 1025134:	00800b84 	movi	r2,46
 1025138:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
 102513c:	e0bffc17 	ldw	r2,-16(fp)
 1025140:	10800044 	addi	r2,r2,1
 1025144:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
 1025148:	e03ffd15 	stw	zero,-12(fp)
 102514c:	00001806 	br	10251b0 <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
 1025150:	e0fffd17 	ldw	r3,-12(fp)
 1025154:	e0bffe17 	ldw	r2,-8(fp)
 1025158:	1885883a 	add	r2,r3,r2
 102515c:	10800204 	addi	r2,r2,8
 1025160:	10800003 	ldbu	r2,0(r2)
 1025164:	10803fcc 	andi	r2,r2,255
 1025168:	10800820 	cmpeqi	r2,r2,32
 102516c:	10000d1e 	bne	r2,zero,10251a4 <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
 1025170:	e0bffc17 	ldw	r2,-16(fp)
 1025174:	1007883a 	mov	r3,r2
 1025178:	e0bfff17 	ldw	r2,-4(fp)
 102517c:	1889883a 	add	r4,r3,r2
 1025180:	e0fffd17 	ldw	r3,-12(fp)
 1025184:	e0bffe17 	ldw	r2,-8(fp)
 1025188:	1885883a 	add	r2,r3,r2
 102518c:	10800204 	addi	r2,r2,8
 1025190:	10800003 	ldbu	r2,0(r2)
 1025194:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
 1025198:	e0bffc17 	ldw	r2,-16(fp)
 102519c:	10800044 	addi	r2,r2,1
 10251a0:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
 10251a4:	e0bffd17 	ldw	r2,-12(fp)
 10251a8:	10800044 	addi	r2,r2,1
 10251ac:	e0bffd15 	stw	r2,-12(fp)
 10251b0:	e0bffd17 	ldw	r2,-12(fp)
 10251b4:	108000d0 	cmplti	r2,r2,3
 10251b8:	103fe51e 	bne	r2,zero,1025150 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 10251bc:	e0bffc17 	ldw	r2,-16(fp)
 10251c0:	1007883a 	mov	r3,r2
 10251c4:	e0bfff17 	ldw	r2,-4(fp)
 10251c8:	1885883a 	add	r2,r3,r2
 10251cc:	10000005 	stb	zero,0(r2)
}
 10251d0:	e037883a 	mov	sp,fp
 10251d4:	df000017 	ldw	fp,0(sp)
 10251d8:	dec00104 	addi	sp,sp,4
 10251dc:	f800283a 	ret

010251e0 <alt_up_sd_card_open_dev>:

///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////

alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
 10251e0:	defffc04 	addi	sp,sp,-16
 10251e4:	dfc00315 	stw	ra,12(sp)
 10251e8:	df000215 	stw	fp,8(sp)
 10251ec:	df000204 	addi	fp,sp,8
 10251f0:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
 10251f4:	e13fff17 	ldw	r4,-4(fp)
 10251f8:	014040f4 	movhi	r5,259
 10251fc:	295bf604 	addi	r5,r5,28632
 1025200:	10284f00 	call	10284f0 <alt_find_dev>
 1025204:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
 1025208:	e0bffe17 	ldw	r2,-8(fp)
 102520c:	1005003a 	cmpeq	r2,r2,zero
 1025210:	10001e1e 	bne	r2,zero,102528c <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 1025214:	e0bffe17 	ldw	r2,-8(fp)
 1025218:	10800a17 	ldw	r2,40(r2)
 102521c:	10808d04 	addi	r2,r2,564
 1025220:	d0a72315 	stw	r2,-25460(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 1025224:	e0bffe17 	ldw	r2,-8(fp)
 1025228:	10800a17 	ldw	r2,40(r2)
 102522c:	10808904 	addi	r2,r2,548
 1025230:	d0a72415 	stw	r2,-25456(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 1025234:	e0bffe17 	ldw	r2,-8(fp)
 1025238:	10800a17 	ldw	r2,40(r2)
 102523c:	10808404 	addi	r2,r2,528
 1025240:	d0a72515 	stw	r2,-25452(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 1025244:	e0bffe17 	ldw	r2,-8(fp)
 1025248:	10800a17 	ldw	r2,40(r2)
 102524c:	10808c04 	addi	r2,r2,560
 1025250:	d0a72615 	stw	r2,-25448(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 1025254:	e0bffe17 	ldw	r2,-8(fp)
 1025258:	10800a17 	ldw	r2,40(r2)
 102525c:	10808b04 	addi	r2,r2,556
 1025260:	d0a72715 	stw	r2,-25444(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 1025264:	e0bffe17 	ldw	r2,-8(fp)
 1025268:	10800a17 	ldw	r2,40(r2)
 102526c:	d0a72815 	stw	r2,-25440(gp)
		device_pointer = dev;
 1025270:	e0bffe17 	ldw	r2,-8(fp)
 1025274:	d0a72b15 	stw	r2,-25428(gp)
		initialized = false;
 1025278:	d0272115 	stw	zero,-25468(gp)
		is_sd_card_formated_as_FAT16 = false;
 102527c:	d0272215 	stw	zero,-25464(gp)
		search_data.valid = false;
 1025280:	00804134 	movhi	r2,260
 1025284:	10a39d04 	addi	r2,r2,-29068
 1025288:	10000415 	stw	zero,16(r2)
	}
	return dev;
 102528c:	e0bffe17 	ldw	r2,-8(fp)
}
 1025290:	e037883a 	mov	sp,fp
 1025294:	dfc00117 	ldw	ra,4(sp)
 1025298:	df000017 	ldw	fp,0(sp)
 102529c:	dec00204 	addi	sp,sp,8
 10252a0:	f800283a 	ret

010252a4 <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 10252a4:	defffd04 	addi	sp,sp,-12
 10252a8:	df000215 	stw	fp,8(sp)
 10252ac:	df000204 	addi	fp,sp,8
	bool result = false;
 10252b0:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL)
 10252b4:	d0a72b17 	ldw	r2,-25428(gp)
 10252b8:	1005003a 	cmpeq	r2,r2,zero
 10252bc:	1000081e 	bne	r2,zero,10252e0 <alt_up_sd_card_is_Present+0x3c>
 10252c0:	d0a72317 	ldw	r2,-25460(gp)
 10252c4:	1080002b 	ldhuio	r2,0(r2)
 10252c8:	1080008c 	andi	r2,r2,2
 10252cc:	1005003a 	cmpeq	r2,r2,zero
 10252d0:	1000031e 	bne	r2,zero,10252e0 <alt_up_sd_card_is_Present+0x3c>
			&& ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0)) {
		result = true;
 10252d4:	00800044 	movi	r2,1
 10252d8:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL)
 10252dc:	00001e06 	br	1025358 <alt_up_sd_card_is_Present+0xb4>
			&& ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
 10252e0:	d0a72117 	ldw	r2,-25468(gp)
 10252e4:	10800058 	cmpnei	r2,r2,1
 10252e8:	10001b1e 	bne	r2,zero,1025358 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
 10252ec:	d0272115 	stw	zero,-25468(gp)
		search_data.valid = false;
 10252f0:	00804134 	movhi	r2,260
 10252f4:	10a39d04 	addi	r2,r2,-29068
 10252f8:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 10252fc:	d0272215 	stw	zero,-25464(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 1025300:	e03ffe15 	stw	zero,-8(fp)
 1025304:	00001106 	br	102534c <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
 1025308:	e0bffe17 	ldw	r2,-8(fp)
 102530c:	00c04134 	movhi	r3,260
 1025310:	18e3b704 	addi	r3,r3,-28964
 1025314:	100491ba 	slli	r2,r2,6
 1025318:	10c5883a 	add	r2,r2,r3
 102531c:	10800f04 	addi	r2,r2,60
 1025320:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 1025324:	e0bffe17 	ldw	r2,-8(fp)
 1025328:	00c04134 	movhi	r3,260
 102532c:	18e3b704 	addi	r3,r3,-28964
 1025330:	100491ba 	slli	r2,r2,6
 1025334:	10c5883a 	add	r2,r2,r3
 1025338:	10800e04 	addi	r2,r2,56
 102533c:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 1025340:	e0bffe17 	ldw	r2,-8(fp)
 1025344:	10800044 	addi	r2,r2,1
 1025348:	e0bffe15 	stw	r2,-8(fp)
 102534c:	e0bffe17 	ldw	r2,-8(fp)
 1025350:	10800510 	cmplti	r2,r2,20
 1025354:	103fec1e 	bne	r2,zero,1025308 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
 1025358:	e0bfff17 	ldw	r2,-4(fp)
}
 102535c:	e037883a 	mov	sp,fp
 1025360:	df000017 	ldw	fp,0(sp)
 1025364:	dec00104 	addi	sp,sp,4
 1025368:	f800283a 	ret

0102536c <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 102536c:	defffd04 	addi	sp,sp,-12
 1025370:	dfc00215 	stw	ra,8(sp)
 1025374:	df000115 	stw	fp,4(sp)
 1025378:	df000104 	addi	fp,sp,4
	bool result = false;
 102537c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 1025380:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 1025384:	1005003a 	cmpeq	r2,r2,zero
 1025388:	10000d1e 	bne	r2,zero,10253c0 <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
 102538c:	d0a72117 	ldw	r2,-25468(gp)
 1025390:	1004c03a 	cmpne	r2,r2,zero
 1025394:	1000071e 	bne	r2,zero,10253b4 <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 1025398:	102355c0 	call	102355c <Look_for_FAT16>
 102539c:	d0a72215 	stw	r2,-25464(gp)
			initialized = is_sd_card_formated_as_FAT16;
 10253a0:	d0a72217 	ldw	r2,-25464(gp)
 10253a4:	d0a72115 	stw	r2,-25468(gp)
			search_data.valid = false;
 10253a8:	00804134 	movhi	r2,260
 10253ac:	10a39d04 	addi	r2,r2,-29068
 10253b0:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 10253b4:	d0a72217 	ldw	r2,-25464(gp)
 10253b8:	e0bfff15 	stw	r2,-4(fp)
 10253bc:	00000206 	br	10253c8 <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
 10253c0:	d0272115 	stw	zero,-25468(gp)
		is_sd_card_formated_as_FAT16 = false;
 10253c4:	d0272215 	stw	zero,-25464(gp)
	}

	return result;
 10253c8:	e0bfff17 	ldw	r2,-4(fp)
}
 10253cc:	e037883a 	mov	sp,fp
 10253d0:	dfc00117 	ldw	ra,4(sp)
 10253d4:	df000017 	ldw	fp,0(sp)
 10253d8:	dec00204 	addi	sp,sp,8
 10253dc:	f800283a 	ret

010253e0 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 10253e0:	deffea04 	addi	sp,sp,-88
 10253e4:	dfc01515 	stw	ra,84(sp)
 10253e8:	df001415 	stw	fp,80(sp)
 10253ec:	df001404 	addi	fp,sp,80
 10253f0:	e13ffe15 	stw	r4,-8(fp)
 10253f4:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 10253f8:	00800084 	movi	r2,2
 10253fc:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1025400:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 1025404:	1005003a 	cmpeq	r2,r2,zero
 1025408:	1000241e 	bne	r2,zero,102549c <alt_up_sd_card_find_first+0xbc>
 102540c:	d0a72217 	ldw	r2,-25464(gp)
 1025410:	1005003a 	cmpeq	r2,r2,zero
 1025414:	1000211e 	bne	r2,zero,102549c <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
 1025418:	e17fed04 	addi	r5,fp,-76
 102541c:	e1bfee04 	addi	r6,fp,-72
 1025420:	e13ffe17 	ldw	r4,-8(fp)
 1025424:	1023d6c0 	call	1023d6c <get_home_directory_cluster_for_file>
 1025428:	1005003a 	cmpeq	r2,r2,zero
 102542c:	1000191e 	bne	r2,zero,1025494 <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
 1025430:	e0bfed17 	ldw	r2,-76(fp)
 1025434:	1007883a 	mov	r3,r2
 1025438:	00804134 	movhi	r2,260
 102543c:	10a39d04 	addi	r2,r2,-29068
 1025440:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 1025444:	e0bfed17 	ldw	r2,-76(fp)
 1025448:	1007883a 	mov	r3,r2
 102544c:	00804134 	movhi	r2,260
 1025450:	10a39d04 	addi	r2,r2,-29068
 1025454:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 1025458:	00804134 	movhi	r2,260
 102545c:	10a39d04 	addi	r2,r2,-29068
 1025460:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 1025464:	00c04134 	movhi	r3,260
 1025468:	18e39d04 	addi	r3,r3,-29068
 102546c:	00bfffc4 	movi	r2,-1
 1025470:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
 1025474:	00c04134 	movhi	r3,260
 1025478:	18e39d04 	addi	r3,r3,-29068
 102547c:	00800044 	movi	r2,1
 1025480:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
 1025484:	e13fff17 	ldw	r4,-4(fp)
 1025488:	10254b40 	call	10254b4 <alt_up_sd_card_find_next>
 102548c:	e0bfec0d 	sth	r2,-80(fp)
 1025490:	00000206 	br	102549c <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
 1025494:	00800044 	movi	r2,1
 1025498:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 102549c:	e0bfec0f 	ldh	r2,-80(fp)
}
 10254a0:	e037883a 	mov	sp,fp
 10254a4:	dfc00117 	ldw	ra,4(sp)
 10254a8:	df000017 	ldw	fp,0(sp)
 10254ac:	dec00204 	addi	sp,sp,8
 10254b0:	f800283a 	ret

010254b4 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 10254b4:	deffe404 	addi	sp,sp,-112
 10254b8:	dfc01b15 	stw	ra,108(sp)
 10254bc:	df001a15 	stw	fp,104(sp)
 10254c0:	df001a04 	addi	fp,sp,104
 10254c4:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
 10254c8:	00800084 	movi	r2,2
 10254cc:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 10254d0:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 10254d4:	1005003a 	cmpeq	r2,r2,zero
 10254d8:	1000da1e 	bne	r2,zero,1025844 <alt_up_sd_card_find_next+0x390>
 10254dc:	d0a72217 	ldw	r2,-25464(gp)
 10254e0:	1005003a 	cmpeq	r2,r2,zero
 10254e4:	1000d71e 	bne	r2,zero,1025844 <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
 10254e8:	00804134 	movhi	r2,260
 10254ec:	10a39d04 	addi	r2,r2,-29068
 10254f0:	10800417 	ldw	r2,16(r2)
 10254f4:	1005003a 	cmpeq	r2,r2,zero
 10254f8:	1000d01e 	bne	r2,zero,102583c <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 10254fc:	00804134 	movhi	r2,260
 1025500:	10a39d04 	addi	r2,r2,-29068
 1025504:	10800117 	ldw	r2,4(r2)
 1025508:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
 102550c:	e0bfec17 	ldw	r2,-80(fp)
 1025510:	1004c03a 	cmpne	r2,r2,zero
 1025514:	1000511e 	bne	r2,zero,102565c <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
 1025518:	00804134 	movhi	r2,260
 102551c:	10a3a204 	addi	r2,r2,-29048
 1025520:	1080050b 	ldhu	r2,20(r2)
 1025524:	10bfffcc 	andi	r2,r2,65535
 1025528:	1006917a 	slli	r3,r2,5
 102552c:	00804134 	movhi	r2,260
 1025530:	10a3a204 	addi	r2,r2,-29048
 1025534:	1080030b 	ldhu	r2,12(r2)
 1025538:	10bfffcc 	andi	r2,r2,65535
 102553c:	1885283a 	div	r2,r3,r2
 1025540:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
 1025544:	00804134 	movhi	r2,260
 1025548:	10a39d04 	addi	r2,r2,-29068
 102554c:	10800217 	ldw	r2,8(r2)
 1025550:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
 1025554:	00804134 	movhi	r2,260
 1025558:	10a39d04 	addi	r2,r2,-29068
 102555c:	1080030b 	ldhu	r2,12(r2)
 1025560:	10bfffcc 	andi	r2,r2,65535
 1025564:	10a0001c 	xori	r2,r2,32768
 1025568:	10a00004 	addi	r2,r2,-32768
 102556c:	10800044 	addi	r2,r2,1
 1025570:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 1025574:	00003306 	br	1025644 <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(
 1025578:	00804134 	movhi	r2,260
 102557c:	10a3a204 	addi	r2,r2,-29048
 1025580:	10c01317 	ldw	r3,76(r2)
 1025584:	e0bfea17 	ldw	r2,-88(fp)
 1025588:	1885883a 	add	r2,r3,r2
 102558c:	1009883a 	mov	r4,r2
 1025590:	d1672917 	ldw	r5,-25436(gp)
 1025594:	10225980 	call	1022598 <Read_Sector_Data>
 1025598:	1005003a 	cmpeq	r2,r2,zero
 102559c:	10002c1e 	bne	r2,zero,1025650 <alt_up_sd_card_find_next+0x19c>
							sector_index
									+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 10255a0:	00002106 	br	1025628 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
 10255a4:	e0bfe917 	ldw	r2,-92(fp)
 10255a8:	1008917a 	slli	r4,r2,5
 10255ac:	e1ffea17 	ldw	r7,-88(fp)
 10255b0:	e17fee04 	addi	r5,fp,-72
 10255b4:	000d883a 	mov	r6,zero
 10255b8:	10229e00 	call	10229e0 <Read_File_Record_At_Offset>
 10255bc:	1005003a 	cmpeq	r2,r2,zero
 10255c0:	1000161e 	bne	r2,zero,102561c <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
 10255c4:	e0bfee03 	ldbu	r2,-72(fp)
 10255c8:	10803fcc 	andi	r2,r2,255
 10255cc:	1005003a 	cmpeq	r2,r2,zero
 10255d0:	1000121e 	bne	r2,zero,102561c <alt_up_sd_card_find_next+0x168>
 10255d4:	e0bfee03 	ldbu	r2,-72(fp)
 10255d8:	10803fcc 	andi	r2,r2,255
 10255dc:	10803960 	cmpeqi	r2,r2,229
 10255e0:	10000e1e 	bne	r2,zero,102561c <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector =
 10255e4:	e0bfe917 	ldw	r2,-92(fp)
 10255e8:	1007883a 	mov	r3,r2
 10255ec:	00804134 	movhi	r2,260
 10255f0:	10a39d04 	addi	r2,r2,-29068
 10255f4:	10c0030d 	sth	r3,12(r2)
											file_counter;
									search_data.current_sector_in_cluster =
 10255f8:	e0ffea17 	ldw	r3,-88(fp)
 10255fc:	00804134 	movhi	r2,260
 1025600:	10a39d04 	addi	r2,r2,-29068
 1025604:	10c00215 	stw	r3,8(r2)
											sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
 1025608:	e13fee04 	addi	r4,fp,-72
 102560c:	e17ffe17 	ldw	r5,-8(fp)
 1025610:	102508c0 	call	102508c <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
 1025614:	e03fff15 	stw	zero,-4(fp)
 1025618:	00008c06 	br	102584c <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(
							sector_index
									+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 102561c:	e0bfe917 	ldw	r2,-92(fp)
 1025620:	10800044 	addi	r2,r2,1
 1025624:	e0bfe915 	stw	r2,-92(fp)
 1025628:	e0bfe917 	ldw	r2,-92(fp)
 102562c:	10800410 	cmplti	r2,r2,16
 1025630:	103fdc1e 	bne	r2,zero,10255a4 <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 1025634:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 1025638:	e0bfea17 	ldw	r2,-88(fp)
 102563c:	10800044 	addi	r2,r2,1
 1025640:	e0bfea15 	stw	r2,-88(fp)
 1025644:	e0ffea17 	ldw	r3,-88(fp)
 1025648:	e0bfeb17 	ldw	r2,-84(fp)
 102564c:	18bfca16 	blt	r3,r2,1025578 <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
 1025650:	00bfffc4 	movi	r2,-1
 1025654:	e0bfed0d 	sth	r2,-76(fp)
 1025658:	00007a06 	br	1025844 <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
 102565c:	00804134 	movhi	r2,260
 1025660:	10a39d04 	addi	r2,r2,-29068
 1025664:	1080030b 	ldhu	r2,12(r2)
 1025668:	10bfffcc 	andi	r2,r2,65535
 102566c:	10a0001c 	xori	r2,r2,32768
 1025670:	10a00004 	addi	r2,r2,-32768
 1025674:	10800044 	addi	r2,r2,1
 1025678:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
 102567c:	e0bfec17 	ldw	r2,-80(fp)
 1025680:	10ffff84 	addi	r3,r2,-2
 1025684:	00804134 	movhi	r2,260
 1025688:	10a3a204 	addi	r2,r2,-29048
 102568c:	10800383 	ldbu	r2,14(r2)
 1025690:	10803fcc 	andi	r2,r2,255
 1025694:	1885383a 	mul	r2,r3,r2
 1025698:	1007883a 	mov	r3,r2
 102569c:	00804134 	movhi	r2,260
 10256a0:	10a3a204 	addi	r2,r2,-29048
 10256a4:	10801417 	ldw	r2,80(r2)
 10256a8:	1885883a 	add	r2,r3,r2
 10256ac:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
 10256b0:	00804134 	movhi	r2,260
 10256b4:	10a39d04 	addi	r2,r2,-29068
 10256b8:	10800217 	ldw	r2,8(r2)
 10256bc:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster;
 10256c0:	00003406 	br	1025794 <alt_up_sd_card_find_next+0x2e0>
							sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
 10256c4:	e0ffe617 	ldw	r3,-104(fp)
 10256c8:	e0bfe717 	ldw	r2,-100(fp)
 10256cc:	1889883a 	add	r4,r3,r2
 10256d0:	d1672917 	ldw	r5,-25436(gp)
 10256d4:	10225980 	call	1022598 <Read_Sector_Data>
 10256d8:	1005003a 	cmpeq	r2,r2,zero
 10256dc:	1000331e 	bne	r2,zero,10257ac <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 10256e0:	00002506 	br	1025778 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(
 10256e4:	e0bfe817 	ldw	r2,-96(fp)
 10256e8:	1008917a 	slli	r4,r2,5
 10256ec:	e1bfec17 	ldw	r6,-80(fp)
 10256f0:	e1ffe617 	ldw	r7,-104(fp)
 10256f4:	e17fee04 	addi	r5,fp,-72
 10256f8:	10229e00 	call	10229e0 <Read_File_Record_At_Offset>
 10256fc:	1005003a 	cmpeq	r2,r2,zero
 1025700:	10001a1e 	bne	r2,zero,102576c <alt_up_sd_card_find_next+0x2b8>
										file_counter * 32, &file_record,
										cluster, sector_index)) {
									if ((file_record.name[0] != 0)
 1025704:	e0bfee03 	ldbu	r2,-72(fp)
 1025708:	10803fcc 	andi	r2,r2,255
 102570c:	1005003a 	cmpeq	r2,r2,zero
 1025710:	1000161e 	bne	r2,zero,102576c <alt_up_sd_card_find_next+0x2b8>
 1025714:	e0bfee03 	ldbu	r2,-72(fp)
 1025718:	10803fcc 	andi	r2,r2,255
 102571c:	10803960 	cmpeqi	r2,r2,229
 1025720:	1000121e 	bne	r2,zero,102576c <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index =
 1025724:	e0ffec17 	ldw	r3,-80(fp)
 1025728:	00804134 	movhi	r2,260
 102572c:	10a39d04 	addi	r2,r2,-29068
 1025730:	10c00115 	stw	r3,4(r2)
												cluster;
										search_data.file_index_in_sector =
 1025734:	e0bfe817 	ldw	r2,-96(fp)
 1025738:	1007883a 	mov	r3,r2
 102573c:	00804134 	movhi	r2,260
 1025740:	10a39d04 	addi	r2,r2,-29068
 1025744:	10c0030d 	sth	r3,12(r2)
												file_counter;
										search_data.current_sector_in_cluster =
 1025748:	e0ffe617 	ldw	r3,-104(fp)
 102574c:	00804134 	movhi	r2,260
 1025750:	10a39d04 	addi	r2,r2,-29068
 1025754:	10c00215 	stw	r3,8(r2)
												sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
 1025758:	e13fee04 	addi	r4,fp,-72
 102575c:	e17ffe17 	ldw	r5,-8(fp)
 1025760:	102508c0 	call	102508c <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
 1025764:	e03fff15 	stw	zero,-4(fp)
 1025768:	00003806 	br	102584c <alt_up_sd_card_find_next+0x398>

					for (; sector_index < boot_sector_data.sectors_per_cluster;
							sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 102576c:	e0bfe817 	ldw	r2,-96(fp)
 1025770:	10800044 	addi	r2,r2,1
 1025774:	e0bfe815 	stw	r2,-96(fp)
 1025778:	e0bfe817 	ldw	r2,-96(fp)
 102577c:	10800410 	cmplti	r2,r2,16
 1025780:	103fd81e 	bne	r2,zero,10256e4 <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 1025784:	e03fe815 	stw	zero,-96(fp)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster;
							sector_index++) {
 1025788:	e0bfe617 	ldw	r2,-104(fp)
 102578c:	10800044 	addi	r2,r2,1
 1025790:	e0bfe615 	stw	r2,-104(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster;
 1025794:	00804134 	movhi	r2,260
 1025798:	10a3a204 	addi	r2,r2,-29048
 102579c:	10800383 	ldbu	r2,14(r2)
 10257a0:	10c03fcc 	andi	r3,r2,255
 10257a4:	e0bfe617 	ldw	r2,-104(fp)
 10257a8:	10ffc616 	blt	r2,r3,10256c4 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
 10257ac:	00804134 	movhi	r2,260
 10257b0:	10a3a204 	addi	r2,r2,-29048
 10257b4:	10800383 	ldbu	r2,14(r2)
 10257b8:	10c03fcc 	andi	r3,r2,255
 10257bc:	e0bfe617 	ldw	r2,-104(fp)
 10257c0:	10c01a16 	blt	r2,r3,102582c <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
 10257c4:	e13fec17 	ldw	r4,-80(fp)
 10257c8:	e17fed84 	addi	r5,fp,-74
 10257cc:	10226940 	call	1022694 <get_cluster_flag>
 10257d0:	1005003a 	cmpeq	r2,r2,zero
 10257d4:	1000131e 	bne	r2,zero,1025824 <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 10257d8:	e0bfed8b 	ldhu	r2,-74(fp)
 10257dc:	10bfffcc 	andi	r2,r2,65535
 10257e0:	10a0001c 	xori	r2,r2,32768
 10257e4:	10a00004 	addi	r2,r2,-32768
 10257e8:	10fffe0c 	andi	r3,r2,65528
 10257ec:	00bffe14 	movui	r2,65528
 10257f0:	1880051e 	bne	r3,r2,1025808 <alt_up_sd_card_find_next+0x354>
								result = -1;
 10257f4:	00bfffc4 	movi	r2,-1
 10257f8:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
 10257fc:	00804134 	movhi	r2,260
 1025800:	10a39d04 	addi	r2,r2,-29068
 1025804:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 1025808:	e0bfed8b 	ldhu	r2,-74(fp)
 102580c:	10bfffcc 	andi	r2,r2,65535
 1025810:	10a0001c 	xori	r2,r2,32768
 1025814:	10a00004 	addi	r2,r2,-32768
 1025818:	10bffe0c 	andi	r2,r2,65528
 102581c:	e0bfec15 	stw	r2,-80(fp)
 1025820:	00000206 	br	102582c <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
 1025824:	00bfffc4 	movi	r2,-1
 1025828:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
 102582c:	e0ffec17 	ldw	r3,-80(fp)
 1025830:	00bffdd4 	movui	r2,65527
 1025834:	10ff910e 	bge	r2,r3,102567c <alt_up_sd_card_find_next+0x1c8>
 1025838:	00000206 	br	1025844 <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
 102583c:	008000c4 	movi	r2,3
 1025840:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
 1025844:	e0bfed0f 	ldh	r2,-76(fp)
 1025848:	e0bfff15 	stw	r2,-4(fp)
 102584c:	e0bfff17 	ldw	r2,-4(fp)
}
 1025850:	e037883a 	mov	sp,fp
 1025854:	dfc00117 	ldw	ra,4(sp)
 1025858:	df000017 	ldw	fp,0(sp)
 102585c:	dec00204 	addi	sp,sp,8
 1025860:	f800283a 	ret

01025864 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 1025864:	deffe804 	addi	sp,sp,-96
 1025868:	dfc01715 	stw	ra,92(sp)
 102586c:	df001615 	stw	fp,88(sp)
 1025870:	df001604 	addi	fp,sp,88
 1025874:	e13ffd15 	stw	r4,-12(fp)
 1025878:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
 102587c:	00bfffc4 	movi	r2,-1
 1025880:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1025884:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 1025888:	1005003a 	cmpeq	r2,r2,zero
 102588c:	1000d71e 	bne	r2,zero,1025bec <alt_up_sd_card_fopen+0x388>
 1025890:	d0a72217 	ldw	r2,-25464(gp)
 1025894:	1005003a 	cmpeq	r2,r2,zero
 1025898:	1000d41e 	bne	r2,zero,1025bec <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
 102589c:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
 10258a0:	e13ffd17 	ldw	r4,-12(fp)
 10258a4:	10236600 	call	1023660 <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
 10258a8:	e13ffd17 	ldw	r4,-12(fp)
 10258ac:	10237300 	call	1023730 <check_file_name_for_FAT16_compliance>
 10258b0:	1005003a 	cmpeq	r2,r2,zero
 10258b4:	1000cd1e 	bne	r2,zero,1025bec <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
 10258b8:	e17fec04 	addi	r5,fp,-80
 10258bc:	e1bfed04 	addi	r6,fp,-76
 10258c0:	e13ffd17 	ldw	r4,-12(fp)
 10258c4:	1023d6c0 	call	1023d6c <get_home_directory_cluster_for_file>
 10258c8:	1004c03a 	cmpne	r2,r2,zero
 10258cc:	1000031e 	bne	r2,zero,10258dc <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
 10258d0:	e0bfeb0f 	ldh	r2,-84(fp)
 10258d4:	e0bfff15 	stw	r2,-4(fp)
 10258d8:	0000c606 	br	1025bf4 <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 10258dc:	e03fea15 	stw	zero,-88(fp)
 10258e0:	00000f06 	br	1025920 <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
 10258e4:	e0bfea17 	ldw	r2,-88(fp)
 10258e8:	00c04134 	movhi	r3,260
 10258ec:	18e3b704 	addi	r3,r3,-28964
 10258f0:	100491ba 	slli	r2,r2,6
 10258f4:	10c5883a 	add	r2,r2,r3
 10258f8:	10800f04 	addi	r2,r2,60
 10258fc:	10800017 	ldw	r2,0(r2)
 1025900:	1004c03a 	cmpne	r2,r2,zero
 1025904:	1000031e 	bne	r2,zero,1025914 <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
 1025908:	e0bfea17 	ldw	r2,-88(fp)
 102590c:	e0bfeb0d 	sth	r2,-84(fp)
					break;
 1025910:	00000606 	br	102592c <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 1025914:	e0bfea17 	ldw	r2,-88(fp)
 1025918:	10800044 	addi	r2,r2,1
 102591c:	e0bfea15 	stw	r2,-88(fp)
 1025920:	e0bfea17 	ldw	r2,-88(fp)
 1025924:	10800510 	cmplti	r2,r2,20
 1025928:	103fee1e 	bne	r2,zero,10258e4 <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
 102592c:	e0bfeb0f 	ldh	r2,-84(fp)
 1025930:	1004803a 	cmplt	r2,r2,zero
 1025934:	1000ad1e 	bne	r2,zero,1025bec <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
 1025938:	e0bfec17 	ldw	r2,-80(fp)
 102593c:	1009883a 	mov	r4,r2
 1025940:	e0bfeb0f 	ldh	r2,-84(fp)
 1025944:	100491ba 	slli	r2,r2,6
 1025948:	1007883a 	mov	r3,r2
 102594c:	00804134 	movhi	r2,260
 1025950:	10a3b704 	addi	r2,r2,-28964
 1025954:	188d883a 	add	r6,r3,r2
 1025958:	e17ffd17 	ldw	r5,-12(fp)
 102595c:	10242800 	call	1024280 <find_file_in_directory>
 1025960:	1005003a 	cmpeq	r2,r2,zero
 1025964:	10007d1e 	bne	r2,zero,1025b5c <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
 1025968:	e0bffe17 	ldw	r2,-8(fp)
 102596c:	1005003a 	cmpeq	r2,r2,zero
 1025970:	1000031e 	bne	r2,zero,1025980 <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
 1025974:	00bfffc4 	movi	r2,-1
 1025978:	e0bfff15 	stw	r2,-4(fp)
 102597c:	00009d06 	br	1025bf4 <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index =
 1025980:	e17feb0f 	ldh	r5,-84(fp)
 1025984:	e0bfeb0f 	ldh	r2,-84(fp)
 1025988:	00c04134 	movhi	r3,260
 102598c:	18e3b704 	addi	r3,r3,-28964
 1025990:	100491ba 	slli	r2,r2,6
 1025994:	10c5883a 	add	r2,r2,r3
 1025998:	10800504 	addi	r2,r2,20
 102599c:	1080008b 	ldhu	r2,2(r2)
 10259a0:	113fffcc 	andi	r4,r2,65535
 10259a4:	00c04134 	movhi	r3,260
 10259a8:	18e3b704 	addi	r3,r3,-28964
 10259ac:	280491ba 	slli	r2,r5,6
 10259b0:	10c5883a 	add	r2,r2,r3
 10259b4:	10800704 	addi	r2,r2,28
 10259b8:	11000015 	stw	r4,0(r2)
							active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster =
 10259bc:	e0bfeb0f 	ldh	r2,-84(fp)
 10259c0:	00c04134 	movhi	r3,260
 10259c4:	18e3b704 	addi	r3,r3,-28964
 10259c8:	100491ba 	slli	r2,r2,6
 10259cc:	10c5883a 	add	r2,r2,r3
 10259d0:	10800804 	addi	r2,r2,32
 10259d4:	10000015 	stw	zero,0(r2)
							0;
					active_files[file_record_index].current_byte_position = 0;
 10259d8:	e0bfeb0f 	ldh	r2,-84(fp)
 10259dc:	00c04134 	movhi	r3,260
 10259e0:	18e3b704 	addi	r3,r3,-28964
 10259e4:	100491ba 	slli	r2,r2,6
 10259e8:	10c5883a 	add	r2,r2,r3
 10259ec:	10800904 	addi	r2,r2,36
 10259f0:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
 10259f4:	e0bfeb0f 	ldh	r2,-84(fp)
 10259f8:	00c04134 	movhi	r3,260
 10259fc:	18e3b704 	addi	r3,r3,-28964
 1025a00:	100491ba 	slli	r2,r2,6
 1025a04:	10c5883a 	add	r2,r2,r3
 1025a08:	10c00f04 	addi	r3,r2,60
 1025a0c:	00800044 	movi	r2,1
 1025a10:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
 1025a14:	e0bfeb0f 	ldh	r2,-84(fp)
 1025a18:	00c04134 	movhi	r3,260
 1025a1c:	18e3b704 	addi	r3,r3,-28964
 1025a20:	100491ba 	slli	r2,r2,6
 1025a24:	10c5883a 	add	r2,r2,r3
 1025a28:	10800e04 	addi	r2,r2,56
 1025a2c:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 1025a30:	e03fea15 	stw	zero,-88(fp)
 1025a34:	00004506 	br	1025b4c <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
 1025a38:	e0ffeb0f 	ldh	r3,-84(fp)
 1025a3c:	e0bfea17 	ldw	r2,-88(fp)
 1025a40:	18803f26 	beq	r3,r2,1025b40 <alt_up_sd_card_fopen+0x2dc>
 1025a44:	e0bfea17 	ldw	r2,-88(fp)
 1025a48:	00c04134 	movhi	r3,260
 1025a4c:	18e3b704 	addi	r3,r3,-28964
 1025a50:	100491ba 	slli	r2,r2,6
 1025a54:	10c5883a 	add	r2,r2,r3
 1025a58:	10800f04 	addi	r2,r2,60
 1025a5c:	10800017 	ldw	r2,0(r2)
 1025a60:	10800058 	cmpnei	r2,r2,1
 1025a64:	1000361e 	bne	r2,zero,1025b40 <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
 1025a68:	e0bfeb0f 	ldh	r2,-84(fp)
 1025a6c:	00c04134 	movhi	r3,260
 1025a70:	18e3b704 	addi	r3,r3,-28964
 1025a74:	100491ba 	slli	r2,r2,6
 1025a78:	10c5883a 	add	r2,r2,r3
 1025a7c:	10800a04 	addi	r2,r2,40
 1025a80:	11000017 	ldw	r4,0(r2)
 1025a84:	e0bfea17 	ldw	r2,-88(fp)
 1025a88:	00c04134 	movhi	r3,260
 1025a8c:	18e3b704 	addi	r3,r3,-28964
 1025a90:	100491ba 	slli	r2,r2,6
 1025a94:	10c5883a 	add	r2,r2,r3
 1025a98:	10800a04 	addi	r2,r2,40
 1025a9c:	10800017 	ldw	r2,0(r2)
 1025aa0:	2080271e 	bne	r4,r2,1025b40 <alt_up_sd_card_fopen+0x2dc>
 1025aa4:	e0bfeb0f 	ldh	r2,-84(fp)
 1025aa8:	00c04134 	movhi	r3,260
 1025aac:	18e3b704 	addi	r3,r3,-28964
 1025ab0:	100491ba 	slli	r2,r2,6
 1025ab4:	10c5883a 	add	r2,r2,r3
 1025ab8:	10800b04 	addi	r2,r2,44
 1025abc:	11000017 	ldw	r4,0(r2)
 1025ac0:	e0bfea17 	ldw	r2,-88(fp)
 1025ac4:	00c04134 	movhi	r3,260
 1025ac8:	18e3b704 	addi	r3,r3,-28964
 1025acc:	100491ba 	slli	r2,r2,6
 1025ad0:	10c5883a 	add	r2,r2,r3
 1025ad4:	10800b04 	addi	r2,r2,44
 1025ad8:	10800017 	ldw	r2,0(r2)
 1025adc:	2080181e 	bne	r4,r2,1025b40 <alt_up_sd_card_fopen+0x2dc>
 1025ae0:	e0bfeb0f 	ldh	r2,-84(fp)
 1025ae4:	00c04134 	movhi	r3,260
 1025ae8:	18e3b704 	addi	r3,r3,-28964
 1025aec:	100491ba 	slli	r2,r2,6
 1025af0:	10c5883a 	add	r2,r2,r3
 1025af4:	10800c04 	addi	r2,r2,48
 1025af8:	1100000b 	ldhu	r4,0(r2)
 1025afc:	e0bfea17 	ldw	r2,-88(fp)
 1025b00:	00c04134 	movhi	r3,260
 1025b04:	18e3b704 	addi	r3,r3,-28964
 1025b08:	100491ba 	slli	r2,r2,6
 1025b0c:	10c5883a 	add	r2,r2,r3
 1025b10:	10800c04 	addi	r2,r2,48
 1025b14:	1080000b 	ldhu	r2,0(r2)
 1025b18:	20ffffcc 	andi	r3,r4,65535
 1025b1c:	18e0001c 	xori	r3,r3,32768
 1025b20:	18e00004 	addi	r3,r3,-32768
 1025b24:	10bfffcc 	andi	r2,r2,65535
 1025b28:	10a0001c 	xori	r2,r2,32768
 1025b2c:	10a00004 	addi	r2,r2,-32768
 1025b30:	1880031e 	bne	r3,r2,1025b40 <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
 1025b34:	00bfff84 	movi	r2,-2
 1025b38:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 1025b3c:	00002b06 	br	1025bec <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 1025b40:	e0bfea17 	ldw	r2,-88(fp)
 1025b44:	10800044 	addi	r2,r2,1
 1025b48:	e0bfea15 	stw	r2,-88(fp)
 1025b4c:	e0bfea17 	ldw	r2,-88(fp)
 1025b50:	10800510 	cmplti	r2,r2,20
 1025b54:	103fb81e 	bne	r2,zero,1025a38 <alt_up_sd_card_fopen+0x1d4>
 1025b58:	00002406 	br	1025bec <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
 1025b5c:	e0bffe17 	ldw	r2,-8(fp)
 1025b60:	1005003a 	cmpeq	r2,r2,zero
 1025b64:	10001f1e 	bne	r2,zero,1025be4 <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
 1025b68:	e0bfeb0f 	ldh	r2,-84(fp)
 1025b6c:	100491ba 	slli	r2,r2,6
 1025b70:	1007883a 	mov	r3,r2
 1025b74:	00804134 	movhi	r2,260
 1025b78:	10a3b704 	addi	r2,r2,-28964
 1025b7c:	188b883a 	add	r5,r3,r2
 1025b80:	e1bfed04 	addi	r6,fp,-76
 1025b84:	e13ffd17 	ldw	r4,-12(fp)
 1025b88:	1024db80 	call	1024db8 <create_file>
 1025b8c:	1005003a 	cmpeq	r2,r2,zero
 1025b90:	1000111e 	bne	r2,zero,1025bd8 <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
 1025b94:	e0bfeb0f 	ldh	r2,-84(fp)
 1025b98:	00c04134 	movhi	r3,260
 1025b9c:	18e3b704 	addi	r3,r3,-28964
 1025ba0:	100491ba 	slli	r2,r2,6
 1025ba4:	10c5883a 	add	r2,r2,r3
 1025ba8:	10c00f04 	addi	r3,r2,60
 1025bac:	00800044 	movi	r2,1
 1025bb0:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
 1025bb4:	e0bfeb0f 	ldh	r2,-84(fp)
 1025bb8:	00c04134 	movhi	r3,260
 1025bbc:	18e3b704 	addi	r3,r3,-28964
 1025bc0:	100491ba 	slli	r2,r2,6
 1025bc4:	10c5883a 	add	r2,r2,r3
 1025bc8:	10c00e04 	addi	r3,r2,56
 1025bcc:	00800044 	movi	r2,1
 1025bd0:	18800015 	stw	r2,0(r3)
 1025bd4:	00000506 	br	1025bec <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
 1025bd8:	00bfffc4 	movi	r2,-1
 1025bdc:	e0bfeb0d 	sth	r2,-84(fp)
 1025be0:	00000206 	br	1025bec <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
 1025be4:	00bfffc4 	movi	r2,-1
 1025be8:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
 1025bec:	e0bfeb0f 	ldh	r2,-84(fp)
 1025bf0:	e0bfff15 	stw	r2,-4(fp)
 1025bf4:	e0bfff17 	ldw	r2,-4(fp)
}
 1025bf8:	e037883a 	mov	sp,fp
 1025bfc:	dfc00117 	ldw	ra,4(sp)
 1025c00:	df000017 	ldw	fp,0(sp)
 1025c04:	dec00204 	addi	sp,sp,8
 1025c08:	f800283a 	ret

01025c0c <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 1025c0c:	defffd04 	addi	sp,sp,-12
 1025c10:	df000215 	stw	fp,8(sp)
 1025c14:	df000204 	addi	fp,sp,8
 1025c18:	e13ffe0d 	sth	r4,-8(fp)
 1025c1c:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 1025c20:	e0bffe0f 	ldh	r2,-8(fp)
 1025c24:	1004803a 	cmplt	r2,r2,zero
 1025c28:	1000181e 	bne	r2,zero,1025c8c <alt_up_sd_card_set_attributes+0x80>
 1025c2c:	e0bffe0f 	ldh	r2,-8(fp)
 1025c30:	10800508 	cmpgei	r2,r2,20
 1025c34:	1000151e 	bne	r2,zero,1025c8c <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
 1025c38:	e0bffe0f 	ldh	r2,-8(fp)
 1025c3c:	00c04134 	movhi	r3,260
 1025c40:	18e3b704 	addi	r3,r3,-28964
 1025c44:	100491ba 	slli	r2,r2,6
 1025c48:	10c5883a 	add	r2,r2,r3
 1025c4c:	10800f04 	addi	r2,r2,60
 1025c50:	10800017 	ldw	r2,0(r2)
 1025c54:	1005003a 	cmpeq	r2,r2,zero
 1025c58:	10000c1e 	bne	r2,zero,1025c8c <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes =
 1025c5c:	e17ffe0f 	ldh	r5,-8(fp)
 1025c60:	e0bfff0b 	ldhu	r2,-4(fp)
 1025c64:	1007883a 	mov	r3,r2
 1025c68:	00bfffc4 	movi	r2,-1
 1025c6c:	1884703a 	and	r2,r3,r2
 1025c70:	1009883a 	mov	r4,r2
 1025c74:	00c04134 	movhi	r3,260
 1025c78:	18e3b704 	addi	r3,r3,-28964
 1025c7c:	280491ba 	slli	r2,r5,6
 1025c80:	10c5883a 	add	r2,r2,r3
 1025c84:	10800204 	addi	r2,r2,8
 1025c88:	110000c5 	stb	r4,3(r2)
					((char) (attributes & 0x00ff));
		}
	}
}
 1025c8c:	e037883a 	mov	sp,fp
 1025c90:	df000017 	ldw	fp,0(sp)
 1025c94:	dec00104 	addi	sp,sp,4
 1025c98:	f800283a 	ret

01025c9c <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 1025c9c:	defffd04 	addi	sp,sp,-12
 1025ca0:	df000215 	stw	fp,8(sp)
 1025ca4:	df000204 	addi	fp,sp,8
 1025ca8:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
 1025cac:	00bfffc4 	movi	r2,-1
 1025cb0:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 1025cb4:	e0bfff0f 	ldh	r2,-4(fp)
 1025cb8:	1004803a 	cmplt	r2,r2,zero
 1025cbc:	1000151e 	bne	r2,zero,1025d14 <alt_up_sd_card_get_attributes+0x78>
 1025cc0:	e0bfff0f 	ldh	r2,-4(fp)
 1025cc4:	10800508 	cmpgei	r2,r2,20
 1025cc8:	1000121e 	bne	r2,zero,1025d14 <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
 1025ccc:	e0bfff0f 	ldh	r2,-4(fp)
 1025cd0:	00c04134 	movhi	r3,260
 1025cd4:	18e3b704 	addi	r3,r3,-28964
 1025cd8:	100491ba 	slli	r2,r2,6
 1025cdc:	10c5883a 	add	r2,r2,r3
 1025ce0:	10800f04 	addi	r2,r2,60
 1025ce4:	10800017 	ldw	r2,0(r2)
 1025ce8:	1005003a 	cmpeq	r2,r2,zero
 1025cec:	1000091e 	bne	r2,zero,1025d14 <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
 1025cf0:	e0bfff0f 	ldh	r2,-4(fp)
 1025cf4:	00c04134 	movhi	r3,260
 1025cf8:	18e3b704 	addi	r3,r3,-28964
 1025cfc:	100491ba 	slli	r2,r2,6
 1025d00:	10c5883a 	add	r2,r2,r3
 1025d04:	10800204 	addi	r2,r2,8
 1025d08:	108000c3 	ldbu	r2,3(r2)
 1025d0c:	10803fcc 	andi	r2,r2,255
 1025d10:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 1025d14:	e0bffe0f 	ldh	r2,-8(fp)
}
 1025d18:	e037883a 	mov	sp,fp
 1025d1c:	df000017 	ldw	fp,0(sp)
 1025d20:	dec00104 	addi	sp,sp,4
 1025d24:	f800283a 	ret

01025d28 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 1025d28:	defffa04 	addi	sp,sp,-24
 1025d2c:	dfc00515 	stw	ra,20(sp)
 1025d30:	df000415 	stw	fp,16(sp)
 1025d34:	df000404 	addi	fp,sp,16
 1025d38:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
 1025d3c:	00bfffc4 	movi	r2,-1
 1025d40:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 1025d44:	e0bffe0f 	ldh	r2,-8(fp)
 1025d48:	1004803a 	cmplt	r2,r2,zero
 1025d4c:	1000d31e 	bne	r2,zero,102609c <alt_up_sd_card_read+0x374>
 1025d50:	e0bffe0f 	ldh	r2,-8(fp)
 1025d54:	10800508 	cmpgei	r2,r2,20
 1025d58:	1000d01e 	bne	r2,zero,102609c <alt_up_sd_card_read+0x374>
		if (active_files[file_handle].in_use) {
 1025d5c:	e0bffe0f 	ldh	r2,-8(fp)
 1025d60:	00c04134 	movhi	r3,260
 1025d64:	18e3b704 	addi	r3,r3,-28964
 1025d68:	100491ba 	slli	r2,r2,6
 1025d6c:	10c5883a 	add	r2,r2,r3
 1025d70:	10800f04 	addi	r2,r2,60
 1025d74:	10800017 	ldw	r2,0(r2)
 1025d78:	1005003a 	cmpeq	r2,r2,zero
 1025d7c:	1000c71e 	bne	r2,zero,102609c <alt_up_sd_card_read+0x374>
			if (active_files[file_handle].current_byte_position
 1025d80:	e0bffe0f 	ldh	r2,-8(fp)
 1025d84:	00c04134 	movhi	r3,260
 1025d88:	18e3b704 	addi	r3,r3,-28964
 1025d8c:	100491ba 	slli	r2,r2,6
 1025d90:	10c5883a 	add	r2,r2,r3
 1025d94:	10800904 	addi	r2,r2,36
 1025d98:	11000017 	ldw	r4,0(r2)
 1025d9c:	e0bffe0f 	ldh	r2,-8(fp)
 1025da0:	00c04134 	movhi	r3,260
 1025da4:	18e3b704 	addi	r3,r3,-28964
 1025da8:	100491ba 	slli	r2,r2,6
 1025dac:	10c5883a 	add	r2,r2,r3
 1025db0:	10800604 	addi	r2,r2,24
 1025db4:	10800017 	ldw	r2,0(r2)
 1025db8:	2080b82e 	bgeu	r4,r2,102609c <alt_up_sd_card_read+0x374>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
 1025dbc:	00804134 	movhi	r2,260
 1025dc0:	10a3a204 	addi	r2,r2,-29048
 1025dc4:	11001417 	ldw	r4,80(r2)
 1025dc8:	e0bffe0f 	ldh	r2,-8(fp)
 1025dcc:	00c04134 	movhi	r3,260
 1025dd0:	18e3b704 	addi	r3,r3,-28964
 1025dd4:	100491ba 	slli	r2,r2,6
 1025dd8:	10c5883a 	add	r2,r2,r3
 1025ddc:	10800704 	addi	r2,r2,28
 1025de0:	10800017 	ldw	r2,0(r2)
 1025de4:	10ffff84 	addi	r3,r2,-2
 1025de8:	00804134 	movhi	r2,260
 1025dec:	10a3a204 	addi	r2,r2,-29048
 1025df0:	10800383 	ldbu	r2,14(r2)
 1025df4:	10803fcc 	andi	r2,r2,255
 1025df8:	1885383a 	mul	r2,r3,r2
 1025dfc:	2089883a 	add	r4,r4,r2
 1025e00:	e0bffe0f 	ldh	r2,-8(fp)
 1025e04:	00c04134 	movhi	r3,260
 1025e08:	18e3b704 	addi	r3,r3,-28964
 1025e0c:	100491ba 	slli	r2,r2,6
 1025e10:	10c5883a 	add	r2,r2,r3
 1025e14:	10800804 	addi	r2,r2,32
 1025e18:	10800017 	ldw	r2,0(r2)
 1025e1c:	2085883a 	add	r2,r4,r2
 1025e20:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
 1025e24:	e0bffe0f 	ldh	r2,-8(fp)
 1025e28:	00c04134 	movhi	r3,260
 1025e2c:	18e3b704 	addi	r3,r3,-28964
 1025e30:	100491ba 	slli	r2,r2,6
 1025e34:	10c5883a 	add	r2,r2,r3
 1025e38:	10800904 	addi	r2,r2,36
 1025e3c:	10800017 	ldw	r2,0(r2)
 1025e40:	1005003a 	cmpeq	r2,r2,zero
 1025e44:	10006a1e 	bne	r2,zero,1025ff0 <alt_up_sd_card_read+0x2c8>
 1025e48:	e0bffe0f 	ldh	r2,-8(fp)
 1025e4c:	00c04134 	movhi	r3,260
 1025e50:	18e3b704 	addi	r3,r3,-28964
 1025e54:	100491ba 	slli	r2,r2,6
 1025e58:	10c5883a 	add	r2,r2,r3
 1025e5c:	10800904 	addi	r2,r2,36
 1025e60:	10800017 	ldw	r2,0(r2)
 1025e64:	10807fcc 	andi	r2,r2,511
 1025e68:	1004c03a 	cmpne	r2,r2,zero
 1025e6c:	1000601e 	bne	r2,zero,1025ff0 <alt_up_sd_card_read+0x2c8>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 1025e70:	e0bffe0f 	ldh	r2,-8(fp)
 1025e74:	00c04134 	movhi	r3,260
 1025e78:	18e3b704 	addi	r3,r3,-28964
 1025e7c:	100491ba 	slli	r2,r2,6
 1025e80:	10c5883a 	add	r2,r2,r3
 1025e84:	10800804 	addi	r2,r2,32
 1025e88:	10c00017 	ldw	r3,0(r2)
 1025e8c:	00804134 	movhi	r2,260
 1025e90:	10a3a204 	addi	r2,r2,-29048
 1025e94:	10800383 	ldbu	r2,14(r2)
 1025e98:	10803fcc 	andi	r2,r2,255
 1025e9c:	10bfffc4 	addi	r2,r2,-1
 1025ea0:	1880411e 	bne	r3,r2,1025fa8 <alt_up_sd_card_read+0x280>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 1025ea4:	e0bffe0f 	ldh	r2,-8(fp)
 1025ea8:	00c04134 	movhi	r3,260
 1025eac:	18e3b704 	addi	r3,r3,-28964
 1025eb0:	100491ba 	slli	r2,r2,6
 1025eb4:	10c5883a 	add	r2,r2,r3
 1025eb8:	10800704 	addi	r2,r2,28
 1025ebc:	11000017 	ldw	r4,0(r2)
 1025ec0:	e17ffd84 	addi	r5,fp,-10
 1025ec4:	10226940 	call	1022694 <get_cluster_flag>
 1025ec8:	1005003a 	cmpeq	r2,r2,zero
 1025ecc:	1000331e 	bne	r2,zero,1025f9c <alt_up_sd_card_read+0x274>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 1025ed0:	e0bffd8b 	ldhu	r2,-10(fp)
 1025ed4:	10bfffcc 	andi	r2,r2,65535
 1025ed8:	10fffe0c 	andi	r3,r2,65528
 1025edc:	00bffe14 	movui	r2,65528
 1025ee0:	1880031e 	bne	r3,r2,1025ef0 <alt_up_sd_card_read+0x1c8>
								/* End of file */
								return -1;
 1025ee4:	00bfffc4 	movi	r2,-1
 1025ee8:	e0bfff15 	stw	r2,-4(fp)
 1025eec:	00006d06 	br	10260a4 <alt_up_sd_card_read+0x37c>
							} else {
								active_files[file_handle].current_cluster_index =
 1025ef0:	e13ffe0f 	ldh	r4,-8(fp)
 1025ef4:	e0bffd8b 	ldhu	r2,-10(fp)
 1025ef8:	117fffcc 	andi	r5,r2,65535
 1025efc:	00c04134 	movhi	r3,260
 1025f00:	18e3b704 	addi	r3,r3,-28964
 1025f04:	200491ba 	slli	r2,r4,6
 1025f08:	10c5883a 	add	r2,r2,r3
 1025f0c:	10800704 	addi	r2,r2,28
 1025f10:	11400015 	stw	r5,0(r2)
										next_cluster;
								active_files[file_handle].current_sector_in_cluster =
 1025f14:	e0bffe0f 	ldh	r2,-8(fp)
 1025f18:	00c04134 	movhi	r3,260
 1025f1c:	18e3b704 	addi	r3,r3,-28964
 1025f20:	100491ba 	slli	r2,r2,6
 1025f24:	10c5883a 	add	r2,r2,r3
 1025f28:	10800804 	addi	r2,r2,32
 1025f2c:	10000015 	stw	zero,0(r2)
										0;
								data_sector =
 1025f30:	00804134 	movhi	r2,260
 1025f34:	10a3a204 	addi	r2,r2,-29048
 1025f38:	11001417 	ldw	r4,80(r2)
 1025f3c:	e0bffe0f 	ldh	r2,-8(fp)
 1025f40:	00c04134 	movhi	r3,260
 1025f44:	18e3b704 	addi	r3,r3,-28964
 1025f48:	100491ba 	slli	r2,r2,6
 1025f4c:	10c5883a 	add	r2,r2,r3
 1025f50:	10800704 	addi	r2,r2,28
 1025f54:	10800017 	ldw	r2,0(r2)
 1025f58:	10ffff84 	addi	r3,r2,-2
 1025f5c:	00804134 	movhi	r2,260
 1025f60:	10a3a204 	addi	r2,r2,-29048
 1025f64:	10800383 	ldbu	r2,14(r2)
 1025f68:	10803fcc 	andi	r2,r2,255
 1025f6c:	1885383a 	mul	r2,r3,r2
 1025f70:	2089883a 	add	r4,r4,r2
 1025f74:	e0bffe0f 	ldh	r2,-8(fp)
 1025f78:	00c04134 	movhi	r3,260
 1025f7c:	18e3b704 	addi	r3,r3,-28964
 1025f80:	100491ba 	slli	r2,r2,6
 1025f84:	10c5883a 	add	r2,r2,r3
 1025f88:	10800804 	addi	r2,r2,32
 1025f8c:	10800017 	ldw	r2,0(r2)
 1025f90:	2085883a 	add	r2,r4,r2
 1025f94:	e0bffc15 	stw	r2,-16(fp)
 1025f98:	00001506 	br	1025ff0 <alt_up_sd_card_read+0x2c8>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
 1025f9c:	00bfff84 	movi	r2,-2
 1025fa0:	e0bfff15 	stw	r2,-4(fp)
 1025fa4:	00003f06 	br	10260a4 <alt_up_sd_card_read+0x37c>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster =
 1025fa8:	e17ffe0f 	ldh	r5,-8(fp)
 1025fac:	e0bffe0f 	ldh	r2,-8(fp)
 1025fb0:	00c04134 	movhi	r3,260
 1025fb4:	18e3b704 	addi	r3,r3,-28964
 1025fb8:	100491ba 	slli	r2,r2,6
 1025fbc:	10c5883a 	add	r2,r2,r3
 1025fc0:	10800804 	addi	r2,r2,32
 1025fc4:	10800017 	ldw	r2,0(r2)
 1025fc8:	11000044 	addi	r4,r2,1
 1025fcc:	00c04134 	movhi	r3,260
 1025fd0:	18e3b704 	addi	r3,r3,-28964
 1025fd4:	280491ba 	slli	r2,r5,6
 1025fd8:	10c5883a 	add	r2,r2,r3
 1025fdc:	10800804 	addi	r2,r2,32
 1025fe0:	11000015 	stw	r4,0(r2)
								active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
 1025fe4:	e0bffc17 	ldw	r2,-16(fp)
 1025fe8:	10800044 	addi	r2,r2,1
 1025fec:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index
 1025ff0:	d0e72917 	ldw	r3,-25436(gp)
 1025ff4:	e0bffc17 	ldw	r2,-16(fp)
 1025ff8:	1885883a 	add	r2,r3,r2
 1025ffc:	1007883a 	mov	r3,r2
 1026000:	d0a72d17 	ldw	r2,-25420(gp)
 1026004:	18800826 	beq	r3,r2,1026028 <alt_up_sd_card_read+0x300>
						!= (data_sector
								+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
 1026008:	d1672917 	ldw	r5,-25436(gp)
 102600c:	e13ffc17 	ldw	r4,-16(fp)
 1026010:	10225980 	call	1022598 <Read_Sector_Data>
 1026014:	1004c03a 	cmpne	r2,r2,zero
 1026018:	1000031e 	bne	r2,zero,1026028 <alt_up_sd_card_read+0x300>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
 102601c:	00bfff84 	movi	r2,-2
 1026020:	e0bfff15 	stw	r2,-4(fp)
 1026024:	00001f06 	br	10260a4 <alt_up_sd_card_read+0x37c>
					}
				}

				ch =
 1026028:	e0bffe0f 	ldh	r2,-8(fp)
 102602c:	00c04134 	movhi	r3,260
 1026030:	18e3b704 	addi	r3,r3,-28964
 1026034:	100491ba 	slli	r2,r2,6
 1026038:	10c5883a 	add	r2,r2,r3
 102603c:	10800904 	addi	r2,r2,36
 1026040:	10800017 	ldw	r2,0(r2)
 1026044:	10807fcc 	andi	r2,r2,511
 1026048:	1007883a 	mov	r3,r2
 102604c:	d0a72817 	ldw	r2,-25440(gp)
 1026050:	1885883a 	add	r2,r3,r2
 1026054:	10800023 	ldbuio	r2,0(r2)
 1026058:	10803fcc 	andi	r2,r2,255
 102605c:	e0bffd0d 	sth	r2,-12(fp)
						(unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position =
 1026060:	e17ffe0f 	ldh	r5,-8(fp)
 1026064:	e0bffe0f 	ldh	r2,-8(fp)
 1026068:	00c04134 	movhi	r3,260
 102606c:	18e3b704 	addi	r3,r3,-28964
 1026070:	100491ba 	slli	r2,r2,6
 1026074:	10c5883a 	add	r2,r2,r3
 1026078:	10800904 	addi	r2,r2,36
 102607c:	10800017 	ldw	r2,0(r2)
 1026080:	11000044 	addi	r4,r2,1
 1026084:	00c04134 	movhi	r3,260
 1026088:	18e3b704 	addi	r3,r3,-28964
 102608c:	280491ba 	slli	r2,r5,6
 1026090:	10c5883a 	add	r2,r2,r3
 1026094:	10800904 	addi	r2,r2,36
 1026098:	11000015 	stw	r4,0(r2)
						active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
 102609c:	e0bffd0f 	ldh	r2,-12(fp)
 10260a0:	e0bfff15 	stw	r2,-4(fp)
 10260a4:	e0bfff17 	ldw	r2,-4(fp)
}
 10260a8:	e037883a 	mov	sp,fp
 10260ac:	dfc00117 	ldw	ra,4(sp)
 10260b0:	df000017 	ldw	fp,0(sp)
 10260b4:	dec00204 	addi	sp,sp,8
 10260b8:	f800283a 	ret

010260bc <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 10260bc:	defff604 	addi	sp,sp,-40
 10260c0:	dfc00915 	stw	ra,36(sp)
 10260c4:	df000815 	stw	fp,32(sp)
 10260c8:	df000804 	addi	fp,sp,32
 10260cc:	e13ffd0d 	sth	r4,-12(fp)
 10260d0:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
 10260d4:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 10260d8:	e0bffd0f 	ldh	r2,-12(fp)
 10260dc:	1004803a 	cmplt	r2,r2,zero
 10260e0:	10017d1e 	bne	r2,zero,10266d8 <alt_up_sd_card_write+0x61c>
 10260e4:	e0bffd0f 	ldh	r2,-12(fp)
 10260e8:	10800508 	cmpgei	r2,r2,20
 10260ec:	10017a1e 	bne	r2,zero,10266d8 <alt_up_sd_card_write+0x61c>
		if (active_files[file_handle].in_use) {
 10260f0:	e0bffd0f 	ldh	r2,-12(fp)
 10260f4:	00c04134 	movhi	r3,260
 10260f8:	18e3b704 	addi	r3,r3,-28964
 10260fc:	100491ba 	slli	r2,r2,6
 1026100:	10c5883a 	add	r2,r2,r3
 1026104:	10800f04 	addi	r2,r2,60
 1026108:	10800017 	ldw	r2,0(r2)
 102610c:	1005003a 	cmpeq	r2,r2,zero
 1026110:	1001711e 	bne	r2,zero,10266d8 <alt_up_sd_card_write+0x61c>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
 1026114:	00804134 	movhi	r2,260
 1026118:	10a3a204 	addi	r2,r2,-29048
 102611c:	11001417 	ldw	r4,80(r2)
 1026120:	e0bffd0f 	ldh	r2,-12(fp)
 1026124:	00c04134 	movhi	r3,260
 1026128:	18e3b704 	addi	r3,r3,-28964
 102612c:	100491ba 	slli	r2,r2,6
 1026130:	10c5883a 	add	r2,r2,r3
 1026134:	10800704 	addi	r2,r2,28
 1026138:	10800017 	ldw	r2,0(r2)
 102613c:	10ffff84 	addi	r3,r2,-2
 1026140:	00804134 	movhi	r2,260
 1026144:	10a3a204 	addi	r2,r2,-29048
 1026148:	10800383 	ldbu	r2,14(r2)
 102614c:	10803fcc 	andi	r2,r2,255
 1026150:	1885383a 	mul	r2,r3,r2
 1026154:	2089883a 	add	r4,r4,r2
 1026158:	e0bffd0f 	ldh	r2,-12(fp)
 102615c:	00c04134 	movhi	r3,260
 1026160:	18e3b704 	addi	r3,r3,-28964
 1026164:	100491ba 	slli	r2,r2,6
 1026168:	10c5883a 	add	r2,r2,r3
 102616c:	10800804 	addi	r2,r2,32
 1026170:	10800017 	ldw	r2,0(r2)
 1026174:	2085883a 	add	r2,r4,r2
 1026178:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
 102617c:	e0bffd0f 	ldh	r2,-12(fp)
 1026180:	00c04134 	movhi	r3,260
 1026184:	18e3b704 	addi	r3,r3,-28964
 1026188:	100491ba 	slli	r2,r2,6
 102618c:	10c5883a 	add	r2,r2,r3
 1026190:	10800904 	addi	r2,r2,36
 1026194:	11000017 	ldw	r4,0(r2)
 1026198:	00804134 	movhi	r2,260
 102619c:	10a3a204 	addi	r2,r2,-29048
 10261a0:	1080030b 	ldhu	r2,12(r2)
 10261a4:	10ffffcc 	andi	r3,r2,65535
 10261a8:	20c5203a 	divu	r2,r4,r3
 10261ac:	10c5383a 	mul	r2,r2,r3
 10261b0:	2085c83a 	sub	r2,r4,r2
 10261b4:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
 10261b8:	e0bffd0f 	ldh	r2,-12(fp)
 10261bc:	00c04134 	movhi	r3,260
 10261c0:	18e3b704 	addi	r3,r3,-28964
 10261c4:	100491ba 	slli	r2,r2,6
 10261c8:	10c5883a 	add	r2,r2,r3
 10261cc:	10800904 	addi	r2,r2,36
 10261d0:	11000017 	ldw	r4,0(r2)
 10261d4:	e0bffd0f 	ldh	r2,-12(fp)
 10261d8:	00c04134 	movhi	r3,260
 10261dc:	18e3b704 	addi	r3,r3,-28964
 10261e0:	100491ba 	slli	r2,r2,6
 10261e4:	10c5883a 	add	r2,r2,r3
 10261e8:	10800604 	addi	r2,r2,24
 10261ec:	10800017 	ldw	r2,0(r2)
 10261f0:	2080682e 	bgeu	r4,r2,1026394 <alt_up_sd_card_write+0x2d8>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
 10261f4:	e0bffd0f 	ldh	r2,-12(fp)
 10261f8:	00c04134 	movhi	r3,260
 10261fc:	18e3b704 	addi	r3,r3,-28964
 1026200:	100491ba 	slli	r2,r2,6
 1026204:	10c5883a 	add	r2,r2,r3
 1026208:	10800904 	addi	r2,r2,36
 102620c:	10800017 	ldw	r2,0(r2)
 1026210:	1005003a 	cmpeq	r2,r2,zero
 1026214:	1000e41e 	bne	r2,zero,10265a8 <alt_up_sd_card_write+0x4ec>
 1026218:	e0bff80f 	ldh	r2,-32(fp)
 102621c:	1004c03a 	cmpne	r2,r2,zero
 1026220:	1000e11e 	bne	r2,zero,10265a8 <alt_up_sd_card_write+0x4ec>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 1026224:	e0bffd0f 	ldh	r2,-12(fp)
 1026228:	00c04134 	movhi	r3,260
 102622c:	18e3b704 	addi	r3,r3,-28964
 1026230:	100491ba 	slli	r2,r2,6
 1026234:	10c5883a 	add	r2,r2,r3
 1026238:	10800804 	addi	r2,r2,32
 102623c:	10c00017 	ldw	r3,0(r2)
 1026240:	00804134 	movhi	r2,260
 1026244:	10a3a204 	addi	r2,r2,-29048
 1026248:	10800383 	ldbu	r2,14(r2)
 102624c:	10803fcc 	andi	r2,r2,255
 1026250:	10bfffc4 	addi	r2,r2,-1
 1026254:	18803c1e 	bne	r3,r2,1026348 <alt_up_sd_card_write+0x28c>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 1026258:	e0bffd0f 	ldh	r2,-12(fp)
 102625c:	00c04134 	movhi	r3,260
 1026260:	18e3b704 	addi	r3,r3,-28964
 1026264:	100491ba 	slli	r2,r2,6
 1026268:	10c5883a 	add	r2,r2,r3
 102626c:	10800704 	addi	r2,r2,28
 1026270:	11000017 	ldw	r4,0(r2)
 1026274:	e17ffb04 	addi	r5,fp,-20
 1026278:	10226940 	call	1022694 <get_cluster_flag>
 102627c:	1005003a 	cmpeq	r2,r2,zero
 1026280:	10002f1e 	bne	r2,zero,1026340 <alt_up_sd_card_write+0x284>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
 1026284:	e0bffb0b 	ldhu	r2,-20(fp)
 1026288:	10ffffcc 	andi	r3,r2,65535
 102628c:	00bffdd4 	movui	r2,65527
 1026290:	10c0c536 	bltu	r2,r3,10265a8 <alt_up_sd_card_write+0x4ec>
								active_files[file_handle].current_cluster_index =
 1026294:	e13ffd0f 	ldh	r4,-12(fp)
 1026298:	e0bffb0b 	ldhu	r2,-20(fp)
 102629c:	117fffcc 	andi	r5,r2,65535
 10262a0:	00c04134 	movhi	r3,260
 10262a4:	18e3b704 	addi	r3,r3,-28964
 10262a8:	200491ba 	slli	r2,r4,6
 10262ac:	10c5883a 	add	r2,r2,r3
 10262b0:	10800704 	addi	r2,r2,28
 10262b4:	11400015 	stw	r5,0(r2)
										next_cluster;
								active_files[file_handle].current_sector_in_cluster =
 10262b8:	e0bffd0f 	ldh	r2,-12(fp)
 10262bc:	00c04134 	movhi	r3,260
 10262c0:	18e3b704 	addi	r3,r3,-28964
 10262c4:	100491ba 	slli	r2,r2,6
 10262c8:	10c5883a 	add	r2,r2,r3
 10262cc:	10800804 	addi	r2,r2,32
 10262d0:	10000015 	stw	zero,0(r2)
										0;
								data_sector =
 10262d4:	00804134 	movhi	r2,260
 10262d8:	10a3a204 	addi	r2,r2,-29048
 10262dc:	11001417 	ldw	r4,80(r2)
 10262e0:	e0bffd0f 	ldh	r2,-12(fp)
 10262e4:	00c04134 	movhi	r3,260
 10262e8:	18e3b704 	addi	r3,r3,-28964
 10262ec:	100491ba 	slli	r2,r2,6
 10262f0:	10c5883a 	add	r2,r2,r3
 10262f4:	10800704 	addi	r2,r2,28
 10262f8:	10800017 	ldw	r2,0(r2)
 10262fc:	10ffff84 	addi	r3,r2,-2
 1026300:	00804134 	movhi	r2,260
 1026304:	10a3a204 	addi	r2,r2,-29048
 1026308:	10800383 	ldbu	r2,14(r2)
 102630c:	10803fcc 	andi	r2,r2,255
 1026310:	1885383a 	mul	r2,r3,r2
 1026314:	2089883a 	add	r4,r4,r2
 1026318:	e0bffd0f 	ldh	r2,-12(fp)
 102631c:	00c04134 	movhi	r3,260
 1026320:	18e3b704 	addi	r3,r3,-28964
 1026324:	100491ba 	slli	r2,r2,6
 1026328:	10c5883a 	add	r2,r2,r3
 102632c:	10800804 	addi	r2,r2,32
 1026330:	10800017 	ldw	r2,0(r2)
 1026334:	2085883a 	add	r2,r4,r2
 1026338:	e0bff915 	stw	r2,-28(fp)
 102633c:	00009a06 	br	10265a8 <alt_up_sd_card_write+0x4ec>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
 1026340:	e03fff15 	stw	zero,-4(fp)
 1026344:	0000e606 	br	10266e0 <alt_up_sd_card_write+0x624>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
 1026348:	e17ffd0f 	ldh	r5,-12(fp)
 102634c:	e0bffd0f 	ldh	r2,-12(fp)
 1026350:	00c04134 	movhi	r3,260
 1026354:	18e3b704 	addi	r3,r3,-28964
 1026358:	100491ba 	slli	r2,r2,6
 102635c:	10c5883a 	add	r2,r2,r3
 1026360:	10800804 	addi	r2,r2,32
 1026364:	10800017 	ldw	r2,0(r2)
 1026368:	11000044 	addi	r4,r2,1
 102636c:	00c04134 	movhi	r3,260
 1026370:	18e3b704 	addi	r3,r3,-28964
 1026374:	280491ba 	slli	r2,r5,6
 1026378:	10c5883a 	add	r2,r2,r3
 102637c:	10800804 	addi	r2,r2,32
 1026380:	11000015 	stw	r4,0(r2)
										+ 1;
//						active_files[file_handle].current_sector_in_cluster =
//								(active_files[file_handle].current_byte_position
//										/ boot_sector_data.sector_size_in_bytes)
//										% boot_sector_data.sectors_per_cluster;
						data_sector = data_sector + 1;
 1026384:	e0bff917 	ldw	r2,-28(fp)
 1026388:	10800044 	addi	r2,r2,1
 102638c:	e0bff915 	stw	r2,-28(fp)
 1026390:	00008506 	br	10265a8 <alt_up_sd_card_write+0x4ec>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
 1026394:	e0bffd0f 	ldh	r2,-12(fp)
 1026398:	00c04134 	movhi	r3,260
 102639c:	18e3b704 	addi	r3,r3,-28964
 10263a0:	100491ba 	slli	r2,r2,6
 10263a4:	10c5883a 	add	r2,r2,r3
 10263a8:	10800904 	addi	r2,r2,36
 10263ac:	10800017 	ldw	r2,0(r2)
 10263b0:	1005003a 	cmpeq	r2,r2,zero
 10263b4:	10007c1e 	bne	r2,zero,10265a8 <alt_up_sd_card_write+0x4ec>
 10263b8:	e0bff80f 	ldh	r2,-32(fp)
 10263bc:	1004c03a 	cmpne	r2,r2,zero
 10263c0:	1000791e 	bne	r2,zero,10265a8 <alt_up_sd_card_write+0x4ec>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
 10263c4:	e0bffd0f 	ldh	r2,-12(fp)
 10263c8:	00c04134 	movhi	r3,260
 10263cc:	18e3b704 	addi	r3,r3,-28964
 10263d0:	100491ba 	slli	r2,r2,6
 10263d4:	10c5883a 	add	r2,r2,r3
 10263d8:	10800804 	addi	r2,r2,32
 10263dc:	10c00017 	ldw	r3,0(r2)
 10263e0:	00804134 	movhi	r2,260
 10263e4:	10a3a204 	addi	r2,r2,-29048
 10263e8:	10800383 	ldbu	r2,14(r2)
 10263ec:	10803fcc 	andi	r2,r2,255
 10263f0:	10bfffc4 	addi	r2,r2,-1
 10263f4:	1880381e 	bne	r3,r2,10264d8 <alt_up_sd_card_write+0x41c>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
 10263f8:	e13ffc04 	addi	r4,fp,-16
 10263fc:	10246e40 	call	10246e4 <find_first_empty_cluster>
 1026400:	1005003a 	cmpeq	r2,r2,zero
 1026404:	1000321e 	bne	r2,zero,10264d0 <alt_up_sd_card_write+0x414>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
 1026408:	e0bffd0f 	ldh	r2,-12(fp)
 102640c:	00c04134 	movhi	r3,260
 1026410:	18e3b704 	addi	r3,r3,-28964
 1026414:	100491ba 	slli	r2,r2,6
 1026418:	10c5883a 	add	r2,r2,r3
 102641c:	10800704 	addi	r2,r2,28
 1026420:	11000017 	ldw	r4,0(r2)
 1026424:	e0bffc17 	ldw	r2,-16(fp)
 1026428:	117fffcc 	andi	r5,r2,65535
 102642c:	2960001c 	xori	r5,r5,32768
 1026430:	29600004 	addi	r5,r5,-32768
 1026434:	01800044 	movi	r6,1
 1026438:	102274c0 	call	102274c <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
 102643c:	e13ffc17 	ldw	r4,-16(fp)
 1026440:	017fffc4 	movi	r5,-1
 1026444:	01800044 	movi	r6,1
 1026448:	102274c0 	call	102274c <mark_cluster>
							mark_cluster(
 102644c:	e0bffd0f 	ldh	r2,-12(fp)
 1026450:	00c04134 	movhi	r3,260
 1026454:	18e3b704 	addi	r3,r3,-28964
 1026458:	100491ba 	slli	r2,r2,6
 102645c:	10c5883a 	add	r2,r2,r3
 1026460:	10800704 	addi	r2,r2,28
 1026464:	11000017 	ldw	r4,0(r2)
 1026468:	e0bffc17 	ldw	r2,-16(fp)
 102646c:	117fffcc 	andi	r5,r2,65535
 1026470:	2960001c 	xori	r5,r5,32768
 1026474:	29600004 	addi	r5,r5,-32768
 1026478:	000d883a 	mov	r6,zero
 102647c:	102274c0 	call	102274c <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
 1026480:	e13ffc17 	ldw	r4,-16(fp)
 1026484:	017fffc4 	movi	r5,-1
 1026488:	000d883a 	mov	r6,zero
 102648c:	102274c0 	call	102274c <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index =
 1026490:	e0bffd0f 	ldh	r2,-12(fp)
 1026494:	e13ffc17 	ldw	r4,-16(fp)
 1026498:	00c04134 	movhi	r3,260
 102649c:	18e3b704 	addi	r3,r3,-28964
 10264a0:	100491ba 	slli	r2,r2,6
 10264a4:	10c5883a 	add	r2,r2,r3
 10264a8:	10800704 	addi	r2,r2,28
 10264ac:	11000015 	stw	r4,0(r2)
									cluster_number;
							active_files[file_handle].current_sector_in_cluster =
 10264b0:	e0bffd0f 	ldh	r2,-12(fp)
 10264b4:	00c04134 	movhi	r3,260
 10264b8:	18e3b704 	addi	r3,r3,-28964
 10264bc:	100491ba 	slli	r2,r2,6
 10264c0:	10c5883a 	add	r2,r2,r3
 10264c4:	10800804 	addi	r2,r2,32
 10264c8:	10000015 	stw	zero,0(r2)
 10264cc:	00001c06 	br	1026540 <alt_up_sd_card_write+0x484>
									0;
						} else {
							return false;
 10264d0:	e03fff15 	stw	zero,-4(fp)
 10264d4:	00008206 	br	10266e0 <alt_up_sd_card_write+0x624>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster =
 10264d8:	e17ffd0f 	ldh	r5,-12(fp)
 10264dc:	e0bffd0f 	ldh	r2,-12(fp)
 10264e0:	00c04134 	movhi	r3,260
 10264e4:	18e3b704 	addi	r3,r3,-28964
 10264e8:	100491ba 	slli	r2,r2,6
 10264ec:	10c5883a 	add	r2,r2,r3
 10264f0:	10800904 	addi	r2,r2,36
 10264f4:	10c00017 	ldw	r3,0(r2)
 10264f8:	00804134 	movhi	r2,260
 10264fc:	10a3a204 	addi	r2,r2,-29048
 1026500:	1080030b 	ldhu	r2,12(r2)
 1026504:	10bfffcc 	andi	r2,r2,65535
 1026508:	1889203a 	divu	r4,r3,r2
 102650c:	00804134 	movhi	r2,260
 1026510:	10a3a204 	addi	r2,r2,-29048
 1026514:	10800383 	ldbu	r2,14(r2)
 1026518:	10c03fcc 	andi	r3,r2,255
 102651c:	20c5203a 	divu	r2,r4,r3
 1026520:	10c5383a 	mul	r2,r2,r3
 1026524:	2089c83a 	sub	r4,r4,r2
 1026528:	00c04134 	movhi	r3,260
 102652c:	18e3b704 	addi	r3,r3,-28964
 1026530:	280491ba 	slli	r2,r5,6
 1026534:	10c5883a 	add	r2,r2,r3
 1026538:	10800804 	addi	r2,r2,32
 102653c:	11000015 	stw	r4,0(r2)
								(active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes) % boot_sector_data.sectors_per_cluster;
					}
					data_sector =
 1026540:	00804134 	movhi	r2,260
 1026544:	10a3a204 	addi	r2,r2,-29048
 1026548:	11001417 	ldw	r4,80(r2)
 102654c:	e0bffd0f 	ldh	r2,-12(fp)
 1026550:	00c04134 	movhi	r3,260
 1026554:	18e3b704 	addi	r3,r3,-28964
 1026558:	100491ba 	slli	r2,r2,6
 102655c:	10c5883a 	add	r2,r2,r3
 1026560:	10800704 	addi	r2,r2,28
 1026564:	10800017 	ldw	r2,0(r2)
 1026568:	10ffff84 	addi	r3,r2,-2
 102656c:	00804134 	movhi	r2,260
 1026570:	10a3a204 	addi	r2,r2,-29048
 1026574:	10800383 	ldbu	r2,14(r2)
 1026578:	10803fcc 	andi	r2,r2,255
 102657c:	1885383a 	mul	r2,r3,r2
 1026580:	2089883a 	add	r4,r4,r2
 1026584:	e0bffd0f 	ldh	r2,-12(fp)
 1026588:	00c04134 	movhi	r3,260
 102658c:	18e3b704 	addi	r3,r3,-28964
 1026590:	100491ba 	slli	r2,r2,6
 1026594:	10c5883a 	add	r2,r2,r3
 1026598:	10800804 	addi	r2,r2,32
 102659c:	10800017 	ldw	r2,0(r2)
 10265a0:	2085883a 	add	r2,r4,r2
 10265a4:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index
 10265a8:	d0e72917 	ldw	r3,-25436(gp)
 10265ac:	e0bff917 	ldw	r2,-28(fp)
 10265b0:	1885883a 	add	r2,r3,r2
 10265b4:	1007883a 	mov	r3,r2
 10265b8:	d0a72d17 	ldw	r2,-25420(gp)
 10265bc:	18800726 	beq	r3,r2,10265dc <alt_up_sd_card_write+0x520>
					!= data_sector + fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data_Attempt_CRC(data_sector,
 10265c0:	d1672917 	ldw	r5,-25436(gp)
 10265c4:	e13ff917 	ldw	r4,-28(fp)
 10265c8:	10269ec0 	call	10269ec <Read_Sector_Data_Attempt_CRC>
 10265cc:	1004c03a 	cmpne	r2,r2,zero
 10265d0:	1000021e 	bne	r2,zero,10265dc <alt_up_sd_card_write+0x520>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
 10265d4:	e03fff15 	stw	zero,-4(fp)
 10265d8:	00004106 	br	10266e0 <alt_up_sd_card_write+0x624>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 10265dc:	e0bff80f 	ldh	r2,-32(fp)
 10265e0:	1007883a 	mov	r3,r2
 10265e4:	d0a72817 	ldw	r2,-25440(gp)
 10265e8:	1885883a 	add	r2,r3,r2
 10265ec:	e0fffe07 	ldb	r3,-8(fp)
 10265f0:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position =
 10265f4:	e17ffd0f 	ldh	r5,-12(fp)
 10265f8:	e0bffd0f 	ldh	r2,-12(fp)
 10265fc:	00c04134 	movhi	r3,260
 1026600:	18e3b704 	addi	r3,r3,-28964
 1026604:	100491ba 	slli	r2,r2,6
 1026608:	10c5883a 	add	r2,r2,r3
 102660c:	10800904 	addi	r2,r2,36
 1026610:	10800017 	ldw	r2,0(r2)
 1026614:	11000044 	addi	r4,r2,1
 1026618:	00c04134 	movhi	r3,260
 102661c:	18e3b704 	addi	r3,r3,-28964
 1026620:	280491ba 	slli	r2,r5,6
 1026624:	10c5883a 	add	r2,r2,r3
 1026628:	10800904 	addi	r2,r2,36
 102662c:	11000015 	stw	r4,0(r2)
					active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
 1026630:	e0bffd0f 	ldh	r2,-12(fp)
 1026634:	00c04134 	movhi	r3,260
 1026638:	18e3b704 	addi	r3,r3,-28964
 102663c:	100491ba 	slli	r2,r2,6
 1026640:	10c5883a 	add	r2,r2,r3
 1026644:	10800904 	addi	r2,r2,36
 1026648:	11000017 	ldw	r4,0(r2)
 102664c:	e0bffd0f 	ldh	r2,-12(fp)
 1026650:	00c04134 	movhi	r3,260
 1026654:	18e3b704 	addi	r3,r3,-28964
 1026658:	100491ba 	slli	r2,r2,6
 102665c:	10c5883a 	add	r2,r2,r3
 1026660:	10800604 	addi	r2,r2,24
 1026664:	10800017 	ldw	r2,0(r2)
 1026668:	1100172e 	bgeu	r2,r4,10266c8 <alt_up_sd_card_write+0x60c>
					> active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes =
 102666c:	e17ffd0f 	ldh	r5,-12(fp)
 1026670:	e0bffd0f 	ldh	r2,-12(fp)
 1026674:	00c04134 	movhi	r3,260
 1026678:	18e3b704 	addi	r3,r3,-28964
 102667c:	100491ba 	slli	r2,r2,6
 1026680:	10c5883a 	add	r2,r2,r3
 1026684:	10800604 	addi	r2,r2,24
 1026688:	10800017 	ldw	r2,0(r2)
 102668c:	11000044 	addi	r4,r2,1
 1026690:	00c04134 	movhi	r3,260
 1026694:	18e3b704 	addi	r3,r3,-28964
 1026698:	280491ba 	slli	r2,r5,6
 102669c:	10c5883a 	add	r2,r2,r3
 10266a0:	10800604 	addi	r2,r2,24
 10266a4:	11000015 	stw	r4,0(r2)
						active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
 10266a8:	e0bffd0f 	ldh	r2,-12(fp)
 10266ac:	00c04134 	movhi	r3,260
 10266b0:	18e3b704 	addi	r3,r3,-28964
 10266b4:	100491ba 	slli	r2,r2,6
 10266b8:	10c5883a 	add	r2,r2,r3
 10266bc:	10c00e04 	addi	r3,r2,56
 10266c0:	00800044 	movi	r2,1
 10266c4:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
 10266c8:	00800044 	movi	r2,1
 10266cc:	d0a72c15 	stw	r2,-25424(gp)
			result = true;
 10266d0:	00800044 	movi	r2,1
 10266d4:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
 10266d8:	e0bffa17 	ldw	r2,-24(fp)
 10266dc:	e0bfff15 	stw	r2,-4(fp)
 10266e0:	e0bfff17 	ldw	r2,-4(fp)
}
 10266e4:	e037883a 	mov	sp,fp
 10266e8:	dfc00117 	ldw	ra,4(sp)
 10266ec:	df000017 	ldw	fp,0(sp)
 10266f0:	dec00204 	addi	sp,sp,8
 10266f4:	f800283a 	ret

010266f8 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 10266f8:	defffb04 	addi	sp,sp,-20
 10266fc:	dfc00415 	stw	ra,16(sp)
 1026700:	df000315 	stw	fp,12(sp)
 1026704:	df000304 	addi	fp,sp,12
 1026708:	e13fff0d 	sth	r4,-4(fp)
	assert(file_handle >= 0);
 102670c:	e0bfff0f 	ldh	r2,-4(fp)
 1026710:	1004403a 	cmpge	r2,r2,zero
 1026714:	1000081e 	bne	r2,zero,1026738 <alt_up_sd_card_fclose+0x40>
 1026718:	010040f4 	movhi	r4,259
 102671c:	2114fc04 	addi	r4,r4,21488
 1026720:	0141bf04 	movi	r5,1788
 1026724:	018040f4 	movhi	r6,259
 1026728:	3194f604 	addi	r6,r6,21464
 102672c:	01c040f4 	movhi	r7,259
 1026730:	39d50904 	addi	r7,r7,21540
 1026734:	1013d180 	call	1013d18 <__assert_func>

	bool result = false;
 1026738:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 102673c:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 1026740:	1005003a 	cmpeq	r2,r2,zero
 1026744:	1000641e 	bne	r2,zero,10268d8 <alt_up_sd_card_fclose+0x1e0>
 1026748:	d0a72217 	ldw	r2,-25464(gp)
 102674c:	1005003a 	cmpeq	r2,r2,zero
 1026750:	1000611e 	bne	r2,zero,10268d8 <alt_up_sd_card_fclose+0x1e0>
		if (active_files[file_handle].in_use) {
 1026754:	e0bfff0f 	ldh	r2,-4(fp)
 1026758:	00c04134 	movhi	r3,260
 102675c:	18e3b704 	addi	r3,r3,-28964
 1026760:	100491ba 	slli	r2,r2,6
 1026764:	10c5883a 	add	r2,r2,r3
 1026768:	10800f04 	addi	r2,r2,60
 102676c:	10800017 	ldw	r2,0(r2)
 1026770:	1005003a 	cmpeq	r2,r2,zero
 1026774:	1000581e 	bne	r2,zero,10268d8 <alt_up_sd_card_fclose+0x1e0>
			if (active_files[file_handle].modified) {
 1026778:	e0bfff0f 	ldh	r2,-4(fp)
 102677c:	00c04134 	movhi	r3,260
 1026780:	18e3b704 	addi	r3,r3,-28964
 1026784:	100491ba 	slli	r2,r2,6
 1026788:	10c5883a 	add	r2,r2,r3
 102678c:	10800e04 	addi	r2,r2,56
 1026790:	10800017 	ldw	r2,0(r2)
 1026794:	1005003a 	cmpeq	r2,r2,zero
 1026798:	1000461e 	bne	r2,zero,10268b4 <alt_up_sd_card_fclose+0x1bc>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
 102679c:	e0bfff0f 	ldh	r2,-4(fp)
 10267a0:	00c04134 	movhi	r3,260
 10267a4:	18e3b704 	addi	r3,r3,-28964
 10267a8:	100491ba 	slli	r2,r2,6
 10267ac:	10c5883a 	add	r2,r2,r3
 10267b0:	10800b04 	addi	r2,r2,44
 10267b4:	10800017 	ldw	r2,0(r2)
 10267b8:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
 10267bc:	e0bfff0f 	ldh	r2,-4(fp)
 10267c0:	00c04134 	movhi	r3,260
 10267c4:	18e3b704 	addi	r3,r3,-28964
 10267c8:	100491ba 	slli	r2,r2,6
 10267cc:	10c5883a 	add	r2,r2,r3
 10267d0:	10800a04 	addi	r2,r2,40
 10267d4:	10800017 	ldw	r2,0(r2)
 10267d8:	1004c03a 	cmpne	r2,r2,zero
 10267dc:	1000071e 	bne	r2,zero,10267fc <alt_up_sd_card_fclose+0x104>
					record_sector = record_sector
 10267e0:	00804134 	movhi	r2,260
 10267e4:	10a3a204 	addi	r2,r2,-29048
 10267e8:	10c01317 	ldw	r3,76(r2)
 10267ec:	e0bffd17 	ldw	r2,-12(fp)
 10267f0:	10c5883a 	add	r2,r2,r3
 10267f4:	e0bffd15 	stw	r2,-12(fp)
 10267f8:	00001406 	br	102684c <alt_up_sd_card_fclose+0x154>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector =
 10267fc:	00804134 	movhi	r2,260
 1026800:	10a3a204 	addi	r2,r2,-29048
 1026804:	10c01417 	ldw	r3,80(r2)
 1026808:	e0bffd17 	ldw	r2,-12(fp)
 102680c:	1889883a 	add	r4,r3,r2
 1026810:	e0bfff0f 	ldh	r2,-4(fp)
 1026814:	00c04134 	movhi	r3,260
 1026818:	18e3b704 	addi	r3,r3,-28964
 102681c:	100491ba 	slli	r2,r2,6
 1026820:	10c5883a 	add	r2,r2,r3
 1026824:	10800a04 	addi	r2,r2,40
 1026828:	10800017 	ldw	r2,0(r2)
 102682c:	10ffff84 	addi	r3,r2,-2
 1026830:	00804134 	movhi	r2,260
 1026834:	10a3a204 	addi	r2,r2,-29048
 1026838:	10800383 	ldbu	r2,14(r2)
 102683c:	10803fcc 	andi	r2,r2,255
 1026840:	1885383a 	mul	r2,r3,r2
 1026844:	2085883a 	add	r2,r4,r2
 1026848:	e0bffd15 	stw	r2,-12(fp)
							record_sector + boot_sector_data.data_sector_offset
									+ (active_files[file_handle].file_record_cluster
											- 2)
											* boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
 102684c:	e13ffd17 	ldw	r4,-12(fp)
 1026850:	d1672917 	ldw	r5,-25436(gp)
 1026854:	10225980 	call	1022598 <Read_Sector_Data>
 1026858:	1005003a 	cmpeq	r2,r2,zero
 102685c:	1000151e 	bne	r2,zero,10268b4 <alt_up_sd_card_fclose+0x1bc>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
 1026860:	e0bfff0f 	ldh	r2,-4(fp)
 1026864:	00c04134 	movhi	r3,260
 1026868:	18e3b704 	addi	r3,r3,-28964
 102686c:	100491ba 	slli	r2,r2,6
 1026870:	10c5883a 	add	r2,r2,r3
 1026874:	10800c04 	addi	r2,r2,48
 1026878:	1080000b 	ldhu	r2,0(r2)
 102687c:	113fffcc 	andi	r4,r2,65535
 1026880:	2120001c 	xori	r4,r4,32768
 1026884:	21200004 	addi	r4,r4,-32768
 1026888:	e0bfff0f 	ldh	r2,-4(fp)
 102688c:	100491ba 	slli	r2,r2,6
 1026890:	1007883a 	mov	r3,r2
 1026894:	00804134 	movhi	r2,260
 1026898:	10a3b704 	addi	r2,r2,-28964
 102689c:	188b883a 	add	r5,r3,r2
 10268a0:	1022c640 	call	1022c64 <Write_File_Record_At_Offset>
 10268a4:	1005003a 	cmpeq	r2,r2,zero
 10268a8:	1000021e 	bne	r2,zero,10268b4 <alt_up_sd_card_fclose+0x1bc>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 10268ac:	10225480 	call	1022548 <Save_Modified_Sector>
 10268b0:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 10268b4:	e0bfff0f 	ldh	r2,-4(fp)
 10268b8:	00c04134 	movhi	r3,260
 10268bc:	18e3b704 	addi	r3,r3,-28964
 10268c0:	100491ba 	slli	r2,r2,6
 10268c4:	10c5883a 	add	r2,r2,r3
 10268c8:	10800f04 	addi	r2,r2,60
 10268cc:	10000015 	stw	zero,0(r2)
			result = true;
 10268d0:	00800044 	movi	r2,1
 10268d4:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
 10268d8:	e0bffe17 	ldw	r2,-8(fp)
}
 10268dc:	e037883a 	mov	sp,fp
 10268e0:	dfc00117 	ldw	ra,4(sp)
 10268e4:	df000017 	ldw	fp,0(sp)
 10268e8:	dec00204 	addi	sp,sp,8
 10268ec:	f800283a 	ret

010268f0 <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 10268f0:	defff904 	addi	sp,sp,-28
 10268f4:	dfc00615 	stw	ra,24(sp)
 10268f8:	df000515 	stw	fp,20(sp)
 10268fc:	df000504 	addi	fp,sp,20
 1026900:	e13ffd15 	stw	r4,-12(fp)
 1026904:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 1026908:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 102690c:	10252a40 	call	10252a4 <alt_up_sd_card_is_Present>
 1026910:	1005003a 	cmpeq	r2,r2,zero
 1026914:	10002d1e 	bne	r2,zero,10269cc <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
 1026918:	00803fc4 	movi	r2,255
 102691c:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 1026920:	d0a72c17 	ldw	r2,-25424(gp)
 1026924:	1005003a 	cmpeq	r2,r2,zero
 1026928:	1000081e 	bne	r2,zero,102694c <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 102692c:	d0a72d17 	ldw	r2,-25420(gp)
 1026930:	1009883a 	mov	r4,r2
 1026934:	000b883a 	mov	r5,zero
 1026938:	10224800 	call	1022480 <Write_Sector_Data>
 102693c:	1004c03a 	cmpne	r2,r2,zero
 1026940:	1000021e 	bne	r2,zero,102694c <Read_Sector_Data_CRC+0x5c>
				return false;
 1026944:	e03fff15 	stw	zero,-4(fp)
 1026948:	00002206 	br	10269d4 <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 102694c:	d0a72717 	ldw	r2,-25444(gp)
 1026950:	1009883a 	mov	r4,r2
 1026954:	e0fffd17 	ldw	r3,-12(fp)
 1026958:	e0bffe17 	ldw	r2,-8(fp)
 102695c:	1885883a 	add	r2,r3,r2
 1026960:	1006927a 	slli	r3,r2,9
 1026964:	2005883a 	mov	r2,r4
 1026968:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 102696c:	d0a72617 	ldw	r2,-25448(gp)
 1026970:	1007883a 	mov	r3,r2
 1026974:	00800444 	movi	r2,17
 1026978:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 102697c:	d0a72317 	ldw	r2,-25460(gp)
 1026980:	1080002b 	ldhuio	r2,0(r2)
 1026984:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 1026988:	e0bffb0b 	ldhu	r2,-20(fp)
 102698c:	10bfffcc 	andi	r2,r2,65535
 1026990:	1080010c 	andi	r2,r2,4
 1026994:	1004c03a 	cmpne	r2,r2,zero
 1026998:	103ff81e 	bne	r2,zero,102697c <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
 102699c:	e0bffb0b 	ldhu	r2,-20(fp)
 10269a0:	10bfffcc 	andi	r2,r2,65535
 10269a4:	10800c0c 	andi	r2,r2,48
 10269a8:	1004c03a 	cmpne	r2,r2,zero
 10269ac:	1000071e 	bne	r2,zero,10269cc <Read_Sector_Data_CRC+0xdc>
			result = true;
 10269b0:	00800044 	movi	r2,1
 10269b4:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 10269b8:	d0272c15 	stw	zero,-25424(gp)
			current_sector_index = sector_index + partition_offset;
 10269bc:	e0fffd17 	ldw	r3,-12(fp)
 10269c0:	e0bffe17 	ldw	r2,-8(fp)
 10269c4:	1885883a 	add	r2,r3,r2
 10269c8:	d0a72d15 	stw	r2,-25420(gp)
		}
	}
	return result;
 10269cc:	e0bffc17 	ldw	r2,-16(fp)
 10269d0:	e0bfff15 	stw	r2,-4(fp)
 10269d4:	e0bfff17 	ldw	r2,-4(fp)
}
 10269d8:	e037883a 	mov	sp,fp
 10269dc:	dfc00117 	ldw	ra,4(sp)
 10269e0:	df000017 	ldw	fp,0(sp)
 10269e4:	dec00204 	addi	sp,sp,8
 10269e8:	f800283a 	ret

010269ec <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
 10269ec:	defff804 	addi	sp,sp,-32
 10269f0:	dfc00715 	stw	ra,28(sp)
 10269f4:	df000615 	stw	fp,24(sp)
 10269f8:	df000604 	addi	fp,sp,24
 10269fc:	e13ffd15 	stw	r4,-12(fp)
 1026a00:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
 1026a04:	00801904 	movi	r2,100
 1026a08:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
 1026a0c:	e03ffc15 	stw	zero,-16(fp)
 1026a10:	00000d06 	br	1026a48 <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
 1026a14:	e13ffd17 	ldw	r4,-12(fp)
 1026a18:	e17ffe17 	ldw	r5,-8(fp)
 1026a1c:	10268f00 	call	10268f0 <Read_Sector_Data_CRC>
 1026a20:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
 1026a24:	e0bffb17 	ldw	r2,-20(fp)
 1026a28:	1005003a 	cmpeq	r2,r2,zero
 1026a2c:	1000031e 	bne	r2,zero,1026a3c <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
 1026a30:	00800044 	movi	r2,1
 1026a34:	e0bfff15 	stw	r2,-4(fp)
 1026a38:	00000a06 	br	1026a64 <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
 1026a3c:	e0bffc17 	ldw	r2,-16(fp)
 1026a40:	10800044 	addi	r2,r2,1
 1026a44:	e0bffc15 	stw	r2,-16(fp)
 1026a48:	e0fffc17 	ldw	r3,-16(fp)
 1026a4c:	e0bffa17 	ldw	r2,-24(fp)
 1026a50:	18bff016 	blt	r3,r2,1026a14 <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
 1026a54:	e13ffd17 	ldw	r4,-12(fp)
 1026a58:	e17ffe17 	ldw	r5,-8(fp)
 1026a5c:	10225980 	call	1022598 <Read_Sector_Data>
 1026a60:	e0bfff15 	stw	r2,-4(fp)
 1026a64:	e0bfff17 	ldw	r2,-4(fp)
}
 1026a68:	e037883a 	mov	sp,fp
 1026a6c:	dfc00117 	ldw	ra,4(sp)
 1026a70:	df000017 	ldw	fp,0(sp)
 1026a74:	dec00204 	addi	sp,sp,8
 1026a78:	f800283a 	ret

01026a7c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1026a7c:	defffa04 	addi	sp,sp,-24
 1026a80:	dfc00515 	stw	ra,20(sp)
 1026a84:	df000415 	stw	fp,16(sp)
 1026a88:	df000404 	addi	fp,sp,16
 1026a8c:	e13ffd15 	stw	r4,-12(fp)
 1026a90:	e17ffe15 	stw	r5,-8(fp)
 1026a94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1026a98:	e0bffd17 	ldw	r2,-12(fp)
 1026a9c:	10800017 	ldw	r2,0(r2)
 1026aa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1026aa4:	e0bffc17 	ldw	r2,-16(fp)
 1026aa8:	11000a04 	addi	r4,r2,40
 1026aac:	e0bffd17 	ldw	r2,-12(fp)
 1026ab0:	11c00217 	ldw	r7,8(r2)
 1026ab4:	e17ffe17 	ldw	r5,-8(fp)
 1026ab8:	e1bfff17 	ldw	r6,-4(fp)
 1026abc:	10270c00 	call	10270c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1026ac0:	e037883a 	mov	sp,fp
 1026ac4:	dfc00117 	ldw	ra,4(sp)
 1026ac8:	df000017 	ldw	fp,0(sp)
 1026acc:	dec00204 	addi	sp,sp,8
 1026ad0:	f800283a 	ret

01026ad4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1026ad4:	defffa04 	addi	sp,sp,-24
 1026ad8:	dfc00515 	stw	ra,20(sp)
 1026adc:	df000415 	stw	fp,16(sp)
 1026ae0:	df000404 	addi	fp,sp,16
 1026ae4:	e13ffd15 	stw	r4,-12(fp)
 1026ae8:	e17ffe15 	stw	r5,-8(fp)
 1026aec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1026af0:	e0bffd17 	ldw	r2,-12(fp)
 1026af4:	10800017 	ldw	r2,0(r2)
 1026af8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1026afc:	e0bffc17 	ldw	r2,-16(fp)
 1026b00:	11000a04 	addi	r4,r2,40
 1026b04:	e0bffd17 	ldw	r2,-12(fp)
 1026b08:	11c00217 	ldw	r7,8(r2)
 1026b0c:	e17ffe17 	ldw	r5,-8(fp)
 1026b10:	e1bfff17 	ldw	r6,-4(fp)
 1026b14:	10272e40 	call	10272e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1026b18:	e037883a 	mov	sp,fp
 1026b1c:	dfc00117 	ldw	ra,4(sp)
 1026b20:	df000017 	ldw	fp,0(sp)
 1026b24:	dec00204 	addi	sp,sp,8
 1026b28:	f800283a 	ret

01026b2c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1026b2c:	defffc04 	addi	sp,sp,-16
 1026b30:	dfc00315 	stw	ra,12(sp)
 1026b34:	df000215 	stw	fp,8(sp)
 1026b38:	df000204 	addi	fp,sp,8
 1026b3c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1026b40:	e0bfff17 	ldw	r2,-4(fp)
 1026b44:	10800017 	ldw	r2,0(r2)
 1026b48:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1026b4c:	e0bffe17 	ldw	r2,-8(fp)
 1026b50:	11000a04 	addi	r4,r2,40
 1026b54:	e0bfff17 	ldw	r2,-4(fp)
 1026b58:	11400217 	ldw	r5,8(r2)
 1026b5c:	1026f580 	call	1026f58 <altera_avalon_jtag_uart_close>
}
 1026b60:	e037883a 	mov	sp,fp
 1026b64:	dfc00117 	ldw	ra,4(sp)
 1026b68:	df000017 	ldw	fp,0(sp)
 1026b6c:	dec00204 	addi	sp,sp,8
 1026b70:	f800283a 	ret

01026b74 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1026b74:	defffa04 	addi	sp,sp,-24
 1026b78:	dfc00515 	stw	ra,20(sp)
 1026b7c:	df000415 	stw	fp,16(sp)
 1026b80:	df000404 	addi	fp,sp,16
 1026b84:	e13ffd15 	stw	r4,-12(fp)
 1026b88:	e17ffe15 	stw	r5,-8(fp)
 1026b8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1026b90:	e0bffd17 	ldw	r2,-12(fp)
 1026b94:	10800017 	ldw	r2,0(r2)
 1026b98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1026b9c:	e0bffc17 	ldw	r2,-16(fp)
 1026ba0:	11000a04 	addi	r4,r2,40
 1026ba4:	e17ffe17 	ldw	r5,-8(fp)
 1026ba8:	e1bfff17 	ldw	r6,-4(fp)
 1026bac:	1026fcc0 	call	1026fcc <altera_avalon_jtag_uart_ioctl>
}
 1026bb0:	e037883a 	mov	sp,fp
 1026bb4:	dfc00117 	ldw	ra,4(sp)
 1026bb8:	df000017 	ldw	fp,0(sp)
 1026bbc:	dec00204 	addi	sp,sp,8
 1026bc0:	f800283a 	ret

01026bc4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1026bc4:	defffb04 	addi	sp,sp,-20
 1026bc8:	dfc00415 	stw	ra,16(sp)
 1026bcc:	df000315 	stw	fp,12(sp)
 1026bd0:	df000304 	addi	fp,sp,12
 1026bd4:	e13ffd15 	stw	r4,-12(fp)
 1026bd8:	e17ffe15 	stw	r5,-8(fp)
 1026bdc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1026be0:	e0fffd17 	ldw	r3,-12(fp)
 1026be4:	00800044 	movi	r2,1
 1026be8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1026bec:	e0bffd17 	ldw	r2,-12(fp)
 1026bf0:	10800017 	ldw	r2,0(r2)
 1026bf4:	11000104 	addi	r4,r2,4
 1026bf8:	e0bffd17 	ldw	r2,-12(fp)
 1026bfc:	10800817 	ldw	r2,32(r2)
 1026c00:	1007883a 	mov	r3,r2
 1026c04:	2005883a 	mov	r2,r4
 1026c08:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1026c0c:	e13fff17 	ldw	r4,-4(fp)
 1026c10:	e17ffd17 	ldw	r5,-12(fp)
 1026c14:	018040b4 	movhi	r6,258
 1026c18:	319b1f04 	addi	r6,r6,27772
 1026c1c:	10288c80 	call	10288c8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1026c20:	e0bffd17 	ldw	r2,-12(fp)
 1026c24:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1026c28:	e0bffd17 	ldw	r2,-12(fp)
 1026c2c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1026c30:	00804134 	movhi	r2,260
 1026c34:	10a31b04 	addi	r2,r2,-29588
 1026c38:	10800017 	ldw	r2,0(r2)
 1026c3c:	100b883a 	mov	r5,r2
 1026c40:	018040b4 	movhi	r6,258
 1026c44:	319baa04 	addi	r6,r6,28328
 1026c48:	e1fffd17 	ldw	r7,-12(fp)
 1026c4c:	10280500 	call	1028050 <alt_alarm_start>
 1026c50:	1004403a 	cmpge	r2,r2,zero
 1026c54:	1000041e 	bne	r2,zero,1026c68 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1026c58:	e0fffd17 	ldw	r3,-12(fp)
 1026c5c:	00a00034 	movhi	r2,32768
 1026c60:	10bfffc4 	addi	r2,r2,-1
 1026c64:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1026c68:	e037883a 	mov	sp,fp
 1026c6c:	dfc00117 	ldw	ra,4(sp)
 1026c70:	df000017 	ldw	fp,0(sp)
 1026c74:	dec00204 	addi	sp,sp,8
 1026c78:	f800283a 	ret

01026c7c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1026c7c:	defff704 	addi	sp,sp,-36
 1026c80:	df000815 	stw	fp,32(sp)
 1026c84:	df000804 	addi	fp,sp,32
 1026c88:	e13ffe15 	stw	r4,-8(fp)
 1026c8c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1026c90:	e0bffe17 	ldw	r2,-8(fp)
 1026c94:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 1026c98:	e0bffd17 	ldw	r2,-12(fp)
 1026c9c:	10800017 	ldw	r2,0(r2)
 1026ca0:	e0bffc15 	stw	r2,-16(fp)
 1026ca4:	00000006 	br	1026ca8 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1026ca8:	e0bffc17 	ldw	r2,-16(fp)
 1026cac:	10800104 	addi	r2,r2,4
 1026cb0:	10800037 	ldwio	r2,0(r2)
 1026cb4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1026cb8:	e0bffb17 	ldw	r2,-20(fp)
 1026cbc:	1080c00c 	andi	r2,r2,768
 1026cc0:	1005003a 	cmpeq	r2,r2,zero
 1026cc4:	1000741e 	bne	r2,zero,1026e98 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1026cc8:	e0bffb17 	ldw	r2,-20(fp)
 1026ccc:	1080400c 	andi	r2,r2,256
 1026cd0:	1005003a 	cmpeq	r2,r2,zero
 1026cd4:	1000351e 	bne	r2,zero,1026dac <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1026cd8:	00800074 	movhi	r2,1
 1026cdc:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1026ce0:	e0bffd17 	ldw	r2,-12(fp)
 1026ce4:	10800a17 	ldw	r2,40(r2)
 1026ce8:	10800044 	addi	r2,r2,1
 1026cec:	1081ffcc 	andi	r2,r2,2047
 1026cf0:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 1026cf4:	e0bffd17 	ldw	r2,-12(fp)
 1026cf8:	10c00b17 	ldw	r3,44(r2)
 1026cfc:	e0bff917 	ldw	r2,-28(fp)
 1026d00:	18801626 	beq	r3,r2,1026d5c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1026d04:	e0bffc17 	ldw	r2,-16(fp)
 1026d08:	10800037 	ldwio	r2,0(r2)
 1026d0c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1026d10:	e0bffa17 	ldw	r2,-24(fp)
 1026d14:	10a0000c 	andi	r2,r2,32768
 1026d18:	1005003a 	cmpeq	r2,r2,zero
 1026d1c:	10000f1e 	bne	r2,zero,1026d5c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1026d20:	e0bffd17 	ldw	r2,-12(fp)
 1026d24:	10c00a17 	ldw	r3,40(r2)
 1026d28:	e0bffa17 	ldw	r2,-24(fp)
 1026d2c:	1009883a 	mov	r4,r2
 1026d30:	e0bffd17 	ldw	r2,-12(fp)
 1026d34:	1885883a 	add	r2,r3,r2
 1026d38:	10800e04 	addi	r2,r2,56
 1026d3c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1026d40:	e0bffd17 	ldw	r2,-12(fp)
 1026d44:	10800a17 	ldw	r2,40(r2)
 1026d48:	10800044 	addi	r2,r2,1
 1026d4c:	10c1ffcc 	andi	r3,r2,2047
 1026d50:	e0bffd17 	ldw	r2,-12(fp)
 1026d54:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1026d58:	003fe106 	br	1026ce0 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1026d5c:	e0bffa17 	ldw	r2,-24(fp)
 1026d60:	10bfffec 	andhi	r2,r2,65535
 1026d64:	1005003a 	cmpeq	r2,r2,zero
 1026d68:	1000101e 	bne	r2,zero,1026dac <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1026d6c:	e0bffd17 	ldw	r2,-12(fp)
 1026d70:	10c00817 	ldw	r3,32(r2)
 1026d74:	00bfff84 	movi	r2,-2
 1026d78:	1886703a 	and	r3,r3,r2
 1026d7c:	e0bffd17 	ldw	r2,-12(fp)
 1026d80:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1026d84:	e0bffc17 	ldw	r2,-16(fp)
 1026d88:	11000104 	addi	r4,r2,4
 1026d8c:	e0bffd17 	ldw	r2,-12(fp)
 1026d90:	10800817 	ldw	r2,32(r2)
 1026d94:	1007883a 	mov	r3,r2
 1026d98:	2005883a 	mov	r2,r4
 1026d9c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1026da0:	e0bffc17 	ldw	r2,-16(fp)
 1026da4:	10800104 	addi	r2,r2,4
 1026da8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1026dac:	e0bffb17 	ldw	r2,-20(fp)
 1026db0:	1080800c 	andi	r2,r2,512
 1026db4:	1005003a 	cmpeq	r2,r2,zero
 1026db8:	103fbb1e 	bne	r2,zero,1026ca8 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1026dbc:	e0bffb17 	ldw	r2,-20(fp)
 1026dc0:	10bfffec 	andhi	r2,r2,65535
 1026dc4:	1004d43a 	srli	r2,r2,16
 1026dc8:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1026dcc:	00001506 	br	1026e24 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1026dd0:	e13ffc17 	ldw	r4,-16(fp)
 1026dd4:	e0bffd17 	ldw	r2,-12(fp)
 1026dd8:	10c00d17 	ldw	r3,52(r2)
 1026ddc:	e0bffd17 	ldw	r2,-12(fp)
 1026de0:	1885883a 	add	r2,r3,r2
 1026de4:	10820e04 	addi	r2,r2,2104
 1026de8:	10800003 	ldbu	r2,0(r2)
 1026dec:	10c03fcc 	andi	r3,r2,255
 1026df0:	18c0201c 	xori	r3,r3,128
 1026df4:	18ffe004 	addi	r3,r3,-128
 1026df8:	2005883a 	mov	r2,r4
 1026dfc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1026e00:	e0bffd17 	ldw	r2,-12(fp)
 1026e04:	10800d17 	ldw	r2,52(r2)
 1026e08:	10800044 	addi	r2,r2,1
 1026e0c:	10c1ffcc 	andi	r3,r2,2047
 1026e10:	e0bffd17 	ldw	r2,-12(fp)
 1026e14:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1026e18:	e0bff817 	ldw	r2,-32(fp)
 1026e1c:	10bfffc4 	addi	r2,r2,-1
 1026e20:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1026e24:	e0bff817 	ldw	r2,-32(fp)
 1026e28:	1005003a 	cmpeq	r2,r2,zero
 1026e2c:	1000051e 	bne	r2,zero,1026e44 <altera_avalon_jtag_uart_irq+0x1c8>
 1026e30:	e0bffd17 	ldw	r2,-12(fp)
 1026e34:	10c00d17 	ldw	r3,52(r2)
 1026e38:	e0bffd17 	ldw	r2,-12(fp)
 1026e3c:	10800c17 	ldw	r2,48(r2)
 1026e40:	18bfe31e 	bne	r3,r2,1026dd0 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1026e44:	e0bff817 	ldw	r2,-32(fp)
 1026e48:	1005003a 	cmpeq	r2,r2,zero
 1026e4c:	103f961e 	bne	r2,zero,1026ca8 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1026e50:	e0bffd17 	ldw	r2,-12(fp)
 1026e54:	10c00817 	ldw	r3,32(r2)
 1026e58:	00bfff44 	movi	r2,-3
 1026e5c:	1886703a 	and	r3,r3,r2
 1026e60:	e0bffd17 	ldw	r2,-12(fp)
 1026e64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1026e68:	e0bffd17 	ldw	r2,-12(fp)
 1026e6c:	10800017 	ldw	r2,0(r2)
 1026e70:	11000104 	addi	r4,r2,4
 1026e74:	e0bffd17 	ldw	r2,-12(fp)
 1026e78:	10800817 	ldw	r2,32(r2)
 1026e7c:	1007883a 	mov	r3,r2
 1026e80:	2005883a 	mov	r2,r4
 1026e84:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1026e88:	e0bffc17 	ldw	r2,-16(fp)
 1026e8c:	10800104 	addi	r2,r2,4
 1026e90:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1026e94:	003f8406 	br	1026ca8 <altera_avalon_jtag_uart_irq+0x2c>
}
 1026e98:	e037883a 	mov	sp,fp
 1026e9c:	df000017 	ldw	fp,0(sp)
 1026ea0:	dec00104 	addi	sp,sp,4
 1026ea4:	f800283a 	ret

01026ea8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1026ea8:	defffc04 	addi	sp,sp,-16
 1026eac:	df000315 	stw	fp,12(sp)
 1026eb0:	df000304 	addi	fp,sp,12
 1026eb4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1026eb8:	e0bfff17 	ldw	r2,-4(fp)
 1026ebc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1026ec0:	e0bffe17 	ldw	r2,-8(fp)
 1026ec4:	10800017 	ldw	r2,0(r2)
 1026ec8:	10800104 	addi	r2,r2,4
 1026ecc:	10800037 	ldwio	r2,0(r2)
 1026ed0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1026ed4:	e0bffd17 	ldw	r2,-12(fp)
 1026ed8:	1081000c 	andi	r2,r2,1024
 1026edc:	1005003a 	cmpeq	r2,r2,zero
 1026ee0:	10000c1e 	bne	r2,zero,1026f14 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1026ee4:	e0bffe17 	ldw	r2,-8(fp)
 1026ee8:	10800017 	ldw	r2,0(r2)
 1026eec:	11000104 	addi	r4,r2,4
 1026ef0:	e0bffe17 	ldw	r2,-8(fp)
 1026ef4:	10800817 	ldw	r2,32(r2)
 1026ef8:	10810014 	ori	r2,r2,1024
 1026efc:	1007883a 	mov	r3,r2
 1026f00:	2005883a 	mov	r2,r4
 1026f04:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1026f08:	e0bffe17 	ldw	r2,-8(fp)
 1026f0c:	10000915 	stw	zero,36(r2)
 1026f10:	00000a06 	br	1026f3c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1026f14:	e0bffe17 	ldw	r2,-8(fp)
 1026f18:	10c00917 	ldw	r3,36(r2)
 1026f1c:	00a00034 	movhi	r2,32768
 1026f20:	10bfff04 	addi	r2,r2,-4
 1026f24:	10c00536 	bltu	r2,r3,1026f3c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 1026f28:	e0bffe17 	ldw	r2,-8(fp)
 1026f2c:	10800917 	ldw	r2,36(r2)
 1026f30:	10c00044 	addi	r3,r2,1
 1026f34:	e0bffe17 	ldw	r2,-8(fp)
 1026f38:	10c00915 	stw	r3,36(r2)
 1026f3c:	00804134 	movhi	r2,260
 1026f40:	10a31b04 	addi	r2,r2,-29588
 1026f44:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1026f48:	e037883a 	mov	sp,fp
 1026f4c:	df000017 	ldw	fp,0(sp)
 1026f50:	dec00104 	addi	sp,sp,4
 1026f54:	f800283a 	ret

01026f58 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1026f58:	defffc04 	addi	sp,sp,-16
 1026f5c:	df000315 	stw	fp,12(sp)
 1026f60:	df000304 	addi	fp,sp,12
 1026f64:	e13ffd15 	stw	r4,-12(fp)
 1026f68:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1026f6c:	00000706 	br	1026f8c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1026f70:	e0bffe17 	ldw	r2,-8(fp)
 1026f74:	1090000c 	andi	r2,r2,16384
 1026f78:	1005003a 	cmpeq	r2,r2,zero
 1026f7c:	1000031e 	bne	r2,zero,1026f8c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1026f80:	00bffd44 	movi	r2,-11
 1026f84:	e0bfff15 	stw	r2,-4(fp)
 1026f88:	00000b06 	br	1026fb8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1026f8c:	e0bffd17 	ldw	r2,-12(fp)
 1026f90:	10c00d17 	ldw	r3,52(r2)
 1026f94:	e0bffd17 	ldw	r2,-12(fp)
 1026f98:	10800c17 	ldw	r2,48(r2)
 1026f9c:	18800526 	beq	r3,r2,1026fb4 <altera_avalon_jtag_uart_close+0x5c>
 1026fa0:	e0bffd17 	ldw	r2,-12(fp)
 1026fa4:	10c00917 	ldw	r3,36(r2)
 1026fa8:	e0bffd17 	ldw	r2,-12(fp)
 1026fac:	10800117 	ldw	r2,4(r2)
 1026fb0:	18bfef36 	bltu	r3,r2,1026f70 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1026fb4:	e03fff15 	stw	zero,-4(fp)
 1026fb8:	e0bfff17 	ldw	r2,-4(fp)
}
 1026fbc:	e037883a 	mov	sp,fp
 1026fc0:	df000017 	ldw	fp,0(sp)
 1026fc4:	dec00104 	addi	sp,sp,4
 1026fc8:	f800283a 	ret

01026fcc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1026fcc:	defff804 	addi	sp,sp,-32
 1026fd0:	df000715 	stw	fp,28(sp)
 1026fd4:	df000704 	addi	fp,sp,28
 1026fd8:	e13ffb15 	stw	r4,-20(fp)
 1026fdc:	e17ffc15 	stw	r5,-16(fp)
 1026fe0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1026fe4:	00bff9c4 	movi	r2,-25
 1026fe8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1026fec:	e0bffc17 	ldw	r2,-16(fp)
 1026ff0:	e0bfff15 	stw	r2,-4(fp)
 1026ff4:	e0ffff17 	ldw	r3,-4(fp)
 1026ff8:	189a8060 	cmpeqi	r2,r3,27137
 1026ffc:	1000041e 	bne	r2,zero,1027010 <altera_avalon_jtag_uart_ioctl+0x44>
 1027000:	e0ffff17 	ldw	r3,-4(fp)
 1027004:	189a80a0 	cmpeqi	r2,r3,27138
 1027008:	10001b1e 	bne	r2,zero,1027078 <altera_avalon_jtag_uart_ioctl+0xac>
 102700c:	00002706 	br	10270ac <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1027010:	e0bffb17 	ldw	r2,-20(fp)
 1027014:	10c00117 	ldw	r3,4(r2)
 1027018:	00a00034 	movhi	r2,32768
 102701c:	10bfffc4 	addi	r2,r2,-1
 1027020:	18802226 	beq	r3,r2,10270ac <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1027024:	e0bffd17 	ldw	r2,-12(fp)
 1027028:	10800017 	ldw	r2,0(r2)
 102702c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1027030:	e0bff917 	ldw	r2,-28(fp)
 1027034:	10800090 	cmplti	r2,r2,2
 1027038:	1000071e 	bne	r2,zero,1027058 <altera_avalon_jtag_uart_ioctl+0x8c>
 102703c:	e0fff917 	ldw	r3,-28(fp)
 1027040:	00a00034 	movhi	r2,32768
 1027044:	10bfffc4 	addi	r2,r2,-1
 1027048:	18800326 	beq	r3,r2,1027058 <altera_avalon_jtag_uart_ioctl+0x8c>
 102704c:	e0bff917 	ldw	r2,-28(fp)
 1027050:	e0bffe15 	stw	r2,-8(fp)
 1027054:	00000306 	br	1027064 <altera_avalon_jtag_uart_ioctl+0x98>
 1027058:	00e00034 	movhi	r3,32768
 102705c:	18ffff84 	addi	r3,r3,-2
 1027060:	e0fffe15 	stw	r3,-8(fp)
 1027064:	e0bffb17 	ldw	r2,-20(fp)
 1027068:	e0fffe17 	ldw	r3,-8(fp)
 102706c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1027070:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1027074:	00000d06 	br	10270ac <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1027078:	e0bffb17 	ldw	r2,-20(fp)
 102707c:	10c00117 	ldw	r3,4(r2)
 1027080:	00a00034 	movhi	r2,32768
 1027084:	10bfffc4 	addi	r2,r2,-1
 1027088:	18800826 	beq	r3,r2,10270ac <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 102708c:	e13ffd17 	ldw	r4,-12(fp)
 1027090:	e0bffb17 	ldw	r2,-20(fp)
 1027094:	10c00917 	ldw	r3,36(r2)
 1027098:	e0bffb17 	ldw	r2,-20(fp)
 102709c:	10800117 	ldw	r2,4(r2)
 10270a0:	1885803a 	cmpltu	r2,r3,r2
 10270a4:	20800015 	stw	r2,0(r4)
      rc = 0;
 10270a8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 10270ac:	e0bffa17 	ldw	r2,-24(fp)
}
 10270b0:	e037883a 	mov	sp,fp
 10270b4:	df000017 	ldw	fp,0(sp)
 10270b8:	dec00104 	addi	sp,sp,4
 10270bc:	f800283a 	ret

010270c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 10270c0:	defff204 	addi	sp,sp,-56
 10270c4:	dfc00d15 	stw	ra,52(sp)
 10270c8:	df000c15 	stw	fp,48(sp)
 10270cc:	df000c04 	addi	fp,sp,48
 10270d0:	e13ffb15 	stw	r4,-20(fp)
 10270d4:	e17ffc15 	stw	r5,-16(fp)
 10270d8:	e1bffd15 	stw	r6,-12(fp)
 10270dc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 10270e0:	e0bffc17 	ldw	r2,-16(fp)
 10270e4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10270e8:	00004806 	br	102720c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 10270ec:	e0bffb17 	ldw	r2,-20(fp)
 10270f0:	10800a17 	ldw	r2,40(r2)
 10270f4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 10270f8:	e0bffb17 	ldw	r2,-20(fp)
 10270fc:	10800b17 	ldw	r2,44(r2)
 1027100:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1027104:	e0fff717 	ldw	r3,-36(fp)
 1027108:	e0bff617 	ldw	r2,-40(fp)
 102710c:	18800536 	bltu	r3,r2,1027124 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1027110:	e0bff717 	ldw	r2,-36(fp)
 1027114:	e0fff617 	ldw	r3,-40(fp)
 1027118:	10c5c83a 	sub	r2,r2,r3
 102711c:	e0bff815 	stw	r2,-32(fp)
 1027120:	00000406 	br	1027134 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1027124:	00820004 	movi	r2,2048
 1027128:	e0fff617 	ldw	r3,-40(fp)
 102712c:	10c5c83a 	sub	r2,r2,r3
 1027130:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1027134:	e0bff817 	ldw	r2,-32(fp)
 1027138:	1005003a 	cmpeq	r2,r2,zero
 102713c:	10001f1e 	bne	r2,zero,10271bc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 1027140:	e0fffd17 	ldw	r3,-12(fp)
 1027144:	e0bff817 	ldw	r2,-32(fp)
 1027148:	1880022e 	bgeu	r3,r2,1027154 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 102714c:	e0bffd17 	ldw	r2,-12(fp)
 1027150:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1027154:	e0bffb17 	ldw	r2,-20(fp)
 1027158:	10c00e04 	addi	r3,r2,56
 102715c:	e0bff617 	ldw	r2,-40(fp)
 1027160:	1887883a 	add	r3,r3,r2
 1027164:	e0bffa17 	ldw	r2,-24(fp)
 1027168:	1009883a 	mov	r4,r2
 102716c:	180b883a 	mov	r5,r3
 1027170:	e1bff817 	ldw	r6,-32(fp)
 1027174:	10152740 	call	1015274 <memcpy>
      ptr   += n;
 1027178:	e0fff817 	ldw	r3,-32(fp)
 102717c:	e0bffa17 	ldw	r2,-24(fp)
 1027180:	10c5883a 	add	r2,r2,r3
 1027184:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 1027188:	e0fffd17 	ldw	r3,-12(fp)
 102718c:	e0bff817 	ldw	r2,-32(fp)
 1027190:	1885c83a 	sub	r2,r3,r2
 1027194:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1027198:	e0fff617 	ldw	r3,-40(fp)
 102719c:	e0bff817 	ldw	r2,-32(fp)
 10271a0:	1885883a 	add	r2,r3,r2
 10271a4:	10c1ffcc 	andi	r3,r2,2047
 10271a8:	e0bffb17 	ldw	r2,-20(fp)
 10271ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 10271b0:	e0bffd17 	ldw	r2,-12(fp)
 10271b4:	10800048 	cmpgei	r2,r2,1
 10271b8:	103fcc1e 	bne	r2,zero,10270ec <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 10271bc:	e0fffa17 	ldw	r3,-24(fp)
 10271c0:	e0bffc17 	ldw	r2,-16(fp)
 10271c4:	1880141e 	bne	r3,r2,1027218 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 10271c8:	e0bffe17 	ldw	r2,-8(fp)
 10271cc:	1090000c 	andi	r2,r2,16384
 10271d0:	1004c03a 	cmpne	r2,r2,zero
 10271d4:	1000101e 	bne	r2,zero,1027218 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 10271d8:	e0bffb17 	ldw	r2,-20(fp)
 10271dc:	10c00a17 	ldw	r3,40(r2)
 10271e0:	e0bff717 	ldw	r2,-36(fp)
 10271e4:	1880051e 	bne	r3,r2,10271fc <altera_avalon_jtag_uart_read+0x13c>
 10271e8:	e0bffb17 	ldw	r2,-20(fp)
 10271ec:	10c00917 	ldw	r3,36(r2)
 10271f0:	e0bffb17 	ldw	r2,-20(fp)
 10271f4:	10800117 	ldw	r2,4(r2)
 10271f8:	18bff736 	bltu	r3,r2,10271d8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 10271fc:	e0bffb17 	ldw	r2,-20(fp)
 1027200:	10c00a17 	ldw	r3,40(r2)
 1027204:	e0bff717 	ldw	r2,-36(fp)
 1027208:	18800326 	beq	r3,r2,1027218 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 102720c:	e0bffd17 	ldw	r2,-12(fp)
 1027210:	10800048 	cmpgei	r2,r2,1
 1027214:	103fb51e 	bne	r2,zero,10270ec <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1027218:	e0fffa17 	ldw	r3,-24(fp)
 102721c:	e0bffc17 	ldw	r2,-16(fp)
 1027220:	18801926 	beq	r3,r2,1027288 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1027224:	0005303a 	rdctl	r2,status
 1027228:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102722c:	e0fff517 	ldw	r3,-44(fp)
 1027230:	00bfff84 	movi	r2,-2
 1027234:	1884703a 	and	r2,r3,r2
 1027238:	1001703a 	wrctl	status,r2
  
  return context;
 102723c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1027240:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1027244:	e0bffb17 	ldw	r2,-20(fp)
 1027248:	10800817 	ldw	r2,32(r2)
 102724c:	10c00054 	ori	r3,r2,1
 1027250:	e0bffb17 	ldw	r2,-20(fp)
 1027254:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1027258:	e0bffb17 	ldw	r2,-20(fp)
 102725c:	10800017 	ldw	r2,0(r2)
 1027260:	11000104 	addi	r4,r2,4
 1027264:	e0bffb17 	ldw	r2,-20(fp)
 1027268:	10800817 	ldw	r2,32(r2)
 102726c:	1007883a 	mov	r3,r2
 1027270:	2005883a 	mov	r2,r4
 1027274:	10c00035 	stwio	r3,0(r2)
 1027278:	e0bff917 	ldw	r2,-28(fp)
 102727c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1027280:	e0bff417 	ldw	r2,-48(fp)
 1027284:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1027288:	e0fffa17 	ldw	r3,-24(fp)
 102728c:	e0bffc17 	ldw	r2,-16(fp)
 1027290:	18800526 	beq	r3,r2,10272a8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 1027294:	e0fffa17 	ldw	r3,-24(fp)
 1027298:	e0bffc17 	ldw	r2,-16(fp)
 102729c:	1887c83a 	sub	r3,r3,r2
 10272a0:	e0ffff15 	stw	r3,-4(fp)
 10272a4:	00000906 	br	10272cc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 10272a8:	e0bffe17 	ldw	r2,-8(fp)
 10272ac:	1090000c 	andi	r2,r2,16384
 10272b0:	1005003a 	cmpeq	r2,r2,zero
 10272b4:	1000031e 	bne	r2,zero,10272c4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 10272b8:	00bffd44 	movi	r2,-11
 10272bc:	e0bfff15 	stw	r2,-4(fp)
 10272c0:	00000206 	br	10272cc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 10272c4:	00bffec4 	movi	r2,-5
 10272c8:	e0bfff15 	stw	r2,-4(fp)
 10272cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10272d0:	e037883a 	mov	sp,fp
 10272d4:	dfc00117 	ldw	ra,4(sp)
 10272d8:	df000017 	ldw	fp,0(sp)
 10272dc:	dec00204 	addi	sp,sp,8
 10272e0:	f800283a 	ret

010272e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 10272e4:	defff204 	addi	sp,sp,-56
 10272e8:	dfc00d15 	stw	ra,52(sp)
 10272ec:	df000c15 	stw	fp,48(sp)
 10272f0:	df000c04 	addi	fp,sp,48
 10272f4:	e13ffb15 	stw	r4,-20(fp)
 10272f8:	e17ffc15 	stw	r5,-16(fp)
 10272fc:	e1bffd15 	stw	r6,-12(fp)
 1027300:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1027304:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1027308:	e0bffc17 	ldw	r2,-16(fp)
 102730c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1027310:	00003a06 	br	10273fc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1027314:	e0bffb17 	ldw	r2,-20(fp)
 1027318:	10800c17 	ldw	r2,48(r2)
 102731c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 1027320:	e0bffb17 	ldw	r2,-20(fp)
 1027324:	10800d17 	ldw	r2,52(r2)
 1027328:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 102732c:	e0fffa17 	ldw	r3,-24(fp)
 1027330:	e0bff917 	ldw	r2,-28(fp)
 1027334:	1880062e 	bgeu	r3,r2,1027350 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1027338:	e0fff917 	ldw	r3,-28(fp)
 102733c:	e0bffa17 	ldw	r2,-24(fp)
 1027340:	1885c83a 	sub	r2,r3,r2
 1027344:	10bfffc4 	addi	r2,r2,-1
 1027348:	e0bff815 	stw	r2,-32(fp)
 102734c:	00000c06 	br	1027380 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 1027350:	e0bff917 	ldw	r2,-28(fp)
 1027354:	1005003a 	cmpeq	r2,r2,zero
 1027358:	1000051e 	bne	r2,zero,1027370 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 102735c:	00820004 	movi	r2,2048
 1027360:	e0fffa17 	ldw	r3,-24(fp)
 1027364:	10c5c83a 	sub	r2,r2,r3
 1027368:	e0bff815 	stw	r2,-32(fp)
 102736c:	00000406 	br	1027380 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1027370:	0081ffc4 	movi	r2,2047
 1027374:	e0fffa17 	ldw	r3,-24(fp)
 1027378:	10c5c83a 	sub	r2,r2,r3
 102737c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1027380:	e0bff817 	ldw	r2,-32(fp)
 1027384:	1005003a 	cmpeq	r2,r2,zero
 1027388:	10001f1e 	bne	r2,zero,1027408 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 102738c:	e0fffd17 	ldw	r3,-12(fp)
 1027390:	e0bff817 	ldw	r2,-32(fp)
 1027394:	1880022e 	bgeu	r3,r2,10273a0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 1027398:	e0bffd17 	ldw	r2,-12(fp)
 102739c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 10273a0:	e0bffb17 	ldw	r2,-20(fp)
 10273a4:	10c20e04 	addi	r3,r2,2104
 10273a8:	e0bffa17 	ldw	r2,-24(fp)
 10273ac:	1885883a 	add	r2,r3,r2
 10273b0:	e0fffc17 	ldw	r3,-16(fp)
 10273b4:	1009883a 	mov	r4,r2
 10273b8:	180b883a 	mov	r5,r3
 10273bc:	e1bff817 	ldw	r6,-32(fp)
 10273c0:	10152740 	call	1015274 <memcpy>
      ptr   += n;
 10273c4:	e0fff817 	ldw	r3,-32(fp)
 10273c8:	e0bffc17 	ldw	r2,-16(fp)
 10273cc:	10c5883a 	add	r2,r2,r3
 10273d0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 10273d4:	e0fffd17 	ldw	r3,-12(fp)
 10273d8:	e0bff817 	ldw	r2,-32(fp)
 10273dc:	1885c83a 	sub	r2,r3,r2
 10273e0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10273e4:	e0fffa17 	ldw	r3,-24(fp)
 10273e8:	e0bff817 	ldw	r2,-32(fp)
 10273ec:	1885883a 	add	r2,r3,r2
 10273f0:	10c1ffcc 	andi	r3,r2,2047
 10273f4:	e0bffb17 	ldw	r2,-20(fp)
 10273f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10273fc:	e0bffd17 	ldw	r2,-12(fp)
 1027400:	10800048 	cmpgei	r2,r2,1
 1027404:	103fc31e 	bne	r2,zero,1027314 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1027408:	0005303a 	rdctl	r2,status
 102740c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1027410:	e0fff517 	ldw	r3,-44(fp)
 1027414:	00bfff84 	movi	r2,-2
 1027418:	1884703a 	and	r2,r3,r2
 102741c:	1001703a 	wrctl	status,r2
  
  return context;
 1027420:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1027424:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1027428:	e0bffb17 	ldw	r2,-20(fp)
 102742c:	10800817 	ldw	r2,32(r2)
 1027430:	10c00094 	ori	r3,r2,2
 1027434:	e0bffb17 	ldw	r2,-20(fp)
 1027438:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 102743c:	e0bffb17 	ldw	r2,-20(fp)
 1027440:	10800017 	ldw	r2,0(r2)
 1027444:	11000104 	addi	r4,r2,4
 1027448:	e0bffb17 	ldw	r2,-20(fp)
 102744c:	10800817 	ldw	r2,32(r2)
 1027450:	1007883a 	mov	r3,r2
 1027454:	2005883a 	mov	r2,r4
 1027458:	10c00035 	stwio	r3,0(r2)
 102745c:	e0bff717 	ldw	r2,-36(fp)
 1027460:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1027464:	e0bff417 	ldw	r2,-48(fp)
 1027468:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 102746c:	e0bffd17 	ldw	r2,-12(fp)
 1027470:	10800050 	cmplti	r2,r2,1
 1027474:	1000111e 	bne	r2,zero,10274bc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 1027478:	e0bffe17 	ldw	r2,-8(fp)
 102747c:	1090000c 	andi	r2,r2,16384
 1027480:	1004c03a 	cmpne	r2,r2,zero
 1027484:	1000101e 	bne	r2,zero,10274c8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1027488:	e0bffb17 	ldw	r2,-20(fp)
 102748c:	10c00d17 	ldw	r3,52(r2)
 1027490:	e0bff917 	ldw	r2,-28(fp)
 1027494:	1880051e 	bne	r3,r2,10274ac <altera_avalon_jtag_uart_write+0x1c8>
 1027498:	e0bffb17 	ldw	r2,-20(fp)
 102749c:	10c00917 	ldw	r3,36(r2)
 10274a0:	e0bffb17 	ldw	r2,-20(fp)
 10274a4:	10800117 	ldw	r2,4(r2)
 10274a8:	18bff736 	bltu	r3,r2,1027488 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 10274ac:	e0bffb17 	ldw	r2,-20(fp)
 10274b0:	10c00d17 	ldw	r3,52(r2)
 10274b4:	e0bff917 	ldw	r2,-28(fp)
 10274b8:	18800326 	beq	r3,r2,10274c8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 10274bc:	e0bffd17 	ldw	r2,-12(fp)
 10274c0:	10800048 	cmpgei	r2,r2,1
 10274c4:	103fcd1e 	bne	r2,zero,10273fc <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 10274c8:	e0fffc17 	ldw	r3,-16(fp)
 10274cc:	e0bff617 	ldw	r2,-40(fp)
 10274d0:	18800526 	beq	r3,r2,10274e8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 10274d4:	e0fffc17 	ldw	r3,-16(fp)
 10274d8:	e0bff617 	ldw	r2,-40(fp)
 10274dc:	1887c83a 	sub	r3,r3,r2
 10274e0:	e0ffff15 	stw	r3,-4(fp)
 10274e4:	00000906 	br	102750c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 10274e8:	e0bffe17 	ldw	r2,-8(fp)
 10274ec:	1090000c 	andi	r2,r2,16384
 10274f0:	1005003a 	cmpeq	r2,r2,zero
 10274f4:	1000031e 	bne	r2,zero,1027504 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 10274f8:	00bffd44 	movi	r2,-11
 10274fc:	e0bfff15 	stw	r2,-4(fp)
 1027500:	00000206 	br	102750c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1027504:	00bffec4 	movi	r2,-5
 1027508:	e0bfff15 	stw	r2,-4(fp)
 102750c:	e0bfff17 	ldw	r2,-4(fp)
}
 1027510:	e037883a 	mov	sp,fp
 1027514:	dfc00117 	ldw	ra,4(sp)
 1027518:	df000017 	ldw	fp,0(sp)
 102751c:	dec00204 	addi	sp,sp,8
 1027520:	f800283a 	ret

01027524 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1027524:	defff904 	addi	sp,sp,-28
 1027528:	dfc00615 	stw	ra,24(sp)
 102752c:	df000515 	stw	fp,20(sp)
 1027530:	df000504 	addi	fp,sp,20
 1027534:	e13ffe15 	stw	r4,-8(fp)
 1027538:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 102753c:	e0bffe17 	ldw	r2,-8(fp)
 1027540:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1027544:	e0bffe17 	ldw	r2,-8(fp)
 1027548:	10800104 	addi	r2,r2,4
 102754c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1027550:	0005303a 	rdctl	r2,status
 1027554:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1027558:	e0fffc17 	ldw	r3,-16(fp)
 102755c:	00bfff84 	movi	r2,-2
 1027560:	1884703a 	and	r2,r3,r2
 1027564:	1001703a 	wrctl	status,r2
  
  return context;
 1027568:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 102756c:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 1027570:	1028b200 	call	1028b20 <alt_tick>
 1027574:	e0bffd17 	ldw	r2,-12(fp)
 1027578:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102757c:	e0bffb17 	ldw	r2,-20(fp)
 1027580:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1027584:	e037883a 	mov	sp,fp
 1027588:	dfc00117 	ldw	ra,4(sp)
 102758c:	df000017 	ldw	fp,0(sp)
 1027590:	dec00204 	addi	sp,sp,8
 1027594:	f800283a 	ret

01027598 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1027598:	defff904 	addi	sp,sp,-28
 102759c:	dfc00615 	stw	ra,24(sp)
 10275a0:	df000515 	stw	fp,20(sp)
 10275a4:	df000504 	addi	fp,sp,20
 10275a8:	e13ffc15 	stw	r4,-16(fp)
 10275ac:	e17ffd15 	stw	r5,-12(fp)
 10275b0:	e1bffe15 	stw	r6,-8(fp)
 10275b4:	e1ffff15 	stw	r7,-4(fp)
 10275b8:	e0bfff17 	ldw	r2,-4(fp)
 10275bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 10275c0:	00804134 	movhi	r2,260
 10275c4:	10a31b04 	addi	r2,r2,-29588
 10275c8:	10800017 	ldw	r2,0(r2)
 10275cc:	1004c03a 	cmpne	r2,r2,zero
 10275d0:	1000041e 	bne	r2,zero,10275e4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 10275d4:	00c04134 	movhi	r3,260
 10275d8:	18e31b04 	addi	r3,r3,-29588
 10275dc:	e0bffb17 	ldw	r2,-20(fp)
 10275e0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 10275e4:	e0bffc17 	ldw	r2,-16(fp)
 10275e8:	10800104 	addi	r2,r2,4
 10275ec:	1007883a 	mov	r3,r2
 10275f0:	008001c4 	movi	r2,7
 10275f4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 10275f8:	e13ffe17 	ldw	r4,-8(fp)
 10275fc:	e17ffc17 	ldw	r5,-16(fp)
 1027600:	018040b4 	movhi	r6,258
 1027604:	319d4904 	addi	r6,r6,29988
 1027608:	10288c80 	call	10288c8 <alt_irq_register>
#endif  
}
 102760c:	e037883a 	mov	sp,fp
 1027610:	dfc00117 	ldw	ra,4(sp)
 1027614:	df000017 	ldw	fp,0(sp)
 1027618:	dec00204 	addi	sp,sp,8
 102761c:	f800283a 	ret

01027620 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 1027620:	defffd04 	addi	sp,sp,-12
 1027624:	df000215 	stw	fp,8(sp)
 1027628:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
 102762c:	00804134 	movhi	r2,260
 1027630:	10a31804 	addi	r2,r2,-29600
 1027634:	10800017 	ldw	r2,0(r2)
 1027638:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 102763c:	00804134 	movhi	r2,260
 1027640:	10a31904 	addi	r2,r2,-29596
 1027644:	10800017 	ldw	r2,0(r2)
 1027648:	1004c03a 	cmpne	r2,r2,zero
 102764c:	1000031e 	bne	r2,zero,102765c <alt_timestamp_start+0x3c>
  {
    return -1;
 1027650:	00bfffc4 	movi	r2,-1
 1027654:	e0bfff15 	stw	r2,-4(fp)
 1027658:	00001506 	br	10276b0 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 102765c:	e0bffe17 	ldw	r2,-8(fp)
 1027660:	10800104 	addi	r2,r2,4
 1027664:	1007883a 	mov	r3,r2
 1027668:	00800204 	movi	r2,8
 102766c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 1027670:	e0bffe17 	ldw	r2,-8(fp)
 1027674:	10800204 	addi	r2,r2,8
 1027678:	1007883a 	mov	r3,r2
 102767c:	00bfffd4 	movui	r2,65535
 1027680:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 1027684:	e0bffe17 	ldw	r2,-8(fp)
 1027688:	10800304 	addi	r2,r2,12
 102768c:	1007883a 	mov	r3,r2
 1027690:	00bfffd4 	movui	r2,65535
 1027694:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 1027698:	e0bffe17 	ldw	r2,-8(fp)
 102769c:	10800104 	addi	r2,r2,4
 10276a0:	1007883a 	mov	r3,r2
 10276a4:	00800104 	movi	r2,4
 10276a8:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
 10276ac:	e03fff15 	stw	zero,-4(fp)
 10276b0:	e0bfff17 	ldw	r2,-4(fp)
}
 10276b4:	e037883a 	mov	sp,fp
 10276b8:	df000017 	ldw	fp,0(sp)
 10276bc:	dec00104 	addi	sp,sp,4
 10276c0:	f800283a 	ret

010276c4 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 10276c4:	defffb04 	addi	sp,sp,-20
 10276c8:	df000415 	stw	fp,16(sp)
 10276cc:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
 10276d0:	00804134 	movhi	r2,260
 10276d4:	10a31804 	addi	r2,r2,-29600
 10276d8:	10800017 	ldw	r2,0(r2)
 10276dc:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 10276e0:	00804134 	movhi	r2,260
 10276e4:	10a31904 	addi	r2,r2,-29596
 10276e8:	10800017 	ldw	r2,0(r2)
 10276ec:	1004c03a 	cmpne	r2,r2,zero
 10276f0:	1000031e 	bne	r2,zero,1027700 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
 10276f4:	00bfffc4 	movi	r2,-1
 10276f8:	e0bfff15 	stw	r2,-4(fp)
 10276fc:	00001306 	br	102774c <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 1027700:	e0bffe17 	ldw	r2,-8(fp)
 1027704:	10800404 	addi	r2,r2,16
 1027708:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 102770c:	e0bffe17 	ldw	r2,-8(fp)
 1027710:	10800404 	addi	r2,r2,16
 1027714:	10800037 	ldwio	r2,0(r2)
 1027718:	10bfffcc 	andi	r2,r2,65535
 102771c:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 1027720:	e0bffe17 	ldw	r2,-8(fp)
 1027724:	10800504 	addi	r2,r2,20
 1027728:	10800037 	ldwio	r2,0(r2)
 102772c:	10bfffcc 	andi	r2,r2,65535
 1027730:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 1027734:	e0bffc17 	ldw	r2,-16(fp)
 1027738:	1006943a 	slli	r3,r2,16
 102773c:	e0bffd17 	ldw	r2,-12(fp)
 1027740:	1884b03a 	or	r2,r3,r2
 1027744:	0084303a 	nor	r2,zero,r2
 1027748:	e0bfff15 	stw	r2,-4(fp)
 102774c:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
 1027750:	e037883a 	mov	sp,fp
 1027754:	df000017 	ldw	fp,0(sp)
 1027758:	dec00104 	addi	sp,sp,4
 102775c:	f800283a 	ret

01027760 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 1027760:	deffff04 	addi	sp,sp,-4
 1027764:	df000015 	stw	fp,0(sp)
 1027768:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 102776c:	00804134 	movhi	r2,260
 1027770:	10a31904 	addi	r2,r2,-29596
 1027774:	10800017 	ldw	r2,0(r2)
}
 1027778:	e037883a 	mov	sp,fp
 102777c:	df000017 	ldw	fp,0(sp)
 1027780:	dec00104 	addi	sp,sp,4
 1027784:	f800283a 	ret

01027788 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 1027788:	defffc04 	addi	sp,sp,-16
 102778c:	df000315 	stw	fp,12(sp)
 1027790:	df000304 	addi	fp,sp,12
 1027794:	e13ffe15 	stw	r4,-8(fp)
 1027798:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 102779c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 10277a0:	e0bfff17 	ldw	r2,-4(fp)
 10277a4:	1004c03a 	cmpne	r2,r2,zero
 10277a8:	1000061e 	bne	r2,zero,10277c4 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 10277ac:	e0bffe17 	ldw	r2,-8(fp)
 10277b0:	1007883a 	mov	r3,r2
 10277b4:	e0bffd03 	ldbu	r2,-12(fp)
 10277b8:	10c4b03a 	or	r2,r2,r3
 10277bc:	e0bffd05 	stb	r2,-12(fp)
 10277c0:	00000806 	br	10277e4 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 10277c4:	e0bffe17 	ldw	r2,-8(fp)
 10277c8:	1007883a 	mov	r3,r2
 10277cc:	e0bffd03 	ldbu	r2,-12(fp)
 10277d0:	10c4b03a 	or	r2,r2,r3
 10277d4:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 10277d8:	e0bffd03 	ldbu	r2,-12(fp)
 10277dc:	10801014 	ori	r2,r2,64
 10277e0:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 10277e4:	e0fffd03 	ldbu	r3,-12(fp)
 10277e8:	00bfe004 	movi	r2,-128
 10277ec:	1884b03a 	or	r2,r3,r2
 10277f0:	10803fcc 	andi	r2,r2,255
}
 10277f4:	e037883a 	mov	sp,fp
 10277f8:	df000017 	ldw	fp,0(sp)
 10277fc:	dec00104 	addi	sp,sp,4
 1027800:	f800283a 	ret

01027804 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 1027804:	defffd04 	addi	sp,sp,-12
 1027808:	df000215 	stw	fp,8(sp)
 102780c:	df000204 	addi	fp,sp,8
 1027810:	e13ffe15 	stw	r4,-8(fp)
 1027814:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1027818:	e0bffe17 	ldw	r2,-8(fp)
 102781c:	10800a17 	ldw	r2,40(r2)
 1027820:	e0ffff03 	ldbu	r3,-4(fp)
 1027824:	10c00025 	stbio	r3,0(r2)
}
 1027828:	e037883a 	mov	sp,fp
 102782c:	df000017 	ldw	fp,0(sp)
 1027830:	dec00104 	addi	sp,sp,4
 1027834:	f800283a 	ret

01027838 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1027838:	defffe04 	addi	sp,sp,-8
 102783c:	df000115 	stw	fp,4(sp)
 1027840:	df000104 	addi	fp,sp,4
 1027844:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1027848:	e0bfff17 	ldw	r2,-4(fp)
 102784c:	10800a17 	ldw	r2,40(r2)
 1027850:	1007883a 	mov	r3,r2
 1027854:	00800044 	movi	r2,1
 1027858:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 102785c:	e037883a 	mov	sp,fp
 1027860:	df000017 	ldw	fp,0(sp)
 1027864:	dec00104 	addi	sp,sp,4
 1027868:	f800283a 	ret

0102786c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 102786c:	defffc04 	addi	sp,sp,-16
 1027870:	dfc00315 	stw	ra,12(sp)
 1027874:	df000215 	stw	fp,8(sp)
 1027878:	df000204 	addi	fp,sp,8
 102787c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 1027880:	e13fff17 	ldw	r4,-4(fp)
 1027884:	014040f4 	movhi	r5,259
 1027888:	295bf604 	addi	r5,r5,28632
 102788c:	10284f00 	call	10284f0 <alt_find_dev>
 1027890:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1027894:	e0bffe17 	ldw	r2,-8(fp)
}
 1027898:	e037883a 	mov	sp,fp
 102789c:	dfc00117 	ldw	ra,4(sp)
 10278a0:	df000017 	ldw	fp,0(sp)
 10278a4:	dec00204 	addi	sp,sp,8
 10278a8:	f800283a 	ret

010278ac <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 10278ac:	defffb04 	addi	sp,sp,-20
 10278b0:	df000415 	stw	fp,16(sp)
 10278b4:	df000404 	addi	fp,sp,16
 10278b8:	e13ffd15 	stw	r4,-12(fp)
 10278bc:	e17ffe15 	stw	r5,-8(fp)
 10278c0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 10278c4:	e03ffc15 	stw	zero,-16(fp)
 10278c8:	00000f06 	br	1027908 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 10278cc:	e0bffd17 	ldw	r2,-12(fp)
 10278d0:	10800a17 	ldw	r2,40(r2)
 10278d4:	11000044 	addi	r4,r2,1
 10278d8:	e0fffc17 	ldw	r3,-16(fp)
 10278dc:	e0bffe17 	ldw	r2,-8(fp)
 10278e0:	1885883a 	add	r2,r3,r2
 10278e4:	10800003 	ldbu	r2,0(r2)
 10278e8:	10c03fcc 	andi	r3,r2,255
 10278ec:	18c0201c 	xori	r3,r3,128
 10278f0:	18ffe004 	addi	r3,r3,-128
 10278f4:	2005883a 	mov	r2,r4
 10278f8:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 10278fc:	e0bffc17 	ldw	r2,-16(fp)
 1027900:	10800044 	addi	r2,r2,1
 1027904:	e0bffc15 	stw	r2,-16(fp)
 1027908:	e0fffc17 	ldw	r3,-16(fp)
 102790c:	e0bfff17 	ldw	r2,-4(fp)
 1027910:	18bfee36 	bltu	r3,r2,10278cc <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 1027914:	e037883a 	mov	sp,fp
 1027918:	df000017 	ldw	fp,0(sp)
 102791c:	dec00104 	addi	sp,sp,4
 1027920:	f800283a 	ret

01027924 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 1027924:	defffd04 	addi	sp,sp,-12
 1027928:	df000215 	stw	fp,8(sp)
 102792c:	df000204 	addi	fp,sp,8
 1027930:	e13ffe15 	stw	r4,-8(fp)
 1027934:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1027938:	00000d06 	br	1027970 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 102793c:	e0bffe17 	ldw	r2,-8(fp)
 1027940:	10800a17 	ldw	r2,40(r2)
 1027944:	11000044 	addi	r4,r2,1
 1027948:	e0bfff17 	ldw	r2,-4(fp)
 102794c:	10800003 	ldbu	r2,0(r2)
 1027950:	10c03fcc 	andi	r3,r2,255
 1027954:	18c0201c 	xori	r3,r3,128
 1027958:	18ffe004 	addi	r3,r3,-128
 102795c:	2005883a 	mov	r2,r4
 1027960:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1027964:	e0bfff17 	ldw	r2,-4(fp)
 1027968:	10800044 	addi	r2,r2,1
 102796c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 1027970:	e0bfff17 	ldw	r2,-4(fp)
 1027974:	10800003 	ldbu	r2,0(r2)
 1027978:	10803fcc 	andi	r2,r2,255
 102797c:	1080201c 	xori	r2,r2,128
 1027980:	10bfe004 	addi	r2,r2,-128
 1027984:	1004c03a 	cmpne	r2,r2,zero
 1027988:	103fec1e 	bne	r2,zero,102793c <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 102798c:	e037883a 	mov	sp,fp
 1027990:	df000017 	ldw	fp,0(sp)
 1027994:	dec00104 	addi	sp,sp,4
 1027998:	f800283a 	ret

0102799c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 102799c:	defffb04 	addi	sp,sp,-20
 10279a0:	dfc00415 	stw	ra,16(sp)
 10279a4:	df000315 	stw	fp,12(sp)
 10279a8:	df000304 	addi	fp,sp,12
 10279ac:	e13ffd15 	stw	r4,-12(fp)
 10279b0:	e17ffe15 	stw	r5,-8(fp)
 10279b4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 10279b8:	e0bffd17 	ldw	r2,-12(fp)
 10279bc:	10800017 	ldw	r2,0(r2)
 10279c0:	1009883a 	mov	r4,r2
 10279c4:	e1bfff17 	ldw	r6,-4(fp)
 10279c8:	e17ffe17 	ldw	r5,-8(fp)
 10279cc:	10278ac0 	call	10278ac <alt_up_character_lcd_write>
	return 0;
 10279d0:	0005883a 	mov	r2,zero
}
 10279d4:	e037883a 	mov	sp,fp
 10279d8:	dfc00117 	ldw	ra,4(sp)
 10279dc:	df000017 	ldw	fp,0(sp)
 10279e0:	dec00204 	addi	sp,sp,8
 10279e4:	f800283a 	ret

010279e8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 10279e8:	defff904 	addi	sp,sp,-28
 10279ec:	dfc00615 	stw	ra,24(sp)
 10279f0:	df000515 	stw	fp,20(sp)
 10279f4:	df000504 	addi	fp,sp,20
 10279f8:	e13ffc15 	stw	r4,-16(fp)
 10279fc:	e17ffd15 	stw	r5,-12(fp)
 1027a00:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 1027a04:	e0bffd17 	ldw	r2,-12(fp)
 1027a08:	10800a28 	cmpgeui	r2,r2,40
 1027a0c:	1000031e 	bne	r2,zero,1027a1c <alt_up_character_lcd_set_cursor_pos+0x34>
 1027a10:	e0bffe17 	ldw	r2,-8(fp)
 1027a14:	108000b0 	cmpltui	r2,r2,2
 1027a18:	1000031e 	bne	r2,zero,1027a28 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1027a1c:	00bfffc4 	movi	r2,-1
 1027a20:	e0bfff15 	stw	r2,-4(fp)
 1027a24:	00000806 	br	1027a48 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1027a28:	e13ffd17 	ldw	r4,-12(fp)
 1027a2c:	e17ffe17 	ldw	r5,-8(fp)
 1027a30:	10277880 	call	1027788 <get_DDRAM_addr>
 1027a34:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1027a38:	e17ffb03 	ldbu	r5,-20(fp)
 1027a3c:	e13ffc17 	ldw	r4,-16(fp)
 1027a40:	10278040 	call	1027804 <alt_up_character_lcd_send_cmd>
	return 0;
 1027a44:	e03fff15 	stw	zero,-4(fp)
 1027a48:	e0bfff17 	ldw	r2,-4(fp)
}
 1027a4c:	e037883a 	mov	sp,fp
 1027a50:	dfc00117 	ldw	ra,4(sp)
 1027a54:	df000017 	ldw	fp,0(sp)
 1027a58:	dec00204 	addi	sp,sp,8
 1027a5c:	f800283a 	ret

01027a60 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1027a60:	defff904 	addi	sp,sp,-28
 1027a64:	dfc00615 	stw	ra,24(sp)
 1027a68:	df000515 	stw	fp,20(sp)
 1027a6c:	df000504 	addi	fp,sp,20
 1027a70:	e13ffc15 	stw	r4,-16(fp)
 1027a74:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1027a78:	e0bffd17 	ldw	r2,-12(fp)
 1027a7c:	1005003a 	cmpeq	r2,r2,zero
 1027a80:	10001e1e 	bne	r2,zero,1027afc <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 1027a84:	e0bffd17 	ldw	r2,-12(fp)
 1027a88:	10800050 	cmplti	r2,r2,1
 1027a8c:	1000031e 	bne	r2,zero,1027a9c <alt_up_character_lcd_shift_cursor+0x3c>
 1027a90:	00800504 	movi	r2,20
 1027a94:	e0bfff05 	stb	r2,-4(fp)
 1027a98:	00000206 	br	1027aa4 <alt_up_character_lcd_shift_cursor+0x44>
 1027a9c:	00c00404 	movi	r3,16
 1027aa0:	e0ffff05 	stb	r3,-4(fp)
 1027aa4:	e0bfff03 	ldbu	r2,-4(fp)
 1027aa8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1027aac:	e0fffd17 	ldw	r3,-12(fp)
 1027ab0:	e0fffe15 	stw	r3,-8(fp)
 1027ab4:	e0fffe17 	ldw	r3,-8(fp)
 1027ab8:	1804403a 	cmpge	r2,r3,zero
 1027abc:	1000031e 	bne	r2,zero,1027acc <alt_up_character_lcd_shift_cursor+0x6c>
 1027ac0:	e0bffe17 	ldw	r2,-8(fp)
 1027ac4:	0085c83a 	sub	r2,zero,r2
 1027ac8:	e0bffe15 	stw	r2,-8(fp)
 1027acc:	e0fffe17 	ldw	r3,-8(fp)
 1027ad0:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1027ad4:	00000306 	br	1027ae4 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1027ad8:	e17ffb43 	ldbu	r5,-19(fp)
 1027adc:	e13ffc17 	ldw	r4,-16(fp)
 1027ae0:	10278040 	call	1027804 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1027ae4:	e0bffb03 	ldbu	r2,-20(fp)
 1027ae8:	10bfffc4 	addi	r2,r2,-1
 1027aec:	e0bffb05 	stb	r2,-20(fp)
 1027af0:	e0bffb03 	ldbu	r2,-20(fp)
 1027af4:	10803fd8 	cmpnei	r2,r2,255
 1027af8:	103ff71e 	bne	r2,zero,1027ad8 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1027afc:	e037883a 	mov	sp,fp
 1027b00:	dfc00117 	ldw	ra,4(sp)
 1027b04:	df000017 	ldw	fp,0(sp)
 1027b08:	dec00204 	addi	sp,sp,8
 1027b0c:	f800283a 	ret

01027b10 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1027b10:	defff904 	addi	sp,sp,-28
 1027b14:	dfc00615 	stw	ra,24(sp)
 1027b18:	df000515 	stw	fp,20(sp)
 1027b1c:	df000504 	addi	fp,sp,20
 1027b20:	e13ffc15 	stw	r4,-16(fp)
 1027b24:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1027b28:	e0bffd17 	ldw	r2,-12(fp)
 1027b2c:	1005003a 	cmpeq	r2,r2,zero
 1027b30:	10001e1e 	bne	r2,zero,1027bac <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 1027b34:	e0bffd17 	ldw	r2,-12(fp)
 1027b38:	10800050 	cmplti	r2,r2,1
 1027b3c:	1000031e 	bne	r2,zero,1027b4c <alt_up_character_lcd_shift_display+0x3c>
 1027b40:	00800704 	movi	r2,28
 1027b44:	e0bfff05 	stb	r2,-4(fp)
 1027b48:	00000206 	br	1027b54 <alt_up_character_lcd_shift_display+0x44>
 1027b4c:	00c00604 	movi	r3,24
 1027b50:	e0ffff05 	stb	r3,-4(fp)
 1027b54:	e0bfff03 	ldbu	r2,-4(fp)
 1027b58:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1027b5c:	e0fffd17 	ldw	r3,-12(fp)
 1027b60:	e0fffe15 	stw	r3,-8(fp)
 1027b64:	e0fffe17 	ldw	r3,-8(fp)
 1027b68:	1804403a 	cmpge	r2,r3,zero
 1027b6c:	1000031e 	bne	r2,zero,1027b7c <alt_up_character_lcd_shift_display+0x6c>
 1027b70:	e0bffe17 	ldw	r2,-8(fp)
 1027b74:	0085c83a 	sub	r2,zero,r2
 1027b78:	e0bffe15 	stw	r2,-8(fp)
 1027b7c:	e0fffe17 	ldw	r3,-8(fp)
 1027b80:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1027b84:	00000306 	br	1027b94 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1027b88:	e17ffb43 	ldbu	r5,-19(fp)
 1027b8c:	e13ffc17 	ldw	r4,-16(fp)
 1027b90:	10278040 	call	1027804 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1027b94:	e0bffb03 	ldbu	r2,-20(fp)
 1027b98:	10bfffc4 	addi	r2,r2,-1
 1027b9c:	e0bffb05 	stb	r2,-20(fp)
 1027ba0:	e0bffb03 	ldbu	r2,-20(fp)
 1027ba4:	10803fd8 	cmpnei	r2,r2,255
 1027ba8:	103ff71e 	bne	r2,zero,1027b88 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1027bac:	e037883a 	mov	sp,fp
 1027bb0:	dfc00117 	ldw	ra,4(sp)
 1027bb4:	df000017 	ldw	fp,0(sp)
 1027bb8:	dec00204 	addi	sp,sp,8
 1027bbc:	f800283a 	ret

01027bc0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1027bc0:	defff904 	addi	sp,sp,-28
 1027bc4:	dfc00615 	stw	ra,24(sp)
 1027bc8:	df000515 	stw	fp,20(sp)
 1027bcc:	df000504 	addi	fp,sp,20
 1027bd0:	e13ffc15 	stw	r4,-16(fp)
 1027bd4:	e17ffd15 	stw	r5,-12(fp)
 1027bd8:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 1027bdc:	e0bffd17 	ldw	r2,-12(fp)
 1027be0:	10800a28 	cmpgeui	r2,r2,40
 1027be4:	1000031e 	bne	r2,zero,1027bf4 <alt_up_character_lcd_erase_pos+0x34>
 1027be8:	e0bffe17 	ldw	r2,-8(fp)
 1027bec:	108000b0 	cmpltui	r2,r2,2
 1027bf0:	1000031e 	bne	r2,zero,1027c00 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 1027bf4:	00bfffc4 	movi	r2,-1
 1027bf8:	e0bfff15 	stw	r2,-4(fp)
 1027bfc:	00000e06 	br	1027c38 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1027c00:	e13ffd17 	ldw	r4,-12(fp)
 1027c04:	e17ffe17 	ldw	r5,-8(fp)
 1027c08:	10277880 	call	1027788 <get_DDRAM_addr>
 1027c0c:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1027c10:	e17ffb03 	ldbu	r5,-20(fp)
 1027c14:	e13ffc17 	ldw	r4,-16(fp)
 1027c18:	10278040 	call	1027804 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1027c1c:	e0bffc17 	ldw	r2,-16(fp)
 1027c20:	10800a17 	ldw	r2,40(r2)
 1027c24:	10800044 	addi	r2,r2,1
 1027c28:	1007883a 	mov	r3,r2
 1027c2c:	00800084 	movi	r2,2
 1027c30:	18800025 	stbio	r2,0(r3)
	return 0;
 1027c34:	e03fff15 	stw	zero,-4(fp)
 1027c38:	e0bfff17 	ldw	r2,-4(fp)
}
 1027c3c:	e037883a 	mov	sp,fp
 1027c40:	dfc00117 	ldw	ra,4(sp)
 1027c44:	df000017 	ldw	fp,0(sp)
 1027c48:	dec00204 	addi	sp,sp,8
 1027c4c:	f800283a 	ret

01027c50 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1027c50:	defffd04 	addi	sp,sp,-12
 1027c54:	dfc00215 	stw	ra,8(sp)
 1027c58:	df000115 	stw	fp,4(sp)
 1027c5c:	df000104 	addi	fp,sp,4
 1027c60:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1027c64:	e13fff17 	ldw	r4,-4(fp)
 1027c68:	01400304 	movi	r5,12
 1027c6c:	10278040 	call	1027804 <alt_up_character_lcd_send_cmd>
}
 1027c70:	e037883a 	mov	sp,fp
 1027c74:	dfc00117 	ldw	ra,4(sp)
 1027c78:	df000017 	ldw	fp,0(sp)
 1027c7c:	dec00204 	addi	sp,sp,8
 1027c80:	f800283a 	ret

01027c84 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1027c84:	defffd04 	addi	sp,sp,-12
 1027c88:	dfc00215 	stw	ra,8(sp)
 1027c8c:	df000115 	stw	fp,4(sp)
 1027c90:	df000104 	addi	fp,sp,4
 1027c94:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1027c98:	e13fff17 	ldw	r4,-4(fp)
 1027c9c:	014003c4 	movi	r5,15
 1027ca0:	10278040 	call	1027804 <alt_up_character_lcd_send_cmd>
}
 1027ca4:	e037883a 	mov	sp,fp
 1027ca8:	dfc00117 	ldw	ra,4(sp)
 1027cac:	df000017 	ldw	fp,0(sp)
 1027cb0:	dec00204 	addi	sp,sp,8
 1027cb4:	f800283a 	ret

01027cb8 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1027cb8:	defffd04 	addi	sp,sp,-12
 1027cbc:	df000215 	stw	fp,8(sp)
 1027cc0:	df000204 	addi	fp,sp,8
 1027cc4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1027cc8:	e0bfff17 	ldw	r2,-4(fp)
 1027ccc:	10800a17 	ldw	r2,40(r2)
 1027cd0:	10800104 	addi	r2,r2,4
 1027cd4:	10800037 	ldwio	r2,0(r2)
 1027cd8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 1027cdc:	e0bffe17 	ldw	r2,-8(fp)
 1027ce0:	10800054 	ori	r2,r2,1
 1027ce4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1027ce8:	e0bfff17 	ldw	r2,-4(fp)
 1027cec:	10800a17 	ldw	r2,40(r2)
 1027cf0:	10800104 	addi	r2,r2,4
 1027cf4:	e0fffe17 	ldw	r3,-8(fp)
 1027cf8:	10c00035 	stwio	r3,0(r2)
}
 1027cfc:	e037883a 	mov	sp,fp
 1027d00:	df000017 	ldw	fp,0(sp)
 1027d04:	dec00104 	addi	sp,sp,4
 1027d08:	f800283a 	ret

01027d0c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1027d0c:	defffd04 	addi	sp,sp,-12
 1027d10:	df000215 	stw	fp,8(sp)
 1027d14:	df000204 	addi	fp,sp,8
 1027d18:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1027d1c:	e0bfff17 	ldw	r2,-4(fp)
 1027d20:	10800a17 	ldw	r2,40(r2)
 1027d24:	10800104 	addi	r2,r2,4
 1027d28:	10800037 	ldwio	r2,0(r2)
 1027d2c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 1027d30:	e0fffe17 	ldw	r3,-8(fp)
 1027d34:	00bfff84 	movi	r2,-2
 1027d38:	1884703a 	and	r2,r3,r2
 1027d3c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1027d40:	e0bfff17 	ldw	r2,-4(fp)
 1027d44:	10800a17 	ldw	r2,40(r2)
 1027d48:	10800104 	addi	r2,r2,4
 1027d4c:	e0fffe17 	ldw	r3,-8(fp)
 1027d50:	10c00035 	stwio	r3,0(r2)
}
 1027d54:	e037883a 	mov	sp,fp
 1027d58:	df000017 	ldw	fp,0(sp)
 1027d5c:	dec00104 	addi	sp,sp,4
 1027d60:	f800283a 	ret

01027d64 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 1027d64:	defffd04 	addi	sp,sp,-12
 1027d68:	df000215 	stw	fp,8(sp)
 1027d6c:	df000204 	addi	fp,sp,8
 1027d70:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 1027d74:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 1027d78:	e0bfff17 	ldw	r2,-4(fp)
 1027d7c:	10800a17 	ldw	r2,40(r2)
 1027d80:	10800084 	addi	r2,r2,2
 1027d84:	1080002b 	ldhuio	r2,0(r2)
 1027d88:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 1027d8c:	e0bffe0b 	ldhu	r2,-8(fp)
}
 1027d90:	e037883a 	mov	sp,fp
 1027d94:	df000017 	ldw	fp,0(sp)
 1027d98:	dec00104 	addi	sp,sp,4
 1027d9c:	f800283a 	ret

01027da0 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 1027da0:	defffd04 	addi	sp,sp,-12
 1027da4:	df000215 	stw	fp,8(sp)
 1027da8:	df000204 	addi	fp,sp,8
 1027dac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1027db0:	e0bfff17 	ldw	r2,-4(fp)
 1027db4:	10800a17 	ldw	r2,40(r2)
 1027db8:	10800104 	addi	r2,r2,4
 1027dbc:	10800037 	ldwio	r2,0(r2)
 1027dc0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 1027dc4:	e0bffe17 	ldw	r2,-8(fp)
 1027dc8:	10bfffec 	andhi	r2,r2,65535
 1027dcc:	1004d43a 	srli	r2,r2,16
}
 1027dd0:	e037883a 	mov	sp,fp
 1027dd4:	df000017 	ldw	fp,0(sp)
 1027dd8:	dec00104 	addi	sp,sp,4
 1027ddc:	f800283a 	ret

01027de0 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 1027de0:	defffc04 	addi	sp,sp,-16
 1027de4:	df000315 	stw	fp,12(sp)
 1027de8:	df000304 	addi	fp,sp,12
 1027dec:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 1027df0:	e0bffe17 	ldw	r2,-8(fp)
 1027df4:	1080800c 	andi	r2,r2,512
 1027df8:	1004d27a 	srli	r2,r2,9
 1027dfc:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 1027e00:	e0bffd17 	ldw	r2,-12(fp)
 1027e04:	1005003a 	cmpeq	r2,r2,zero
 1027e08:	1000031e 	bne	r2,zero,1027e18 <alt_up_rs232_check_parity+0x38>
 1027e0c:	00bfffc4 	movi	r2,-1
 1027e10:	e0bfff15 	stw	r2,-4(fp)
 1027e14:	00000106 	br	1027e1c <alt_up_rs232_check_parity+0x3c>
 1027e18:	e03fff15 	stw	zero,-4(fp)
 1027e1c:	e0bfff17 	ldw	r2,-4(fp)
}
 1027e20:	e037883a 	mov	sp,fp
 1027e24:	df000017 	ldw	fp,0(sp)
 1027e28:	dec00104 	addi	sp,sp,4
 1027e2c:	f800283a 	ret

01027e30 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 1027e30:	defffc04 	addi	sp,sp,-16
 1027e34:	df000315 	stw	fp,12(sp)
 1027e38:	df000304 	addi	fp,sp,12
 1027e3c:	e13ffe15 	stw	r4,-8(fp)
 1027e40:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 1027e44:	e0bffe17 	ldw	r2,-8(fp)
 1027e48:	10800a17 	ldw	r2,40(r2)
 1027e4c:	10800037 	ldwio	r2,0(r2)
 1027e50:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 1027e54:	e0bffe17 	ldw	r2,-8(fp)
 1027e58:	10800a17 	ldw	r2,40(r2)
 1027e5c:	e0ffff03 	ldbu	r3,-4(fp)
 1027e60:	10c00035 	stwio	r3,0(r2)
	return 0;
 1027e64:	0005883a 	mov	r2,zero
}
 1027e68:	e037883a 	mov	sp,fp
 1027e6c:	df000017 	ldw	fp,0(sp)
 1027e70:	dec00104 	addi	sp,sp,4
 1027e74:	f800283a 	ret

01027e78 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 1027e78:	defffa04 	addi	sp,sp,-24
 1027e7c:	dfc00515 	stw	ra,20(sp)
 1027e80:	df000415 	stw	fp,16(sp)
 1027e84:	df000404 	addi	fp,sp,16
 1027e88:	e13ffd15 	stw	r4,-12(fp)
 1027e8c:	e17ffe15 	stw	r5,-8(fp)
 1027e90:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 1027e94:	e0bffd17 	ldw	r2,-12(fp)
 1027e98:	10800a17 	ldw	r2,40(r2)
 1027e9c:	10800037 	ldwio	r2,0(r2)
 1027ea0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 1027ea4:	e0bffc17 	ldw	r2,-16(fp)
 1027ea8:	1007883a 	mov	r3,r2
 1027eac:	e0bffe17 	ldw	r2,-8(fp)
 1027eb0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 1027eb4:	e13ffc17 	ldw	r4,-16(fp)
 1027eb8:	1027de00 	call	1027de0 <alt_up_rs232_check_parity>
 1027ebc:	1007883a 	mov	r3,r2
 1027ec0:	e0bfff17 	ldw	r2,-4(fp)
 1027ec4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 1027ec8:	e0bffc17 	ldw	r2,-16(fp)
 1027ecc:	10a0000c 	andi	r2,r2,32768
 1027ed0:	1004d3fa 	srli	r2,r2,15
 1027ed4:	10bfffc4 	addi	r2,r2,-1
}
 1027ed8:	e037883a 	mov	sp,fp
 1027edc:	dfc00117 	ldw	ra,4(sp)
 1027ee0:	df000017 	ldw	fp,0(sp)
 1027ee4:	dec00204 	addi	sp,sp,8
 1027ee8:	f800283a 	ret

01027eec <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 1027eec:	defff804 	addi	sp,sp,-32
 1027ef0:	dfc00715 	stw	ra,28(sp)
 1027ef4:	df000615 	stw	fp,24(sp)
 1027ef8:	df000604 	addi	fp,sp,24
 1027efc:	e13ffd15 	stw	r4,-12(fp)
 1027f00:	e17ffe15 	stw	r5,-8(fp)
 1027f04:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1027f08:	e0bffd17 	ldw	r2,-12(fp)
 1027f0c:	10800017 	ldw	r2,0(r2)
 1027f10:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 1027f14:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 1027f18:	00000c06 	br	1027f4c <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 1027f1c:	e17ffe17 	ldw	r5,-8(fp)
 1027f20:	e0bffe17 	ldw	r2,-8(fp)
 1027f24:	10800044 	addi	r2,r2,1
 1027f28:	e0bffe15 	stw	r2,-8(fp)
 1027f2c:	e1bffc04 	addi	r6,fp,-16
 1027f30:	e13ffb17 	ldw	r4,-20(fp)
 1027f34:	1027e780 	call	1027e78 <alt_up_rs232_read_data>
 1027f38:	1004c03a 	cmpne	r2,r2,zero
 1027f3c:	1000091e 	bne	r2,zero,1027f64 <alt_up_rs232_read_fd+0x78>
			count++;
 1027f40:	e0bffa17 	ldw	r2,-24(fp)
 1027f44:	10800044 	addi	r2,r2,1
 1027f48:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 1027f4c:	e0bfff17 	ldw	r2,-4(fp)
 1027f50:	10bfffc4 	addi	r2,r2,-1
 1027f54:	e0bfff15 	stw	r2,-4(fp)
 1027f58:	e0bfff17 	ldw	r2,-4(fp)
 1027f5c:	10bfffd8 	cmpnei	r2,r2,-1
 1027f60:	103fee1e 	bne	r2,zero,1027f1c <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 1027f64:	e0bffa17 	ldw	r2,-24(fp)
}
 1027f68:	e037883a 	mov	sp,fp
 1027f6c:	dfc00117 	ldw	ra,4(sp)
 1027f70:	df000017 	ldw	fp,0(sp)
 1027f74:	dec00204 	addi	sp,sp,8
 1027f78:	f800283a 	ret

01027f7c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 1027f7c:	defff904 	addi	sp,sp,-28
 1027f80:	dfc00615 	stw	ra,24(sp)
 1027f84:	df000515 	stw	fp,20(sp)
 1027f88:	df000504 	addi	fp,sp,20
 1027f8c:	e13ffd15 	stw	r4,-12(fp)
 1027f90:	e17ffe15 	stw	r5,-8(fp)
 1027f94:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1027f98:	e0bffd17 	ldw	r2,-12(fp)
 1027f9c:	10800017 	ldw	r2,0(r2)
 1027fa0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 1027fa4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 1027fa8:	00000d06 	br	1027fe0 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 1027fac:	e0bffe17 	ldw	r2,-8(fp)
 1027fb0:	10800003 	ldbu	r2,0(r2)
 1027fb4:	11403fcc 	andi	r5,r2,255
 1027fb8:	e13ffc17 	ldw	r4,-16(fp)
 1027fbc:	1027e300 	call	1027e30 <alt_up_rs232_write_data>
 1027fc0:	1004c03a 	cmpne	r2,r2,zero
 1027fc4:	10000c1e 	bne	r2,zero,1027ff8 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 1027fc8:	e0bffb17 	ldw	r2,-20(fp)
 1027fcc:	10800044 	addi	r2,r2,1
 1027fd0:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 1027fd4:	e0bffe17 	ldw	r2,-8(fp)
 1027fd8:	10800044 	addi	r2,r2,1
 1027fdc:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 1027fe0:	e0bfff17 	ldw	r2,-4(fp)
 1027fe4:	10bfffc4 	addi	r2,r2,-1
 1027fe8:	e0bfff15 	stw	r2,-4(fp)
 1027fec:	e0bfff17 	ldw	r2,-4(fp)
 1027ff0:	10bfffd8 	cmpnei	r2,r2,-1
 1027ff4:	103fed1e 	bne	r2,zero,1027fac <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 1027ff8:	e0bffb17 	ldw	r2,-20(fp)
}
 1027ffc:	e037883a 	mov	sp,fp
 1028000:	dfc00117 	ldw	ra,4(sp)
 1028004:	df000017 	ldw	fp,0(sp)
 1028008:	dec00204 	addi	sp,sp,8
 102800c:	f800283a 	ret

01028010 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 1028010:	defffc04 	addi	sp,sp,-16
 1028014:	dfc00315 	stw	ra,12(sp)
 1028018:	df000215 	stw	fp,8(sp)
 102801c:	df000204 	addi	fp,sp,8
 1028020:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 1028024:	e13fff17 	ldw	r4,-4(fp)
 1028028:	014040f4 	movhi	r5,259
 102802c:	295bf604 	addi	r5,r5,28632
 1028030:	10284f00 	call	10284f0 <alt_find_dev>
 1028034:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1028038:	e0bffe17 	ldw	r2,-8(fp)
}
 102803c:	e037883a 	mov	sp,fp
 1028040:	dfc00117 	ldw	ra,4(sp)
 1028044:	df000017 	ldw	fp,0(sp)
 1028048:	dec00204 	addi	sp,sp,8
 102804c:	f800283a 	ret

01028050 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1028050:	defff404 	addi	sp,sp,-48
 1028054:	df000b15 	stw	fp,44(sp)
 1028058:	df000b04 	addi	fp,sp,44
 102805c:	e13ffb15 	stw	r4,-20(fp)
 1028060:	e17ffc15 	stw	r5,-16(fp)
 1028064:	e1bffd15 	stw	r6,-12(fp)
 1028068:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 102806c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1028070:	00804134 	movhi	r2,260
 1028074:	10a31b04 	addi	r2,r2,-29588
 1028078:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 102807c:	1005003a 	cmpeq	r2,r2,zero
 1028080:	1000411e 	bne	r2,zero,1028188 <alt_alarm_start+0x138>
  {
    if (alarm)
 1028084:	e0bffb17 	ldw	r2,-20(fp)
 1028088:	1005003a 	cmpeq	r2,r2,zero
 102808c:	10003b1e 	bne	r2,zero,102817c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1028090:	e0fffb17 	ldw	r3,-20(fp)
 1028094:	e0bffd17 	ldw	r2,-12(fp)
 1028098:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 102809c:	e0fffb17 	ldw	r3,-20(fp)
 10280a0:	e0bffe17 	ldw	r2,-8(fp)
 10280a4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10280a8:	0005303a 	rdctl	r2,status
 10280ac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10280b0:	e0fff817 	ldw	r3,-32(fp)
 10280b4:	00bfff84 	movi	r2,-2
 10280b8:	1884703a 	and	r2,r3,r2
 10280bc:	1001703a 	wrctl	status,r2
  
  return context;
 10280c0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 10280c4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10280c8:	00804134 	movhi	r2,260
 10280cc:	10a31c04 	addi	r2,r2,-29584
 10280d0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 10280d4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 10280d8:	e0fffc17 	ldw	r3,-16(fp)
 10280dc:	e0bff917 	ldw	r2,-28(fp)
 10280e0:	1885883a 	add	r2,r3,r2
 10280e4:	10c00044 	addi	r3,r2,1
 10280e8:	e0bffb17 	ldw	r2,-20(fp)
 10280ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 10280f0:	e0bffb17 	ldw	r2,-20(fp)
 10280f4:	10c00217 	ldw	r3,8(r2)
 10280f8:	e0bff917 	ldw	r2,-28(fp)
 10280fc:	1880042e 	bgeu	r3,r2,1028110 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1028100:	e0fffb17 	ldw	r3,-20(fp)
 1028104:	00800044 	movi	r2,1
 1028108:	18800405 	stb	r2,16(r3)
 102810c:	00000206 	br	1028118 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1028110:	e0bffb17 	ldw	r2,-20(fp)
 1028114:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1028118:	e0fffb17 	ldw	r3,-20(fp)
 102811c:	008040f4 	movhi	r2,259
 1028120:	109bfc04 	addi	r2,r2,28656
 1028124:	e0bff615 	stw	r2,-40(fp)
 1028128:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 102812c:	e0fff717 	ldw	r3,-36(fp)
 1028130:	e0bff617 	ldw	r2,-40(fp)
 1028134:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1028138:	e0bff617 	ldw	r2,-40(fp)
 102813c:	10c00017 	ldw	r3,0(r2)
 1028140:	e0bff717 	ldw	r2,-36(fp)
 1028144:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1028148:	e0bff617 	ldw	r2,-40(fp)
 102814c:	10c00017 	ldw	r3,0(r2)
 1028150:	e0bff717 	ldw	r2,-36(fp)
 1028154:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1028158:	e0fff617 	ldw	r3,-40(fp)
 102815c:	e0bff717 	ldw	r2,-36(fp)
 1028160:	18800015 	stw	r2,0(r3)
 1028164:	e0bffa17 	ldw	r2,-24(fp)
 1028168:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102816c:	e0bff517 	ldw	r2,-44(fp)
 1028170:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1028174:	e03fff15 	stw	zero,-4(fp)
 1028178:	00000506 	br	1028190 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 102817c:	00bffa84 	movi	r2,-22
 1028180:	e0bfff15 	stw	r2,-4(fp)
 1028184:	00000206 	br	1028190 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1028188:	00bfde84 	movi	r2,-134
 102818c:	e0bfff15 	stw	r2,-4(fp)
 1028190:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1028194:	e037883a 	mov	sp,fp
 1028198:	df000017 	ldw	fp,0(sp)
 102819c:	dec00104 	addi	sp,sp,4
 10281a0:	f800283a 	ret

010281a4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 10281a4:	defffb04 	addi	sp,sp,-20
 10281a8:	df000415 	stw	fp,16(sp)
 10281ac:	df000404 	addi	fp,sp,16
 10281b0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 10281b4:	008000c4 	movi	r2,3
 10281b8:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 10281bc:	e0fffc17 	ldw	r3,-16(fp)
 10281c0:	008003f4 	movhi	r2,15
 10281c4:	10909004 	addi	r2,r2,16960
 10281c8:	1887383a 	mul	r3,r3,r2
 10281cc:	0080bef4 	movhi	r2,763
 10281d0:	10bc2004 	addi	r2,r2,-3968
 10281d4:	10c7203a 	divu	r3,r2,r3
 10281d8:	00a00034 	movhi	r2,32768
 10281dc:	10bfffc4 	addi	r2,r2,-1
 10281e0:	10c7203a 	divu	r3,r2,r3
 10281e4:	e0bfff17 	ldw	r2,-4(fp)
 10281e8:	10c5203a 	divu	r2,r2,r3
 10281ec:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 10281f0:	e0bffd17 	ldw	r2,-12(fp)
 10281f4:	1005003a 	cmpeq	r2,r2,zero
 10281f8:	1000251e 	bne	r2,zero,1028290 <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
 10281fc:	e03ffe15 	stw	zero,-8(fp)
 1028200:	00001406 	br	1028254 <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1028204:	00a00034 	movhi	r2,32768
 1028208:	10bfffc4 	addi	r2,r2,-1
 102820c:	10bfffc4 	addi	r2,r2,-1
 1028210:	103ffe1e 	bne	r2,zero,102820c <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1028214:	e0fffc17 	ldw	r3,-16(fp)
 1028218:	008003f4 	movhi	r2,15
 102821c:	10909004 	addi	r2,r2,16960
 1028220:	1887383a 	mul	r3,r3,r2
 1028224:	0080bef4 	movhi	r2,763
 1028228:	10bc2004 	addi	r2,r2,-3968
 102822c:	10c7203a 	divu	r3,r2,r3
 1028230:	00a00034 	movhi	r2,32768
 1028234:	10bfffc4 	addi	r2,r2,-1
 1028238:	10c7203a 	divu	r3,r2,r3
 102823c:	e0bfff17 	ldw	r2,-4(fp)
 1028240:	10c5c83a 	sub	r2,r2,r3
 1028244:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1028248:	e0bffe17 	ldw	r2,-8(fp)
 102824c:	10800044 	addi	r2,r2,1
 1028250:	e0bffe15 	stw	r2,-8(fp)
 1028254:	e0fffe17 	ldw	r3,-8(fp)
 1028258:	e0bffd17 	ldw	r2,-12(fp)
 102825c:	18bfe916 	blt	r3,r2,1028204 <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1028260:	e0fffc17 	ldw	r3,-16(fp)
 1028264:	008003f4 	movhi	r2,15
 1028268:	10909004 	addi	r2,r2,16960
 102826c:	1887383a 	mul	r3,r3,r2
 1028270:	0080bef4 	movhi	r2,763
 1028274:	10bc2004 	addi	r2,r2,-3968
 1028278:	10c7203a 	divu	r3,r2,r3
 102827c:	e0bfff17 	ldw	r2,-4(fp)
 1028280:	1885383a 	mul	r2,r3,r2
 1028284:	10bfffc4 	addi	r2,r2,-1
 1028288:	103ffe1e 	bne	r2,zero,1028284 <alt_busy_sleep+0xe0>
 102828c:	00000b06 	br	10282bc <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1028290:	e0fffc17 	ldw	r3,-16(fp)
 1028294:	008003f4 	movhi	r2,15
 1028298:	10909004 	addi	r2,r2,16960
 102829c:	1887383a 	mul	r3,r3,r2
 10282a0:	0080bef4 	movhi	r2,763
 10282a4:	10bc2004 	addi	r2,r2,-3968
 10282a8:	10c7203a 	divu	r3,r2,r3
 10282ac:	e0bfff17 	ldw	r2,-4(fp)
 10282b0:	1885383a 	mul	r2,r3,r2
 10282b4:	10bfffc4 	addi	r2,r2,-1
 10282b8:	00bffe16 	blt	zero,r2,10282b4 <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 10282bc:	0005883a 	mov	r2,zero
}
 10282c0:	e037883a 	mov	sp,fp
 10282c4:	df000017 	ldw	fp,0(sp)
 10282c8:	dec00104 	addi	sp,sp,4
 10282cc:	f800283a 	ret

010282d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 10282d0:	defffe04 	addi	sp,sp,-8
 10282d4:	df000115 	stw	fp,4(sp)
 10282d8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10282dc:	e03fff15 	stw	zero,-4(fp)
 10282e0:	00000506 	br	10282f8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 10282e4:	e0bfff17 	ldw	r2,-4(fp)
 10282e8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10282ec:	e0bfff17 	ldw	r2,-4(fp)
 10282f0:	10800804 	addi	r2,r2,32
 10282f4:	e0bfff15 	stw	r2,-4(fp)
 10282f8:	e0bfff17 	ldw	r2,-4(fp)
 10282fc:	10820030 	cmpltui	r2,r2,2048
 1028300:	103ff81e 	bne	r2,zero,10282e4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1028304:	e037883a 	mov	sp,fp
 1028308:	df000017 	ldw	fp,0(sp)
 102830c:	dec00104 	addi	sp,sp,4
 1028310:	f800283a 	ret

01028314 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1028314:	defff904 	addi	sp,sp,-28
 1028318:	dfc00615 	stw	ra,24(sp)
 102831c:	df000515 	stw	fp,20(sp)
 1028320:	df000504 	addi	fp,sp,20
 1028324:	e13ffd15 	stw	r4,-12(fp)
 1028328:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 102832c:	e0bffd17 	ldw	r2,-12(fp)
 1028330:	1005003a 	cmpeq	r2,r2,zero
 1028334:	1000041e 	bne	r2,zero,1028348 <alt_dev_llist_insert+0x34>
 1028338:	e0bffd17 	ldw	r2,-12(fp)
 102833c:	10800217 	ldw	r2,8(r2)
 1028340:	1004c03a 	cmpne	r2,r2,zero
 1028344:	1000071e 	bne	r2,zero,1028364 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1028348:	10283c80 	call	10283c8 <alt_get_errno>
 102834c:	1007883a 	mov	r3,r2
 1028350:	00800584 	movi	r2,22
 1028354:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1028358:	00bffa84 	movi	r2,-22
 102835c:	e0bfff15 	stw	r2,-4(fp)
 1028360:	00001306 	br	10283b0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1028364:	e0fffd17 	ldw	r3,-12(fp)
 1028368:	e0bffe17 	ldw	r2,-8(fp)
 102836c:	e0bffb15 	stw	r2,-20(fp)
 1028370:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1028374:	e0fffc17 	ldw	r3,-16(fp)
 1028378:	e0bffb17 	ldw	r2,-20(fp)
 102837c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1028380:	e0bffb17 	ldw	r2,-20(fp)
 1028384:	10c00017 	ldw	r3,0(r2)
 1028388:	e0bffc17 	ldw	r2,-16(fp)
 102838c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1028390:	e0bffb17 	ldw	r2,-20(fp)
 1028394:	10c00017 	ldw	r3,0(r2)
 1028398:	e0bffc17 	ldw	r2,-16(fp)
 102839c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 10283a0:	e0fffb17 	ldw	r3,-20(fp)
 10283a4:	e0bffc17 	ldw	r2,-16(fp)
 10283a8:	18800015 	stw	r2,0(r3)

  return 0;  
 10283ac:	e03fff15 	stw	zero,-4(fp)
 10283b0:	e0bfff17 	ldw	r2,-4(fp)
}
 10283b4:	e037883a 	mov	sp,fp
 10283b8:	dfc00117 	ldw	ra,4(sp)
 10283bc:	df000017 	ldw	fp,0(sp)
 10283c0:	dec00204 	addi	sp,sp,8
 10283c4:	f800283a 	ret

010283c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10283c8:	defffd04 	addi	sp,sp,-12
 10283cc:	dfc00215 	stw	ra,8(sp)
 10283d0:	df000115 	stw	fp,4(sp)
 10283d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10283d8:	008040f4 	movhi	r2,259
 10283dc:	109bf904 	addi	r2,r2,28644
 10283e0:	10800017 	ldw	r2,0(r2)
 10283e4:	1005003a 	cmpeq	r2,r2,zero
 10283e8:	1000061e 	bne	r2,zero,1028404 <alt_get_errno+0x3c>
 10283ec:	008040f4 	movhi	r2,259
 10283f0:	109bf904 	addi	r2,r2,28644
 10283f4:	10800017 	ldw	r2,0(r2)
 10283f8:	103ee83a 	callr	r2
 10283fc:	e0bfff15 	stw	r2,-4(fp)
 1028400:	00000306 	br	1028410 <alt_get_errno+0x48>
 1028404:	00804134 	movhi	r2,260
 1028408:	10a30104 	addi	r2,r2,-29692
 102840c:	e0bfff15 	stw	r2,-4(fp)
 1028410:	e0bfff17 	ldw	r2,-4(fp)
}
 1028414:	e037883a 	mov	sp,fp
 1028418:	dfc00117 	ldw	ra,4(sp)
 102841c:	df000017 	ldw	fp,0(sp)
 1028420:	dec00204 	addi	sp,sp,8
 1028424:	f800283a 	ret

01028428 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1028428:	defffd04 	addi	sp,sp,-12
 102842c:	dfc00215 	stw	ra,8(sp)
 1028430:	df000115 	stw	fp,4(sp)
 1028434:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1028438:	00bfff04 	movi	r2,-4
 102843c:	00c040f4 	movhi	r3,259
 1028440:	18e42204 	addi	r3,r3,-28536
 1028444:	1885883a 	add	r2,r3,r2
 1028448:	e0bfff15 	stw	r2,-4(fp)
 102844c:	00000606 	br	1028468 <_do_ctors+0x40>
        (*ctor) (); 
 1028450:	e0bfff17 	ldw	r2,-4(fp)
 1028454:	10800017 	ldw	r2,0(r2)
 1028458:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 102845c:	e0bfff17 	ldw	r2,-4(fp)
 1028460:	10bfff04 	addi	r2,r2,-4
 1028464:	e0bfff15 	stw	r2,-4(fp)
 1028468:	e0ffff17 	ldw	r3,-4(fp)
 102846c:	008040f4 	movhi	r2,259
 1028470:	10a42104 	addi	r2,r2,-28540
 1028474:	18bff62e 	bgeu	r3,r2,1028450 <_do_ctors+0x28>
        (*ctor) (); 
}
 1028478:	e037883a 	mov	sp,fp
 102847c:	dfc00117 	ldw	ra,4(sp)
 1028480:	df000017 	ldw	fp,0(sp)
 1028484:	dec00204 	addi	sp,sp,8
 1028488:	f800283a 	ret

0102848c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 102848c:	defffd04 	addi	sp,sp,-12
 1028490:	dfc00215 	stw	ra,8(sp)
 1028494:	df000115 	stw	fp,4(sp)
 1028498:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 102849c:	00bfff04 	movi	r2,-4
 10284a0:	00c040f4 	movhi	r3,259
 10284a4:	18e42204 	addi	r3,r3,-28536
 10284a8:	1885883a 	add	r2,r3,r2
 10284ac:	e0bfff15 	stw	r2,-4(fp)
 10284b0:	00000606 	br	10284cc <_do_dtors+0x40>
        (*dtor) (); 
 10284b4:	e0bfff17 	ldw	r2,-4(fp)
 10284b8:	10800017 	ldw	r2,0(r2)
 10284bc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10284c0:	e0bfff17 	ldw	r2,-4(fp)
 10284c4:	10bfff04 	addi	r2,r2,-4
 10284c8:	e0bfff15 	stw	r2,-4(fp)
 10284cc:	e0ffff17 	ldw	r3,-4(fp)
 10284d0:	008040f4 	movhi	r2,259
 10284d4:	10a42204 	addi	r2,r2,-28536
 10284d8:	18bff62e 	bgeu	r3,r2,10284b4 <_do_dtors+0x28>
        (*dtor) (); 
}
 10284dc:	e037883a 	mov	sp,fp
 10284e0:	dfc00117 	ldw	ra,4(sp)
 10284e4:	df000017 	ldw	fp,0(sp)
 10284e8:	dec00204 	addi	sp,sp,8
 10284ec:	f800283a 	ret

010284f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 10284f0:	defff904 	addi	sp,sp,-28
 10284f4:	dfc00615 	stw	ra,24(sp)
 10284f8:	df000515 	stw	fp,20(sp)
 10284fc:	df000504 	addi	fp,sp,20
 1028500:	e13ffd15 	stw	r4,-12(fp)
 1028504:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1028508:	e0bffe17 	ldw	r2,-8(fp)
 102850c:	10800017 	ldw	r2,0(r2)
 1028510:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1028514:	e13ffd17 	ldw	r4,-12(fp)
 1028518:	1015cfc0 	call	1015cfc <strlen>
 102851c:	10800044 	addi	r2,r2,1
 1028520:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1028524:	00000d06 	br	102855c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1028528:	e0bffc17 	ldw	r2,-16(fp)
 102852c:	11000217 	ldw	r4,8(r2)
 1028530:	e1bffb17 	ldw	r6,-20(fp)
 1028534:	e17ffd17 	ldw	r5,-12(fp)
 1028538:	1028d280 	call	1028d28 <memcmp>
 102853c:	1004c03a 	cmpne	r2,r2,zero
 1028540:	1000031e 	bne	r2,zero,1028550 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1028544:	e0bffc17 	ldw	r2,-16(fp)
 1028548:	e0bfff15 	stw	r2,-4(fp)
 102854c:	00000706 	br	102856c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1028550:	e0bffc17 	ldw	r2,-16(fp)
 1028554:	10800017 	ldw	r2,0(r2)
 1028558:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 102855c:	e0fffe17 	ldw	r3,-8(fp)
 1028560:	e0bffc17 	ldw	r2,-16(fp)
 1028564:	10fff01e 	bne	r2,r3,1028528 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1028568:	e03fff15 	stw	zero,-4(fp)
 102856c:	e0bfff17 	ldw	r2,-4(fp)
}
 1028570:	e037883a 	mov	sp,fp
 1028574:	dfc00117 	ldw	ra,4(sp)
 1028578:	df000017 	ldw	fp,0(sp)
 102857c:	dec00204 	addi	sp,sp,8
 1028580:	f800283a 	ret

01028584 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1028584:	defffa04 	addi	sp,sp,-24
 1028588:	dfc00515 	stw	ra,20(sp)
 102858c:	df000415 	stw	fp,16(sp)
 1028590:	df000404 	addi	fp,sp,16
 1028594:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1028598:	008040f4 	movhi	r2,259
 102859c:	109bf404 	addi	r2,r2,28624
 10285a0:	10800017 	ldw	r2,0(r2)
 10285a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10285a8:	00003306 	br	1028678 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 10285ac:	e0bffd17 	ldw	r2,-12(fp)
 10285b0:	11000217 	ldw	r4,8(r2)
 10285b4:	1015cfc0 	call	1015cfc <strlen>
 10285b8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 10285bc:	e0bffd17 	ldw	r2,-12(fp)
 10285c0:	10c00217 	ldw	r3,8(r2)
 10285c4:	e0bffc17 	ldw	r2,-16(fp)
 10285c8:	1885883a 	add	r2,r3,r2
 10285cc:	10bfffc4 	addi	r2,r2,-1
 10285d0:	10800003 	ldbu	r2,0(r2)
 10285d4:	10803fcc 	andi	r2,r2,255
 10285d8:	1080201c 	xori	r2,r2,128
 10285dc:	10bfe004 	addi	r2,r2,-128
 10285e0:	10800bd8 	cmpnei	r2,r2,47
 10285e4:	1000031e 	bne	r2,zero,10285f4 <alt_find_file+0x70>
    {
      len -= 1;
 10285e8:	e0bffc17 	ldw	r2,-16(fp)
 10285ec:	10bfffc4 	addi	r2,r2,-1
 10285f0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10285f4:	e0bffc17 	ldw	r2,-16(fp)
 10285f8:	1007883a 	mov	r3,r2
 10285fc:	e0bffe17 	ldw	r2,-8(fp)
 1028600:	1885883a 	add	r2,r3,r2
 1028604:	10800003 	ldbu	r2,0(r2)
 1028608:	10803fcc 	andi	r2,r2,255
 102860c:	1080201c 	xori	r2,r2,128
 1028610:	10bfe004 	addi	r2,r2,-128
 1028614:	10800be0 	cmpeqi	r2,r2,47
 1028618:	10000a1e 	bne	r2,zero,1028644 <alt_find_file+0xc0>
 102861c:	e0bffc17 	ldw	r2,-16(fp)
 1028620:	1007883a 	mov	r3,r2
 1028624:	e0bffe17 	ldw	r2,-8(fp)
 1028628:	1885883a 	add	r2,r3,r2
 102862c:	10800003 	ldbu	r2,0(r2)
 1028630:	10803fcc 	andi	r2,r2,255
 1028634:	1080201c 	xori	r2,r2,128
 1028638:	10bfe004 	addi	r2,r2,-128
 102863c:	1004c03a 	cmpne	r2,r2,zero
 1028640:	10000a1e 	bne	r2,zero,102866c <alt_find_file+0xe8>
 1028644:	e0bffd17 	ldw	r2,-12(fp)
 1028648:	11000217 	ldw	r4,8(r2)
 102864c:	e1bffc17 	ldw	r6,-16(fp)
 1028650:	e17ffe17 	ldw	r5,-8(fp)
 1028654:	1028d280 	call	1028d28 <memcmp>
 1028658:	1004c03a 	cmpne	r2,r2,zero
 102865c:	1000031e 	bne	r2,zero,102866c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1028660:	e0bffd17 	ldw	r2,-12(fp)
 1028664:	e0bfff15 	stw	r2,-4(fp)
 1028668:	00000806 	br	102868c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 102866c:	e0bffd17 	ldw	r2,-12(fp)
 1028670:	10800017 	ldw	r2,0(r2)
 1028674:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1028678:	00c040f4 	movhi	r3,259
 102867c:	18dbf404 	addi	r3,r3,28624
 1028680:	e0bffd17 	ldw	r2,-12(fp)
 1028684:	10ffc91e 	bne	r2,r3,10285ac <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1028688:	e03fff15 	stw	zero,-4(fp)
 102868c:	e0bfff17 	ldw	r2,-4(fp)
}
 1028690:	e037883a 	mov	sp,fp
 1028694:	dfc00117 	ldw	ra,4(sp)
 1028698:	df000017 	ldw	fp,0(sp)
 102869c:	dec00204 	addi	sp,sp,8
 10286a0:	f800283a 	ret

010286a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 10286a4:	defffc04 	addi	sp,sp,-16
 10286a8:	df000315 	stw	fp,12(sp)
 10286ac:	df000304 	addi	fp,sp,12
 10286b0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 10286b4:	00bffa04 	movi	r2,-24
 10286b8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10286bc:	e03ffe15 	stw	zero,-8(fp)
 10286c0:	00001e06 	br	102873c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 10286c4:	e0bffe17 	ldw	r2,-8(fp)
 10286c8:	00c040f4 	movhi	r3,259
 10286cc:	18d75104 	addi	r3,r3,23876
 10286d0:	10800324 	muli	r2,r2,12
 10286d4:	10c5883a 	add	r2,r2,r3
 10286d8:	10800017 	ldw	r2,0(r2)
 10286dc:	1004c03a 	cmpne	r2,r2,zero
 10286e0:	1000131e 	bne	r2,zero,1028730 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 10286e4:	e0bffe17 	ldw	r2,-8(fp)
 10286e8:	00c040f4 	movhi	r3,259
 10286ec:	18d75104 	addi	r3,r3,23876
 10286f0:	10800324 	muli	r2,r2,12
 10286f4:	10c7883a 	add	r3,r2,r3
 10286f8:	e0bfff17 	ldw	r2,-4(fp)
 10286fc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1028700:	008040f4 	movhi	r2,259
 1028704:	109bf804 	addi	r2,r2,28640
 1028708:	10c00017 	ldw	r3,0(r2)
 102870c:	e0bffe17 	ldw	r2,-8(fp)
 1028710:	1880040e 	bge	r3,r2,1028724 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 1028714:	00c040f4 	movhi	r3,259
 1028718:	18dbf804 	addi	r3,r3,28640
 102871c:	e0bffe17 	ldw	r2,-8(fp)
 1028720:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1028724:	e0bffe17 	ldw	r2,-8(fp)
 1028728:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 102872c:	00000606 	br	1028748 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1028730:	e0bffe17 	ldw	r2,-8(fp)
 1028734:	10800044 	addi	r2,r2,1
 1028738:	e0bffe15 	stw	r2,-8(fp)
 102873c:	e0bffe17 	ldw	r2,-8(fp)
 1028740:	10800810 	cmplti	r2,r2,32
 1028744:	103fdf1e 	bne	r2,zero,10286c4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1028748:	e0bffd17 	ldw	r2,-12(fp)
}
 102874c:	e037883a 	mov	sp,fp
 1028750:	df000017 	ldw	fp,0(sp)
 1028754:	dec00104 	addi	sp,sp,4
 1028758:	f800283a 	ret

0102875c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 102875c:	defffe04 	addi	sp,sp,-8
 1028760:	dfc00115 	stw	ra,4(sp)
 1028764:	df000015 	stw	fp,0(sp)
 1028768:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 102876c:	0009883a 	mov	r4,zero
 1028770:	01500004 	movi	r5,16384
 1028774:	1028c4c0 	call	1028c4c <alt_icache_flush>
#endif
}
 1028778:	e037883a 	mov	sp,fp
 102877c:	dfc00117 	ldw	ra,4(sp)
 1028780:	df000017 	ldw	fp,0(sp)
 1028784:	dec00204 	addi	sp,sp,8
 1028788:	f800283a 	ret

0102878c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 102878c:	defff904 	addi	sp,sp,-28
 1028790:	dfc00615 	stw	ra,24(sp)
 1028794:	df000515 	stw	fp,20(sp)
 1028798:	df000504 	addi	fp,sp,20
 102879c:	e13ffc15 	stw	r4,-16(fp)
 10287a0:	e17ffd15 	stw	r5,-12(fp)
 10287a4:	e1bffe15 	stw	r6,-8(fp)
 10287a8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 10287ac:	e13ffd17 	ldw	r4,-12(fp)
 10287b0:	e17ffe17 	ldw	r5,-8(fp)
 10287b4:	e1bfff17 	ldw	r6,-4(fp)
 10287b8:	1021a9c0 	call	1021a9c <open>
 10287bc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 10287c0:	e0bffb17 	ldw	r2,-20(fp)
 10287c4:	1004803a 	cmplt	r2,r2,zero
 10287c8:	10001c1e 	bne	r2,zero,102883c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 10287cc:	e0bffb17 	ldw	r2,-20(fp)
 10287d0:	00c040f4 	movhi	r3,259
 10287d4:	18d75104 	addi	r3,r3,23876
 10287d8:	10800324 	muli	r2,r2,12
 10287dc:	10c5883a 	add	r2,r2,r3
 10287e0:	10c00017 	ldw	r3,0(r2)
 10287e4:	e0bffc17 	ldw	r2,-16(fp)
 10287e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 10287ec:	e0bffb17 	ldw	r2,-20(fp)
 10287f0:	00c040f4 	movhi	r3,259
 10287f4:	18d75104 	addi	r3,r3,23876
 10287f8:	10800324 	muli	r2,r2,12
 10287fc:	10c5883a 	add	r2,r2,r3
 1028800:	10800104 	addi	r2,r2,4
 1028804:	10c00017 	ldw	r3,0(r2)
 1028808:	e0bffc17 	ldw	r2,-16(fp)
 102880c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1028810:	e0bffb17 	ldw	r2,-20(fp)
 1028814:	00c040f4 	movhi	r3,259
 1028818:	18d75104 	addi	r3,r3,23876
 102881c:	10800324 	muli	r2,r2,12
 1028820:	10c5883a 	add	r2,r2,r3
 1028824:	10800204 	addi	r2,r2,8
 1028828:	10c00017 	ldw	r3,0(r2)
 102882c:	e0bffc17 	ldw	r2,-16(fp)
 1028830:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1028834:	e13ffb17 	ldw	r4,-20(fp)
 1028838:	102209c0 	call	102209c <alt_release_fd>
  }
} 
 102883c:	e037883a 	mov	sp,fp
 1028840:	dfc00117 	ldw	ra,4(sp)
 1028844:	df000017 	ldw	fp,0(sp)
 1028848:	dec00204 	addi	sp,sp,8
 102884c:	f800283a 	ret

01028850 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1028850:	defffb04 	addi	sp,sp,-20
 1028854:	dfc00415 	stw	ra,16(sp)
 1028858:	df000315 	stw	fp,12(sp)
 102885c:	df000304 	addi	fp,sp,12
 1028860:	e13ffd15 	stw	r4,-12(fp)
 1028864:	e17ffe15 	stw	r5,-8(fp)
 1028868:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 102886c:	010040f4 	movhi	r4,259
 1028870:	21175404 	addi	r4,r4,23888
 1028874:	e17ffd17 	ldw	r5,-12(fp)
 1028878:	01800044 	movi	r6,1
 102887c:	01c07fc4 	movi	r7,511
 1028880:	102878c0 	call	102878c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1028884:	010040f4 	movhi	r4,259
 1028888:	21175104 	addi	r4,r4,23876
 102888c:	e17ffe17 	ldw	r5,-8(fp)
 1028890:	000d883a 	mov	r6,zero
 1028894:	01c07fc4 	movi	r7,511
 1028898:	102878c0 	call	102878c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 102889c:	010040f4 	movhi	r4,259
 10288a0:	21175704 	addi	r4,r4,23900
 10288a4:	e17fff17 	ldw	r5,-4(fp)
 10288a8:	01800044 	movi	r6,1
 10288ac:	01c07fc4 	movi	r7,511
 10288b0:	102878c0 	call	102878c <alt_open_fd>
}  
 10288b4:	e037883a 	mov	sp,fp
 10288b8:	dfc00117 	ldw	ra,4(sp)
 10288bc:	df000017 	ldw	fp,0(sp)
 10288c0:	dec00204 	addi	sp,sp,8
 10288c4:	f800283a 	ret

010288c8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 10288c8:	deffef04 	addi	sp,sp,-68
 10288cc:	df001015 	stw	fp,64(sp)
 10288d0:	df001004 	addi	fp,sp,64
 10288d4:	e13ffc15 	stw	r4,-16(fp)
 10288d8:	e17ffd15 	stw	r5,-12(fp)
 10288dc:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 10288e0:	00bffa84 	movi	r2,-22
 10288e4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 10288e8:	e0bffc17 	ldw	r2,-16(fp)
 10288ec:	10800828 	cmpgeui	r2,r2,32
 10288f0:	1000601e 	bne	r2,zero,1028a74 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10288f4:	0005303a 	rdctl	r2,status
 10288f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10288fc:	e0fff917 	ldw	r3,-28(fp)
 1028900:	00bfff84 	movi	r2,-2
 1028904:	1884703a 	and	r2,r3,r2
 1028908:	1001703a 	wrctl	status,r2
  
  return context;
 102890c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1028910:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 1028914:	e0bffc17 	ldw	r2,-16(fp)
 1028918:	00c04134 	movhi	r3,260
 102891c:	18e4f704 	addi	r3,r3,-27684
 1028920:	100490fa 	slli	r2,r2,3
 1028924:	10c7883a 	add	r3,r2,r3
 1028928:	e0bffe17 	ldw	r2,-8(fp)
 102892c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 1028930:	e0bffc17 	ldw	r2,-16(fp)
 1028934:	00c04134 	movhi	r3,260
 1028938:	18e4f704 	addi	r3,r3,-27684
 102893c:	100490fa 	slli	r2,r2,3
 1028940:	10c5883a 	add	r2,r2,r3
 1028944:	10c00104 	addi	r3,r2,4
 1028948:	e0bffd17 	ldw	r2,-12(fp)
 102894c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1028950:	e0bffe17 	ldw	r2,-8(fp)
 1028954:	1005003a 	cmpeq	r2,r2,zero
 1028958:	1000201e 	bne	r2,zero,10289dc <alt_irq_register+0x114>
 102895c:	e0bffc17 	ldw	r2,-16(fp)
 1028960:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1028964:	0005303a 	rdctl	r2,status
 1028968:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102896c:	e0fff617 	ldw	r3,-40(fp)
 1028970:	00bfff84 	movi	r2,-2
 1028974:	1884703a 	and	r2,r3,r2
 1028978:	1001703a 	wrctl	status,r2
  
  return context;
 102897c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1028980:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 1028984:	e0fff717 	ldw	r3,-36(fp)
 1028988:	00800044 	movi	r2,1
 102898c:	10c4983a 	sll	r2,r2,r3
 1028990:	1007883a 	mov	r3,r2
 1028994:	00804134 	movhi	r2,260
 1028998:	10a31a04 	addi	r2,r2,-29592
 102899c:	10800017 	ldw	r2,0(r2)
 10289a0:	1886b03a 	or	r3,r3,r2
 10289a4:	00804134 	movhi	r2,260
 10289a8:	10a31a04 	addi	r2,r2,-29592
 10289ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10289b0:	00804134 	movhi	r2,260
 10289b4:	10a31a04 	addi	r2,r2,-29592
 10289b8:	10800017 	ldw	r2,0(r2)
 10289bc:	100170fa 	wrctl	ienable,r2
 10289c0:	e0bff817 	ldw	r2,-32(fp)
 10289c4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10289c8:	e0bff517 	ldw	r2,-44(fp)
 10289cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10289d0:	0005883a 	mov	r2,zero
 10289d4:	e0bfff15 	stw	r2,-4(fp)
 10289d8:	00002006 	br	1028a5c <alt_irq_register+0x194>
 10289dc:	e0bffc17 	ldw	r2,-16(fp)
 10289e0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10289e4:	0005303a 	rdctl	r2,status
 10289e8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10289ec:	e0fff217 	ldw	r3,-56(fp)
 10289f0:	00bfff84 	movi	r2,-2
 10289f4:	1884703a 	and	r2,r3,r2
 10289f8:	1001703a 	wrctl	status,r2
  
  return context;
 10289fc:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1028a00:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 1028a04:	e0fff317 	ldw	r3,-52(fp)
 1028a08:	00800044 	movi	r2,1
 1028a0c:	10c4983a 	sll	r2,r2,r3
 1028a10:	0084303a 	nor	r2,zero,r2
 1028a14:	1007883a 	mov	r3,r2
 1028a18:	00804134 	movhi	r2,260
 1028a1c:	10a31a04 	addi	r2,r2,-29592
 1028a20:	10800017 	ldw	r2,0(r2)
 1028a24:	1886703a 	and	r3,r3,r2
 1028a28:	00804134 	movhi	r2,260
 1028a2c:	10a31a04 	addi	r2,r2,-29592
 1028a30:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1028a34:	00804134 	movhi	r2,260
 1028a38:	10a31a04 	addi	r2,r2,-29592
 1028a3c:	10800017 	ldw	r2,0(r2)
 1028a40:	100170fa 	wrctl	ienable,r2
 1028a44:	e0bff417 	ldw	r2,-48(fp)
 1028a48:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1028a4c:	e0bff117 	ldw	r2,-60(fp)
 1028a50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1028a54:	0005883a 	mov	r2,zero
 1028a58:	e0bfff15 	stw	r2,-4(fp)
 1028a5c:	e0bfff17 	ldw	r2,-4(fp)
 1028a60:	e0bffb15 	stw	r2,-20(fp)
 1028a64:	e0bffa17 	ldw	r2,-24(fp)
 1028a68:	e0bff015 	stw	r2,-64(fp)
 1028a6c:	e0bff017 	ldw	r2,-64(fp)
 1028a70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 1028a74:	e0bffb17 	ldw	r2,-20(fp)
}
 1028a78:	e037883a 	mov	sp,fp
 1028a7c:	df000017 	ldw	fp,0(sp)
 1028a80:	dec00104 	addi	sp,sp,4
 1028a84:	f800283a 	ret

01028a88 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1028a88:	defffa04 	addi	sp,sp,-24
 1028a8c:	df000515 	stw	fp,20(sp)
 1028a90:	df000504 	addi	fp,sp,20
 1028a94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1028a98:	0005303a 	rdctl	r2,status
 1028a9c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1028aa0:	e0fffd17 	ldw	r3,-12(fp)
 1028aa4:	00bfff84 	movi	r2,-2
 1028aa8:	1884703a 	and	r2,r3,r2
 1028aac:	1001703a 	wrctl	status,r2
  
  return context;
 1028ab0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1028ab4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1028ab8:	e0bfff17 	ldw	r2,-4(fp)
 1028abc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1028ac0:	e0bffc17 	ldw	r2,-16(fp)
 1028ac4:	10c00017 	ldw	r3,0(r2)
 1028ac8:	e0bffc17 	ldw	r2,-16(fp)
 1028acc:	10800117 	ldw	r2,4(r2)
 1028ad0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1028ad4:	e0bffc17 	ldw	r2,-16(fp)
 1028ad8:	10c00117 	ldw	r3,4(r2)
 1028adc:	e0bffc17 	ldw	r2,-16(fp)
 1028ae0:	10800017 	ldw	r2,0(r2)
 1028ae4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1028ae8:	e0fffc17 	ldw	r3,-16(fp)
 1028aec:	e0bffc17 	ldw	r2,-16(fp)
 1028af0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1028af4:	e0fffc17 	ldw	r3,-16(fp)
 1028af8:	e0bffc17 	ldw	r2,-16(fp)
 1028afc:	18800015 	stw	r2,0(r3)
 1028b00:	e0bffe17 	ldw	r2,-8(fp)
 1028b04:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1028b08:	e0bffb17 	ldw	r2,-20(fp)
 1028b0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1028b10:	e037883a 	mov	sp,fp
 1028b14:	df000017 	ldw	fp,0(sp)
 1028b18:	dec00104 	addi	sp,sp,4
 1028b1c:	f800283a 	ret

01028b20 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1028b20:	defffb04 	addi	sp,sp,-20
 1028b24:	dfc00415 	stw	ra,16(sp)
 1028b28:	df000315 	stw	fp,12(sp)
 1028b2c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1028b30:	d0a01217 	ldw	r2,-32696(gp)
 1028b34:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1028b38:	d0a73217 	ldw	r2,-25400(gp)
 1028b3c:	10800044 	addi	r2,r2,1
 1028b40:	d0a73215 	stw	r2,-25400(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1028b44:	00003106 	br	1028c0c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1028b48:	e0bffe17 	ldw	r2,-8(fp)
 1028b4c:	10800017 	ldw	r2,0(r2)
 1028b50:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1028b54:	e0bffe17 	ldw	r2,-8(fp)
 1028b58:	10800403 	ldbu	r2,16(r2)
 1028b5c:	10803fcc 	andi	r2,r2,255
 1028b60:	1005003a 	cmpeq	r2,r2,zero
 1028b64:	1000051e 	bne	r2,zero,1028b7c <alt_tick+0x5c>
 1028b68:	d0a73217 	ldw	r2,-25400(gp)
 1028b6c:	1004c03a 	cmpne	r2,r2,zero
 1028b70:	1000021e 	bne	r2,zero,1028b7c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1028b74:	e0bffe17 	ldw	r2,-8(fp)
 1028b78:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1028b7c:	e0bffe17 	ldw	r2,-8(fp)
 1028b80:	10c00217 	ldw	r3,8(r2)
 1028b84:	d0a73217 	ldw	r2,-25400(gp)
 1028b88:	10c01e36 	bltu	r2,r3,1028c04 <alt_tick+0xe4>
 1028b8c:	e0bffe17 	ldw	r2,-8(fp)
 1028b90:	10800403 	ldbu	r2,16(r2)
 1028b94:	10803fcc 	andi	r2,r2,255
 1028b98:	1004c03a 	cmpne	r2,r2,zero
 1028b9c:	1000191e 	bne	r2,zero,1028c04 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1028ba0:	e0bffe17 	ldw	r2,-8(fp)
 1028ba4:	10c00317 	ldw	r3,12(r2)
 1028ba8:	e0bffe17 	ldw	r2,-8(fp)
 1028bac:	11000517 	ldw	r4,20(r2)
 1028bb0:	183ee83a 	callr	r3
 1028bb4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1028bb8:	e0bffd17 	ldw	r2,-12(fp)
 1028bbc:	1004c03a 	cmpne	r2,r2,zero
 1028bc0:	1000031e 	bne	r2,zero,1028bd0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1028bc4:	e13ffe17 	ldw	r4,-8(fp)
 1028bc8:	1028a880 	call	1028a88 <alt_alarm_stop>
 1028bcc:	00000d06 	br	1028c04 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1028bd0:	e0bffe17 	ldw	r2,-8(fp)
 1028bd4:	10c00217 	ldw	r3,8(r2)
 1028bd8:	e0bffd17 	ldw	r2,-12(fp)
 1028bdc:	1887883a 	add	r3,r3,r2
 1028be0:	e0bffe17 	ldw	r2,-8(fp)
 1028be4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1028be8:	e0bffe17 	ldw	r2,-8(fp)
 1028bec:	10c00217 	ldw	r3,8(r2)
 1028bf0:	d0a73217 	ldw	r2,-25400(gp)
 1028bf4:	1880032e 	bgeu	r3,r2,1028c04 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1028bf8:	e0fffe17 	ldw	r3,-8(fp)
 1028bfc:	00800044 	movi	r2,1
 1028c00:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1028c04:	e0bfff17 	ldw	r2,-4(fp)
 1028c08:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1028c0c:	d0e01204 	addi	r3,gp,-32696
 1028c10:	e0bffe17 	ldw	r2,-8(fp)
 1028c14:	10ffcc1e 	bne	r2,r3,1028b48 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1028c18:	e037883a 	mov	sp,fp
 1028c1c:	dfc00117 	ldw	ra,4(sp)
 1028c20:	df000017 	ldw	fp,0(sp)
 1028c24:	dec00204 	addi	sp,sp,8
 1028c28:	f800283a 	ret

01028c2c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1028c2c:	deffff04 	addi	sp,sp,-4
 1028c30:	df000015 	stw	fp,0(sp)
 1028c34:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1028c38:	000170fa 	wrctl	ienable,zero
}
 1028c3c:	e037883a 	mov	sp,fp
 1028c40:	df000017 	ldw	fp,0(sp)
 1028c44:	dec00104 	addi	sp,sp,4
 1028c48:	f800283a 	ret

01028c4c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1028c4c:	defffb04 	addi	sp,sp,-20
 1028c50:	df000415 	stw	fp,16(sp)
 1028c54:	df000404 	addi	fp,sp,16
 1028c58:	e13ffe15 	stw	r4,-8(fp)
 1028c5c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1028c60:	e0bfff17 	ldw	r2,-4(fp)
 1028c64:	10900070 	cmpltui	r2,r2,16385
 1028c68:	1000021e 	bne	r2,zero,1028c74 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1028c6c:	00900004 	movi	r2,16384
 1028c70:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1028c74:	e0fffe17 	ldw	r3,-8(fp)
 1028c78:	e0bfff17 	ldw	r2,-4(fp)
 1028c7c:	1885883a 	add	r2,r3,r2
 1028c80:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1028c84:	e0bffe17 	ldw	r2,-8(fp)
 1028c88:	e0bffd15 	stw	r2,-12(fp)
 1028c8c:	00000506 	br	1028ca4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1028c90:	e0bffd17 	ldw	r2,-12(fp)
 1028c94:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1028c98:	e0bffd17 	ldw	r2,-12(fp)
 1028c9c:	10800804 	addi	r2,r2,32
 1028ca0:	e0bffd15 	stw	r2,-12(fp)
 1028ca4:	e0fffd17 	ldw	r3,-12(fp)
 1028ca8:	e0bffc17 	ldw	r2,-16(fp)
 1028cac:	18bff836 	bltu	r3,r2,1028c90 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1028cb0:	e0bffe17 	ldw	r2,-8(fp)
 1028cb4:	108007cc 	andi	r2,r2,31
 1028cb8:	1005003a 	cmpeq	r2,r2,zero
 1028cbc:	1000021e 	bne	r2,zero,1028cc8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1028cc0:	e0bffd17 	ldw	r2,-12(fp)
 1028cc4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1028cc8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1028ccc:	e037883a 	mov	sp,fp
 1028cd0:	df000017 	ldw	fp,0(sp)
 1028cd4:	dec00104 	addi	sp,sp,4
 1028cd8:	f800283a 	ret

01028cdc <atexit>:
 1028cdc:	200b883a 	mov	r5,r4
 1028ce0:	000d883a 	mov	r6,zero
 1028ce4:	0009883a 	mov	r4,zero
 1028ce8:	000f883a 	mov	r7,zero
 1028cec:	1028d9c1 	jmpi	1028d9c <__register_exitproc>

01028cf0 <exit>:
 1028cf0:	defffe04 	addi	sp,sp,-8
 1028cf4:	000b883a 	mov	r5,zero
 1028cf8:	dc000015 	stw	r16,0(sp)
 1028cfc:	dfc00115 	stw	ra,4(sp)
 1028d00:	2021883a 	mov	r16,r4
 1028d04:	1028ed40 	call	1028ed4 <__call_exitprocs>
 1028d08:	008040f4 	movhi	r2,259
 1028d0c:	109bee04 	addi	r2,r2,28600
 1028d10:	11000017 	ldw	r4,0(r2)
 1028d14:	20800f17 	ldw	r2,60(r4)
 1028d18:	10000126 	beq	r2,zero,1028d20 <exit+0x30>
 1028d1c:	103ee83a 	callr	r2
 1028d20:	8009883a 	mov	r4,r16
 1028d24:	10212a40 	call	10212a4 <_exit>

01028d28 <memcmp>:
 1028d28:	00c000c4 	movi	r3,3
 1028d2c:	1980032e 	bgeu	r3,r6,1028d3c <memcmp+0x14>
 1028d30:	2144b03a 	or	r2,r4,r5
 1028d34:	10c4703a 	and	r2,r2,r3
 1028d38:	10000f26 	beq	r2,zero,1028d78 <memcmp+0x50>
 1028d3c:	31ffffc4 	addi	r7,r6,-1
 1028d40:	3000061e 	bne	r6,zero,1028d5c <memcmp+0x34>
 1028d44:	00000a06 	br	1028d70 <memcmp+0x48>
 1028d48:	39ffffc4 	addi	r7,r7,-1
 1028d4c:	00bfffc4 	movi	r2,-1
 1028d50:	21000044 	addi	r4,r4,1
 1028d54:	29400044 	addi	r5,r5,1
 1028d58:	38800526 	beq	r7,r2,1028d70 <memcmp+0x48>
 1028d5c:	20c00003 	ldbu	r3,0(r4)
 1028d60:	28800003 	ldbu	r2,0(r5)
 1028d64:	18bff826 	beq	r3,r2,1028d48 <memcmp+0x20>
 1028d68:	1885c83a 	sub	r2,r3,r2
 1028d6c:	f800283a 	ret
 1028d70:	0005883a 	mov	r2,zero
 1028d74:	f800283a 	ret
 1028d78:	180f883a 	mov	r7,r3
 1028d7c:	20c00017 	ldw	r3,0(r4)
 1028d80:	28800017 	ldw	r2,0(r5)
 1028d84:	18bfed1e 	bne	r3,r2,1028d3c <memcmp+0x14>
 1028d88:	31bfff04 	addi	r6,r6,-4
 1028d8c:	21000104 	addi	r4,r4,4
 1028d90:	29400104 	addi	r5,r5,4
 1028d94:	39bff936 	bltu	r7,r6,1028d7c <memcmp+0x54>
 1028d98:	003fe806 	br	1028d3c <memcmp+0x14>

01028d9c <__register_exitproc>:
 1028d9c:	defffa04 	addi	sp,sp,-24
 1028da0:	008040f4 	movhi	r2,259
 1028da4:	109bee04 	addi	r2,r2,28600
 1028da8:	dc000015 	stw	r16,0(sp)
 1028dac:	14000017 	ldw	r16,0(r2)
 1028db0:	dd000415 	stw	r20,16(sp)
 1028db4:	2829883a 	mov	r20,r5
 1028db8:	81405217 	ldw	r5,328(r16)
 1028dbc:	dcc00315 	stw	r19,12(sp)
 1028dc0:	dc800215 	stw	r18,8(sp)
 1028dc4:	dc400115 	stw	r17,4(sp)
 1028dc8:	dfc00515 	stw	ra,20(sp)
 1028dcc:	2023883a 	mov	r17,r4
 1028dd0:	3027883a 	mov	r19,r6
 1028dd4:	3825883a 	mov	r18,r7
 1028dd8:	28002526 	beq	r5,zero,1028e70 <__register_exitproc+0xd4>
 1028ddc:	29000117 	ldw	r4,4(r5)
 1028de0:	008007c4 	movi	r2,31
 1028de4:	11002716 	blt	r2,r4,1028e84 <__register_exitproc+0xe8>
 1028de8:	8800101e 	bne	r17,zero,1028e2c <__register_exitproc+0x90>
 1028dec:	2105883a 	add	r2,r4,r4
 1028df0:	1085883a 	add	r2,r2,r2
 1028df4:	20c00044 	addi	r3,r4,1
 1028df8:	1145883a 	add	r2,r2,r5
 1028dfc:	0009883a 	mov	r4,zero
 1028e00:	15000215 	stw	r20,8(r2)
 1028e04:	28c00115 	stw	r3,4(r5)
 1028e08:	2005883a 	mov	r2,r4
 1028e0c:	dfc00517 	ldw	ra,20(sp)
 1028e10:	dd000417 	ldw	r20,16(sp)
 1028e14:	dcc00317 	ldw	r19,12(sp)
 1028e18:	dc800217 	ldw	r18,8(sp)
 1028e1c:	dc400117 	ldw	r17,4(sp)
 1028e20:	dc000017 	ldw	r16,0(sp)
 1028e24:	dec00604 	addi	sp,sp,24
 1028e28:	f800283a 	ret
 1028e2c:	29802204 	addi	r6,r5,136
 1028e30:	00800044 	movi	r2,1
 1028e34:	110e983a 	sll	r7,r2,r4
 1028e38:	30c04017 	ldw	r3,256(r6)
 1028e3c:	2105883a 	add	r2,r4,r4
 1028e40:	1085883a 	add	r2,r2,r2
 1028e44:	1185883a 	add	r2,r2,r6
 1028e48:	19c6b03a 	or	r3,r3,r7
 1028e4c:	14802015 	stw	r18,128(r2)
 1028e50:	14c00015 	stw	r19,0(r2)
 1028e54:	00800084 	movi	r2,2
 1028e58:	30c04015 	stw	r3,256(r6)
 1028e5c:	88bfe31e 	bne	r17,r2,1028dec <__register_exitproc+0x50>
 1028e60:	30804117 	ldw	r2,260(r6)
 1028e64:	11c4b03a 	or	r2,r2,r7
 1028e68:	30804115 	stw	r2,260(r6)
 1028e6c:	003fdf06 	br	1028dec <__register_exitproc+0x50>
 1028e70:	00804134 	movhi	r2,260
 1028e74:	10a53704 	addi	r2,r2,-27428
 1028e78:	100b883a 	mov	r5,r2
 1028e7c:	80805215 	stw	r2,328(r16)
 1028e80:	003fd606 	br	1028ddc <__register_exitproc+0x40>
 1028e84:	00804074 	movhi	r2,257
 1028e88:	1092c804 	addi	r2,r2,19232
 1028e8c:	1000021e 	bne	r2,zero,1028e98 <__register_exitproc+0xfc>
 1028e90:	013fffc4 	movi	r4,-1
 1028e94:	003fdc06 	br	1028e08 <__register_exitproc+0x6c>
 1028e98:	01006404 	movi	r4,400
 1028e9c:	103ee83a 	callr	r2
 1028ea0:	1007883a 	mov	r3,r2
 1028ea4:	103ffa26 	beq	r2,zero,1028e90 <__register_exitproc+0xf4>
 1028ea8:	80805217 	ldw	r2,328(r16)
 1028eac:	180b883a 	mov	r5,r3
 1028eb0:	18000115 	stw	zero,4(r3)
 1028eb4:	18800015 	stw	r2,0(r3)
 1028eb8:	80c05215 	stw	r3,328(r16)
 1028ebc:	18006215 	stw	zero,392(r3)
 1028ec0:	18006315 	stw	zero,396(r3)
 1028ec4:	0009883a 	mov	r4,zero
 1028ec8:	883fc826 	beq	r17,zero,1028dec <__register_exitproc+0x50>
 1028ecc:	003fd706 	br	1028e2c <__register_exitproc+0x90>

01028ed0 <register_fini>:
 1028ed0:	f800283a 	ret

01028ed4 <__call_exitprocs>:
 1028ed4:	008040f4 	movhi	r2,259
 1028ed8:	109bee04 	addi	r2,r2,28600
 1028edc:	10800017 	ldw	r2,0(r2)
 1028ee0:	defff304 	addi	sp,sp,-52
 1028ee4:	df000b15 	stw	fp,44(sp)
 1028ee8:	d8800115 	stw	r2,4(sp)
 1028eec:	00804074 	movhi	r2,257
 1028ef0:	1092c304 	addi	r2,r2,19212
 1028ef4:	1005003a 	cmpeq	r2,r2,zero
 1028ef8:	d8800215 	stw	r2,8(sp)
 1028efc:	d8800117 	ldw	r2,4(sp)
 1028f00:	dd400815 	stw	r21,32(sp)
 1028f04:	dd000715 	stw	r20,28(sp)
 1028f08:	10805204 	addi	r2,r2,328
 1028f0c:	dfc00c15 	stw	ra,48(sp)
 1028f10:	ddc00a15 	stw	r23,40(sp)
 1028f14:	dd800915 	stw	r22,36(sp)
 1028f18:	dcc00615 	stw	r19,24(sp)
 1028f1c:	dc800515 	stw	r18,20(sp)
 1028f20:	dc400415 	stw	r17,16(sp)
 1028f24:	dc000315 	stw	r16,12(sp)
 1028f28:	282b883a 	mov	r21,r5
 1028f2c:	2039883a 	mov	fp,r4
 1028f30:	d8800015 	stw	r2,0(sp)
 1028f34:	2829003a 	cmpeq	r20,r5,zero
 1028f38:	d8800117 	ldw	r2,4(sp)
 1028f3c:	14405217 	ldw	r17,328(r2)
 1028f40:	88001026 	beq	r17,zero,1028f84 <__call_exitprocs+0xb0>
 1028f44:	ddc00017 	ldw	r23,0(sp)
 1028f48:	88800117 	ldw	r2,4(r17)
 1028f4c:	8c802204 	addi	r18,r17,136
 1028f50:	143fffc4 	addi	r16,r2,-1
 1028f54:	80000916 	blt	r16,zero,1028f7c <__call_exitprocs+0xa8>
 1028f58:	05bfffc4 	movi	r22,-1
 1028f5c:	a000151e 	bne	r20,zero,1028fb4 <__call_exitprocs+0xe0>
 1028f60:	8409883a 	add	r4,r16,r16
 1028f64:	2105883a 	add	r2,r4,r4
 1028f68:	1485883a 	add	r2,r2,r18
 1028f6c:	10c02017 	ldw	r3,128(r2)
 1028f70:	a8c01126 	beq	r21,r3,1028fb8 <__call_exitprocs+0xe4>
 1028f74:	843fffc4 	addi	r16,r16,-1
 1028f78:	85bff81e 	bne	r16,r22,1028f5c <__call_exitprocs+0x88>
 1028f7c:	d8800217 	ldw	r2,8(sp)
 1028f80:	10003126 	beq	r2,zero,1029048 <__call_exitprocs+0x174>
 1028f84:	dfc00c17 	ldw	ra,48(sp)
 1028f88:	df000b17 	ldw	fp,44(sp)
 1028f8c:	ddc00a17 	ldw	r23,40(sp)
 1028f90:	dd800917 	ldw	r22,36(sp)
 1028f94:	dd400817 	ldw	r21,32(sp)
 1028f98:	dd000717 	ldw	r20,28(sp)
 1028f9c:	dcc00617 	ldw	r19,24(sp)
 1028fa0:	dc800517 	ldw	r18,20(sp)
 1028fa4:	dc400417 	ldw	r17,16(sp)
 1028fa8:	dc000317 	ldw	r16,12(sp)
 1028fac:	dec00d04 	addi	sp,sp,52
 1028fb0:	f800283a 	ret
 1028fb4:	8409883a 	add	r4,r16,r16
 1028fb8:	88c00117 	ldw	r3,4(r17)
 1028fbc:	2105883a 	add	r2,r4,r4
 1028fc0:	1445883a 	add	r2,r2,r17
 1028fc4:	18ffffc4 	addi	r3,r3,-1
 1028fc8:	11800217 	ldw	r6,8(r2)
 1028fcc:	1c001526 	beq	r3,r16,1029024 <__call_exitprocs+0x150>
 1028fd0:	10000215 	stw	zero,8(r2)
 1028fd4:	303fe726 	beq	r6,zero,1028f74 <__call_exitprocs+0xa0>
 1028fd8:	00c00044 	movi	r3,1
 1028fdc:	1c06983a 	sll	r3,r3,r16
 1028fe0:	90804017 	ldw	r2,256(r18)
 1028fe4:	8cc00117 	ldw	r19,4(r17)
 1028fe8:	1884703a 	and	r2,r3,r2
 1028fec:	10001426 	beq	r2,zero,1029040 <__call_exitprocs+0x16c>
 1028ff0:	90804117 	ldw	r2,260(r18)
 1028ff4:	1884703a 	and	r2,r3,r2
 1028ff8:	10000c1e 	bne	r2,zero,102902c <__call_exitprocs+0x158>
 1028ffc:	2105883a 	add	r2,r4,r4
 1029000:	1485883a 	add	r2,r2,r18
 1029004:	11400017 	ldw	r5,0(r2)
 1029008:	e009883a 	mov	r4,fp
 102900c:	303ee83a 	callr	r6
 1029010:	88800117 	ldw	r2,4(r17)
 1029014:	98bfc81e 	bne	r19,r2,1028f38 <__call_exitprocs+0x64>
 1029018:	b8800017 	ldw	r2,0(r23)
 102901c:	147fd526 	beq	r2,r17,1028f74 <__call_exitprocs+0xa0>
 1029020:	003fc506 	br	1028f38 <__call_exitprocs+0x64>
 1029024:	8c000115 	stw	r16,4(r17)
 1029028:	003fea06 	br	1028fd4 <__call_exitprocs+0x100>
 102902c:	2105883a 	add	r2,r4,r4
 1029030:	1485883a 	add	r2,r2,r18
 1029034:	11000017 	ldw	r4,0(r2)
 1029038:	303ee83a 	callr	r6
 102903c:	003ff406 	br	1029010 <__call_exitprocs+0x13c>
 1029040:	303ee83a 	callr	r6
 1029044:	003ff206 	br	1029010 <__call_exitprocs+0x13c>
 1029048:	88800117 	ldw	r2,4(r17)
 102904c:	1000081e 	bne	r2,zero,1029070 <__call_exitprocs+0x19c>
 1029050:	89000017 	ldw	r4,0(r17)
 1029054:	20000726 	beq	r4,zero,1029074 <__call_exitprocs+0x1a0>
 1029058:	b9000015 	stw	r4,0(r23)
 102905c:	8809883a 	mov	r4,r17
 1029060:	1014b0c0 	call	1014b0c <free>
 1029064:	bc400017 	ldw	r17,0(r23)
 1029068:	883fb71e 	bne	r17,zero,1028f48 <__call_exitprocs+0x74>
 102906c:	003fc506 	br	1028f84 <__call_exitprocs+0xb0>
 1029070:	89000017 	ldw	r4,0(r17)
 1029074:	882f883a 	mov	r23,r17
 1029078:	2023883a 	mov	r17,r4
 102907c:	883fb21e 	bne	r17,zero,1028f48 <__call_exitprocs+0x74>
 1029080:	003fc006 	br	1028f84 <__call_exitprocs+0xb0>
 1029084:	01028ed0 	cmplti	r4,zero,2619
